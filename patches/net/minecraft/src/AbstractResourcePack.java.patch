--- net/minecraft/src/AbstractResourcePack.java
+++ net/minecraft/src/AbstractResourcePack.java
@@ -8,58 +8,57 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.Reader;
 import javax.imageio.ImageIO;
 import org.apache.commons.io.IOUtils;
 
 public abstract class AbstractResourcePack implements ResourcePack {
 	protected static final ILogAgent resourceLog = Minecraft.getMinecraft().getLogAgent();
-	protected final File b;
-
-	public AbstractResourcePack(File var1) {
-		this.b = var1;
-	}
-
-	private static String locationToName(ResourceLocation var0) {
-		return String.format("%s/%s/%s", new Object[]{"assets", var0.getResourceDomain(), var0.getResourcePath()});
-	}
-
-	protected static String getRelativeName(File var0, File var1) {
-		return var0.toURI().relativize(var1.toURI()).getPath();
-	}
-
-	public InputStream getInputStream(ResourceLocation var1) throws IOException {
-		return this.getInputStreamByName(locationToName(var1));
-	}
-
-	public boolean resourceExists(ResourceLocation var1) {
-		return this.hasResourceName(locationToName(var1));
+	public final File resourcePackFile;
+
+	public AbstractResourcePack(File par1File) {
+		this.resourcePackFile = par1File;
+	}
+
+	private static String locationToName(ResourceLocation par0ResourceLocation) {
+		return String.format("%s/%s/%s", new Object[] {"assets", par0ResourceLocation.getResourceDomain(), par0ResourceLocation.getResourcePath()});
+	}
+
+	protected static String getRelativeName(File par0File, File par1File) {
+		return par0File.toURI().relativize(par1File.toURI()).getPath();
+	}
+
+	public InputStream getInputStream(ResourceLocation par1ResourceLocation) throws IOException {
+		return this.getInputStreamByName(locationToName(par1ResourceLocation));
+	}
+
+	public boolean resourceExists(ResourceLocation par1ResourceLocation) {
+		return this.hasResourceName(locationToName(par1ResourceLocation));
 	}
 
 	protected abstract InputStream getInputStreamByName(String var1) throws IOException;
 
 	protected abstract boolean hasResourceName(String var1);
 
-	protected void logNameNotLowercase(String var1) {
-		resourceLog.logWarningFormatted("ResourcePack: ignored non-lowercase namespace: %s in %s", new Object[]{var1, this.b});
-	}
-
-	public MetadataSection getPackMetadata(MetadataSerializer var1, String var2) throws IOException {
-		return readMetadata(var1, this.getInputStreamByName("pack.mcmeta"), var2);
-	}
-
-	static MetadataSection readMetadata(MetadataSerializer var0, InputStream var1, String var2) {
+	protected void logNameNotLowercase(String par1Str) {
+		resourceLog.logWarningFormatted("ResourcePack: ignored non-lowercase namespace: %s in %s", new Object[] {par1Str, this.resourcePackFile});
+	}
+
+	public MetadataSection getPackMetadata(MetadataSerializer par1MetadataSerializer, String par2Str) throws IOException {
+		return readMetadata(par1MetadataSerializer, this.getInputStreamByName("pack.mcmeta"), par2Str);
+	}
+
+	static MetadataSection readMetadata(MetadataSerializer par0MetadataSerializer, InputStream par1InputStream, String par2Str) {
 		JsonObject var3 = null;
 		BufferedReader var4 = null;
 
 		try {
-			var4 = new BufferedReader(new InputStreamReader(var1));
-			var3 = (new JsonParser()).parse((Reader)var4).getAsJsonObject();
+			var4 = new BufferedReader(new InputStreamReader(par1InputStream));
+			var3 = (new JsonParser()).parse(var4).getAsJsonObject();
 		} finally {
-			IOUtils.closeQuietly((Reader)var4);
+			IOUtils.closeQuietly(var4);
 		}
 
-		return var0.parseMetadataSection(var2, var3);
+		return par0MetadataSerializer.parseMetadataSection(par2Str, var3);
 	}
 
 	public BufferedImage getPackImage() throws IOException {
@@ -67,6 +66,6 @@
 	}
 
 	public String getPackName() {
-		return this.b.getName();
+		return this.resourcePackFile.getName();
 	}
 }
