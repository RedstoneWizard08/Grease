--- net/minecraft/src/ActiveRenderInfo.java
+++ net/minecraft/src/ActiveRenderInfo.java
@@ -2,36 +2,76 @@
 
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.util.glu.GLU;
 
 public class ActiveRenderInfo {
+
+	/** The calculated view object X coordinate */
 	public static float objectX;
+
+	/** The calculated view object Y coordinate */
 	public static float objectY;
+
+	/** The calculated view object Z coordinate */
 	public static float objectZ;
-	private static IntBuffer i = GLAllocation.createDirectIntBuffer(16);
-	private static FloatBuffer j = GLAllocation.createDirectFloatBuffer(16);
-	private static FloatBuffer k = GLAllocation.createDirectFloatBuffer(16);
-	private static FloatBuffer l = GLAllocation.createDirectFloatBuffer(3);
+
+	/** The current GL viewport */
+	private static IntBuffer viewport = GLAllocation.createDirectIntBuffer(16);
+
+	/** The current GL modelview matrix */
+	private static FloatBuffer modelview = GLAllocation.createDirectFloatBuffer(16);
+
+	/** The current GL projection matrix */
+	private static FloatBuffer projection = GLAllocation.createDirectFloatBuffer(16);
+
+	/** The computed view object coordinates */
+	private static FloatBuffer objectCoords = GLAllocation.createDirectFloatBuffer(3);
+
+	/** The X component of the entity's yaw rotation */
 	public static float rotationX;
+
+	/** The combined X and Z components of the entity's pitch rotation */
 	public static float rotationXZ;
+
+	/** The Z component of the entity's yaw rotation */
 	public static float rotationZ;
+
+	/**
+	 * The Y component (scaled along the Z axis) of the entity's pitch rotation
+	 */
 	public static float rotationYZ;
+
+	/**
+	 * The Y component (scaled along the X axis) of the entity's pitch rotation
+	 */
 	public static float rotationXY;
+	// Spout Start
+	public static FloatBuffer modelMatrix;
+	public static FloatBuffer projectionMatrix;
+	// Spout End
 
-	public static void updateRenderInfo(EntityPlayer var0, boolean var1) {
-		GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, j);
-		GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX, k);
-		GL11.glGetInteger(GL11.GL_VIEWPORT, i);
-		float var2 = (float)((i.get(0) + i.get(2)) / 2);
-		float var3 = (float)((i.get(1) + i.get(3)) / 2);
-		GLU.gluUnProject(var2, var3, 0.0F, j, k, i, l);
-		objectX = l.get(0);
-		objectY = l.get(1);
-		objectZ = l.get(2);
-		int var4 = var1 ? 1 : 0;
-		float var5 = var0.rotationPitch;
-		float var6 = var0.rotationYaw;
+	/**
+	 * Updates the current render info and camera location based on entity look angles and 1st/3rd person view mode
+	 */
+	public static void updateRenderInfo(EntityPlayer par0EntityPlayer, boolean par1) {
+		GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, modelview);
+		GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX, projection);
+		// Spout Start
+		modelMatrix = modelview.duplicate();
+		projectionMatrix = projection.duplicate();
+		// Spout End
+		GL11.glGetInteger(GL11.GL_VIEWPORT, viewport);
+		float var2 = (float)((viewport.get(0) + viewport.get(2)) / 2);
+		float var3 = (float)((viewport.get(1) + viewport.get(3)) / 2);
+		GLU.gluUnProject(var2, var3, 0.0F, modelview, projection, viewport, objectCoords);
+		objectX = objectCoords.get(0);
+		objectY = objectCoords.get(1);
+		objectZ = objectCoords.get(2);
+		int var4 = par1 ? 1 : 0;
+		float var5 = par0EntityPlayer.rotationPitch;
+		float var6 = par0EntityPlayer.rotationYaw;
 		rotationX = MathHelper.cos(var6 * (float)Math.PI / 180.0F) * (float)(1 - var4 * 2);
 		rotationZ = MathHelper.sin(var6 * (float)Math.PI / 180.0F) * (float)(1 - var4 * 2);
 		rotationYZ = -rotationZ * MathHelper.sin(var5 * (float)Math.PI / 180.0F) * (float)(1 - var4 * 2);
@@ -39,25 +79,34 @@
 		rotationXZ = MathHelper.cos(var5 * (float)Math.PI / 180.0F);
 	}
 
-	public static Vec3 projectViewFromEntity(EntityLivingBase var0, double var1) {
-		double var3 = var0.prevPosX + (var0.posX - var0.prevPosX) * var1;
-		double var5 = var0.prevPosY + (var0.posY - var0.prevPosY) * var1 + (double)var0.getEyeHeight();
-		double var7 = var0.prevPosZ + (var0.posZ - var0.prevPosZ) * var1;
+	/**
+	 * Returns a vector representing the projection along the given entity's view for the given distance
+	 */
+	public static Vec3 projectViewFromEntity(EntityLivingBase par0EntityLivingBase, double par1) {
+		double var3 = par0EntityLivingBase.prevPosX + (par0EntityLivingBase.posX - par0EntityLivingBase.prevPosX) * par1;
+		double var5 = par0EntityLivingBase.prevPosY + (par0EntityLivingBase.posY - par0EntityLivingBase.prevPosY) * par1 + (double)par0EntityLivingBase.getEyeHeight();
+		double var7 = par0EntityLivingBase.prevPosZ + (par0EntityLivingBase.posZ - par0EntityLivingBase.prevPosZ) * par1;
 		double var9 = var3 + (double)(objectX * 1.0F);
 		double var11 = var5 + (double)(objectY * 1.0F);
 		double var13 = var7 + (double)(objectZ * 1.0F);
-		return var0.worldObj.getWorldVec3Pool().getVecFromPool(var9, var11, var13);
+		return par0EntityLivingBase.worldObj.getWorldVec3Pool().getVecFromPool(var9, var11, var13);
 	}
 
-	public static int getBlockIdAtEntityViewpoint(World var0, EntityLivingBase var1, float var2) {
-		Vec3 var3 = projectViewFromEntity(var1, (double)var2);
+	/**
+	 * Returns the block ID at the current camera location (either air or fluid), taking into account the height of fluid
+	 * blocks
+	 */
+	public static int getBlockIdAtEntityViewpoint(World par0World, EntityLivingBase par1EntityLivingBase, float par2) {
+		Vec3 var3 = projectViewFromEntity(par1EntityLivingBase, (double)par2);
 		ChunkPosition var4 = new ChunkPosition(var3);
-		int var5 = var0.getBlockId(var4.x, var4.y, var4.z);
-		if(var5 != 0 && Block.blocksList[var5].blockMaterial.isLiquid()) {
-			float var6 = BlockFluid.getFluidHeightPercent(var0.getBlockMetadata(var4.x, var4.y, var4.z)) - 1.0F / 9.0F;
+		int var5 = par0World.getBlockId(var4.x, var4.y, var4.z);
+
+		if (var5 != 0 && Block.blocksList[var5].blockMaterial.isLiquid()) {
+			float var6 = BlockFluid.getFluidHeightPercent(par0World.getBlockMetadata(var4.x, var4.y, var4.z)) - 0.11111111F;
 			float var7 = (float)(var4.y + 1) - var6;
-			if(var3.yCoord >= (double)var7) {
-				var5 = var0.getBlockId(var4.x, var4.y + 1, var4.z);
+
+			if (var3.yCoord >= (double)var7) {
+				var5 = par0World.getBlockId(var4.x, var4.y + 1, var4.z);
 			}
 		}
 
