--- net/minecraft/src/AxisAlignedBB.java
+++ net/minecraft/src/AxisAlignedBB.java
@@ -1,7 +1,9 @@
 package net.minecraft.src;
 
 public class AxisAlignedBB {
-	private static final ThreadLocal g = new AABBLocalPool();
+
+	/** ThreadLocal AABBPool */
+	private static final ThreadLocal theAABBLocalPool = new AABBLocalPool();
 	public double minX;
 	public double minY;
 	public double minZ;
@@ -9,190 +11,247 @@
 	public double maxY;
 	public double maxZ;
 
-	public static AxisAlignedBB getBoundingBox(double var0, double var2, double var4, double var6, double var8, double var10) {
-		return new AxisAlignedBB(var0, var2, var4, var6, var8, var10);
+	/**
+	 * Returns a bounding box with the specified bounds. Args: minX, minY, minZ, maxX, maxY, maxZ
+	 */
+	public static AxisAlignedBB getBoundingBox(double par0, double par2, double par4, double par6, double par8, double par10) {
+		return new AxisAlignedBB(par0, par2, par4, par6, par8, par10);
 	}
 
+	/**
+	 * Gets the ThreadLocal AABBPool
+	 */
 	public static AABBPool getAABBPool() {
-		return (AABBPool)g.get();
-	}
-
-	protected AxisAlignedBB(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
-	}
-
-	public AxisAlignedBB setBounds(double var1, double var3, double var5, double var7, double var9, double var11) {
-		this.minX = var1;
-		this.minY = var3;
-		this.minZ = var5;
-		this.maxX = var7;
-		this.maxY = var9;
-		this.maxZ = var11;
+		return (AABBPool)theAABBLocalPool.get();
+	}
+
+	protected AxisAlignedBB(double par1, double par3, double par5, double par7, double par9, double par11) {
+		this.minX = par1;
+		this.minY = par3;
+		this.minZ = par5;
+		this.maxX = par7;
+		this.maxY = par9;
+		this.maxZ = par11;
+	}
+
+	/**
+	 * Sets the bounds of the bounding box. Args: minX, minY, minZ, maxX, maxY, maxZ
+	 */
+	public AxisAlignedBB setBounds(double par1, double par3, double par5, double par7, double par9, double par11) {
+		this.minX = par1;
+		this.minY = par3;
+		this.minZ = par5;
+		this.maxX = par7;
+		this.maxY = par9;
+		this.maxZ = par11;
 		return this;
 	}
 
-	public AxisAlignedBB addCoord(double var1, double var3, double var5) {
+	/**
+	 * Adds the coordinates to the bounding box extending it if the point lies outside the current ranges. Args: x, y, z
+	 */
+	public AxisAlignedBB addCoord(double par1, double par3, double par5) {
 		double var7 = this.minX;
 		double var9 = this.minY;
 		double var11 = this.minZ;
 		double var13 = this.maxX;
 		double var15 = this.maxY;
 		double var17 = this.maxZ;
-		if(var1 < 0.0D) {
-			var7 += var1;
-		}
-
-		if(var1 > 0.0D) {
-			var13 += var1;
-		}
-
-		if(var3 < 0.0D) {
-			var9 += var3;
-		}
-
-		if(var3 > 0.0D) {
-			var15 += var3;
-		}
-
-		if(var5 < 0.0D) {
-			var11 += var5;
-		}
-
-		if(var5 > 0.0D) {
-			var17 += var5;
-		}
-
-		return getAABBPool().getAABB(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB expand(double var1, double var3, double var5) {
-		double var7 = this.minX - var1;
-		double var9 = this.minY - var3;
-		double var11 = this.minZ - var5;
-		double var13 = this.maxX + var1;
-		double var15 = this.maxY + var3;
-		double var17 = this.maxZ + var5;
-		return getAABBPool().getAABB(var7, var9, var11, var13, var15, var17);
-	}
-
-	public AxisAlignedBB func_111270_a(AxisAlignedBB var1) {
-		double var2 = Math.min(this.minX, var1.minX);
-		double var4 = Math.min(this.minY, var1.minY);
-		double var6 = Math.min(this.minZ, var1.minZ);
-		double var8 = Math.max(this.maxX, var1.maxX);
-		double var10 = Math.max(this.maxY, var1.maxY);
-		double var12 = Math.max(this.maxZ, var1.maxZ);
+
+		if (par1 < 0.0D) {
+			var7 += par1;
+		}
+
+		if (par1 > 0.0D) {
+			var13 += par1;
+		}
+
+		if (par3 < 0.0D) {
+			var9 += par3;
+		}
+
+		if (par3 > 0.0D) {
+			var15 += par3;
+		}
+
+		if (par5 < 0.0D) {
+			var11 += par5;
+		}
+
+		if (par5 > 0.0D) {
+			var17 += par5;
+		}
+
+		return getAABBPool().getAABB(var7, var9, var11, var13, var15, var17);
+	}
+
+	/**
+	 * Returns a bounding box expanded by the specified vector (if negative numbers are given it will shrink). Args: x, y,
+	 * z
+	 */
+	public AxisAlignedBB expand(double par1, double par3, double par5) {
+		double var7 = this.minX - par1;
+		double var9 = this.minY - par3;
+		double var11 = this.minZ - par5;
+		double var13 = this.maxX + par1;
+		double var15 = this.maxY + par3;
+		double var17 = this.maxZ + par5;
+		return getAABBPool().getAABB(var7, var9, var11, var13, var15, var17);
+	}
+
+	public AxisAlignedBB func_111270_a(AxisAlignedBB par1AxisAlignedBB) {
+		double var2 = Math.min(this.minX, par1AxisAlignedBB.minX);
+		double var4 = Math.min(this.minY, par1AxisAlignedBB.minY);
+		double var6 = Math.min(this.minZ, par1AxisAlignedBB.minZ);
+		double var8 = Math.max(this.maxX, par1AxisAlignedBB.maxX);
+		double var10 = Math.max(this.maxY, par1AxisAlignedBB.maxY);
+		double var12 = Math.max(this.maxZ, par1AxisAlignedBB.maxZ);
 		return getAABBPool().getAABB(var2, var4, var6, var8, var10, var12);
 	}
 
-	public AxisAlignedBB getOffsetBoundingBox(double var1, double var3, double var5) {
-		return getAABBPool().getAABB(this.minX + var1, this.minY + var3, this.minZ + var5, this.maxX + var1, this.maxY + var3, this.maxZ + var5);
-	}
-
-	public double calculateXOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxY > this.minY && var1.minY < this.maxY) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxX <= this.minX) {
-					var4 = this.minX - var1.maxX;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minX >= this.maxX) {
-					var4 = this.maxX - var1.minX;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateYOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxZ > this.minZ && var1.minZ < this.maxZ) {
-				double var4;
-				if(var2 > 0.0D && var1.maxY <= this.minY) {
-					var4 = this.minY - var1.maxY;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minY >= this.maxY) {
-					var4 = this.maxY - var1.minY;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public double calculateZOffset(AxisAlignedBB var1, double var2) {
-		if(var1.maxX > this.minX && var1.minX < this.maxX) {
-			if(var1.maxY > this.minY && var1.minY < this.maxY) {
-				double var4;
-				if(var2 > 0.0D && var1.maxZ <= this.minZ) {
-					var4 = this.minZ - var1.maxZ;
-					if(var4 < var2) {
-						var2 = var4;
-					}
-				}
-
-				if(var2 < 0.0D && var1.minZ >= this.maxZ) {
-					var4 = this.maxZ - var1.minZ;
-					if(var4 > var2) {
-						var2 = var4;
-					}
-				}
-
-				return var2;
-			} else {
-				return var2;
-			}
-		} else {
-			return var2;
-		}
-	}
-
-	public boolean intersectsWith(AxisAlignedBB var1) {
-		return var1.maxX > this.minX && var1.minX < this.maxX ? (var1.maxY > this.minY && var1.minY < this.maxY ? var1.maxZ > this.minZ && var1.minZ < this.maxZ : false) : false;
-	}
-
-	public AxisAlignedBB offset(double var1, double var3, double var5) {
-		this.minX += var1;
-		this.minY += var3;
-		this.minZ += var5;
-		this.maxX += var1;
-		this.maxY += var3;
-		this.maxZ += var5;
+	/**
+	 * Returns a bounding box offseted by the specified vector (if negative numbers are given it will shrink). Args: x, y,
+	 * z
+	 */
+	public AxisAlignedBB getOffsetBoundingBox(double par1, double par3, double par5) {
+		return getAABBPool().getAABB(this.minX + par1, this.minY + par3, this.minZ + par5, this.maxX + par1, this.maxY + par3, this.maxZ + par5);
+	}
+
+	/**
+	 * if instance and the argument bounding boxes overlap in the Y and Z dimensions, calculate the offset between them in
+	 * the X dimension.  return var2 if the bounding boxes do not overlap or if var2 is closer to 0 then the calculated
+	 * offset.  Otherwise return the calculated offset.
+	 */
+	public double calculateXOffset(AxisAlignedBB par1AxisAlignedBB, double par2) {
+		if (par1AxisAlignedBB.maxY > this.minY && par1AxisAlignedBB.minY < this.maxY) {
+			if (par1AxisAlignedBB.maxZ > this.minZ && par1AxisAlignedBB.minZ < this.maxZ) {
+				double var4;
+
+				if (par2 > 0.0D && par1AxisAlignedBB.maxX <= this.minX) {
+					var4 = this.minX - par1AxisAlignedBB.maxX;
+
+					if (var4 < par2) {
+						par2 = var4;
+					}
+				}
+
+				if (par2 < 0.0D && par1AxisAlignedBB.minX >= this.maxX) {
+					var4 = this.maxX - par1AxisAlignedBB.minX;
+
+					if (var4 > par2) {
+						par2 = var4;
+					}
+				}
+
+				return par2;
+			} else {
+				return par2;
+			}
+		} else {
+			return par2;
+		}
+	}
+
+	/**
+	 * if instance and the argument bounding boxes overlap in the X and Z dimensions, calculate the offset between them in
+	 * the Y dimension.  return var2 if the bounding boxes do not overlap or if var2 is closer to 0 then the calculated
+	 * offset.  Otherwise return the calculated offset.
+	 */
+	public double calculateYOffset(AxisAlignedBB par1AxisAlignedBB, double par2) {
+		if (par1AxisAlignedBB.maxX > this.minX && par1AxisAlignedBB.minX < this.maxX) {
+			if (par1AxisAlignedBB.maxZ > this.minZ && par1AxisAlignedBB.minZ < this.maxZ) {
+				double var4;
+
+				if (par2 > 0.0D && par1AxisAlignedBB.maxY <= this.minY) {
+					var4 = this.minY - par1AxisAlignedBB.maxY;
+
+					if (var4 < par2) {
+						par2 = var4;
+					}
+				}
+
+				if (par2 < 0.0D && par1AxisAlignedBB.minY >= this.maxY) {
+					var4 = this.maxY - par1AxisAlignedBB.minY;
+
+					if (var4 > par2) {
+						par2 = var4;
+					}
+				}
+
+				return par2;
+			} else {
+				return par2;
+			}
+		} else {
+			return par2;
+		}
+	}
+
+	/**
+	 * if instance and the argument bounding boxes overlap in the Y and X dimensions, calculate the offset between them in
+	 * the Z dimension.  return var2 if the bounding boxes do not overlap or if var2 is closer to 0 then the calculated
+	 * offset.  Otherwise return the calculated offset.
+	 */
+	public double calculateZOffset(AxisAlignedBB par1AxisAlignedBB, double par2) {
+		if (par1AxisAlignedBB.maxX > this.minX && par1AxisAlignedBB.minX < this.maxX) {
+			if (par1AxisAlignedBB.maxY > this.minY && par1AxisAlignedBB.minY < this.maxY) {
+				double var4;
+
+				if (par2 > 0.0D && par1AxisAlignedBB.maxZ <= this.minZ) {
+					var4 = this.minZ - par1AxisAlignedBB.maxZ;
+
+					if (var4 < par2) {
+						par2 = var4;
+					}
+				}
+
+				if (par2 < 0.0D && par1AxisAlignedBB.minZ >= this.maxZ) {
+					var4 = this.maxZ - par1AxisAlignedBB.minZ;
+
+					if (var4 > par2) {
+						par2 = var4;
+					}
+				}
+
+				return par2;
+			} else {
+				return par2;
+			}
+		} else {
+			return par2;
+		}
+	}
+
+	/**
+	 * Returns whether the given bounding box intersects with this one. Args: axisAlignedBB
+	 */
+	public boolean intersectsWith(AxisAlignedBB par1AxisAlignedBB) {
+		return par1AxisAlignedBB.maxX > this.minX && par1AxisAlignedBB.minX < this.maxX ? (par1AxisAlignedBB.maxY > this.minY && par1AxisAlignedBB.minY < this.maxY ? par1AxisAlignedBB.maxZ > this.minZ && par1AxisAlignedBB.minZ < this.maxZ : false) : false;
+	}
+
+	/**
+	 * Offsets the current bounding box by the specified coordinates. Args: x, y, z
+	 */
+	public AxisAlignedBB offset(double par1, double par3, double par5) {
+		this.minX += par1;
+		this.minY += par3;
+		this.minZ += par5;
+		this.maxX += par1;
+		this.maxY += par3;
+		this.maxZ += par5;
 		return this;
 	}
 
-	public boolean isVecInside(Vec3 var1) {
-		return var1.xCoord > this.minX && var1.xCoord < this.maxX ? (var1.yCoord > this.minY && var1.yCoord < this.maxY ? var1.zCoord > this.minZ && var1.zCoord < this.maxZ : false) : false;
+	/**
+	 * Returns if the supplied Vec3D is completely inside the bounding box
+	 */
+	public boolean isVecInside(Vec3 par1Vec3) {
+		return par1Vec3.xCoord > this.minX && par1Vec3.xCoord < this.maxX ? (par1Vec3.yCoord > this.minY && par1Vec3.yCoord < this.maxY ? par1Vec3.zCoord > this.minZ && par1Vec3.zCoord < this.maxZ : false) : false;
 	}
 
+	/**
+	 * Returns the average length of the edges of the bounding box.
+	 */
 	public double getAverageEdgeLength() {
 		double var1 = this.maxX - this.minX;
 		double var3 = this.maxY - this.minY;
@@ -200,101 +259,110 @@
 		return (var1 + var3 + var5) / 3.0D;
 	}
 
-	public AxisAlignedBB contract(double var1, double var3, double var5) {
-		double var7 = this.minX + var1;
-		double var9 = this.minY + var3;
-		double var11 = this.minZ + var5;
-		double var13 = this.maxX - var1;
-		double var15 = this.maxY - var3;
-		double var17 = this.maxZ - var5;
+	/**
+	 * Returns a bounding box that is inset by the specified amounts
+	 */
+	public AxisAlignedBB contract(double par1, double par3, double par5) {
+		double var7 = this.minX + par1;
+		double var9 = this.minY + par3;
+		double var11 = this.minZ + par5;
+		double var13 = this.maxX - par1;
+		double var15 = this.maxY - par3;
+		double var17 = this.maxZ - par5;
 		return getAABBPool().getAABB(var7, var9, var11, var13, var15, var17);
 	}
 
+	/**
+	 * Returns a copy of the bounding box.
+	 */
 	public AxisAlignedBB copy() {
 		return getAABBPool().getAABB(this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ);
 	}
 
-	public MovingObjectPosition calculateIntercept(Vec3 var1, Vec3 var2) {
-		Vec3 var3 = var1.getIntermediateWithXValue(var2, this.minX);
-		Vec3 var4 = var1.getIntermediateWithXValue(var2, this.maxX);
-		Vec3 var5 = var1.getIntermediateWithYValue(var2, this.minY);
-		Vec3 var6 = var1.getIntermediateWithYValue(var2, this.maxY);
-		Vec3 var7 = var1.getIntermediateWithZValue(var2, this.minZ);
-		Vec3 var8 = var1.getIntermediateWithZValue(var2, this.maxZ);
-		if(!this.isVecInYZ(var3)) {
+	public MovingObjectPosition calculateIntercept(Vec3 par1Vec3, Vec3 par2Vec3) {
+		Vec3 var3 = par1Vec3.getIntermediateWithXValue(par2Vec3, this.minX);
+		Vec3 var4 = par1Vec3.getIntermediateWithXValue(par2Vec3, this.maxX);
+		Vec3 var5 = par1Vec3.getIntermediateWithYValue(par2Vec3, this.minY);
+		Vec3 var6 = par1Vec3.getIntermediateWithYValue(par2Vec3, this.maxY);
+		Vec3 var7 = par1Vec3.getIntermediateWithZValue(par2Vec3, this.minZ);
+		Vec3 var8 = par1Vec3.getIntermediateWithZValue(par2Vec3, this.maxZ);
+
+		if (!this.isVecInYZ(var3)) {
 			var3 = null;
 		}
 
-		if(!this.isVecInYZ(var4)) {
+		if (!this.isVecInYZ(var4)) {
 			var4 = null;
 		}
 
-		if(!this.isVecInXZ(var5)) {
+		if (!this.isVecInXZ(var5)) {
 			var5 = null;
 		}
 
-		if(!this.isVecInXZ(var6)) {
+		if (!this.isVecInXZ(var6)) {
 			var6 = null;
 		}
 
-		if(!this.isVecInXY(var7)) {
+		if (!this.isVecInXY(var7)) {
 			var7 = null;
 		}
 
-		if(!this.isVecInXY(var8)) {
+		if (!this.isVecInXY(var8)) {
 			var8 = null;
 		}
 
 		Vec3 var9 = null;
-		if(var3 != null && (var9 == null || var1.squareDistanceTo(var3) < var1.squareDistanceTo(var9))) {
+
+		if (var3 != null && (var9 == null || par1Vec3.squareDistanceTo(var3) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var3;
 		}
 
-		if(var4 != null && (var9 == null || var1.squareDistanceTo(var4) < var1.squareDistanceTo(var9))) {
+		if (var4 != null && (var9 == null || par1Vec3.squareDistanceTo(var4) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var4;
 		}
 
-		if(var5 != null && (var9 == null || var1.squareDistanceTo(var5) < var1.squareDistanceTo(var9))) {
+		if (var5 != null && (var9 == null || par1Vec3.squareDistanceTo(var5) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var5;
 		}
 
-		if(var6 != null && (var9 == null || var1.squareDistanceTo(var6) < var1.squareDistanceTo(var9))) {
+		if (var6 != null && (var9 == null || par1Vec3.squareDistanceTo(var6) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var6;
 		}
 
-		if(var7 != null && (var9 == null || var1.squareDistanceTo(var7) < var1.squareDistanceTo(var9))) {
+		if (var7 != null && (var9 == null || par1Vec3.squareDistanceTo(var7) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var7;
 		}
 
-		if(var8 != null && (var9 == null || var1.squareDistanceTo(var8) < var1.squareDistanceTo(var9))) {
+		if (var8 != null && (var9 == null || par1Vec3.squareDistanceTo(var8) < par1Vec3.squareDistanceTo(var9))) {
 			var9 = var8;
 		}
 
-		if(var9 == null) {
+		if (var9 == null) {
 			return null;
 		} else {
 			byte var10 = -1;
-			if(var9 == var3) {
+
+			if (var9 == var3) {
 				var10 = 4;
 			}
 
-			if(var9 == var4) {
+			if (var9 == var4) {
 				var10 = 5;
 			}
 
-			if(var9 == var5) {
+			if (var9 == var5) {
 				var10 = 0;
 			}
 
-			if(var9 == var6) {
+			if (var9 == var6) {
 				var10 = 1;
 			}
 
-			if(var9 == var7) {
+			if (var9 == var7) {
 				var10 = 2;
 			}
 
-			if(var9 == var8) {
+			if (var9 == var8) {
 				var10 = 3;
 			}
 
@@ -302,25 +370,37 @@
 		}
 	}
 
-	private boolean isVecInYZ(Vec3 var1) {
-		return var1 == null ? false : var1.yCoord >= this.minY && var1.yCoord <= this.maxY && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXZ(Vec3 var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.zCoord >= this.minZ && var1.zCoord <= this.maxZ;
-	}
-
-	private boolean isVecInXY(Vec3 var1) {
-		return var1 == null ? false : var1.xCoord >= this.minX && var1.xCoord <= this.maxX && var1.yCoord >= this.minY && var1.yCoord <= this.maxY;
-	}
-
-	public void setBB(AxisAlignedBB var1) {
-		this.minX = var1.minX;
-		this.minY = var1.minY;
-		this.minZ = var1.minZ;
-		this.maxX = var1.maxX;
-		this.maxY = var1.maxY;
-		this.maxZ = var1.maxZ;
+	/**
+	 * Checks if the specified vector is within the YZ dimensions of the bounding box. Args: Vec3D
+	 */
+	private boolean isVecInYZ(Vec3 par1Vec3) {
+		return par1Vec3 == null ? false : par1Vec3.yCoord >= this.minY && par1Vec3.yCoord <= this.maxY && par1Vec3.zCoord >= this.minZ && par1Vec3.zCoord <= this.maxZ;
+	}
+
+	/**
+	 * Checks if the specified vector is within the XZ dimensions of the bounding box. Args: Vec3D
+	 */
+	private boolean isVecInXZ(Vec3 par1Vec3) {
+		return par1Vec3 == null ? false : par1Vec3.xCoord >= this.minX && par1Vec3.xCoord <= this.maxX && par1Vec3.zCoord >= this.minZ && par1Vec3.zCoord <= this.maxZ;
+	}
+
+	/**
+	 * Checks if the specified vector is within the XY dimensions of the bounding box. Args: Vec3D
+	 */
+	private boolean isVecInXY(Vec3 par1Vec3) {
+		return par1Vec3 == null ? false : par1Vec3.xCoord >= this.minX && par1Vec3.xCoord <= this.maxX && par1Vec3.yCoord >= this.minY && par1Vec3.yCoord <= this.maxY;
+	}
+
+	/**
+	 * Sets the bounding box to the same bounds as the bounding box passed in. Args: axisAlignedBB
+	 */
+	public void setBB(AxisAlignedBB par1AxisAlignedBB) {
+		this.minX = par1AxisAlignedBB.minX;
+		this.minY = par1AxisAlignedBB.minY;
+		this.minZ = par1AxisAlignedBB.minZ;
+		this.maxX = par1AxisAlignedBB.maxX;
+		this.maxY = par1AxisAlignedBB.maxY;
+		this.maxZ = par1AxisAlignedBB.maxZ;
 	}
 
 	public String toString() {
