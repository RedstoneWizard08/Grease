--- net/minecraft/src/BlockBeacon.java
+++ net/minecraft/src/BlockBeacon.java
@@ -1,50 +1,74 @@
 package net.minecraft.src;
 
 public class BlockBeacon extends BlockContainer {
-	public BlockBeacon(int var1) {
-		super(var1, Material.glass);
+	public BlockBeacon(int par1) {
+		super(par1, Material.glass);
 		this.setHardness(3.0F);
 		this.setCreativeTab(CreativeTabs.tabMisc);
 	}
 
-	public TileEntity createNewTileEntity(World var1) {
+	/**
+	 * Returns a new instance of a block's tile entity class. Called on placing the block.
+	 */
+	public TileEntity createNewTileEntity(World par1World) {
 		return new TileEntityBeacon();
 	}
 
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-		if(var1.isRemote) {
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
+		if (par1World.isRemote) {
 			return true;
 		} else {
-			TileEntityBeacon var10 = (TileEntityBeacon)var1.getBlockTileEntity(var2, var3, var4);
-			if(var10 != null) {
-				var5.displayGUIBeacon(var10);
+			TileEntityBeacon var10 = (TileEntityBeacon)par1World.getBlockTileEntity(par2, par3, par4);
+
+			if (var10 != null) {
+				par5EntityPlayer.displayGUIBeacon(var10);
 			}
 
 			return true;
 		}
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 34;
 	}
 
-	public void registerIcons(IconRegister var1) {
-		super.registerIcons(var1);
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		super.registerIcons(par1IconRegister);
 	}
 
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLivingBase var5, ItemStack var6) {
-		super.onBlockPlacedBy(var1, var2, var3, var4, var5, var6);
-		if(var6.hasDisplayName()) {
-			((TileEntityBeacon)var1.getBlockTileEntity(var2, var3, var4)).func_94047_a(var6.getDisplayName());
+	/**
+	 * Called when the block is placed in the world.
+	 */
+	public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLivingBase par5EntityLivingBase, ItemStack par6ItemStack) {
+		super.onBlockPlacedBy(par1World, par2, par3, par4, par5EntityLivingBase, par6ItemStack);
+
+		if (par6ItemStack.hasDisplayName()) {
+			((TileEntityBeacon)par1World.getBlockTileEntity(par2, par3, par4)).func_94047_a(par6ItemStack.getDisplayName());
 		}
-
 	}
 }
