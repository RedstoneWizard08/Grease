--- net/minecraft/src/BlockCactus.java
+++ net/minecraft/src/BlockCactus.java
@@ -6,91 +6,132 @@
 	private Icon cactusTopIcon;
 	private Icon cactusBottomIcon;
 
-	protected BlockCactus(int var1) {
-		super(var1, Material.cactus);
+	protected BlockCactus(int par1) {
+		super(par1, Material.cactus);
 		this.setTickRandomly(true);
 		this.setCreativeTab(CreativeTabs.tabDecorations);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.isAirBlock(var2, var3 + 1, var4)) {
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (par1World.isAirBlock(par2, par3 + 1, par4)) {
 			int var6;
-			for(var6 = 1; var1.getBlockId(var2, var3 - var6, var4) == this.blockID; ++var6) {
+
+			for (var6 = 1; par1World.getBlockId(par2, par3 - var6, par4) == this.blockID; ++var6) {
+				;
 			}
 
-			if(var6 < 3) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 == 15) {
-					var1.setBlock(var2, var3 + 1, var4, this.blockID);
-					var1.setBlockMetadata(var2, var3, var4, 0, 4);
-					this.onNeighborBlockChange(var1, var2, var3 + 1, var4, this.blockID);
+			if (var6 < 3) {
+				int var7 = par1World.getBlockMetadata(par2, par3, par4);
+
+				if (var7 == 15) {
+					par1World.setBlock(par2, par3 + 1, par4, this.blockID);
+					par1World.setBlockMetadataWithNotify(par2, par3, par4, 0, 4);
+					this.onNeighborBlockChange(par1World, par2, par3 + 1, par4, this.blockID);
 				} else {
-					var1.setBlockMetadata(var2, var3, var4, var7 + 1, 4);
+					par1World.setBlockMetadataWithNotify(par2, par3, par4, var7 + 1, 4);
 				}
 			}
 		}
-
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getAABBPool().getAABB((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)((float)(var3 + 1) - var5), (double)((float)(var4 + 1) - var5));
-	}
-
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		float var5 = 1.0F / 16.0F;
-		return AxisAlignedBB.getAABBPool().getAABB((double)((float)var2 + var5), (double)var3, (double)((float)var4 + var5), (double)((float)(var2 + 1) - var5), (double)(var3 + 1), (double)((float)(var4 + 1) - var5));
-	}
-
-	public Icon getIcon(int var1, int var2) {
-		return var1 == 1 ? this.cactusTopIcon : (var1 == 0 ? this.cactusBottomIcon : this.blockIcon);
-	}
-
+	}
+
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		float var5 = 0.0625F;
+		return AxisAlignedBB.getAABBPool().getAABB((double)((float)par2 + var5), (double)par3, (double)((float)par4 + var5), (double)((float)(par2 + 1) - var5), (double)((float)(par3 + 1) - var5), (double)((float)(par4 + 1) - var5));
+	}
+
+	/**
+	 * Returns the bounding box of the wired rectangular prism to render.
+	 */
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		float var5 = 0.0625F;
+		return AxisAlignedBB.getAABBPool().getAABB((double)((float)par2 + var5), (double)par3, (double)((float)par4 + var5), (double)((float)(par2 + 1) - var5), (double)(par3 + 1), (double)((float)(par4 + 1) - var5));
+	}
+
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par1 == 1 ? this.cactusTopIcon : (par1 == 0 ? this.cactusBottomIcon : this.blockIcon);
+	}
+
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 13;
 	}
 
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return !super.canPlaceBlockAt(var1, var2, var3, var4) ? false : this.canBlockStay(var1, var2, var3, var4);
+	/**
+	 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
+	 */
+	public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4) {
+		return !super.canPlaceBlockAt(par1World, par2, par3, par4) ? false : this.canBlockStay(par1World, par2, par3, par4);
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!this.canBlockStay(var1, var2, var3, var4)) {
-			var1.destroyBlock(var2, var3, var4, true);
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!this.canBlockStay(par1World, par2, par3, par4)) {
+			par1World.destroyBlock(par2, par3, par4, true);
 		}
-
 	}
 
-	public boolean canBlockStay(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2 - 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2 + 1, var3, var4).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 - 1).isSolid()) {
-			return false;
-		} else if(var1.getBlockMaterial(var2, var3, var4 + 1).isSolid()) {
+	/**
+	 * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
+	 */
+	public boolean canBlockStay(World par1World, int par2, int par3, int par4) {
+		if (par1World.getBlockMaterial(par2 - 1, par3, par4).isSolid()) {
+			return false;
+		} else if (par1World.getBlockMaterial(par2 + 1, par3, par4).isSolid()) {
+			return false;
+		} else if (par1World.getBlockMaterial(par2, par3, par4 - 1).isSolid()) {
+			return false;
+		} else if (par1World.getBlockMaterial(par2, par3, par4 + 1).isSolid()) {
 			return false;
 		} else {
-			int var5 = var1.getBlockId(var2, var3 - 1, var4);
+			int var5 = par1World.getBlockId(par2, par3 - 1, par4);
 			return var5 == Block.cactus.blockID || var5 == Block.sand.blockID;
 		}
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		var5.attackEntityFrom(DamageSource.cactus, 1.0F);
+	/**
+	 * Triggered whenever an entity collides with this block (enters into the block). Args: world, x, y, z, entity
+	 */
+	public void onEntityCollidedWithBlock(World par1World, int par2, int par3, int par4, Entity par5Entity) {
+		par5Entity.attackEntityFrom(DamageSource.cactus, 1.0F);
 	}
 
-	public void registerIcons(IconRegister var1) {
-		this.blockIcon = var1.registerIcon(this.getTextureName() + "_side");
-		this.cactusTopIcon = var1.registerIcon(this.getTextureName() + "_top");
-		this.cactusBottomIcon = var1.registerIcon(this.getTextureName() + "_bottom");
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.blockIcon = par1IconRegister.registerIcon(this.getTextureName() + "_side");
+		this.cactusTopIcon = par1IconRegister.registerIcon(this.getTextureName() + "_top");
+		this.cactusBottomIcon = par1IconRegister.registerIcon(this.getTextureName() + "_bottom");
 	}
 }
