--- net/minecraft/src/BlockDetectorRail.java
+++ net/minecraft/src/BlockDetectorRail.java
@@ -6,89 +6,128 @@
 public class BlockDetectorRail extends BlockRailBase {
 	private Icon[] iconArray;
 
-	public BlockDetectorRail(int var1) {
-		super(var1, true);
+	public BlockDetectorRail(int par1) {
+		super(par1, true);
 		this.setTickRandomly(true);
 	}
 
-	public int tickRate(World var1) {
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 20;
 	}
 
+	/**
+	 * Can this block provide power. Only wire currently seems to have this change based on its state.
+	 */
 	public boolean canProvidePower() {
 		return true;
 	}
 
-	public void onEntityCollidedWithBlock(World var1, int var2, int var3, int var4, Entity var5) {
-		if(!var1.isRemote) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) == 0) {
-				this.setStateIfMinecartInteractsWithRail(var1, var2, var3, var4, var6);
-			}
-		}
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0) {
-				this.setStateIfMinecartInteractsWithRail(var1, var2, var3, var4, var6);
-			}
-		}
-	}
-
-	public int isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) != 0 ? 15 : 0;
-	}
-
-	public int isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return (var1.getBlockMetadata(var2, var3, var4) & 8) == 0 ? 0 : (var5 == 1 ? 15 : 0);
-	}
-
-	private void setStateIfMinecartInteractsWithRail(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = (var5 & 8) != 0;
+	/**
+	 * Triggered whenever an entity collides with this block (enters into the block). Args: world, x, y, z, entity
+	 */
+	public void onEntityCollidedWithBlock(World par1World, int par2, int par3, int par4, Entity par5Entity) {
+		if (!par1World.isRemote) {
+			int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+			if ((var6 & 8) == 0) {
+				this.setStateIfMinecartInteractsWithRail(par1World, par2, par3, par4, var6);
+			}
+		}
+	}
+
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote) {
+			int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+			if ((var6 & 8) != 0) {
+				this.setStateIfMinecartInteractsWithRail(par1World, par2, par3, par4, var6);
+			}
+		}
+	}
+
+	/**
+	 * Returns true if the block is emitting indirect/weak redstone power on the specified side. If isBlockNormalCube
+	 * returns true, standard redstone propagation rules will apply instead and this will not be called. Args: World, X, Y,
+	 * Z, side. Note that the side is reversed - eg it is 1 (up) when checking the bottom of the block.
+	 */
+	public int isProvidingWeakPower(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		return (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) != 0 ? 15 : 0;
+	}
+
+	/**
+	 * Returns true if the block is emitting direct/strong redstone power on the specified side. Args: World, X, Y, Z,
+	 * side. Note that the side is reversed - eg it is 1 (up) when checking the bottom of the block.
+	 */
+	public int isProvidingStrongPower(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		return (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) == 0 ? 0 : (par5 == 1 ? 15 : 0);
+	}
+
+	/**
+	 * Update the detector rail power state if a minecart enter, stays or leave the block.
+	 */
+	private void setStateIfMinecartInteractsWithRail(World par1World, int par2, int par3, int par4, int par5) {
+		boolean var6 = (par5 & 8) != 0;
 		boolean var7 = false;
-		float var8 = 2.0F / 16.0F;
-		List var9 = var1.getEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().getAABB((double)((float)var2 + var8), (double)var3, (double)((float)var4 + var8), (double)((float)(var2 + 1) - var8), (double)((float)(var3 + 1) - var8), (double)((float)(var4 + 1) - var8)));
-		if(!var9.isEmpty()) {
+		float var8 = 0.125F;
+		List var9 = par1World.getEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().getAABB((double)((float)par2 + var8), (double)par3, (double)((float)par4 + var8), (double)((float)(par2 + 1) - var8), (double)((float)(par3 + 1) - var8), (double)((float)(par4 + 1) - var8)));
+
+		if (!var9.isEmpty()) {
 			var7 = true;
 		}
 
-		if(var7 && !var6) {
-			var1.setBlockMetadata(var2, var3, var4, var5 | 8, 3);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-		}
-
-		if(!var7 && var6) {
-			var1.setBlockMetadata(var2, var3, var4, var5 & 7, 3);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
-		}
-
-		if(var7) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-		}
-
-		var1.func_96440_m(var2, var3, var4, this.blockID);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.setStateIfMinecartInteractsWithRail(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4));
-	}
-
+		if (var7 && !var6) {
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, par5 | 8, 3);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3 - 1, par4, this.blockID);
+			par1World.markBlockRangeForRenderUpdate(par2, par3, par4, par2, par3, par4);
+		}
+
+		if (!var7 && var6) {
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, par5 & 7, 3);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3 - 1, par4, this.blockID);
+			par1World.markBlockRangeForRenderUpdate(par2, par3, par4, par2, par3, par4);
+		}
+
+		if (var7) {
+			par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+		}
+
+		par1World.func_96440_m(par2, par3, par4, this.blockID);
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		super.onBlockAdded(par1World, par2, par3, par4);
+		this.setStateIfMinecartInteractsWithRail(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4));
+	}
+
+	/**
+	 * If this returns true, then comparators facing away from this block will use the value from
+	 * getComparatorInputOverride instead of the actual redstone signal strength.
+	 */
 	public boolean hasComparatorInputOverride() {
 		return true;
 	}
 
-	public int getComparatorInputOverride(World var1, int var2, int var3, int var4, int var5) {
-		if((var1.getBlockMetadata(var2, var3, var4) & 8) > 0) {
-			float var6 = 2.0F / 16.0F;
-			List var7 = var1.selectEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().getAABB((double)((float)var2 + var6), (double)var3, (double)((float)var4 + var6), (double)((float)(var2 + 1) - var6), (double)((float)(var3 + 1) - var6), (double)((float)(var4 + 1) - var6)), IEntitySelector.selectInventories);
-			if(var7.size() > 0) {
+	/**
+	 * If hasComparatorInputOverride returns true, the return value from this is used instead of the redstone signal
+	 * strength when this block inputs to a comparator.
+	 */
+	public int getComparatorInputOverride(World par1World, int par2, int par3, int par4, int par5) {
+		if ((par1World.getBlockMetadata(par2, par3, par4) & 8) > 0) {
+			float var6 = 0.125F;
+			List var7 = par1World.selectEntitiesWithinAABB(EntityMinecart.class, AxisAlignedBB.getAABBPool().getAABB((double)((float)par2 + var6), (double)par3, (double)((float)par4 + var6), (double)((float)(par2 + 1) - var6), (double)((float)(par3 + 1) - var6), (double)((float)(par4 + 1) - var6)), IEntitySelector.selectInventories);
+
+			if (var7.size() > 0) {
 				return Container.calcRedstoneFromInventory((IInventory)var7.get(0));
 			}
 		}
@@ -96,13 +135,20 @@
 		return 0;
 	}
 
-	public void registerIcons(IconRegister var1) {
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
 		this.iconArray = new Icon[2];
-		this.iconArray[0] = var1.registerIcon(this.getTextureName());
-		this.iconArray[1] = var1.registerIcon(this.getTextureName() + "_powered");
+		this.iconArray[0] = par1IconRegister.registerIcon(this.getTextureName());
+		this.iconArray[1] = par1IconRegister.registerIcon(this.getTextureName() + "_powered");
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		return (var2 & 8) != 0 ? this.iconArray[1] : this.iconArray[0];
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return (par2 & 8) != 0 ? this.iconArray[1] : this.iconArray[0];
 	}
 }
