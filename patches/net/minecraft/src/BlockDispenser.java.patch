--- net/minecraft/src/BlockDispenser.java
+++ net/minecraft/src/BlockDispenser.java
@@ -3,188 +3,245 @@
 import java.util.Random;
 
 public class BlockDispenser extends BlockContainer {
+
+	/** Registry for all dispense behaviors. */
 	public static final IRegistry dispenseBehaviorRegistry = new RegistryDefaulted(new BehaviorDefaultDispenseItem());
-	protected Random b = new Random();
+	protected Random random = new Random();
 	protected Icon furnaceTopIcon;
 	protected Icon furnaceFrontIcon;
 	protected Icon field_96473_e;
 
-	protected BlockDispenser(int var1) {
-		super(var1, Material.rock);
+	protected BlockDispenser(int par1) {
+		super(par1, Material.rock);
 		this.setCreativeTab(CreativeTabs.tabRedstone);
 	}
 
-	public int tickRate(World var1) {
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 4;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		this.setDispenserDefaultDirection(var1, var2, var3, var4);
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		super.onBlockAdded(par1World, par2, par3, par4);
+		this.setDispenserDefaultDirection(par1World, par2, par3, par4);
 	}
 
-	private void setDispenserDefaultDirection(World var1, int var2, int var3, int var4) {
-		if(!var1.isRemote) {
-			int var5 = var1.getBlockId(var2, var3, var4 - 1);
-			int var6 = var1.getBlockId(var2, var3, var4 + 1);
-			int var7 = var1.getBlockId(var2 - 1, var3, var4);
-			int var8 = var1.getBlockId(var2 + 1, var3, var4);
+	/**
+	 * sets Dispenser block direction so that the front faces an non-opaque block; chooses west to be direction if all
+	 * surrounding blocks are opaque.
+	 */
+	private void setDispenserDefaultDirection(World par1World, int par2, int par3, int par4) {
+		if (!par1World.isRemote) {
+			int var5 = par1World.getBlockId(par2, par3, par4 - 1);
+			int var6 = par1World.getBlockId(par2, par3, par4 + 1);
+			int var7 = par1World.getBlockId(par2 - 1, par3, par4);
+			int var8 = par1World.getBlockId(par2 + 1, par3, par4);
 			byte var9 = 3;
-			if(Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
+
+			if (Block.opaqueCubeLookup[var5] && !Block.opaqueCubeLookup[var6]) {
 				var9 = 3;
 			}
 
-			if(Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
+			if (Block.opaqueCubeLookup[var6] && !Block.opaqueCubeLookup[var5]) {
 				var9 = 2;
 			}
 
-			if(Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
+			if (Block.opaqueCubeLookup[var7] && !Block.opaqueCubeLookup[var8]) {
 				var9 = 5;
 			}
 
-			if(Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
+			if (Block.opaqueCubeLookup[var8] && !Block.opaqueCubeLookup[var7]) {
 				var9 = 4;
 			}
 
-			var1.setBlockMetadata(var2, var3, var4, var9, 2);
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, var9, 2);
 		}
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		int var3 = var2 & 7;
-		return var1 == var3 ? (var3 != 1 && var3 != 0 ? this.furnaceFrontIcon : this.field_96473_e) : (var3 != 1 && var3 != 0 ? (var1 != 1 && var1 != 0 ? this.blockIcon : this.furnaceTopIcon) : this.furnaceTopIcon);
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.blockIcon = var1.registerIcon("furnace_side");
-		this.furnaceTopIcon = var1.registerIcon("furnace_top");
-		this.furnaceFrontIcon = var1.registerIcon(this.getTextureName() + "_front_horizontal");
-		this.field_96473_e = var1.registerIcon(this.getTextureName() + "_front_vertical");
-	}
-
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-		if(var1.isRemote) {
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		int var3 = par2 & 7;
+		return par1 == var3 ? (var3 != 1 && var3 != 0 ? this.furnaceFrontIcon : this.field_96473_e) : (var3 != 1 && var3 != 0 ? (par1 != 1 && par1 != 0 ? this.blockIcon : this.furnaceTopIcon) : this.furnaceTopIcon);
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.blockIcon = par1IconRegister.registerIcon("furnace_side");
+		this.furnaceTopIcon = par1IconRegister.registerIcon("furnace_top");
+		this.furnaceFrontIcon = par1IconRegister.registerIcon(this.getTextureName() + "_front_horizontal");
+		this.field_96473_e = par1IconRegister.registerIcon(this.getTextureName() + "_front_vertical");
+	}
+
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
+		if (par1World.isRemote) {
 			return true;
 		} else {
-			TileEntityDispenser var10 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
-			if(var10 != null) {
-				var5.displayGUIDispenser(var10);
+			TileEntityDispenser var10 = (TileEntityDispenser)par1World.getBlockTileEntity(par2, par3, par4);
+
+			if (var10 != null) {
+				par5EntityPlayer.displayGUIDispenser(var10);
 			}
 
 			return true;
 		}
 	}
 
-	protected void dispense(World var1, int var2, int var3, int var4) {
-		BlockSourceImpl var5 = new BlockSourceImpl(var1, var2, var3, var4);
+	protected void dispense(World par1World, int par2, int par3, int par4) {
+		BlockSourceImpl var5 = new BlockSourceImpl(par1World, par2, par3, par4);
 		TileEntityDispenser var6 = (TileEntityDispenser)var5.getBlockTileEntity();
-		if(var6 != null) {
+
+		if (var6 != null) {
 			int var7 = var6.getRandomStackFromInventory();
-			if(var7 < 0) {
-				var1.playAuxSFX(1001, var2, var3, var4, 0);
+
+			if (var7 < 0) {
+				par1World.playAuxSFX(1001, par2, par3, par4, 0);
 			} else {
 				ItemStack var8 = var6.getStackInSlot(var7);
 				IBehaviorDispenseItem var9 = this.getBehaviorForItemStack(var8);
-				if(var9 != IBehaviorDispenseItem.itemDispenseBehaviorProvider) {
+
+				if (var9 != IBehaviorDispenseItem.itemDispenseBehaviorProvider) {
 					ItemStack var10 = var9.dispense(var5, var8);
 					var6.setInventorySlotContents(var7, var10.stackSize == 0 ? null : var10);
 				}
 			}
-
 		}
 	}
 
-	protected IBehaviorDispenseItem getBehaviorForItemStack(ItemStack var1) {
-		return (IBehaviorDispenseItem)dispenseBehaviorRegistry.getObject(var1.getItem());
+	/**
+	 * Returns the behavior for the given ItemStack.
+	 */
+	protected IBehaviorDispenseItem getBehaviorForItemStack(ItemStack par1ItemStack) {
+		return (IBehaviorDispenseItem)dispenseBehaviorRegistry.getObject(par1ItemStack.getItem());
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		boolean var6 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-		int var7 = var1.getBlockMetadata(var2, var3, var4);
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		boolean var6 = par1World.isBlockIndirectlyGettingPowered(par2, par3, par4) || par1World.isBlockIndirectlyGettingPowered(par2, par3 + 1, par4);
+		int var7 = par1World.getBlockMetadata(par2, par3, par4);
 		boolean var8 = (var7 & 8) != 0;
-		if(var6 && !var8) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-			var1.setBlockMetadata(var2, var3, var4, var7 | 8, 4);
-		} else if(!var6 && var8) {
-			var1.setBlockMetadata(var2, var3, var4, var7 & -9, 4);
-		}
-
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote) {
-			this.dispense(var1, var2, var3, var4);
-		}
-
-	}
-
-	public TileEntity createNewTileEntity(World var1) {
+
+		if (var6 && !var8) {
+			par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, var7 | 8, 4);
+		} else if (!var6 && var8) {
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, var7 & -9, 4);
+		}
+	}
+
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote) {
+			this.dispense(par1World, par2, par3, par4);
+		}
+	}
+
+	/**
+	 * Returns a new instance of a block's tile entity class. Called on placing the block.
+	 */
+	public TileEntity createNewTileEntity(World par1World) {
 		return new TileEntityDispenser();
 	}
 
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLivingBase var5, ItemStack var6) {
-		int var7 = BlockPistonBase.determineOrientation(var1, var2, var3, var4, var5);
-		var1.setBlockMetadata(var2, var3, var4, var7, 2);
-		if(var6.hasDisplayName()) {
-			((TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4)).setCustomName(var6.getDisplayName());
+	/**
+	 * Called when the block is placed in the world.
+	 */
+	public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLivingBase par5EntityLivingBase, ItemStack par6ItemStack) {
+		int var7 = BlockPistonBase.determineOrientation(par1World, par2, par3, par4, par5EntityLivingBase);
+		par1World.setBlockMetadataWithNotify(par2, par3, par4, var7, 2);
+
+		if (par6ItemStack.hasDisplayName()) {
+			((TileEntityDispenser)par1World.getBlockTileEntity(par2, par3, par4)).setCustomName(par6ItemStack.getDisplayName());
 		}
-
 	}
 
-	public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-		TileEntityDispenser var7 = (TileEntityDispenser)var1.getBlockTileEntity(var2, var3, var4);
-		if(var7 != null) {
-			for(int var8 = 0; var8 < var7.getSizeInventory(); ++var8) {
+	/**
+	 * Called on server worlds only when the block has been replaced by a different block ID, or the same block with a
+	 * different metadata value, but before the new metadata value is set. Args: World, x, y, z, old block ID, old metadata
+	 */
+	public void breakBlock(World par1World, int par2, int par3, int par4, int par5, int par6) {
+		TileEntityDispenser var7 = (TileEntityDispenser)par1World.getBlockTileEntity(par2, par3, par4);
+
+		if (var7 != null) {
+			for (int var8 = 0; var8 < var7.getSizeInventory(); ++var8) {
 				ItemStack var9 = var7.getStackInSlot(var8);
-				if(var9 != null) {
-					float var10 = this.b.nextFloat() * 0.8F + 0.1F;
-					float var11 = this.b.nextFloat() * 0.8F + 0.1F;
-					float var12 = this.b.nextFloat() * 0.8F + 0.1F;
-
-					while(var9.stackSize > 0) {
-						int var13 = this.b.nextInt(21) + 10;
-						if(var13 > var9.stackSize) {
+
+				if (var9 != null) {
+					float var10 = this.random.nextFloat() * 0.8F + 0.1F;
+					float var11 = this.random.nextFloat() * 0.8F + 0.1F;
+					float var12 = this.random.nextFloat() * 0.8F + 0.1F;
+
+					while (var9.stackSize > 0) {
+						int var13 = this.random.nextInt(21) + 10;
+
+						if (var13 > var9.stackSize) {
 							var13 = var9.stackSize;
 						}
 
 						var9.stackSize -= var13;
-						EntityItem var14 = new EntityItem(var1, (double)((float)var2 + var10), (double)((float)var3 + var11), (double)((float)var4 + var12), new ItemStack(var9.itemID, var13, var9.getItemDamage()));
-						if(var9.hasTagCompound()) {
+						EntityItem var14 = new EntityItem(par1World, (double)((float)par2 + var10), (double)((float)par3 + var11), (double)((float)par4 + var12), new ItemStack(var9.itemID, var13, var9.getItemDamage()));
+
+						if (var9.hasTagCompound()) {
 							var14.getEntityItem().setTagCompound((NBTTagCompound)var9.getTagCompound().copy());
 						}
 
 						float var15 = 0.05F;
-						var14.motionX = (double)((float)this.b.nextGaussian() * var15);
-						var14.motionY = (double)((float)this.b.nextGaussian() * var15 + 0.2F);
-						var14.motionZ = (double)((float)this.b.nextGaussian() * var15);
-						var1.spawnEntityInWorld(var14);
+						var14.motionX = (double)((float)this.random.nextGaussian() * var15);
+						var14.motionY = (double)((float)this.random.nextGaussian() * var15 + 0.2F);
+						var14.motionZ = (double)((float)this.random.nextGaussian() * var15);
+						par1World.spawnEntityInWorld(var14);
 					}
 				}
 			}
 
-			var1.func_96440_m(var2, var3, var4, var5);
+			par1World.func_96440_m(par2, par3, par4, par5);
 		}
 
-		super.breakBlock(var1, var2, var3, var4, var5, var6);
+		super.breakBlock(par1World, par2, par3, par4, par5, par6);
 	}
 
-	public static IPosition getIPositionFromBlockSource(IBlockSource var0) {
-		EnumFacing var1 = getFacing(var0.getBlockMetadata());
-		double var2 = var0.getX() + 0.7D * (double)var1.getFrontOffsetX();
-		double var4 = var0.getY() + 0.7D * (double)var1.getFrontOffsetY();
-		double var6 = var0.getZ() + 0.7D * (double)var1.getFrontOffsetZ();
+	public static IPosition getIPositionFromBlockSource(IBlockSource par0IBlockSource) {
+		EnumFacing var1 = getFacing(par0IBlockSource.getBlockMetadata());
+		double var2 = par0IBlockSource.getX() + 0.7D * (double)var1.getFrontOffsetX();
+		double var4 = par0IBlockSource.getY() + 0.7D * (double)var1.getFrontOffsetY();
+		double var6 = par0IBlockSource.getZ() + 0.7D * (double)var1.getFrontOffsetZ();
 		return new PositionImpl(var2, var4, var6);
 	}
 
-	public static EnumFacing getFacing(int var0) {
-		return EnumFacing.getFront(var0 & 7);
+	public static EnumFacing getFacing(int par0) {
+		return EnumFacing.getFront(par0 & 7);
 	}
 
+	/**
+	 * If this returns true, then comparators facing away from this block will use the value from
+	 * getComparatorInputOverride instead of the actual redstone signal strength.
+	 */
 	public boolean hasComparatorInputOverride() {
 		return true;
 	}
 
-	public int getComparatorInputOverride(World var1, int var2, int var3, int var4, int var5) {
-		return Container.calcRedstoneFromInventory((IInventory)var1.getBlockTileEntity(var2, var3, var4));
+	/**
+	 * If hasComparatorInputOverride returns true, the return value from this is used instead of the redstone signal
+	 * strength when this block inputs to a comparator.
+	 */
+	public int getComparatorInputOverride(World par1World, int par2, int par3, int par4, int par5) {
+		return Container.calcRedstoneFromInventory((IInventory)par1World.getBlockTileEntity(par2, par3, par4));
 	}
 }
