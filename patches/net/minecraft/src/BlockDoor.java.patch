--- net/minecraft/src/BlockDoor.java
+++ net/minecraft/src/BlockDoor.java
@@ -6,46 +6,53 @@
 	private Icon[] field_111044_a;
 	private Icon[] field_111043_b;
 
-	protected BlockDoor(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockDoor(int par1, Material par2Material) {
+		super(par1, par2Material);
 		float var3 = 0.5F;
 		float var4 = 1.0F;
 		this.setBlockBounds(0.5F - var3, 0.0F, 0.5F - var3, 0.5F + var3, var4, 0.5F + var3);
 	}
 
-	public Icon getIcon(int var1, int var2) {
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
 		return this.field_111043_b[0];
 	}
 
-	public Icon getBlockTexture(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(var5 != 1 && var5 != 0) {
-			int var6 = this.getFullMetadata(var1, var2, var3, var4);
+	/**
+	 * Retrieves the block texture to use based on the display side. Args: iBlockAccess, x, y, z, side
+	 */
+	public Icon getBlockTexture(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		if (par5 != 1 && par5 != 0) {
+			int var6 = this.getFullMetadata(par1IBlockAccess, par2, par3, par4);
 			int var7 = var6 & 3;
 			boolean var8 = (var6 & 4) != 0;
 			boolean var9 = false;
 			boolean var10 = (var6 & 8) != 0;
-			if(var8) {
-				if(var7 == 0 && var5 == 2) {
-					var9 = !var9;
-				} else if(var7 == 1 && var5 == 5) {
-					var9 = !var9;
-				} else if(var7 == 2 && var5 == 3) {
-					var9 = !var9;
-				} else if(var7 == 3 && var5 == 4) {
+
+			if (var8) {
+				if (var7 == 0 && par5 == 2) {
+					var9 = !var9;
+				} else if (var7 == 1 && par5 == 5) {
+					var9 = !var9;
+				} else if (var7 == 2 && par5 == 3) {
+					var9 = !var9;
+				} else if (var7 == 3 && par5 == 4) {
 					var9 = !var9;
 				}
 			} else {
-				if(var7 == 0 && var5 == 5) {
-					var9 = !var9;
-				} else if(var7 == 1 && var5 == 3) {
-					var9 = !var9;
-				} else if(var7 == 2 && var5 == 4) {
-					var9 = !var9;
-				} else if(var7 == 3 && var5 == 2) {
+				if (var7 == 0 && par5 == 5) {
+					var9 = !var9;
+				} else if (var7 == 1 && par5 == 3) {
+					var9 = !var9;
+				} else if (var7 == 2 && par5 == 4) {
+					var9 = !var9;
+				} else if (var7 == 3 && par5 == 2) {
 					var9 = !var9;
 				}
 
-				if((var6 & 16) != 0) {
+				if ((var6 & 16) != 0) {
 					var9 = !var9;
 				}
 			}
@@ -56,63 +63,91 @@
 		}
 	}
 
-	public void registerIcons(IconRegister var1) {
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
 		this.field_111044_a = new Icon[2];
 		this.field_111043_b = new Icon[2];
-		this.field_111044_a[0] = var1.registerIcon(this.getTextureName() + "_upper");
-		this.field_111043_b[0] = var1.registerIcon(this.getTextureName() + "_lower");
+		this.field_111044_a[0] = par1IconRegister.registerIcon(this.getTextureName() + "_upper");
+		this.field_111043_b[0] = par1IconRegister.registerIcon(this.getTextureName() + "_lower");
 		this.field_111044_a[1] = new IconFlipped(this.field_111044_a[0], true, false);
 		this.field_111043_b[1] = new IconFlipped(this.field_111043_b[0], true, false);
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = this.getFullMetadata(var1, var2, var3, var4);
+	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = this.getFullMetadata(par1IBlockAccess, par2, par3, par4);
 		return (var5 & 4) != 0;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 7;
 	}
 
-	public AxisAlignedBB getSelectedBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getSelectedBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		this.setDoorRotation(this.getFullMetadata(var1, var2, var3, var4));
-	}
-
-	public int getDoorOrientation(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.getFullMetadata(var1, var2, var3, var4) & 3;
-	}
-
-	public boolean isDoorOpen(IBlockAccess var1, int var2, int var3, int var4) {
-		return (this.getFullMetadata(var1, var2, var3, var4) & 4) != 0;
-	}
-
-	private void setDoorRotation(int var1) {
-		float var2 = 3.0F / 16.0F;
+	/**
+	 * Returns the bounding box of the wired rectangular prism to render.
+	 */
+	public AxisAlignedBB getSelectedBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
+		return super.getSelectedBoundingBoxFromPool(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
+		return super.getCollisionBoundingBoxFromPool(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Updates the blocks bounds based on its current state. Args: world, x, y, z
+	 */
+	public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		this.setDoorRotation(this.getFullMetadata(par1IBlockAccess, par2, par3, par4));
+	}
+
+	/**
+	 * Returns 0, 1, 2 or 3 depending on where the hinge is.
+	 */
+	public int getDoorOrientation(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		return this.getFullMetadata(par1IBlockAccess, par2, par3, par4) & 3;
+	}
+
+	public boolean isDoorOpen(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		return (this.getFullMetadata(par1IBlockAccess, par2, par3, par4) & 4) != 0;
+	}
+
+	private void setDoorRotation(int par1) {
+		float var2 = 0.1875F;
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 2.0F, 1.0F);
-		int var3 = var1 & 3;
-		boolean var4 = (var1 & 4) != 0;
-		boolean var5 = (var1 & 16) != 0;
-		if(var3 == 0) {
-			if(var4) {
-				if(!var5) {
+		int var3 = par1 & 3;
+		boolean var4 = (par1 & 4) != 0;
+		boolean var5 = (par1 & 16) != 0;
+
+		if (var3 == 0) {
+			if (var4) {
+				if (!var5) {
 					this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
 				} else {
 					this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
@@ -120,9 +155,9 @@
 			} else {
 				this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
 			}
-		} else if(var3 == 1) {
-			if(var4) {
-				if(!var5) {
+		} else if (var3 == 1) {
+			if (var4) {
+				if (!var5) {
 					this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 				} else {
 					this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
@@ -130,9 +165,9 @@
 			} else {
 				this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
 			}
-		} else if(var3 == 2) {
-			if(var4) {
-				if(!var5) {
+		} else if (var3 == 2) {
+			if (var4) {
+				if (!var5) {
 					this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
 				} else {
 					this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, var2);
@@ -140,9 +175,9 @@
 			} else {
 				this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 			}
-		} else if(var3 == 3) {
-			if(var4) {
-				if(!var5) {
+		} else if (var3 == 3) {
+			if (var4) {
+				if (!var5) {
 					this.setBlockBounds(0.0F, 0.0F, 0.0F, var2, 1.0F, 1.0F);
 				} else {
 					this.setBlockBounds(1.0F - var2, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
@@ -151,131 +186,171 @@
 				this.setBlockBounds(0.0F, 0.0F, 1.0F - var2, 1.0F, 1.0F, 1.0F);
 			}
 		}
-
-	}
-
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-	}
-
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-		if(this.blockMaterial == Material.iron) {
+	}
+
+	/**
+	 * Called when the block is clicked by a player. Args: x, y, z, entityPlayer
+	 */
+	public void onBlockClicked(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer) {}
+
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
+		if (this.blockMaterial == Material.iron) {
 			return true;
 		} else {
-			int var10 = this.getFullMetadata(var1, var2, var3, var4);
+			int var10 = this.getFullMetadata(par1World, par2, par3, par4);
 			int var11 = var10 & 7;
 			var11 ^= 4;
-			if((var10 & 8) == 0) {
-				var1.setBlockMetadata(var2, var3, var4, var11, 2);
-				var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+
+			if ((var10 & 8) == 0) {
+				par1World.setBlockMetadataWithNotify(par2, par3, par4, var11, 2);
+				par1World.markBlockRangeForRenderUpdate(par2, par3, par4, par2, par3, par4);
 			} else {
-				var1.setBlockMetadata(var2, var3 - 1, var4, var11, 2);
-				var1.markBlockRangeForRenderUpdate(var2, var3 - 1, var4, var2, var3, var4);
+				par1World.setBlockMetadataWithNotify(par2, par3 - 1, par4, var11, 2);
+				par1World.markBlockRangeForRenderUpdate(par2, par3 - 1, par4, par2, par3, par4);
 			}
 
-			var1.playAuxSFXAtEntity(var5, 1003, var2, var3, var4, 0);
+			par1World.playAuxSFXAtEntity(par5EntityPlayer, 1003, par2, par3, par4, 0);
 			return true;
 		}
 	}
 
-	public void onPoweredBlockChange(World var1, int var2, int var3, int var4, boolean var5) {
-		int var6 = this.getFullMetadata(var1, var2, var3, var4);
+	/**
+	 * A function to open a door.
+	 */
+	public void onPoweredBlockChange(World par1World, int par2, int par3, int par4, boolean par5) {
+		int var6 = this.getFullMetadata(par1World, par2, par3, par4);
 		boolean var7 = (var6 & 4) != 0;
-		if(var7 != var5) {
+
+		if (var7 != par5) {
 			int var8 = var6 & 7;
 			var8 ^= 4;
-			if((var6 & 8) == 0) {
-				var1.setBlockMetadata(var2, var3, var4, var8, 2);
-				var1.markBlockRangeForRenderUpdate(var2, var3, var4, var2, var3, var4);
+
+			if ((var6 & 8) == 0) {
+				par1World.setBlockMetadataWithNotify(par2, par3, par4, var8, 2);
+				par1World.markBlockRangeForRenderUpdate(par2, par3, par4, par2, par3, par4);
 			} else {
-				var1.setBlockMetadata(var2, var3 - 1, var4, var8, 2);
-				var1.markBlockRangeForRenderUpdate(var2, var3 - 1, var4, var2, var3, var4);
+				par1World.setBlockMetadataWithNotify(par2, par3 - 1, par4, var8, 2);
+				par1World.markBlockRangeForRenderUpdate(par2, par3 - 1, par4, par2, par3, par4);
 			}
 
-			var1.playAuxSFXAtEntity((EntityPlayer)null, 1003, var2, var3, var4, 0);
+			par1World.playAuxSFXAtEntity((EntityPlayer)null, 1003, par2, par3, par4, 0);
 		}
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+		if ((var6 & 8) == 0) {
 			boolean var7 = false;
-			if(var1.getBlockId(var2, var3 + 1, var4) != this.blockID) {
-				var1.setBlockToAir(var2, var3, var4);
+
+			if (par1World.getBlockId(par2, par3 + 1, par4) != this.blockID) {
+				par1World.setBlockToAir(par2, par3, par4);
 				var7 = true;
 			}
 
-			if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4)) {
-				var1.setBlockToAir(var2, var3, var4);
+			if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4)) {
+				par1World.setBlockToAir(par2, par3, par4);
 				var7 = true;
-				if(var1.getBlockId(var2, var3 + 1, var4) == this.blockID) {
-					var1.setBlockToAir(var2, var3 + 1, var4);
+
+				if (par1World.getBlockId(par2, par3 + 1, par4) == this.blockID) {
+					par1World.setBlockToAir(par2, par3 + 1, par4);
 				}
 			}
 
-			if(var7) {
-				if(!var1.isRemote) {
-					this.dropBlockAsItem(var1, var2, var3, var4, var6, 0);
+			if (var7) {
+				if (!par1World.isRemote) {
+					this.dropBlockAsItem(par1World, par2, par3, par4, var6, 0);
 				}
 			} else {
-				boolean var8 = var1.isBlockIndirectlyGettingPowered(var2, var3, var4) || var1.isBlockIndirectlyGettingPowered(var2, var3 + 1, var4);
-				if((var8 || var5 > 0 && Block.blocksList[var5].canProvidePower()) && var5 != this.blockID) {
-					this.onPoweredBlockChange(var1, var2, var3, var4, var8);
+				boolean var8 = par1World.isBlockIndirectlyGettingPowered(par2, par3, par4) || par1World.isBlockIndirectlyGettingPowered(par2, par3 + 1, par4);
+
+				if ((var8 || par5 > 0 && Block.blocksList[par5].canProvidePower()) && par5 != this.blockID) {
+					this.onPoweredBlockChange(par1World, par2, par3, par4, var8);
 				}
 			}
 		} else {
-			if(var1.getBlockId(var2, var3 - 1, var4) != this.blockID) {
-				var1.setBlockToAir(var2, var3, var4);
+			if (par1World.getBlockId(par2, par3 - 1, par4) != this.blockID) {
+				par1World.setBlockToAir(par2, par3, par4);
 			}
 
-			if(var5 > 0 && var5 != this.blockID) {
-				this.onNeighborBlockChange(var1, var2, var3 - 1, var4, var5);
+			if (par5 > 0 && par5 != this.blockID) {
+				this.onNeighborBlockChange(par1World, par2, par3 - 1, par4, par5);
 			}
 		}
-
-	}
-
-	public int idDropped(int var1, Random var2, int var3) {
-		return (var1 & 8) != 0 ? 0 : (this.blockMaterial == Material.iron ? Item.doorIron.itemID : Item.doorWood.itemID);
-	}
-
-	public MovingObjectPosition collisionRayTrace(World var1, int var2, int var3, int var4, Vec3 var5, Vec3 var6) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.collisionRayTrace(var1, var2, var3, var4, var5, var6);
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var3 >= 255 ? false : var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && super.canPlaceBlockAt(var1, var2, var3, var4) && super.canPlaceBlockAt(var1, var2, var3 + 1, var4);
-	}
-
+	}
+
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
+		return (par1 & 8) != 0 ? 0 : (this.blockMaterial == Material.iron ? Item.doorIron.itemID : Item.doorWood.itemID);
+	}
+
+	/**
+	 * Ray traces through the blocks collision from start vector to end vector returning a ray trace hit. Args: world, x,
+	 * y, z, startVec, endVec
+	 */
+	public MovingObjectPosition collisionRayTrace(World par1World, int par2, int par3, int par4, Vec3 par5Vec3, Vec3 par6Vec3) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
+		return super.collisionRayTrace(par1World, par2, par3, par4, par5Vec3, par6Vec3);
+	}
+
+	/**
+	 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
+	 */
+	public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4) {
+		return par3 >= 255 ? false : par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && super.canPlaceBlockAt(par1World, par2, par3, par4) && super.canPlaceBlockAt(par1World, par2, par3 + 1, par4);
+	}
+
+	/**
+	 * Returns the mobility information of the block, 0 = free, 1 = can't push but can move over, 2 = total immobility and
+	 * stop pistons
+	 */
 	public int getMobilityFlag() {
 		return 1;
 	}
 
-	public int getFullMetadata(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	/**
+	 * Returns the full metadata value created by combining the metadata of both blocks the door takes up.
+	 */
+	public int getFullMetadata(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
 		boolean var6 = (var5 & 8) != 0;
 		int var7;
 		int var8;
-		if(var6) {
-			var7 = var1.getBlockMetadata(var2, var3 - 1, var4);
+
+		if (var6) {
+			var7 = par1IBlockAccess.getBlockMetadata(par2, par3 - 1, par4);
 			var8 = var5;
 		} else {
 			var7 = var5;
-			var8 = var1.getBlockMetadata(var2, var3 + 1, var4);
+			var8 = par1IBlockAccess.getBlockMetadata(par2, par3 + 1, par4);
 		}
 
 		boolean var9 = (var8 & 1) != 0;
 		return var7 & 7 | (var6 ? 8 : 0) | (var9 ? 16 : 0);
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return this.blockMaterial == Material.iron ? Item.doorIron.itemID : Item.doorWood.itemID;
 	}
 
-	public void onBlockHarvested(World var1, int var2, int var3, int var4, int var5, EntityPlayer var6) {
-		if(var6.capabilities.isCreativeMode && (var5 & 8) != 0 && var1.getBlockId(var2, var3 - 1, var4) == this.blockID) {
-			var1.setBlockToAir(var2, var3 - 1, var4);
+	/**
+	 * Called when the block is attempted to be harvested
+	 */
+	public void onBlockHarvested(World par1World, int par2, int par3, int par4, int par5, EntityPlayer par6EntityPlayer) {
+		if (par6EntityPlayer.capabilities.isCreativeMode && (par5 & 8) != 0 && par1World.getBlockId(par2, par3 - 1, par4) == this.blockID) {
+			par1World.setBlockToAir(par2, par3 - 1, par4);
 		}
-
 	}
 }
