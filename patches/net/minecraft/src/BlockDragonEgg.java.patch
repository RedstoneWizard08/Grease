--- net/minecraft/src/BlockDragonEgg.java
+++ net/minecraft/src/BlockDragonEgg.java
@@ -3,106 +3,148 @@
 import java.util.Random;
 
 public class BlockDragonEgg extends Block {
-	public BlockDragonEgg(int var1) {
-		super(var1, Material.dragonEgg);
-		this.setBlockBounds(1.0F / 16.0F, 0.0F, 1.0F / 16.0F, 15.0F / 16.0F, 1.0F, 15.0F / 16.0F);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		this.fallIfPossible(var1, var2, var3, var4);
-	}
-
-	private void fallIfPossible(World var1, int var2, int var3, int var4) {
-		if(BlockSand.canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
+	public BlockDragonEgg(int par1) {
+		super(par1, Material.dragonEgg);
+		this.setBlockBounds(0.0625F, 0.0F, 0.0625F, 0.9375F, 1.0F, 0.9375F);
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+	}
+
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		this.fallIfPossible(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Checks if the dragon egg can fall down, and if so, makes it fall.
+	 */
+	private void fallIfPossible(World par1World, int par2, int par3, int par4) {
+		if (BlockSand.canFallBelow(par1World, par2, par3 - 1, par4) && par3 >= 0) {
 			byte var5 = 32;
-			if(!BlockSand.fallInstantly && var1.checkChunksExist(var2 - var5, var3 - var5, var4 - var5, var2 + var5, var3 + var5, var4 + var5)) {
-				EntityFallingSand var6 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID);
-				var1.spawnEntityInWorld(var6);
+
+			if (!BlockSand.fallInstantly && par1World.checkChunksExist(par2 - var5, par3 - var5, par4 - var5, par2 + var5, par3 + var5, par4 + var5)) {
+				EntityFallingSand var6 = new EntityFallingSand(par1World, (double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), this.blockID);
+				par1World.spawnEntityInWorld(var6);
 			} else {
-				var1.setBlockToAir(var2, var3, var4);
+				par1World.setBlockToAir(par2, par3, par4);
 
-				while(BlockSand.canFallBelow(var1, var2, var3 - 1, var4) && var3 > 0) {
-					--var3;
+				while (BlockSand.canFallBelow(par1World, par2, par3 - 1, par4) && par3 > 0) {
+					--par3;
 				}
 
-				if(var3 > 0) {
-					var1.setBlock(var2, var3, var4, this.blockID, 0, 2);
+				if (par3 > 0) {
+					par1World.setBlock(par2, par3, par4, this.blockID, 0, 2);
 				}
 			}
 		}
-
 	}
 
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-		this.teleportNearby(var1, var2, var3, var4);
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
+		this.teleportNearby(par1World, par2, par3, par4);
 		return true;
 	}
 
-	public void onBlockClicked(World var1, int var2, int var3, int var4, EntityPlayer var5) {
-		this.teleportNearby(var1, var2, var3, var4);
+	/**
+	 * Called when the block is clicked by a player. Args: x, y, z, entityPlayer
+	 */
+	public void onBlockClicked(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer) {
+		this.teleportNearby(par1World, par2, par3, par4);
 	}
 
-	private void teleportNearby(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			for(int var5 = 0; var5 < 1000; ++var5) {
-				int var6 = var2 + var1.s.nextInt(16) - var1.s.nextInt(16);
-				int var7 = var3 + var1.s.nextInt(8) - var1.s.nextInt(8);
-				int var8 = var4 + var1.s.nextInt(16) - var1.s.nextInt(16);
-				if(var1.getBlockId(var6, var7, var8) == 0) {
-					if(!var1.isRemote) {
-						var1.setBlock(var6, var7, var8, this.blockID, var1.getBlockMetadata(var2, var3, var4), 2);
-						var1.setBlockToAir(var2, var3, var4);
+	/**
+	 * Teleports the dragon egg somewhere else in a 31x19x31 area centered on the egg.
+	 */
+	private void teleportNearby(World par1World, int par2, int par3, int par4) {
+		if (par1World.getBlockId(par2, par3, par4) == this.blockID) {
+			for (int var5 = 0; var5 < 1000; ++var5) {
+				int var6 = par2 + par1World.rand.nextInt(16) - par1World.rand.nextInt(16);
+				int var7 = par3 + par1World.rand.nextInt(8) - par1World.rand.nextInt(8);
+				int var8 = par4 + par1World.rand.nextInt(16) - par1World.rand.nextInt(16);
+
+				if (par1World.getBlockId(var6, var7, var8) == 0) {
+					if (!par1World.isRemote) {
+						par1World.setBlock(var6, var7, var8, this.blockID, par1World.getBlockMetadata(par2, par3, par4), 2);
+						par1World.setBlockToAir(par2, par3, par4);
 					} else {
 						short var9 = 128;
 
-						for(int var10 = 0; var10 < var9; ++var10) {
-							double var11 = var1.s.nextDouble();
-							float var13 = (var1.s.nextFloat() - 0.5F) * 0.2F;
-							float var14 = (var1.s.nextFloat() - 0.5F) * 0.2F;
-							float var15 = (var1.s.nextFloat() - 0.5F) * 0.2F;
-							double var16 = (double)var6 + (double)(var2 - var6) * var11 + (var1.s.nextDouble() - 0.5D) * 1.0D + 0.5D;
-							double var18 = (double)var7 + (double)(var3 - var7) * var11 + var1.s.nextDouble() * 1.0D - 0.5D;
-							double var20 = (double)var8 + (double)(var4 - var8) * var11 + (var1.s.nextDouble() - 0.5D) * 1.0D + 0.5D;
-							var1.spawnParticle("portal", var16, var18, var20, (double)var13, (double)var14, (double)var15);
+						for (int var10 = 0; var10 < var9; ++var10) {
+							double var11 = par1World.rand.nextDouble();
+							float var13 = (par1World.rand.nextFloat() - 0.5F) * 0.2F;
+							float var14 = (par1World.rand.nextFloat() - 0.5F) * 0.2F;
+							float var15 = (par1World.rand.nextFloat() - 0.5F) * 0.2F;
+							double var16 = (double)var6 + (double)(par2 - var6) * var11 + (par1World.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+							double var18 = (double)var7 + (double)(par3 - var7) * var11 + par1World.rand.nextDouble() * 1.0D - 0.5D;
+							double var20 = (double)var8 + (double)(par4 - var8) * var11 + (par1World.rand.nextDouble() - 0.5D) * 1.0D + 0.5D;
+							par1World.spawnParticle("portal", var16, var18, var20, (double)var13, (double)var14, (double)var15);
 						}
 					}
 
 					return;
 				}
 			}
-
 		}
 	}
 
-	public int tickRate(World var1) {
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 5;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
+	/**
+	 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
+	 * coordinates.  Args: blockAccess, x, y, z, side
+	 */
+	public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
 		return true;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 27;
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return 0;
 	}
 }
