--- net/minecraft/src/BlockEndPortalFrame.java
+++ net/minecraft/src/BlockEndPortalFrame.java
@@ -7,67 +7,106 @@
 	private Icon field_94400_a;
 	private Icon field_94399_b;
 
-	public BlockEndPortalFrame(int var1) {
-		super(var1, Material.rock);
-	}
-
-	public Icon getIcon(int var1, int var2) {
-		return var1 == 1 ? this.field_94400_a : (var1 == 0 ? Block.whiteStone.getBlockTextureFromSide(var1) : this.blockIcon);
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.blockIcon = var1.registerIcon(this.getTextureName() + "_side");
-		this.field_94400_a = var1.registerIcon(this.getTextureName() + "_top");
-		this.field_94399_b = var1.registerIcon(this.getTextureName() + "_eye");
+	public BlockEndPortalFrame(int par1) {
+		super(par1, Material.rock);
+	}
+
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par1 == 1 ? this.field_94400_a : (par1 == 0 ? Block.whiteStone.getBlockTextureFromSide(par1) : this.blockIcon);
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.blockIcon = par1IconRegister.registerIcon(this.getTextureName() + "_side");
+		this.field_94400_a = par1IconRegister.registerIcon(this.getTextureName() + "_top");
+		this.field_94399_b = par1IconRegister.registerIcon(this.getTextureName() + "_eye");
 	}
 
 	public Icon func_94398_p() {
 		return this.field_94399_b;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 26;
 	}
 
+	/**
+	 * Sets the block's bounds for rendering it as an item
+	 */
 	public void setBlockBoundsForItemRender() {
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 13.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.8125F, 1.0F);
 	}
 
-	public void addCollisionBoxesToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 13.0F / 16.0F, 1.0F);
-		super.addCollisionBoxesToList(var1, var2, var3, var4, var5, var6, var7);
-		int var8 = var1.getBlockMetadata(var2, var3, var4);
-		if(isEnderEyeInserted(var8)) {
-			this.setBlockBounds(5.0F / 16.0F, 13.0F / 16.0F, 5.0F / 16.0F, 11.0F / 16.0F, 1.0F, 11.0F / 16.0F);
-			super.addCollisionBoxesToList(var1, var2, var3, var4, var5, var6, var7);
+	/**
+	 * Adds all intersecting collision boxes to a list. (Be sure to only add boxes to the list if they intersect the mask.)
+	 * Parameters: World, X, Y, Z, mask, list, colliding entity
+	 */
+	public void addCollisionBoxesToList(World par1World, int par2, int par3, int par4, AxisAlignedBB par5AxisAlignedBB, List par6List, Entity par7Entity) {
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.8125F, 1.0F);
+		super.addCollisionBoxesToList(par1World, par2, par3, par4, par5AxisAlignedBB, par6List, par7Entity);
+		int var8 = par1World.getBlockMetadata(par2, par3, par4);
+
+		if (isEnderEyeInserted(var8)) {
+			this.setBlockBounds(0.3125F, 0.8125F, 0.3125F, 0.6875F, 1.0F, 0.6875F);
+			super.addCollisionBoxesToList(par1World, par2, par3, par4, par5AxisAlignedBB, par6List, par7Entity);
 		}
 
 		this.setBlockBoundsForItemRender();
 	}
 
-	public static boolean isEnderEyeInserted(int var0) {
-		return (var0 & 4) != 0;
+	/**
+	 * checks if an ender eye has been inserted into the frame block. parameters: metadata
+	 */
+	public static boolean isEnderEyeInserted(int par0) {
+		return (par0 & 4) != 0;
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
 		return 0;
 	}
 
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLivingBase var5, ItemStack var6) {
-		int var7 = ((MathHelper.floor_double((double)(var5.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3) + 2) % 4;
-		var1.setBlockMetadata(var2, var3, var4, var7, 2);
+	/**
+	 * Called when the block is placed in the world.
+	 */
+	public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLivingBase par5EntityLivingBase, ItemStack par6ItemStack) {
+		int var7 = ((MathHelper.floor_double((double)(par5EntityLivingBase.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3) + 2) % 4;
+		par1World.setBlockMetadataWithNotify(par2, par3, par4, var7, 2);
 	}
 
+	/**
+	 * If this returns true, then comparators facing away from this block will use the value from
+	 * getComparatorInputOverride instead of the actual redstone signal strength.
+	 */
 	public boolean hasComparatorInputOverride() {
 		return true;
 	}
 
-	public int getComparatorInputOverride(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
+	/**
+	 * If hasComparatorInputOverride returns true, the return value from this is used instead of the redstone signal
+	 * strength when this block inputs to a comparator.
+	 */
+	public int getComparatorInputOverride(World par1World, int par2, int par3, int par4, int par5) {
+		int var6 = par1World.getBlockMetadata(par2, par3, par4);
 		return isEnderEyeInserted(var6) ? 15 : 0;
 	}
 }
