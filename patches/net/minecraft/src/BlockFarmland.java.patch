--- net/minecraft/src/BlockFarmland.java
+++ net/minecraft/src/BlockFarmland.java
@@ -6,61 +6,84 @@
 	private Icon field_94441_a;
 	private Icon field_94440_b;
 
-	protected BlockFarmland(int var1) {
-		super(var1, Material.ground);
+	protected BlockFarmland(int par1) {
+		super(par1, Material.ground);
 		this.setTickRandomly(true);
-		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 15.0F / 16.0F, 1.0F);
+		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.9375F, 1.0F);
 		this.setLightOpacity(255);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		return AxisAlignedBB.getAABBPool().getAABB((double)(var2 + 0), (double)(var3 + 0), (double)(var4 + 0), (double)(var2 + 1), (double)(var3 + 1), (double)(var4 + 1));
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		return AxisAlignedBB.getAABBPool().getAABB((double)(par2 + 0), (double)(par3 + 0), (double)(par4 + 0), (double)(par2 + 1), (double)(par3 + 1), (double)(par4 + 1));
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		return var1 == 1 ? (var2 > 0 ? this.field_94441_a : this.field_94440_b) : Block.dirt.getBlockTextureFromSide(var1);
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par1 == 1 ? (par2 > 0 ? this.field_94441_a : this.field_94440_b) : Block.dirt.getBlockTextureFromSide(par1);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!this.isWaterNearby(var1, var2, var3, var4) && !var1.canLightningStrikeAt(var2, var3 + 1, var4)) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 > 0) {
-				var1.setBlockMetadata(var2, var3, var4, var6 - 1, 2);
-			} else if(!this.isCropsNearby(var1, var2, var3, var4)) {
-				var1.setBlock(var2, var3, var4, Block.dirt.blockID);
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!this.isWaterNearby(par1World, par2, par3, par4) && !par1World.canLightningStrikeAt(par2, par3 + 1, par4)) {
+			int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+			if (var6 > 0) {
+				par1World.setBlockMetadataWithNotify(par2, par3, par4, var6 - 1, 2);
+			} else if (!this.isCropsNearby(par1World, par2, par3, par4)) {
+				par1World.setBlock(par2, par3, par4, Block.dirt.blockID);
 			}
 		} else {
-			var1.setBlockMetadata(var2, var3, var4, 7, 2);
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, 7, 2);
 		}
-
 	}
 
-	public void onFallenUpon(World var1, int var2, int var3, int var4, Entity var5, float var6) {
-		if(!var1.isRemote && var1.s.nextFloat() < var6 - 0.5F) {
-			if(!(var5 instanceof EntityPlayer) && !var1.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
+	/**
+	 * Block's chance to react to an entity falling on it.
+	 */
+	public void onFallenUpon(World par1World, int par2, int par3, int par4, Entity par5Entity, float par6) {
+		if (!par1World.isRemote && par1World.rand.nextFloat() < par6 - 0.5F) {
+			if (!(par5Entity instanceof EntityPlayer) && !par1World.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
 				return;
 			}
 
-			var1.setBlock(var2, var3, var4, Block.dirt.blockID);
+			par1World.setBlock(par2, par3, par4, Block.dirt.blockID);
 		}
-
 	}
 
-	private boolean isCropsNearby(World var1, int var2, int var3, int var4) {
+	/**
+	 * returns true if there is at least one cropblock nearby (x-1 to x+1, y+1, z-1 to z+1)
+	 */
+	private boolean isCropsNearby(World par1World, int par2, int par3, int par4) {
 		byte var5 = 0;
 
-		for(int var6 = var2 - var5; var6 <= var2 + var5; ++var6) {
-			for(int var7 = var4 - var5; var7 <= var4 + var5; ++var7) {
-				int var8 = var1.getBlockId(var6, var3 + 1, var7);
-				if(var8 == Block.crops.blockID || var8 == Block.melonStem.blockID || var8 == Block.pumpkinStem.blockID || var8 == Block.potato.blockID || var8 == Block.carrot.blockID) {
+		for (int var6 = par2 - var5; var6 <= par2 + var5; ++var6) {
+			for (int var7 = par4 - var5; var7 <= par4 + var5; ++var7) {
+				int var8 = par1World.getBlockId(var6, par3 + 1, var7);
+
+				if (var8 == Block.crops.blockID || var8 == Block.melonStem.blockID || var8 == Block.pumpkinStem.blockID || var8 == Block.potato.blockID || var8 == Block.carrot.blockID) {
 					return true;
 				}
 			}
@@ -69,11 +92,14 @@
 		return false;
 	}
 
-	private boolean isWaterNearby(World var1, int var2, int var3, int var4) {
-		for(int var5 = var2 - 4; var5 <= var2 + 4; ++var5) {
-			for(int var6 = var3; var6 <= var3 + 1; ++var6) {
-				for(int var7 = var4 - 4; var7 <= var4 + 4; ++var7) {
-					if(var1.getBlockMaterial(var5, var6, var7) == Material.water) {
+	/**
+	 * returns true if there's water nearby (x-4 to x+4, y to y+1, k-4 to k+4)
+	 */
+	private boolean isWaterNearby(World par1World, int par2, int par3, int par4) {
+		for (int var5 = par2 - 4; var5 <= par2 + 4; ++var5) {
+			for (int var6 = par3; var6 <= par3 + 1; ++var6) {
+				for (int var7 = par4 - 4; var7 <= par4 + 4; ++var7) {
+					if (par1World.getBlockMaterial(var5, var6, var7) == Material.water) {
 						return true;
 					}
 				}
@@ -83,25 +109,39 @@
 		return false;
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		super.onNeighborBlockChange(var1, var2, var3, var4, var5);
-		Material var6 = var1.getBlockMaterial(var2, var3 + 1, var4);
-		if(var6.isSolid()) {
-			var1.setBlock(var2, var3, var4, Block.dirt.blockID);
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		super.onNeighborBlockChange(par1World, par2, par3, par4, par5);
+		Material var6 = par1World.getBlockMaterial(par2, par3 + 1, par4);
+
+		if (var6.isSolid()) {
+			par1World.setBlock(par2, par3, par4, Block.dirt.blockID);
 		}
-
-	}
-
-	public int idDropped(int var1, Random var2, int var3) {
-		return Block.dirt.idDropped(0, var2, var3);
-	}
-
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	}
+
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
+		return Block.dirt.idDropped(0, par2Random, par3);
+	}
+
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return Block.dirt.blockID;
 	}
 
-	public void registerIcons(IconRegister var1) {
-		this.field_94441_a = var1.registerIcon(this.getTextureName() + "_wet");
-		this.field_94440_b = var1.registerIcon(this.getTextureName() + "_dry");
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.field_94441_a = par1IconRegister.registerIcon(this.getTextureName() + "_wet");
+		this.field_94440_b = par1IconRegister.registerIcon(this.getTextureName() + "_dry");
 	}
 }
