--- net/minecraft/src/BlockFire.java
+++ net/minecraft/src/BlockFire.java
@@ -3,15 +3,26 @@
 import java.util.Random;
 
 public class BlockFire extends Block {
+
+	/** The chance this block will encourage nearby blocks to catch on fire */
 	private int[] chanceToEncourageFire = new int[256];
+
+	/**
+	 * This is an array indexed by block ID the larger the number in the array the more likely a block type will catch
+	 * fires
+	 */
 	private int[] abilityToCatchFire = new int[256];
 	private Icon[] iconArray;
 
-	protected BlockFire(int var1) {
-		super(var1, Material.fire);
+	protected BlockFire(int par1) {
+		super(par1, Material.fire);
 		this.setTickRandomly(true);
 	}
 
+	/**
+	 * This method is called on a block after all other blocks gets already created. You can use it to reference and
+	 * configure something on the block that needs the others ones.
+	 */
 	public void initializeBlock() {
 		this.setBurnRate(Block.planks.blockID, 5, 20);
 		this.setBurnRate(Block.woodDoubleSlab.blockID, 5, 20);
@@ -32,107 +43,141 @@
 		this.setBurnRate(Block.hay.blockID, 60, 20);
 	}
 
-	private void setBurnRate(int var1, int var2, int var3) {
-		this.chanceToEncourageFire[var1] = var2;
-		this.abilityToCatchFire[var1] = var3;
+	/**
+	 * Sets the burn rate for a block. The larger abilityToCatchFire the more easily it will catch. The larger
+	 * chanceToEncourageFire the faster it will burn and spread to other blocks. Args: blockID, chanceToEncourageFire,
+	 * abilityToCatchFire
+	 */
+	private void setBurnRate(int par1, int par2, int par3) {
+		this.chanceToEncourageFire[par1] = par2;
+		this.abilityToCatchFire[par1] = par3;
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
 		return null;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 3;
 	}
 
-	public int quantityDropped(Random var1) {
+	/**
+	 * Returns the quantity of items to drop on block destruction.
+	 */
+	public int quantityDropped(Random par1Random) {
 		return 0;
 	}
 
-	public int tickRate(World var1) {
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 30;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.getGameRules().getGameRuleBooleanValue("doFireTick")) {
-			boolean var6 = var1.getBlockId(var2, var3 - 1, var4) == Block.netherrack.blockID;
-			if(var1.provider instanceof WorldProviderEnd && var1.getBlockId(var2, var3 - 1, var4) == Block.bedrock.blockID) {
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (par1World.getGameRules().getGameRuleBooleanValue("doFireTick")) {
+			boolean var6 = par1World.getBlockId(par2, par3 - 1, par4) == Block.netherrack.blockID;
+
+			if (par1World.provider instanceof WorldProviderEnd && par1World.getBlockId(par2, par3 - 1, par4) == Block.bedrock.blockID) {
 				var6 = true;
 			}
 
-			if(!this.canPlaceBlockAt(var1, var2, var3, var4)) {
-				var1.setBlockToAir(var2, var3, var4);
+			if (!this.canPlaceBlockAt(par1World, par2, par3, par4)) {
+				par1World.setBlockToAir(par2, par3, par4);
 			}
 
-			if(var6 || !var1.isRaining() || !var1.canLightningStrikeAt(var2, var3, var4) && !var1.canLightningStrikeAt(var2 - 1, var3, var4) && !var1.canLightningStrikeAt(var2 + 1, var3, var4) && !var1.canLightningStrikeAt(var2, var3, var4 - 1) && !var1.canLightningStrikeAt(var2, var3, var4 + 1)) {
-				int var7 = var1.getBlockMetadata(var2, var3, var4);
-				if(var7 < 15) {
-					var1.setBlockMetadata(var2, var3, var4, var7 + var5.nextInt(3) / 2, 4);
+			if (!var6 && par1World.isRaining() && (par1World.canLightningStrikeAt(par2, par3, par4) || par1World.canLightningStrikeAt(par2 - 1, par3, par4) || par1World.canLightningStrikeAt(par2 + 1, par3, par4) || par1World.canLightningStrikeAt(par2, par3, par4 - 1) || par1World.canLightningStrikeAt(par2, par3, par4 + 1))) {
+				par1World.setBlockToAir(par2, par3, par4);
+			} else {
+				int var7 = par1World.getBlockMetadata(par2, par3, par4);
+
+				if (var7 < 15) {
+					par1World.setBlockMetadataWithNotify(par2, par3, par4, var7 + par5Random.nextInt(3) / 2, 4);
 				}
 
-				var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1) + var5.nextInt(10));
-				if(!var6 && !this.canNeighborBurn(var1, var2, var3, var4)) {
-					if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || var7 > 3) {
-						var1.setBlockToAir(var2, var3, var4);
+				par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World) + par5Random.nextInt(10));
+
+				if (!var6 && !this.canNeighborBurn(par1World, par2, par3, par4)) {
+					if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) || var7 > 3) {
+						par1World.setBlockToAir(par2, par3, par4);
 					}
-
-				} else if(!var6 && !this.canBlockCatchFire(var1, var2, var3 - 1, var4) && var7 == 15 && var5.nextInt(4) == 0) {
-					var1.setBlockToAir(var2, var3, var4);
+				} else if (!var6 && !this.canBlockCatchFire(par1World, par2, par3 - 1, par4) && var7 == 15 && par5Random.nextInt(4) == 0) {
+					par1World.setBlockToAir(par2, par3, par4);
 				} else {
-					boolean var8 = var1.isBlockHighHumidity(var2, var3, var4);
+					boolean var8 = par1World.isBlockHighHumidity(par2, par3, par4);
 					byte var9 = 0;
-					if(var8) {
+
+					if (var8) {
 						var9 = -50;
 					}
 
-					this.tryToCatchBlockOnFire(var1, var2 + 1, var3, var4, 300 + var9, var5, var7);
-					this.tryToCatchBlockOnFire(var1, var2 - 1, var3, var4, 300 + var9, var5, var7);
-					this.tryToCatchBlockOnFire(var1, var2, var3 - 1, var4, 250 + var9, var5, var7);
-					this.tryToCatchBlockOnFire(var1, var2, var3 + 1, var4, 250 + var9, var5, var7);
-					this.tryToCatchBlockOnFire(var1, var2, var3, var4 - 1, 300 + var9, var5, var7);
-					this.tryToCatchBlockOnFire(var1, var2, var3, var4 + 1, 300 + var9, var5, var7);
+					this.tryToCatchBlockOnFire(par1World, par2 + 1, par3, par4, 300 + var9, par5Random, var7);
+					this.tryToCatchBlockOnFire(par1World, par2 - 1, par3, par4, 300 + var9, par5Random, var7);
+					this.tryToCatchBlockOnFire(par1World, par2, par3 - 1, par4, 250 + var9, par5Random, var7);
+					this.tryToCatchBlockOnFire(par1World, par2, par3 + 1, par4, 250 + var9, par5Random, var7);
+					this.tryToCatchBlockOnFire(par1World, par2, par3, par4 - 1, 300 + var9, par5Random, var7);
+					this.tryToCatchBlockOnFire(par1World, par2, par3, par4 + 1, 300 + var9, par5Random, var7);
 
-					for(int var10 = var2 - 1; var10 <= var2 + 1; ++var10) {
-						for(int var11 = var4 - 1; var11 <= var4 + 1; ++var11) {
-							for(int var12 = var3 - 1; var12 <= var3 + 4; ++var12) {
-								if(var10 != var2 || var12 != var3 || var11 != var4) {
+					for (int var10 = par2 - 1; var10 <= par2 + 1; ++var10) {
+						for (int var11 = par4 - 1; var11 <= par4 + 1; ++var11) {
+							for (int var12 = par3 - 1; var12 <= par3 + 4; ++var12) {
+								if (var10 != par2 || var12 != par3 || var11 != par4) {
 									int var13 = 100;
-									if(var12 > var3 + 1) {
-										var13 += (var12 - (var3 + 1)) * 100;
+
+									if (var12 > par3 + 1) {
+										var13 += (var12 - (par3 + 1)) * 100;
 									}
 
-									int var14 = this.getChanceOfNeighborsEncouragingFire(var1, var10, var12, var11);
-									if(var14 > 0) {
-										int var15 = (var14 + 40 + var1.difficultySetting * 7) / (var7 + 30);
-										if(var8) {
+									int var14 = this.getChanceOfNeighborsEncouragingFire(par1World, var10, var12, var11);
+
+									if (var14 > 0) {
+										int var15 = (var14 + 40 + par1World.difficultySetting * 7) / (var7 + 30);
+
+										if (var8) {
 											var15 /= 2;
 										}
 
-										if(var15 > 0 && var5.nextInt(var13) <= var15 && (!var1.isRaining() || !var1.canLightningStrikeAt(var10, var12, var11)) && !var1.canLightningStrikeAt(var10 - 1, var12, var4) && !var1.canLightningStrikeAt(var10 + 1, var12, var11) && !var1.canLightningStrikeAt(var10, var12, var11 - 1) && !var1.canLightningStrikeAt(var10, var12, var11 + 1)) {
-											int var16 = var7 + var5.nextInt(5) / 4;
-											if(var16 > 15) {
+										if (var15 > 0 && par5Random.nextInt(var13) <= var15 && (!par1World.isRaining() || !par1World.canLightningStrikeAt(var10, var12, var11)) && !par1World.canLightningStrikeAt(var10 - 1, var12, par4) && !par1World.canLightningStrikeAt(var10 + 1, var12, var11) && !par1World.canLightningStrikeAt(var10, var12, var11 - 1) && !par1World.canLightningStrikeAt(var10, var12, var11 + 1)) {
+											int var16 = var7 + par5Random.nextInt(5) / 4;
+
+											if (var16 > 15) {
 												var16 = 15;
 											}
 
-											var1.setBlock(var10, var12, var11, this.blockID, var16, 3);
+											par1World.setBlock(var10, var12, var11, this.blockID, var16, 3);
 										}
 									}
 								}
 							}
 						}
 					}
-
 				}
-			} else {
-				var1.setBlockToAir(var2, var3, var4);
 			}
 		}
 	}
@@ -141,155 +186,194 @@
 		return false;
 	}
 
-	private void tryToCatchBlockOnFire(World var1, int var2, int var3, int var4, int var5, Random var6, int var7) {
-		int var8 = this.abilityToCatchFire[var1.getBlockId(var2, var3, var4)];
-		if(var6.nextInt(var5) < var8) {
-			boolean var9 = var1.getBlockId(var2, var3, var4) == Block.tnt.blockID;
-			if(var6.nextInt(var7 + 10) < 5 && !var1.canLightningStrikeAt(var2, var3, var4)) {
-				int var10 = var7 + var6.nextInt(5) / 4;
-				if(var10 > 15) {
+	private void tryToCatchBlockOnFire(World par1World, int par2, int par3, int par4, int par5, Random par6Random, int par7) {
+		int var8 = this.abilityToCatchFire[par1World.getBlockId(par2, par3, par4)];
+
+		if (par6Random.nextInt(par5) < var8) {
+			boolean var9 = par1World.getBlockId(par2, par3, par4) == Block.tnt.blockID;
+
+			if (par6Random.nextInt(par7 + 10) < 5 && !par1World.canLightningStrikeAt(par2, par3, par4)) {
+				int var10 = par7 + par6Random.nextInt(5) / 4;
+
+				if (var10 > 15) {
 					var10 = 15;
 				}
 
-				var1.setBlock(var2, var3, var4, this.blockID, var10, 3);
+				par1World.setBlock(par2, par3, par4, this.blockID, var10, 3);
 			} else {
-				var1.setBlockToAir(var2, var3, var4);
+				par1World.setBlockToAir(par2, par3, par4);
 			}
 
-			if(var9) {
-				Block.tnt.onBlockDestroyedByPlayer(var1, var2, var3, var4, 1);
+			if (var9) {
+				Block.tnt.onBlockDestroyedByPlayer(par1World, par2, par3, par4, 1);
 			}
 		}
-
-	}
-
-	private boolean canNeighborBurn(World var1, int var2, int var3, int var4) {
-		return this.canBlockCatchFire(var1, var2 + 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2 - 1, var3, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 - 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3 + 1, var4) ? true : (this.canBlockCatchFire(var1, var2, var3, var4 - 1) ? true : this.canBlockCatchFire(var1, var2, var3, var4 + 1)))));
-	}
-
-	private int getChanceOfNeighborsEncouragingFire(World var1, int var2, int var3, int var4) {
+	}
+
+	/**
+	 * Returns true if at least one block next to this one can burn.
+	 */
+	private boolean canNeighborBurn(World par1World, int par2, int par3, int par4) {
+		return this.canBlockCatchFire(par1World, par2 + 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2 - 1, par3, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 - 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3 + 1, par4) ? true : (this.canBlockCatchFire(par1World, par2, par3, par4 - 1) ? true : this.canBlockCatchFire(par1World, par2, par3, par4 + 1)))));
+	}
+
+	/**
+	 * Gets the highest chance of a neighbor block encouraging this block to catch fire
+	 */
+	private int getChanceOfNeighborsEncouragingFire(World par1World, int par2, int par3, int par4) {
 		byte var5 = 0;
-		if(!var1.isAirBlock(var2, var3, var4)) {
+
+		if (!par1World.isAirBlock(par2, par3, par4)) {
 			return 0;
 		} else {
-			int var6 = this.getChanceToEncourageFire(var1, var2 + 1, var3, var4, var5);
-			var6 = this.getChanceToEncourageFire(var1, var2 - 1, var3, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 - 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3 + 1, var4, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 - 1, var6);
-			var6 = this.getChanceToEncourageFire(var1, var2, var3, var4 + 1, var6);
+			int var6 = this.getChanceToEncourageFire(par1World, par2 + 1, par3, par4, var5);
+			var6 = this.getChanceToEncourageFire(par1World, par2 - 1, par3, par4, var6);
+			var6 = this.getChanceToEncourageFire(par1World, par2, par3 - 1, par4, var6);
+			var6 = this.getChanceToEncourageFire(par1World, par2, par3 + 1, par4, var6);
+			var6 = this.getChanceToEncourageFire(par1World, par2, par3, par4 - 1, var6);
+			var6 = this.getChanceToEncourageFire(par1World, par2, par3, par4 + 1, var6);
 			return var6;
 		}
 	}
 
+	/**
+	 * Returns if this block is collidable (only used by Fire). Args: x, y, z
+	 */
 	public boolean isCollidable() {
 		return false;
 	}
 
-	public boolean canBlockCatchFire(IBlockAccess var1, int var2, int var3, int var4) {
-		return this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)] > 0;
-	}
-
-	public int getChanceToEncourageFire(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.chanceToEncourageFire[var1.getBlockId(var2, var3, var4)];
-		return var6 > var5 ? var6 : var5;
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) || this.canNeighborBurn(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-			var1.setBlockToAir(var2, var3, var4);
+	/**
+	 * Checks the specified block coordinate to see if it can catch fire.  Args: blockAccess, x, y, z
+	 */
+	public boolean canBlockCatchFire(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		return this.chanceToEncourageFire[par1IBlockAccess.getBlockId(par2, par3, par4)] > 0;
+	}
+
+	/**
+	 * Retrieves a specified block's chance to encourage their neighbors to burn and if the number is greater than the
+	 * current number passed in it will return its number instead of the passed in one.  Args: world, x, y, z,
+	 * curChanceToEncourageFire
+	 */
+	public int getChanceToEncourageFire(World par1World, int par2, int par3, int par4, int par5) {
+		int var6 = this.chanceToEncourageFire[par1World.getBlockId(par2, par3, par4)];
+		return var6 > par5 ? var6 : par5;
+	}
+
+	/**
+	 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
+	 */
+	public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4) {
+		return par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) || this.canNeighborBurn(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !this.canNeighborBurn(par1World, par2, par3, par4)) {
+			par1World.setBlockToAir(par2, par3, par4);
 		}
-
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.provider.dimensionId > 0 || var1.getBlockId(var2, var3 - 1, var4) != Block.obsidian.blockID || !Block.portal.tryToCreatePortal(var1, var2, var3, var4)) {
-			if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !this.canNeighborBurn(var1, var2, var3, var4)) {
-				var1.setBlockToAir(var2, var3, var4);
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		if (par1World.provider.dimensionId > 0 || par1World.getBlockId(par2, par3 - 1, par4) != Block.obsidian.blockID || !Block.portal.tryToCreatePortal(par1World, par2, par3, par4)) {
+			if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !this.canNeighborBurn(par1World, par2, par3, par4)) {
+				par1World.setBlockToAir(par2, par3, par4);
 			} else {
-				var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1) + var1.s.nextInt(10));
+				par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World) + par1World.rand.nextInt(10));
 			}
 		}
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var5.nextInt(24) == 0) {
-			var1.playSound((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "fire.fire", 1.0F + var5.nextFloat(), var5.nextFloat() * 0.7F + 0.3F, false);
+	/**
+	 * A randomly called display update to be able to add particles or other items for display
+	 */
+	public void randomDisplayTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (par5Random.nextInt(24) == 0) {
+			par1World.playSound((double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), "fire.fire", 1.0F + par5Random.nextFloat(), par5Random.nextFloat() * 0.7F + 0.3F, false);
 		}
 
 		int var6;
 		float var7;
 		float var8;
 		float var9;
-		if(!var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !Block.fire.canBlockCatchFire(var1, var2, var3 - 1, var4)) {
-			if(Block.fire.canBlockCatchFire(var1, var2 - 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2 + 1, var3, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)(var2 + 1) - var5.nextFloat() * 0.1F;
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 - 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)var4 + var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3, var4 + 1)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)var3 + var5.nextFloat();
-					var9 = (float)(var4 + 1) - var5.nextFloat() * 0.1F;
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
-				}
-			}
-
-			if(Block.fire.canBlockCatchFire(var1, var2, var3 + 1, var4)) {
-				for(var6 = 0; var6 < 2; ++var6) {
-					var7 = (float)var2 + var5.nextFloat();
-					var8 = (float)(var3 + 1) - var5.nextFloat() * 0.1F;
-					var9 = (float)var4 + var5.nextFloat();
-					var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+
+		if (!par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !Block.fire.canBlockCatchFire(par1World, par2, par3 - 1, par4)) {
+			if (Block.fire.canBlockCatchFire(par1World, par2 - 1, par3, par4)) {
+				for (var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)par2 + par5Random.nextFloat() * 0.1F;
+					var8 = (float)par3 + par5Random.nextFloat();
+					var9 = (float)par4 + par5Random.nextFloat();
+					par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if (Block.fire.canBlockCatchFire(par1World, par2 + 1, par3, par4)) {
+				for (var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)(par2 + 1) - par5Random.nextFloat() * 0.1F;
+					var8 = (float)par3 + par5Random.nextFloat();
+					var9 = (float)par4 + par5Random.nextFloat();
+					par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 - 1)) {
+				for (var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)par2 + par5Random.nextFloat();
+					var8 = (float)par3 + par5Random.nextFloat();
+					var9 = (float)par4 + par5Random.nextFloat() * 0.1F;
+					par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if (Block.fire.canBlockCatchFire(par1World, par2, par3, par4 + 1)) {
+				for (var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)par2 + par5Random.nextFloat();
+					var8 = (float)par3 + par5Random.nextFloat();
+					var9 = (float)(par4 + 1) - par5Random.nextFloat() * 0.1F;
+					par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+				}
+			}
+
+			if (Block.fire.canBlockCatchFire(par1World, par2, par3 + 1, par4)) {
+				for (var6 = 0; var6 < 2; ++var6) {
+					var7 = (float)par2 + par5Random.nextFloat();
+					var8 = (float)(par3 + 1) - par5Random.nextFloat() * 0.1F;
+					var9 = (float)par4 + par5Random.nextFloat();
+					par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
 				}
 			}
 		} else {
-			for(var6 = 0; var6 < 3; ++var6) {
-				var7 = (float)var2 + var5.nextFloat();
-				var8 = (float)var3 + var5.nextFloat() * 0.5F + 0.5F;
-				var9 = (float)var4 + var5.nextFloat();
-				var1.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
+			for (var6 = 0; var6 < 3; ++var6) {
+				var7 = (float)par2 + par5Random.nextFloat();
+				var8 = (float)par3 + par5Random.nextFloat() * 0.5F + 0.5F;
+				var9 = (float)par4 + par5Random.nextFloat();
+				par1World.spawnParticle("largesmoke", (double)var7, (double)var8, (double)var9, 0.0D, 0.0D, 0.0D);
 			}
 		}
-
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.iconArray = new Icon[]{var1.registerIcon(this.getTextureName() + "_layer_0"), var1.registerIcon(this.getTextureName() + "_layer_1")};
-	}
-
-	public Icon getFireIcon(int var1) {
-		return this.iconArray[var1];
-	}
-
-	public Icon getIcon(int var1, int var2) {
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.iconArray = new Icon[] {par1IconRegister.registerIcon(this.getTextureName() + "_layer_0"), par1IconRegister.registerIcon(this.getTextureName() + "_layer_1")};
+	}
+
+	public Icon getFireIcon(int par1) {
+		return this.iconArray[par1];
+	}
+
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
 		return this.iconArray[0];
 	}
 }
