--- net/minecraft/src/BlockFlowing.java
+++ net/minecraft/src/BlockFlowing.java
@@ -3,173 +3,210 @@
 import java.util.Random;
 
 public class BlockFlowing extends BlockFluid {
+
+	/**
+	 * Number of horizontally adjacent liquid source blocks. Diagonal doesn't count. Only source blocks of the same liquid
+	 * as the block using the field are counted.
+	 */
 	int numAdjacentSources;
+
+	/**
+	 * Indicates whether the flow direction is optimal. Each array index corresponds to one of the four cardinal
+	 * directions.
+	 */
 	boolean[] isOptimalFlowDirection = new boolean[4];
+
+	/**
+	 * The estimated cost to flow in a given direction from the current point. Each array index corresponds to one of the
+	 * four cardinal directions.
+	 */
 	int[] flowCost = new int[4];
 
-	protected BlockFlowing(int var1, Material var2) {
-		super(var1, var2);
-	}
-
-	private void updateFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		var1.setBlock(var2, var3, var4, this.blockID + 1, var5, 2);
-	}
-
-	public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+	protected BlockFlowing(int par1, Material par2Material) {
+		super(par1, par2Material);
+	}
+
+	/**
+	 * Updates the flow for the BlockFlowing object.
+	 */
+	private void updateFlow(World par1World, int par2, int par3, int par4) {
+		int var5 = par1World.getBlockMetadata(par2, par3, par4);
+		par1World.setBlock(par2, par3, par4, this.blockID + 1, var5, 2);
+	}
+
+	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
 		return this.blockMaterial != Material.lava;
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		int var6 = this.getFlowDecay(par1World, par2, par3, par4);
 		byte var7 = 1;
-		if(this.blockMaterial == Material.lava && !var1.provider.isHellWorld) {
+
+		if (this.blockMaterial == Material.lava && !par1World.provider.isHellWorld) {
 			var7 = 2;
 		}
 
 		boolean var8 = true;
-		int var9 = this.tickRate(var1);
+		int var9 = this.tickRate(par1World);
 		int var11;
-		if(var6 > 0) {
+
+		if (var6 > 0) {
 			byte var10 = -100;
 			this.numAdjacentSources = 0;
-			int var13 = this.getSmallestFlowDecay(var1, var2 - 1, var3, var4, var10);
-			var13 = this.getSmallestFlowDecay(var1, var2 + 1, var3, var4, var13);
-			var13 = this.getSmallestFlowDecay(var1, var2, var3, var4 - 1, var13);
-			var13 = this.getSmallestFlowDecay(var1, var2, var3, var4 + 1, var13);
+			int var13 = this.getSmallestFlowDecay(par1World, par2 - 1, par3, par4, var10);
+			var13 = this.getSmallestFlowDecay(par1World, par2 + 1, par3, par4, var13);
+			var13 = this.getSmallestFlowDecay(par1World, par2, par3, par4 - 1, var13);
+			var13 = this.getSmallestFlowDecay(par1World, par2, par3, par4 + 1, var13);
 			var11 = var13 + var7;
-			if(var11 >= 8 || var13 < 0) {
+
+			if (var11 >= 8 || var13 < 0) {
 				var11 = -1;
 			}
 
-			if(this.getFlowDecay(var1, var2, var3 + 1, var4) >= 0) {
-				int var12 = this.getFlowDecay(var1, var2, var3 + 1, var4);
-				if(var12 >= 8) {
+			if (this.getFlowDecay(par1World, par2, par3 + 1, par4) >= 0) {
+				int var12 = this.getFlowDecay(par1World, par2, par3 + 1, par4);
+
+				if (var12 >= 8) {
 					var11 = var12;
 				} else {
 					var11 = var12 + 8;
 				}
 			}
 
-			if(this.numAdjacentSources >= 2 && this.blockMaterial == Material.water) {
-				if(var1.getBlockMaterial(var2, var3 - 1, var4).isSolid()) {
+			if (this.numAdjacentSources >= 2 && this.blockMaterial == Material.water) {
+				if (par1World.getBlockMaterial(par2, par3 - 1, par4).isSolid()) {
 					var11 = 0;
-				} else if(var1.getBlockMaterial(var2, var3 - 1, var4) == this.blockMaterial && var1.getBlockMetadata(var2, var3 - 1, var4) == 0) {
+				} else if (par1World.getBlockMaterial(par2, par3 - 1, par4) == this.blockMaterial && par1World.getBlockMetadata(par2, par3 - 1, par4) == 0) {
 					var11 = 0;
 				}
 			}
 
-			if(this.blockMaterial == Material.lava && var6 < 8 && var11 < 8 && var11 > var6 && var5.nextInt(4) != 0) {
+			if (this.blockMaterial == Material.lava && var6 < 8 && var11 < 8 && var11 > var6 && par5Random.nextInt(4) != 0) {
 				var9 *= 4;
 			}
 
-			if(var11 == var6) {
-				if(var8) {
-					this.updateFlow(var1, var2, var3, var4);
+			if (var11 == var6) {
+				if (var8) {
+					this.updateFlow(par1World, par2, par3, par4);
 				}
 			} else {
 				var6 = var11;
-				if(var11 < 0) {
-					var1.setBlockToAir(var2, var3, var4);
+
+				if (var11 < 0) {
+					par1World.setBlockToAir(par2, par3, par4);
 				} else {
-					var1.setBlockMetadata(var2, var3, var4, var11, 2);
-					var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, var9);
-					var1.notifyBlocksOfNeighborChange(var2, var3, var4, this.blockID);
+					par1World.setBlockMetadataWithNotify(par2, par3, par4, var11, 2);
+					par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, var9);
+					par1World.notifyBlocksOfNeighborChange(par2, par3, par4, this.blockID);
 				}
 			}
 		} else {
-			this.updateFlow(var1, var2, var3, var4);
+			this.updateFlow(par1World, par2, par3, par4);
 		}
 
-		if(this.liquidCanDisplaceBlock(var1, var2, var3 - 1, var4)) {
-			if(this.blockMaterial == Material.lava && var1.getBlockMaterial(var2, var3 - 1, var4) == Material.water) {
-				var1.setBlock(var2, var3 - 1, var4, Block.stone.blockID);
-				this.triggerLavaMixEffects(var1, var2, var3 - 1, var4);
+		if (this.liquidCanDisplaceBlock(par1World, par2, par3 - 1, par4)) {
+			if (this.blockMaterial == Material.lava && par1World.getBlockMaterial(par2, par3 - 1, par4) == Material.water) {
+				par1World.setBlock(par2, par3 - 1, par4, Block.stone.blockID);
+				this.triggerLavaMixEffects(par1World, par2, par3 - 1, par4);
 				return;
 			}
 
-			if(var6 >= 8) {
-				this.flowIntoBlock(var1, var2, var3 - 1, var4, var6);
+			if (var6 >= 8) {
+				this.flowIntoBlock(par1World, par2, par3 - 1, par4, var6);
 			} else {
-				this.flowIntoBlock(var1, var2, var3 - 1, var4, var6 + 8);
+				this.flowIntoBlock(par1World, par2, par3 - 1, par4, var6 + 8);
 			}
-		} else if(var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(var1, var2, var3 - 1, var4))) {
-			boolean[] var14 = this.getOptimalFlowDirections(var1, var2, var3, var4);
+		} else if (var6 >= 0 && (var6 == 0 || this.blockBlocksFlow(par1World, par2, par3 - 1, par4))) {
+			boolean[] var14 = this.getOptimalFlowDirections(par1World, par2, par3, par4);
 			var11 = var6 + var7;
-			if(var6 >= 8) {
+
+			if (var6 >= 8) {
 				var11 = 1;
 			}
 
-			if(var11 >= 8) {
+			if (var11 >= 8) {
 				return;
 			}
 
-			if(var14[0]) {
-				this.flowIntoBlock(var1, var2 - 1, var3, var4, var11);
-			}
-
-			if(var14[1]) {
-				this.flowIntoBlock(var1, var2 + 1, var3, var4, var11);
-			}
-
-			if(var14[2]) {
-				this.flowIntoBlock(var1, var2, var3, var4 - 1, var11);
-			}
-
-			if(var14[3]) {
-				this.flowIntoBlock(var1, var2, var3, var4 + 1, var11);
+			if (var14[0]) {
+				this.flowIntoBlock(par1World, par2 - 1, par3, par4, var11);
+			}
+
+			if (var14[1]) {
+				this.flowIntoBlock(par1World, par2 + 1, par3, par4, var11);
+			}
+
+			if (var14[2]) {
+				this.flowIntoBlock(par1World, par2, par3, par4 - 1, var11);
+			}
+
+			if (var14[3]) {
+				this.flowIntoBlock(par1World, par2, par3, par4 + 1, var11);
 			}
 		}
-
 	}
 
-	private void flowIntoBlock(World var1, int var2, int var3, int var4, int var5) {
-		if(this.liquidCanDisplaceBlock(var1, var2, var3, var4)) {
-			int var6 = var1.getBlockId(var2, var3, var4);
-			if(var6 > 0) {
-				if(this.blockMaterial == Material.lava) {
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
+	/**
+	 * flowIntoBlock(World world, int x, int y, int z, int newFlowDecay) - Flows into the block at the coordinates and
+	 * changes the block type to the liquid.
+	 */
+	private void flowIntoBlock(World par1World, int par2, int par3, int par4, int par5) {
+		if (this.liquidCanDisplaceBlock(par1World, par2, par3, par4)) {
+			int var6 = par1World.getBlockId(par2, par3, par4);
+
+			if (var6 > 0) {
+				if (this.blockMaterial == Material.lava) {
+					this.triggerLavaMixEffects(par1World, par2, par3, par4);
 				} else {
-					Block.blocksList[var6].dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
+					Block.blocksList[var6].dropBlockAsItem(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), 0);
 				}
 			}
 
-			var1.setBlock(var2, var3, var4, this.blockID, var5, 3);
+			par1World.setBlock(par2, par3, par4, this.blockID, par5, 3);
 		}
-
 	}
 
-	private int calculateFlowCost(World var1, int var2, int var3, int var4, int var5, int var6) {
+	/**
+	 * calculateFlowCost(World world, int x, int y, int z, int accumulatedCost, int previousDirectionOfFlow) - Used to
+	 * determine the path of least resistance, this method returns the lowest possible flow cost for the direction of flow
+	 * indicated. Each necessary horizontal flow adds to the flow cost.
+	 */
+	private int calculateFlowCost(World par1World, int par2, int par3, int par4, int par5, int par6) {
 		int var7 = 1000;
 
-		for(int var8 = 0; var8 < 4; ++var8) {
-			if((var8 != 0 || var6 != 1) && (var8 != 1 || var6 != 0) && (var8 != 2 || var6 != 3) && (var8 != 3 || var6 != 2)) {
-				int var9 = var2;
-				int var11 = var4;
-				if(var8 == 0) {
-					var9 = var2 - 1;
+		for (int var8 = 0; var8 < 4; ++var8) {
+			if ((var8 != 0 || par6 != 1) && (var8 != 1 || par6 != 0) && (var8 != 2 || par6 != 3) && (var8 != 3 || par6 != 2)) {
+				int var9 = par2;
+				int var11 = par4;
+
+				if (var8 == 0) {
+					var9 = par2 - 1;
 				}
 
-				if(var8 == 1) {
+				if (var8 == 1) {
 					++var9;
 				}
 
-				if(var8 == 2) {
-					var11 = var4 - 1;
+				if (var8 == 2) {
+					var11 = par4 - 1;
 				}
 
-				if(var8 == 3) {
+				if (var8 == 3) {
 					++var11;
 				}
 
-				if(!this.blockBlocksFlow(var1, var9, var3, var11) && (var1.getBlockMaterial(var9, var3, var11) != this.blockMaterial || var1.getBlockMetadata(var9, var3, var11) != 0)) {
-					if(!this.blockBlocksFlow(var1, var9, var3 - 1, var11)) {
-						return var5;
+				if (!this.blockBlocksFlow(par1World, var9, par3, var11) && (par1World.getBlockMaterial(var9, par3, var11) != this.blockMaterial || par1World.getBlockMetadata(var9, par3, var11) != 0)) {
+					if (!this.blockBlocksFlow(par1World, var9, par3 - 1, var11)) {
+						return par5;
 					}
 
-					if(var5 < 4) {
-						int var12 = this.calculateFlowCost(var1, var9, var3, var11, var5 + 1, var8);
-						if(var12 < var7) {
+					if (par5 < 4) {
+						int var12 = this.calculateFlowCost(par1World, var9, par3, var11, par5 + 1, var8);
+
+						if (var12 < var7) {
 							var7 = var12;
 						}
 					}
@@ -180,32 +217,39 @@
 		return var7;
 	}
 
-	private boolean[] getOptimalFlowDirections(World var1, int var2, int var3, int var4) {
+	/**
+	 * Returns a boolean array indicating which flow directions are optimal based on each direction's calculated flow cost.
+	 * Each array index corresponds to one of the four cardinal directions. A value of true indicates the direction is
+	 * optimal.
+	 */
+	private boolean[] getOptimalFlowDirections(World par1World, int par2, int par3, int par4) {
 		int var5;
 		int var6;
-		for(var5 = 0; var5 < 4; ++var5) {
+
+		for (var5 = 0; var5 < 4; ++var5) {
 			this.flowCost[var5] = 1000;
-			var6 = var2;
-			int var8 = var4;
-			if(var5 == 0) {
-				var6 = var2 - 1;
+			var6 = par2;
+			int var8 = par4;
+
+			if (var5 == 0) {
+				var6 = par2 - 1;
 			}
 
-			if(var5 == 1) {
+			if (var5 == 1) {
 				++var6;
 			}
 
-			if(var5 == 2) {
-				var8 = var4 - 1;
+			if (var5 == 2) {
+				var8 = par4 - 1;
 			}
 
-			if(var5 == 3) {
+			if (var5 == 3) {
 				++var8;
 			}
 
-			if(!this.blockBlocksFlow(var1, var6, var3, var8) && (var1.getBlockMaterial(var6, var3, var8) != this.blockMaterial || var1.getBlockMetadata(var6, var3, var8) != 0)) {
-				if(this.blockBlocksFlow(var1, var6, var3 - 1, var8)) {
-					this.flowCost[var5] = this.calculateFlowCost(var1, var6, var3, var8, 1, var5);
+			if (!this.blockBlocksFlow(par1World, var6, par3, var8) && (par1World.getBlockMaterial(var6, par3, var8) != this.blockMaterial || par1World.getBlockMetadata(var6, par3, var8) != 0)) {
+				if (this.blockBlocksFlow(par1World, var6, par3 - 1, var8)) {
+					this.flowCost[var5] = this.calculateFlowCost(par1World, var6, par3, var8, 1, var5);
 				} else {
 					this.flowCost[var5] = 0;
 				}
@@ -214,23 +258,27 @@
 
 		var5 = this.flowCost[0];
 
-		for(var6 = 1; var6 < 4; ++var6) {
-			if(this.flowCost[var6] < var5) {
+		for (var6 = 1; var6 < 4; ++var6) {
+			if (this.flowCost[var6] < var5) {
 				var5 = this.flowCost[var6];
 			}
 		}
 
-		for(var6 = 0; var6 < 4; ++var6) {
+		for (var6 = 0; var6 < 4; ++var6) {
 			this.isOptimalFlowDirection[var6] = this.flowCost[var6] == var5;
 		}
 
 		return this.isOptimalFlowDirection;
 	}
 
-	private boolean blockBlocksFlow(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		if(var5 != Block.doorWood.blockID && var5 != Block.doorIron.blockID && var5 != Block.signPost.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
-			if(var5 == 0) {
+	/**
+	 * Returns true if block at coords blocks fluids
+	 */
+	private boolean blockBlocksFlow(World par1World, int par2, int par3, int par4) {
+		int var5 = par1World.getBlockId(par2, par3, par4);
+
+		if (var5 != Block.doorWood.blockID && var5 != Block.doorIron.blockID && var5 != Block.signPost.blockID && var5 != Block.ladder.blockID && var5 != Block.reed.blockID) {
+			if (var5 == 0) {
 				return false;
 			} else {
 				Material var6 = Block.blocksList[var5].blockMaterial;
@@ -241,34 +289,47 @@
 		}
 	}
 
-	protected int getSmallestFlowDecay(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = this.getFlowDecay(var1, var2, var3, var4);
-		if(var6 < 0) {
-			return var5;
+	/**
+	 * getSmallestFlowDecay(World world, intx, int y, int z, int currentSmallestFlowDecay) - Looks up the flow decay at the
+	 * coordinates given and returns the smaller of this value or the provided currentSmallestFlowDecay. If one value is
+	 * valid and the other isn't, the valid value will be returned. Valid values are >= 0. Flow decay is the amount that a
+	 * liquid has dissipated. 0 indicates a source block.
+	 */
+	protected int getSmallestFlowDecay(World par1World, int par2, int par3, int par4, int par5) {
+		int var6 = this.getFlowDecay(par1World, par2, par3, par4);
+
+		if (var6 < 0) {
+			return par5;
 		} else {
-			if(var6 == 0) {
+			if (var6 == 0) {
 				++this.numAdjacentSources;
 			}
 
-			if(var6 >= 8) {
+			if (var6 >= 8) {
 				var6 = 0;
 			}
 
-			return var5 >= 0 && var6 >= var5 ? var5 : var6;
-		}
-	}
-
-	private boolean liquidCanDisplaceBlock(World var1, int var2, int var3, int var4) {
-		Material var5 = var1.getBlockMaterial(var2, var3, var4);
-		return var5 == this.blockMaterial ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(var1, var2, var3, var4));
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		super.onBlockAdded(var1, var2, var3, var4);
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-		}
-
+			return par5 >= 0 && var6 >= par5 ? par5 : var6;
+		}
+	}
+
+	/**
+	 * Returns true if the block at the coordinates can be displaced by the liquid.
+	 */
+	private boolean liquidCanDisplaceBlock(World par1World, int par2, int par3, int par4) {
+		Material var5 = par1World.getBlockMaterial(par2, par3, par4);
+		return var5 == this.blockMaterial ? false : (var5 == Material.lava ? false : !this.blockBlocksFlow(par1World, par2, par3, par4));
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		super.onBlockAdded(par1World, par2, par3, par4);
+
+		if (par1World.getBlockId(par2, par3, par4) == this.blockID) {
+			par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+		}
 	}
 
 	public boolean func_82506_l() {
