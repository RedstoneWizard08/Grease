--- net/minecraft/src/BlockFluid.java
+++ net/minecraft/src/BlockFluid.java
@@ -2,18 +2,20 @@
 
 import java.util.Random;
 
+import com.prupe.mcpatcher.cc.ColorizeBlock;
+
 public abstract class BlockFluid extends Block {
 	private Icon[] theIcon;
 
-	protected BlockFluid(int var1, Material var2) {
-		super(var1, var2);
+	protected BlockFluid(int par1, Material par2Material) {
+		super(par1, par2Material);
 		float var3 = 0.0F;
 		float var4 = 0.0F;
 		this.setBlockBounds(0.0F + var4, 0.0F + var3, 0.0F + var4, 1.0F + var4, 1.0F + var3, 1.0F + var4);
 		this.setTickRandomly(true);
 	}
 
-	public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
 		return this.blockMaterial != Material.lava;
 	}
 
@@ -21,19 +23,25 @@
 		return 16777215;
 	}
 
-	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		if(this.blockMaterial != Material.water) {
+	/**
+	 * Returns a integer with hex for 0xrrggbb with this color multiplied against the blocks color. Note only called when
+	 * first determining what to render.
+	 */
+	public int colorMultiplier(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		if (this.blockMaterial != Material.water) {
 			return 16777215;
 		} else {
 			int var5 = 0;
 			int var6 = 0;
 			int var7 = 0;
 
-			for(int var8 = -1; var8 <= 1; ++var8) {
-				for(int var9 = -1; var9 <= 1; ++var9) {
-					int var10 = var1.getBiomeGenForCoords(var2 + var9, var4 + var8).waterColorMultiplier;
+			for (int var8 = -1; var8 <= 1; ++var8) {
+				for (int var9 = -1; var9 <= 1; ++var9) {
+					// MCPatcher Start
+					int var10 = ColorizeBlock.colorizeWater(par1IBlockAccess, par2 + var9, par4 + var8);
+					// MCPatcher End
 					var5 += (var10 & 16711680) >> 16;
-					var6 += (var10 & '\uff00') >> 8;
+					var6 += (var10 & 65280) >> 8;
 					var7 += var10 & 255;
 				}
 			}
@@ -42,28 +50,43 @@
 		}
 	}
 
-	public static float getFluidHeightPercent(int var0) {
-		if(var0 >= 8) {
-			var0 = 0;
+	/**
+	 * Returns the percentage of the fluid block that is air, based on the given flow decay of the fluid.
+	 */
+	public static float getFluidHeightPercent(int par0) {
+		if (par0 >= 8) {
+			par0 = 0;
 		}
 
-		return (float)(var0 + 1) / 9.0F;
-	}
-
-	public Icon getIcon(int var1, int var2) {
-		return var1 != 0 && var1 != 1 ? this.theIcon[1] : this.theIcon[0];
-	}
-
-	protected int getFlowDecay(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMaterial(var2, var3, var4) == this.blockMaterial ? var1.getBlockMetadata(var2, var3, var4) : -1;
-	}
-
-	protected int getEffectiveFlowDecay(IBlockAccess var1, int var2, int var3, int var4) {
-		if(var1.getBlockMaterial(var2, var3, var4) != this.blockMaterial) {
+		return (float)(par0 + 1) / 9.0F;
+	}
+
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par1 != 0 && par1 != 1 ? this.theIcon[1] : this.theIcon[0]; 
+	}
+
+	/**
+	 * Returns the amount of fluid decay at the coordinates, or -1 if the block at the coordinates is not the same material
+	 * as the fluid.
+	 */
+	protected int getFlowDecay(World par1World, int par2, int par3, int par4) {
+		return par1World.getBlockMaterial(par2, par3, par4) == this.blockMaterial ? par1World.getBlockMetadata(par2, par3, par4) : -1;
+	}
+
+	/**
+	 * Returns the flow decay but converts values indicating falling liquid (values >=8) to their effective source block
+	 * value of zero.
+	 */
+	protected int getEffectiveFlowDecay(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		if (par1IBlockAccess.getBlockMaterial(par2, par3, par4) != this.blockMaterial) {
 			return -1;
 		} else {
-			int var5 = var1.getBlockMetadata(var2, var3, var4);
-			if(var5 >= 8) {
+			int var5 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
+
+			if (var5 >= 8) {
 				var5 = 0;
 			}
 
@@ -71,118 +94,157 @@
 		}
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean canCollideCheck(int var1, boolean var2) {
-		return var2 && var1 == 0;
-	}
-
-	public boolean isBlockSolid(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var6 == this.blockMaterial ? false : (var5 == 1 ? true : (var6 == Material.ice ? false : super.isBlockSolid(var1, var2, var3, var4, var5)));
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		Material var6 = var1.getBlockMaterial(var2, var3, var4);
-		return var6 == this.blockMaterial ? false : (var5 == 1 ? true : (var6 == Material.ice ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5)));
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
+	/**
+	 * Returns whether this block is collideable based on the arguments passed in \n@param par1 block metaData \n@param
+	 * par2 whether the player right-clicked while holding a boat
+	 */
+	public boolean canCollideCheck(int par1, boolean par2) {
+		return par2 && par1 == 0;
+	}
+
+	/**
+	 * Returns Returns true if the given side of this block type should be rendered (if it's solid or not), if the adjacent
+	 * block is at the given coordinates. Args: blockAccess, x, y, z, side
+	 */
+	public boolean isBlockSolid(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		Material var6 = par1IBlockAccess.getBlockMaterial(par2, par3, par4);
+		return var6 == this.blockMaterial ? false : (par5 == 1 ? true : (var6 == Material.ice ? false : super.isBlockSolid(par1IBlockAccess, par2, par3, par4, par5)));
+	}
+
+	/**
+	 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
+	 * coordinates.  Args: blockAccess, x, y, z, side
+	 */
+	public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		Material var6 = par1IBlockAccess.getBlockMaterial(par2, par3, par4);
+		return var6 == this.blockMaterial ? false : (par5 == 1 ? true : (var6 == Material.ice ? false : super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5)));
+	}
+
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
 		return null;
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 4;
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
-		return 0;
-	}
-
-	public int quantityDropped(Random var1) {
-		return 0;
-	}
-
-	private Vec3 getFlowVector(IBlockAccess var1, int var2, int var3, int var4) {
-		Vec3 var5 = var1.getWorldVec3Pool().getVecFromPool(0.0D, 0.0D, 0.0D);
-		int var6 = this.getEffectiveFlowDecay(var1, var2, var3, var4);
-
-		for(int var7 = 0; var7 < 4; ++var7) {
-			int var8 = var2;
-			int var10 = var4;
-			if(var7 == 0) {
-				var8 = var2 - 1;
-			}
-
-			if(var7 == 1) {
-				var10 = var4 - 1;
-			}
-
-			if(var7 == 2) {
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
+		return 0;
+	}
+
+	/**
+	 * Returns the quantity of items to drop on block destruction.
+	 */
+	public int quantityDropped(Random par1Random) {
+		return 0;
+	}
+
+	/**
+	 * Returns a vector indicating the direction and intensity of fluid flow.
+	 */
+	private Vec3 getFlowVector(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		Vec3 var5 = par1IBlockAccess.getWorldVec3Pool().getVecFromPool(0.0D, 0.0D, 0.0D);
+		int var6 = this.getEffectiveFlowDecay(par1IBlockAccess, par2, par3, par4);
+
+		for (int var7 = 0; var7 < 4; ++var7) {
+			int var8 = par2;
+			int var10 = par4;
+
+			if (var7 == 0) {
+				var8 = par2 - 1;
+			}
+
+			if (var7 == 1) {
+				var10 = par4 - 1;
+			}
+
+			if (var7 == 2) {
 				++var8;
 			}
 
-			if(var7 == 3) {
+			if (var7 == 3) {
 				++var10;
 			}
 
-			int var11 = this.getEffectiveFlowDecay(var1, var8, var3, var10);
+			int var11 = this.getEffectiveFlowDecay(par1IBlockAccess, var8, par3, var10);
 			int var12;
-			if(var11 < 0) {
-				if(!var1.getBlockMaterial(var8, var3, var10).blocksMovement()) {
-					var11 = this.getEffectiveFlowDecay(var1, var8, var3 - 1, var10);
-					if(var11 >= 0) {
+
+			if (var11 < 0) {
+				if (!par1IBlockAccess.getBlockMaterial(var8, par3, var10).blocksMovement()) {
+					var11 = this.getEffectiveFlowDecay(par1IBlockAccess, var8, par3 - 1, var10);
+
+					if (var11 >= 0) {
 						var12 = var11 - (var6 - 8);
-						var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+						var5 = var5.addVector((double)((var8 - par2) * var12), (double)((par3 - par3) * var12), (double)((var10 - par4) * var12));
 					}
 				}
-			} else if(var11 >= 0) {
+			} else if (var11 >= 0) {
 				var12 = var11 - var6;
-				var5 = var5.addVector((double)((var8 - var2) * var12), (double)((var3 - var3) * var12), (double)((var10 - var4) * var12));
+				var5 = var5.addVector((double)((var8 - par2) * var12), (double)((par3 - par3) * var12), (double)((var10 - par4) * var12));
 			}
 		}
 
-		if(var1.getBlockMetadata(var2, var3, var4) >= 8) {
+		if (par1IBlockAccess.getBlockMetadata(par2, par3, par4) >= 8) {
 			boolean var13 = false;
-			if(var13 || this.isBlockSolid(var1, var2, var3, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2, var3, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2 - 1, var3, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2 + 1, var3, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2, var3 + 1, var4 - 1, 2)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2, var3 + 1, var4 + 1, 3)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2 - 1, var3 + 1, var4, 4)) {
-				var13 = true;
-			}
-
-			if(var13 || this.isBlockSolid(var1, var2 + 1, var3 + 1, var4, 5)) {
-				var13 = true;
-			}
-
-			if(var13) {
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2, par3, par4 - 1, 2)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2, par3, par4 + 1, 3)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2 - 1, par3, par4, 4)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2 + 1, par3, par4, 5)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2, par3 + 1, par4 - 1, 2)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2, par3 + 1, par4 + 1, 3)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2 - 1, par3 + 1, par4, 4)) {
+				var13 = true;
+			}
+
+			if (var13 || this.isBlockSolid(par1IBlockAccess, par2 + 1, par3 + 1, par4, 5)) {
+				var13 = true;
+			}
+
+			if (var13) {
 				var5 = var5.normalize().addVector(0.0D, -6.0D, 0.0D);
 			}
 		}
@@ -191,20 +253,29 @@
 		return var5;
 	}
 
-	public void velocityToAddToEntity(World var1, int var2, int var3, int var4, Entity var5, Vec3 var6) {
-		Vec3 var7 = this.getFlowVector(var1, var2, var3, var4);
-		var6.xCoord += var7.xCoord;
-		var6.yCoord += var7.yCoord;
-		var6.zCoord += var7.zCoord;
-	}
-
-	public int tickRate(World var1) {
-		return this.blockMaterial == Material.water ? 5 : (this.blockMaterial == Material.lava ? (var1.provider.hasNoSky ? 10 : 30) : 0);
-	}
-
-	public int getMixedBrightnessForBlock(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getLightBrightnessForSkyBlocks(var2, var3, var4, 0);
-		int var6 = var1.getLightBrightnessForSkyBlocks(var2, var3 + 1, var4, 0);
+	/**
+	 * Can add to the passed in vector for a movement vector to be applied to the entity. Args: x, y, z, entity, vec3d
+	 */
+	public void velocityToAddToEntity(World par1World, int par2, int par3, int par4, Entity par5Entity, Vec3 par6Vec3) {
+		Vec3 var7 = this.getFlowVector(par1World, par2, par3, par4);
+		par6Vec3.xCoord += var7.xCoord;
+		par6Vec3.yCoord += var7.yCoord;
+		par6Vec3.zCoord += var7.zCoord;
+	}
+
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
+		return this.blockMaterial == Material.water ? 5 : (this.blockMaterial == Material.lava ? (par1World.provider.hasNoSky ? 10 : 30) : 0);
+	}
+
+	/**
+	 * Goes straight to getLightBrightnessForSkyBlocks for Blocks, does some fancy computing for Fluids
+	 */
+	public int getMixedBrightnessForBlock(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = par1IBlockAccess.getLightBrightnessForSkyBlocks(par2, par3, par4, 0);
+		int var6 = par1IBlockAccess.getLightBrightnessForSkyBlocks(par2, par3 + 1, par4, 0);
 		int var7 = var5 & 255;
 		int var8 = var6 & 255;
 		int var9 = var5 >> 16 & 255;
@@ -212,206 +283,242 @@
 		return (var7 > var8 ? var7 : var8) | (var9 > var10 ? var9 : var10) << 16;
 	}
 
-	public float getBlockBrightness(IBlockAccess var1, int var2, int var3, int var4) {
-		float var5 = var1.getLightBrightness(var2, var3, var4);
-		float var6 = var1.getLightBrightness(var2, var3 + 1, var4);
+	/**
+	 * How bright to render this block based on the light its receiving. Args: iBlockAccess, x, y, z
+	 */
+	public float getBlockBrightness(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		float var5 = par1IBlockAccess.getLightBrightness(par2, par3, par4);
+		float var6 = par1IBlockAccess.getLightBrightness(par2, par3 + 1, par4);
 		return var5 > var6 ? var5 : var6;
 	}
 
+	/**
+	 * Returns which pass should this block be rendered on. 0 for solids and 1 for alpha
+	 */
 	public int getRenderBlockPass() {
 		return this.blockMaterial == Material.water ? 1 : 0;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
+	/**
+	 * A randomly called display update to be able to add particles or other items for display
+	 */
+	public void randomDisplayTick(World par1World, int par2, int par3, int par4, Random par5Random) {
 		int var6;
-		if(this.blockMaterial == Material.water) {
-			if(var5.nextInt(10) == 0) {
-				var6 = var1.getBlockMetadata(var2, var3, var4);
-				if(var6 <= 0 || var6 >= 8) {
-					var1.spawnParticle("suspended", (double)((float)var2 + var5.nextFloat()), (double)((float)var3 + var5.nextFloat()), (double)((float)var4 + var5.nextFloat()), 0.0D, 0.0D, 0.0D);
+
+		if (this.blockMaterial == Material.water) {
+			if (par5Random.nextInt(10) == 0) {
+				var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+				if (var6 <= 0 || var6 >= 8) {
+					par1World.spawnParticle("suspended", (double)((float)par2 + par5Random.nextFloat()), (double)((float)par3 + par5Random.nextFloat()), (double)((float)par4 + par5Random.nextFloat()), 0.0D, 0.0D, 0.0D);
 				}
 			}
 
-			for(var6 = 0; var6 < 0; ++var6) {
-				int var7 = var5.nextInt(4);
-				int var8 = var2;
-				int var9 = var4;
-				if(var7 == 0) {
-					var8 = var2 - 1;
+			for (var6 = 0; var6 < 0; ++var6) {
+				int var7 = par5Random.nextInt(4);
+				int var8 = par2;
+				int var9 = par4;
+
+				if (var7 == 0) {
+					var8 = par2 - 1;
 				}
 
-				if(var7 == 1) {
+				if (var7 == 1) {
 					++var8;
 				}
 
-				if(var7 == 2) {
-					var9 = var4 - 1;
+				if (var7 == 2) {
+					var9 = par4 - 1;
 				}
 
-				if(var7 == 3) {
+				if (var7 == 3) {
 					++var9;
 				}
 
-				if(var1.getBlockMaterial(var8, var3, var9) == Material.air && (var1.getBlockMaterial(var8, var3 - 1, var9).blocksMovement() || var1.getBlockMaterial(var8, var3 - 1, var9).isLiquid())) {
-					float var10 = 1.0F / 16.0F;
-					double var11 = (double)((float)var2 + var5.nextFloat());
-					double var13 = (double)((float)var3 + var5.nextFloat());
-					double var15 = (double)((float)var4 + var5.nextFloat());
-					if(var7 == 0) {
-						var11 = (double)((float)var2 - var10);
-					}
-
-					if(var7 == 1) {
-						var11 = (double)((float)(var2 + 1) + var10);
-					}
-
-					if(var7 == 2) {
-						var15 = (double)((float)var4 - var10);
-					}
-
-					if(var7 == 3) {
-						var15 = (double)((float)(var4 + 1) + var10);
+				if (par1World.getBlockMaterial(var8, par3, var9) == Material.air && (par1World.getBlockMaterial(var8, par3 - 1, var9).blocksMovement() || par1World.getBlockMaterial(var8, par3 - 1, var9).isLiquid())) {
+					float var10 = 0.0625F;
+					double var11 = (double)((float)par2 + par5Random.nextFloat());
+					double var13 = (double)((float)par3 + par5Random.nextFloat());
+					double var15 = (double)((float)par4 + par5Random.nextFloat());
+
+					if (var7 == 0) {
+						var11 = (double)((float)par2 - var10);
+					}
+
+					if (var7 == 1) {
+						var11 = (double)((float)(par2 + 1) + var10);
+					}
+
+					if (var7 == 2) {
+						var15 = (double)((float)par4 - var10);
+					}
+
+					if (var7 == 3) {
+						var15 = (double)((float)(par4 + 1) + var10);
 					}
 
 					double var17 = 0.0D;
 					double var19 = 0.0D;
-					if(var7 == 0) {
+
+					if (var7 == 0) {
 						var17 = (double)(-var10);
 					}
 
-					if(var7 == 1) {
+					if (var7 == 1) {
 						var17 = (double)var10;
 					}
 
-					if(var7 == 2) {
+					if (var7 == 2) {
 						var19 = (double)(-var10);
 					}
 
-					if(var7 == 3) {
+					if (var7 == 3) {
 						var19 = (double)var10;
 					}
 
-					var1.spawnParticle("splash", var11, var13, var15, var17, 0.0D, var19);
+					par1World.spawnParticle("splash", var11, var13, var15, var17, 0.0D, var19);
 				}
 			}
 		}
 
-		if(this.blockMaterial == Material.water && var5.nextInt(64) == 0) {
-			var6 = var1.getBlockMetadata(var2, var3, var4);
-			if(var6 > 0 && var6 < 8) {
-				var1.playSound((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "liquid.water", var5.nextFloat() * 0.25F + 12.0F / 16.0F, var5.nextFloat() * 1.0F + 0.5F, false);
+		if (this.blockMaterial == Material.water && par5Random.nextInt(64) == 0) {
+			var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+			if (var6 > 0 && var6 < 8) {
+				par1World.playSound((double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), "liquid.water", par5Random.nextFloat() * 0.25F + 0.75F, par5Random.nextFloat() * 1.0F + 0.5F, false);
 			}
 		}
 
-		double var21;
 		double var22;
 		double var23;
-		if(this.blockMaterial == Material.lava && var1.getBlockMaterial(var2, var3 + 1, var4) == Material.air && !var1.isBlockOpaqueCube(var2, var3 + 1, var4)) {
-			if(var5.nextInt(100) == 0) {
-				var21 = (double)((float)var2 + var5.nextFloat());
-				var22 = (double)var3 + this.maxY;
-				var23 = (double)((float)var4 + var5.nextFloat());
-				var1.spawnParticle("lava", var21, var22, var23, 0.0D, 0.0D, 0.0D);
-				var1.playSound(var21, var22, var23, "liquid.lavapop", 0.2F + var5.nextFloat() * 0.2F, 0.9F + var5.nextFloat() * 0.15F, false);
+		double var21;
+
+		if (this.blockMaterial == Material.lava && par1World.getBlockMaterial(par2, par3 + 1, par4) == Material.air && !par1World.isBlockOpaqueCube(par2, par3 + 1, par4)) {
+			if (par5Random.nextInt(100) == 0) {
+				var21 = (double)((float)par2 + par5Random.nextFloat());
+				var22 = (double)par3 + this.maxY;
+				var23 = (double)((float)par4 + par5Random.nextFloat());
+				par1World.spawnParticle("lava", var21, var22, var23, 0.0D, 0.0D, 0.0D);
+				par1World.playSound(var21, var22, var23, "liquid.lavapop", 0.2F + par5Random.nextFloat() * 0.2F, 0.9F + par5Random.nextFloat() * 0.15F, false);
 			}
 
-			if(var5.nextInt(200) == 0) {
-				var1.playSound((double)var2, (double)var3, (double)var4, "liquid.lava", 0.2F + var5.nextFloat() * 0.2F, 0.9F + var5.nextFloat() * 0.15F, false);
+			if (par5Random.nextInt(200) == 0) {
+				par1World.playSound((double)par2, (double)par3, (double)par4, "liquid.lava", 0.2F + par5Random.nextFloat() * 0.2F, 0.9F + par5Random.nextFloat() * 0.15F, false);
 			}
 		}
 
-		if(var5.nextInt(10) == 0 && var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && !var1.getBlockMaterial(var2, var3 - 2, var4).blocksMovement()) {
-			var21 = (double)((float)var2 + var5.nextFloat());
-			var22 = (double)var3 - 1.05D;
-			var23 = (double)((float)var4 + var5.nextFloat());
-			if(this.blockMaterial == Material.water) {
-				var1.spawnParticle("dripWater", var21, var22, var23, 0.0D, 0.0D, 0.0D);
+		if (par5Random.nextInt(10) == 0 && par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && !par1World.getBlockMaterial(par2, par3 - 2, par4).blocksMovement()) {
+			var21 = (double)((float)par2 + par5Random.nextFloat());
+			var22 = (double)par3 - 1.05D;
+			var23 = (double)((float)par4 + par5Random.nextFloat());
+
+			if (this.blockMaterial == Material.water) {
+				par1World.spawnParticle("dripWater", var21, var22, var23, 0.0D, 0.0D, 0.0D);
 			} else {
-				var1.spawnParticle("dripLava", var21, var22, var23, 0.0D, 0.0D, 0.0D);
+				par1World.spawnParticle("dripLava", var21, var22, var23, 0.0D, 0.0D, 0.0D);
 			}
 		}
-
 	}
 
-	public static double getFlowDirection(IBlockAccess var0, int var1, int var2, int var3, Material var4) {
+	/**
+	 * the sin and cos of this number determine the surface gradient of the flowing block.
+	 */
+	public static double getFlowDirection(IBlockAccess par0IBlockAccess, int par1, int par2, int par3, Material par4Material) {
 		Vec3 var5 = null;
-		if(var4 == Material.water) {
-			var5 = Block.waterMoving.getFlowVector(var0, var1, var2, var3);
-		}
-
-		if(var4 == Material.lava) {
-			var5 = Block.lavaMoving.getFlowVector(var0, var1, var2, var3);
-		}
-
-		return var5.xCoord == 0.0D && var5.zCoord == 0.0D ? -1000.0D : Math.atan2(var5.zCoord, var5.xCoord) - Math.PI * 0.5D;
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		this.checkForHarden(var1, var2, var3, var4);
-	}
-
-	private void checkForHarden(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockId(var2, var3, var4) == this.blockID) {
-			if(this.blockMaterial == Material.lava) {
+
+		if (par4Material == Material.water) {
+			var5 = Block.waterMoving.getFlowVector(par0IBlockAccess, par1, par2, par3);
+		}
+
+		if (par4Material == Material.lava) {
+			var5 = Block.lavaMoving.getFlowVector(par0IBlockAccess, par1, par2, par3);
+		}
+
+		return var5.xCoord == 0.0D && var5.zCoord == 0.0D ? -1000.0D : Math.atan2(var5.zCoord, var5.xCoord) - (Math.PI / 2D);
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		this.checkForHarden(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		this.checkForHarden(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * Forces lava to check to see if it is colliding with water, and then decide what it should harden to.
+	 */
+	private void checkForHarden(World par1World, int par2, int par3, int par4) {
+		if (par1World.getBlockId(par2, par3, par4) == this.blockID) {
+			if (this.blockMaterial == Material.lava) {
 				boolean var5 = false;
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 - 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3, var4 + 1) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 - 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2 + 1, var3, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5 || var1.getBlockMaterial(var2, var3 + 1, var4) == Material.water) {
-					var5 = true;
-				}
-
-				if(var5) {
-					int var6 = var1.getBlockMetadata(var2, var3, var4);
-					if(var6 == 0) {
-						var1.setBlock(var2, var3, var4, Block.obsidian.blockID);
-					} else if(var6 <= 4) {
-						var1.setBlock(var2, var3, var4, Block.cobblestone.blockID);
+
+				if (var5 || par1World.getBlockMaterial(par2, par3, par4 - 1) == Material.water) {
+					var5 = true;
+				}
+
+				if (var5 || par1World.getBlockMaterial(par2, par3, par4 + 1) == Material.water) {
+					var5 = true;
+				}
+
+				if (var5 || par1World.getBlockMaterial(par2 - 1, par3, par4) == Material.water) {
+					var5 = true;
+				}
+
+				if (var5 || par1World.getBlockMaterial(par2 + 1, par3, par4) == Material.water) {
+					var5 = true;
+				}
+
+				if (var5 || par1World.getBlockMaterial(par2, par3 + 1, par4) == Material.water) {
+					var5 = true;
+				}
+
+				if (var5) {
+					int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+					if (var6 == 0) {
+						par1World.setBlock(par2, par3, par4, Block.obsidian.blockID);
+					} else if (var6 <= 4) {
+						par1World.setBlock(par2, par3, par4, Block.cobblestone.blockID);
 					}
 
-					this.triggerLavaMixEffects(var1, var2, var3, var4);
+					this.triggerLavaMixEffects(par1World, par2, par3, par4);
 				}
 			}
-
-		}
-	}
-
-	protected void triggerLavaMixEffects(World var1, int var2, int var3, int var4) {
-		var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.s.nextFloat() - var1.s.nextFloat()) * 0.8F);
-
-		for(int var5 = 0; var5 < 8; ++var5) {
-			var1.spawnParticle("largesmoke", (double)var2 + Math.random(), (double)var3 + 1.2D, (double)var4 + Math.random(), 0.0D, 0.0D, 0.0D);
-		}
-
-	}
-
-	public void registerIcons(IconRegister var1) {
-		if(this.blockMaterial == Material.lava) {
-			this.theIcon = new Icon[]{var1.registerIcon("lava_still"), var1.registerIcon("lava_flow")};
+		}
+	}
+
+	/**
+	 * Creates fizzing sound and smoke. Used when lava flows over block or mixes with water.
+	 */
+	protected void triggerLavaMixEffects(World par1World, int par2, int par3, int par4) {
+		par1World.playSoundEffect((double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), "random.fizz", 0.5F, 2.6F + (par1World.rand.nextFloat() - par1World.rand.nextFloat()) * 0.8F);
+
+		for (int var5 = 0; var5 < 8; ++var5) {
+			par1World.spawnParticle("largesmoke", (double)par2 + Math.random(), (double)par3 + 1.2D, (double)par4 + Math.random(), 0.0D, 0.0D, 0.0D);
+		}
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		if (this.blockMaterial == Material.lava) {
+			this.theIcon = new Icon[] {par1IconRegister.registerIcon("lava_still"), par1IconRegister.registerIcon("lava_flow")};
 		} else {
-			this.theIcon = new Icon[]{var1.registerIcon("water_still"), var1.registerIcon("water_flow")};
+			this.theIcon = new Icon[] {par1IconRegister.registerIcon("water_still"), par1IconRegister.registerIcon("water_flow")};
 		}
-
 	}
 
-	public static Icon getFluidIcon(String var0) {
-		return var0 == "water_still" ? Block.waterMoving.theIcon[0] : (var0 == "water_flow" ? Block.waterMoving.theIcon[1] : (var0 == "lava_still" ? Block.lavaMoving.theIcon[0] : (var0 == "lava_flow" ? Block.lavaMoving.theIcon[1] : null)));
+	public static Icon getFluidIcon(String par0Str) {
+		return par0Str == "water_still" ? Block.waterMoving.theIcon[0] : (par0Str == "water_flow" ? Block.waterMoving.theIcon[1] : (par0Str == "lava_still" ? Block.lavaMoving.theIcon[0] : (par0Str == "lava_flow" ? Block.lavaMoving.theIcon[1] : null)));
 	}
 }
