--- net/minecraft/src/BlockHalfSlab.java
+++ net/minecraft/src/BlockHalfSlab.java
@@ -6,11 +6,12 @@
 public abstract class BlockHalfSlab extends Block {
 	protected final boolean isDoubleSlab;
 
-	public BlockHalfSlab(int var1, boolean var2, Material var3) {
-		super(var1, var3);
-		this.isDoubleSlab = var2;
-		if(var2) {
-			opaqueCubeLookup[var1] = true;
+	public BlockHalfSlab(int par1, boolean par2, Material par3Material) {
+		super(par1, par3Material);
+		this.isDoubleSlab = par2;
+
+		if (par2) {
+			opaqueCubeLookup[par1] = true;
 		} else {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
@@ -18,79 +19,120 @@
 		this.setLightOpacity(255);
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		if(this.isDoubleSlab) {
+	/**
+	 * Updates the blocks bounds based on its current state. Args: world, x, y, z
+	 */
+	public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		if (this.isDoubleSlab) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		} else {
-			boolean var5 = (var1.getBlockMetadata(var2, var3, var4) & 8) != 0;
-			if(var5) {
+			boolean var5 = (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) != 0;
+
+			if (var5) {
 				this.setBlockBounds(0.0F, 0.5F, 0.0F, 1.0F, 1.0F, 1.0F);
 			} else {
 				this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 			}
 		}
-
 	}
 
+	/**
+	 * Sets the block's bounds for rendering it as an item
+	 */
 	public void setBlockBoundsForItemRender() {
-		if(this.isDoubleSlab) {
+		if (this.isDoubleSlab) {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		} else {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.5F, 1.0F);
 		}
-
-	}
-
-	public void addCollisionBoxesToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		super.addCollisionBoxesToList(var1, var2, var3, var4, var5, var6, var7);
-	}
-
+	}
+
+	/**
+	 * Adds all intersecting collision boxes to a list. (Be sure to only add boxes to the list if they intersect the mask.)
+	 * Parameters: World, X, Y, Z, mask, list, colliding entity
+	 */
+	public void addCollisionBoxesToList(World par1World, int par2, int par3, int par4, AxisAlignedBB par5AxisAlignedBB, List par6List, Entity par7Entity) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
+		super.addCollisionBoxesToList(par1World, par2, par3, par4, par5AxisAlignedBB, par6List, par7Entity);
+	}
+
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return this.isDoubleSlab;
 	}
 
-	public int onBlockPlaced(World var1, int var2, int var3, int var4, int var5, float var6, float var7, float var8, int var9) {
-		return this.isDoubleSlab ? var9 : (var5 != 0 && (var5 == 1 || (double)var7 <= 0.5D) ? var9 : var9 | 8);
+	/**
+	 * Called when a block is placed using its ItemBlock. Args: World, X, Y, Z, side, hitX, hitY, hitZ, block metadata
+	 */
+	public int onBlockPlaced(World par1World, int par2, int par3, int par4, int par5, float par6, float par7, float par8, int par9) {
+		return this.isDoubleSlab ? par9 : (par5 != 0 && (par5 == 1 || (double)par7 <= 0.5D) ? par9 : par9 | 8);
 	}
 
-	public int quantityDropped(Random var1) {
+	/**
+	 * Returns the quantity of items to drop on block destruction.
+	 */
+	public int quantityDropped(Random par1Random) {
 		return this.isDoubleSlab ? 2 : 1;
 	}
 
-	public int damageDropped(int var1) {
-		return var1 & 7;
+	/**
+	 * Determines the damage on the item the block drops. Used in cloth and wood.
+	 */
+	public int damageDropped(int par1) {
+		return par1 & 7;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return this.isDoubleSlab;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(this.isDoubleSlab) {
-			return super.shouldSideBeRendered(var1, var2, var3, var4, var5);
-		} else if(var5 != 1 && var5 != 0 && !super.shouldSideBeRendered(var1, var2, var3, var4, var5)) {
+	/**
+	 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
+	 * coordinates.  Args: blockAccess, x, y, z, side
+	 */
+	public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		if (this.isDoubleSlab) {
+			return super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5);
+		} else if (par5 != 1 && par5 != 0 && !super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5)) {
 			return false;
 		} else {
-			int var6 = var2 + Facing.offsetsXForSide[Facing.oppositeSide[var5]];
-			int var7 = var3 + Facing.offsetsYForSide[Facing.oppositeSide[var5]];
-			int var8 = var4 + Facing.offsetsZForSide[Facing.oppositeSide[var5]];
-			boolean var9 = (var1.getBlockMetadata(var6, var7, var8) & 8) != 0;
-			return var9 ? (var5 == 0 ? true : (var5 == 1 && super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? true : !isBlockSingleSlab(var1.getBlockId(var2, var3, var4)) || (var1.getBlockMetadata(var2, var3, var4) & 8) == 0)) : (var5 == 1 ? true : (var5 == 0 && super.shouldSideBeRendered(var1, var2, var3, var4, var5) ? true : !isBlockSingleSlab(var1.getBlockId(var2, var3, var4)) || (var1.getBlockMetadata(var2, var3, var4) & 8) != 0));
+			int var6 = par2 + Facing.offsetsXForSide[Facing.oppositeSide[par5]];
+			int var7 = par3 + Facing.offsetsYForSide[Facing.oppositeSide[par5]];
+			int var8 = par4 + Facing.offsetsZForSide[Facing.oppositeSide[par5]];
+			boolean var9 = (par1IBlockAccess.getBlockMetadata(var6, var7, var8) & 8) != 0;
+			return var9 ? (par5 == 0 ? true : (par5 == 1 && super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5) ? true : !isBlockSingleSlab(par1IBlockAccess.getBlockId(par2, par3, par4)) || (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) == 0)) : (par5 == 1 ? true : (par5 == 0 && super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5) ? true : !isBlockSingleSlab(par1IBlockAccess.getBlockId(par2, par3, par4)) || (par1IBlockAccess.getBlockMetadata(par2, par3, par4) & 8) != 0));
 		}
 	}
 
-	private static boolean isBlockSingleSlab(int var0) {
-		return var0 == Block.stoneSingleSlab.blockID || var0 == Block.woodSingleSlab.blockID;
+	/**
+	 * Takes a block ID, returns true if it's the same as the ID for a stone or wooden single slab.
+	 */
+	private static boolean isBlockSingleSlab(int par0) {
+		return par0 == Block.stoneSingleSlab.blockID || par0 == Block.woodSingleSlab.blockID;
 	}
 
+	/**
+	 * Returns the slab block name with step type.
+	 */
 	public abstract String getFullSlabName(int var1);
 
-	public int getDamageValue(World var1, int var2, int var3, int var4) {
-		return super.getDamageValue(var1, var2, var3, var4) & 7;
+	/**
+	 * Get the block's damage value (for use with pick block).
+	 */
+	public int getDamageValue(World par1World, int par2, int par3, int par4) {
+		return super.getDamageValue(par1World, par2, par3, par4) & 7;
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return isBlockSingleSlab(this.blockID) ? this.blockID : (this.blockID == Block.stoneDoubleSlab.blockID ? Block.stoneSingleSlab.blockID : (this.blockID == Block.woodDoubleSlab.blockID ? Block.woodSingleSlab.blockID : Block.stoneSingleSlab.blockID));
 	}
 }
