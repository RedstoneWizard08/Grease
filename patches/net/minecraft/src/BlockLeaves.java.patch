--- net/minecraft/src/BlockLeaves.java
+++ net/minecraft/src/BlockLeaves.java
@@ -3,15 +3,21 @@
 import java.util.List;
 import java.util.Random;
 
+import com.prupe.mcpatcher.cc.ColorizeBlock;
+import com.prupe.mcpatcher.cc.Colorizer;
+
 public class BlockLeaves extends BlockLeavesBase {
-	public static final String[] a = new String[]{"oak", "spruce", "birch", "jungle"};
-	public static final String[][] b = new String[][]{{"leaves_oak", "leaves_spruce", "leaves_birch", "leaves_jungle"}, {"leaves_oak_opaque", "leaves_spruce_opaque", "leaves_birch_opaque", "leaves_jungle_opaque"}};
+	public static final String[] LEAF_TYPES = new String[] {"oak", "spruce", "birch", "jungle"};
+	public static final String[][] field_94396_b = new String[][] {{"leaves_oak", "leaves_spruce", "leaves_birch", "leaves_jungle"}, {"leaves_oak_opaque", "leaves_spruce_opaque", "leaves_birch_opaque", "leaves_jungle_opaque"}};
+	
+
+	/** 1 for fast graphic. 0 for fancy graphics. used in iconArray. */
 	private int iconType;
 	private Icon[][] iconArray = new Icon[2][];
 	int[] adjacentTreeBlocks;
 
-	protected BlockLeaves(int var1) {
-		super(var1, Material.leaves, false);
+	protected BlockLeaves(int par1) {
+		super(par1, Material.leaves, false);
 		this.setTickRandomly(true);
 		this.setCreativeTab(CreativeTabs.tabDecorations);
 	}
@@ -22,26 +28,38 @@
 		return ColorizerFoliage.getFoliageColor(var1, var3);
 	}
 
-	public int getRenderColor(int var1) {
-		return (var1 & 3) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((var1 & 3) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.getFoliageColorBasic());
+	/**
+	 * Returns the color this block should be rendered. Used by leaves.
+	 */
+	public int getRenderColor(int par1) {
+		return (par1 & 3) == 1 ? ColorizerFoliage.getFoliageColorPine() : ((par1 & 3) == 2 ? ColorizerFoliage.getFoliageColorBirch() : ColorizerFoliage.getFoliageColorBasic());
 	}
 
-	public int colorMultiplier(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if((var5 & 3) == 1) {
-			return ColorizerFoliage.getFoliageColorPine();
-		} else if((var5 & 3) == 2) {
-			return ColorizerFoliage.getFoliageColorBirch();
+	/**
+	 * Returns a integer with hex for 0xrrggbb with this color multiplied against the blocks color. Note only called when
+	 * first determining what to render.
+	 */
+	public int colorMultiplier(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
+
+		if ((var5 & 3) == 1) {
+			// MCPatcher Start
+			return ColorizeBlock.colorizeBiomeWithBlending(ColorizerFoliage.getFoliageColorPine(), Colorizer.COLOR_MAP_PINE, par2, par3, par4);
+			// MCPatcher End
+		} else if ((var5 & 3) == 2) {
+			// MCPatcher Start
+			return ColorizeBlock.colorizeBiomeWithBlending(ColorizerFoliage.getFoliageColorBirch(), Colorizer.COLOR_MAP_BIRCH, par2, par3, par4);
+			// MCPatcher End
 		} else {
 			int var6 = 0;
 			int var7 = 0;
 			int var8 = 0;
 
-			for(int var9 = -1; var9 <= 1; ++var9) {
-				for(int var10 = -1; var10 <= 1; ++var10) {
-					int var11 = var1.getBiomeGenForCoords(var2 + var10, var4 + var9).getBiomeFoliageColor();
+			for (int var9 = -1; var9 <= 1; ++var9) {
+				for (int var10 = -1; var10 <= 1; ++var10) {
+					int var11 = par1IBlockAccess.getBiomeGenForCoords(par2 + var10, par4 + var9).getBiomeFoliageColor();
 					var6 += (var11 & 16711680) >> 16;
-					var7 += (var11 & '\uff00') >> 8;
+					var7 += (var11 & 65280) >> 8;
 					var8 += var11 & 255;
 				}
 			}
@@ -50,222 +68,260 @@
 		}
 	}
 
-	public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
+	/**
+	 * Called on server worlds only when the block has been replaced by a different block ID, or the same block with a
+	 * different metadata value, but before the new metadata value is set. Args: World, x, y, z, old block ID, old metadata
+	 */
+	public void breakBlock(World par1World, int par2, int par3, int par4, int par5, int par6) {
 		byte var7 = 1;
 		int var8 = var7 + 1;
-		if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-			for(int var9 = -var7; var9 <= var7; ++var9) {
-				for(int var10 = -var7; var10 <= var7; ++var10) {
-					for(int var11 = -var7; var11 <= var7; ++var11) {
-						int var12 = var1.getBlockId(var2 + var9, var3 + var10, var4 + var11);
-						if(var12 == Block.leaves.blockID) {
-							int var13 = var1.getBlockMetadata(var2 + var9, var3 + var10, var4 + var11);
-							var1.setBlockMetadata(var2 + var9, var3 + var10, var4 + var11, var13 | 8, 4);
+
+		if (par1World.checkChunksExist(par2 - var8, par3 - var8, par4 - var8, par2 + var8, par3 + var8, par4 + var8)) {
+			for (int var9 = -var7; var9 <= var7; ++var9) {
+				for (int var10 = -var7; var10 <= var7; ++var10) {
+					for (int var11 = -var7; var11 <= var7; ++var11) {
+						int var12 = par1World.getBlockId(par2 + var9, par3 + var10, par4 + var11);
+
+						if (var12 == Block.leaves.blockID) {
+							int var13 = par1World.getBlockMetadata(par2 + var9, par3 + var10, par4 + var11);
+							par1World.setBlockMetadataWithNotify(par2 + var9, par3 + var10, par4 + var11, var13 | 8, 4);
 						}
 					}
 				}
 			}
 		}
-
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			if((var6 & 8) != 0 && (var6 & 4) == 0) {
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote) {
+			int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+			if ((var6 & 8) != 0 && (var6 & 4) == 0) {
 				byte var7 = 4;
 				int var8 = var7 + 1;
 				byte var9 = 32;
 				int var10 = var9 * var9;
 				int var11 = var9 / 2;
-				if(this.adjacentTreeBlocks == null) {
+
+				if (this.adjacentTreeBlocks == null) {
 					this.adjacentTreeBlocks = new int[var9 * var9 * var9];
 				}
 
 				int var12;
-				if(var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-					var12 = -var7;
-
-					label112:
-					while(true) {
-						int var13;
-						int var14;
-						int var15;
-						if(var12 > var7) {
-							var12 = 1;
-
-							while(true) {
-								if(var12 > 4) {
-									break label112;
-								}
-
-								for(var13 = -var7; var13 <= var7; ++var13) {
-									for(var14 = -var7; var14 <= var7; ++var14) {
-										for(var15 = -var7; var15 <= var7; ++var15) {
-											if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
-												if(this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
-												}
-
-												if(this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
-													this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
-												}
-											}
-										}
-									}
-								}
-
-								++var12;
-							}
-						}
-
-						for(var13 = -var7; var13 <= var7; ++var13) {
-							for(var14 = -var7; var14 <= var7; ++var14) {
-								var15 = var1.getBlockId(var2 + var12, var3 + var13, var4 + var14);
-								if(var15 == Block.wood.blockID) {
+
+				if (par1World.checkChunksExist(par2 - var8, par3 - var8, par4 - var8, par2 + var8, par3 + var8, par4 + var8)) {
+					int var13;
+					int var14;
+					int var15;
+
+					for (var12 = -var7; var12 <= var7; ++var12) {
+						for (var13 = -var7; var13 <= var7; ++var13) {
+							for (var14 = -var7; var14 <= var7; ++var14) {
+								var15 = par1World.getBlockId(par2 + var12, par3 + var13, par4 + var14);
+
+								if (var15 == Block.wood.blockID) {
 									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
-								} else if(var15 == Block.leaves.blockID) {
+								} else if (var15 == Block.leaves.blockID) {
 									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
 								} else {
 									this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
 								}
 							}
 						}
-
-						++var12;
+					}
+
+					for (var12 = 1; var12 <= 4; ++var12) {
+						for (var13 = -var7; var13 <= var7; ++var13) {
+							for (var14 = -var7; var14 <= var7; ++var14) {
+								for (var15 = -var7; var15 <= var7; ++var15) {
+									if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1) {
+										if (this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
+										}
+
+										if (this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
+										}
+
+										if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
+										}
+
+										if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
+										}
+
+										if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
+										}
+
+										if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2) {
+											this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
+										}
+									}
+								}
+							}
+						}
 					}
 				}
 
 				var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-				if(var12 >= 0) {
-					var1.setBlockMetadata(var2, var3, var4, var6 & -9, 4);
+
+				if (var12 >= 0) {
+					par1World.setBlockMetadataWithNotify(par2, par3, par4, var6 & -9, 4);
 				} else {
-					this.removeLeaves(var1, var2, var3, var4);
+					this.removeLeaves(par1World, par2, par3, par4);
 				}
 			}
-
-		}
-	}
-
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(var1.canLightningStrikeAt(var2, var3 + 1, var4) && !var1.doesBlockHaveSolidTopSurface(var2, var3 - 1, var4) && var5.nextInt(15) == 1) {
-			double var6 = (double)((float)var2 + var5.nextFloat());
-			double var8 = (double)var3 - 0.05D;
-			double var10 = (double)((float)var4 + var5.nextFloat());
-			var1.spawnParticle("dripWater", var6, var8, var10, 0.0D, 0.0D, 0.0D);
-		}
-
-	}
-
-	private void removeLeaves(World var1, int var2, int var3, int var4) {
-		this.dropBlockAsItem(var1, var2, var3, var4, var1.getBlockMetadata(var2, var3, var4), 0);
-		var1.setBlockToAir(var2, var3, var4);
-	}
-
-	public int quantityDropped(Random var1) {
-		return var1.nextInt(20) == 0 ? 1 : 0;
-	}
-
-	public int idDropped(int var1, Random var2, int var3) {
+		}
+	}
+
+	/**
+	 * A randomly called display update to be able to add particles or other items for display
+	 */
+	public void randomDisplayTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (par1World.canLightningStrikeAt(par2, par3 + 1, par4) && !par1World.doesBlockHaveSolidTopSurface(par2, par3 - 1, par4) && par5Random.nextInt(15) == 1) {
+			double var6 = (double)((float)par2 + par5Random.nextFloat());
+			double var8 = (double)par3 - 0.05D;
+			double var10 = (double)((float)par4 + par5Random.nextFloat());
+			par1World.spawnParticle("dripWater", var6, var8, var10, 0.0D, 0.0D, 0.0D);
+		}
+	}
+
+	private void removeLeaves(World par1World, int par2, int par3, int par4) {
+		this.dropBlockAsItem(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4), 0);
+		par1World.setBlockToAir(par2, par3, par4); 
+	}
+
+	/**
+	 * Returns the quantity of items to drop on block destruction.
+	 */
+	public int quantityDropped(Random par1Random) {
+		return par1Random.nextInt(20) == 0 ? 1 : 0;
+	}
+
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
 		return Block.sapling.blockID;
 	}
 
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-		if(!var1.isRemote) {
+	/**
+	 * Drops the block items with a specified chance of dropping the specified items
+	 */
+	public void dropBlockAsItemWithChance(World par1World, int par2, int par3, int par4, int par5, float par6, int par7) {
+		if (!par1World.isRemote) {
 			int var8 = 20;
-			if((var5 & 3) == 3) {
+
+			if ((par5 & 3) == 3) {
 				var8 = 40;
 			}
 
-			if(var7 > 0) {
-				var8 -= 2 << var7;
-				if(var8 < 10) {
+			if (par7 > 0) {
+				var8 -= 2 << par7;
+
+				if (var8 < 10) {
 					var8 = 10;
 				}
 			}
 
-			if(var1.s.nextInt(var8) == 0) {
-				int var9 = this.idDropped(var5, var1.s, var7);
-				this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(var9, 1, this.damageDropped(var5)));
+			if (par1World.rand.nextInt(var8) == 0) {
+				int var9 = this.idDropped(par5, par1World.rand, par7);
+				this.dropBlockAsItem_do(par1World, par2, par3, par4, new ItemStack(var9, 1, this.damageDropped(par5)));
 			}
 
 			var8 = 200;
-			if(var7 > 0) {
-				var8 -= 10 << var7;
-				if(var8 < 40) {
+
+			if (par7 > 0) {
+				var8 -= 10 << par7;
+
+				if (var8 < 40) {
 					var8 = 40;
 				}
 			}
 
-			if((var5 & 3) == 0 && var1.s.nextInt(var8) == 0) {
-				this.dropBlockAsItem_do(var1, var2, var3, var4, new ItemStack(Item.appleRed, 1, 0));
+			if ((par5 & 3) == 0 && par1World.rand.nextInt(var8) == 0) {
+				this.dropBlockAsItem_do(par1World, par2, par3, par4, new ItemStack(Item.appleRed, 1, 0));
 			}
 		}
-
 	}
 
-	public void harvestBlock(World var1, EntityPlayer var2, int var3, int var4, int var5, int var6) {
-		if(!var1.isRemote && var2.getCurrentEquippedItem() != null && var2.getCurrentEquippedItem().itemID == Item.shears.itemID) {
-			var2.addStat(StatList.mineBlockStatArray[this.blockID], 1);
-			this.dropBlockAsItem_do(var1, var3, var4, var5, new ItemStack(Block.leaves.blockID, 1, var6 & 3));
+	/**
+	 * Called when the player destroys a block with an item that can harvest it. (i, j, k) are the coordinates of the block
+	 * and l is the block's subtype/damage.
+	 */
+	public void harvestBlock(World par1World, EntityPlayer par2EntityPlayer, int par3, int par4, int par5, int par6) {
+		if (!par1World.isRemote && par2EntityPlayer.getCurrentEquippedItem() != null && par2EntityPlayer.getCurrentEquippedItem().itemID == Item.shears.itemID) {
+			par2EntityPlayer.addStat(StatList.mineBlockStatArray[this.blockID], 1);
+			this.dropBlockAsItem_do(par1World, par3, par4, par5, new ItemStack(Block.leaves.blockID, 1, par6 & 3));
 		} else {
-			super.harvestBlock(var1, var2, var3, var4, var5, var6);
+			super.harvestBlock(par1World, par2EntityPlayer, par3, par4, par5, par6);
 		}
-
-	}
-
-	public int damageDropped(int var1) {
-		return var1 & 3;
-	}
-
+	}
+
+	/**
+	 * Determines the damage on the item the block drops. Used in cloth and wood.
+	 */
+	public int damageDropped(int par1) {
+		return par1 & 3;
+	}
+
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return !this.graphicsLevel;
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		return (var2 & 3) == 1 ? this.iconArray[this.iconType][1] : ((var2 & 3) == 3 ? this.iconArray[this.iconType][3] : ((var2 & 3) == 2 ? this.iconArray[this.iconType][2] : this.iconArray[this.iconType][0]));
-	}
-
-	public void setGraphicsLevel(boolean var1) {
-		this.graphicsLevel = var1;
-		this.iconType = var1 ? 0 : 1;
-	}
-
-	public void getSubBlocks(int var1, CreativeTabs var2, List var3) {
-		var3.add(new ItemStack(var1, 1, 0));
-		var3.add(new ItemStack(var1, 1, 1));
-		var3.add(new ItemStack(var1, 1, 2));
-		var3.add(new ItemStack(var1, 1, 3));
-	}
-
-	protected ItemStack createStackedBlock(int var1) {
-		return new ItemStack(this.blockID, 1, var1 & 3);
-	}
-
-	public void registerIcons(IconRegister var1) {
-		for(int var2 = 0; var2 < b.length; ++var2) {
-			this.iconArray[var2] = new Icon[b[var2].length];
-
-			for(int var3 = 0; var3 < b[var2].length; ++var3) {
-				this.iconArray[var2][var3] = var1.registerIcon(b[var2][var3]);
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return (par2 & 3) == 1 ? this.iconArray[this.iconType][1] : ((par2 & 3) == 3 ? this.iconArray[this.iconType][3] : ((par2 & 3) == 2 ? this.iconArray[this.iconType][2] : this.iconArray[this.iconType][0]));
+	}
+
+	/**
+	 * Pass true to draw this block using fancy graphics, or false for fast graphics.
+	 */
+	public void setGraphicsLevel(boolean par1) {
+		this.graphicsLevel = par1;
+		this.iconType = par1 ? 0 : 1;
+	}
+	
+	/**
+	 * returns a list of blocks with the same ID, but different meta (eg: wood returns 4 blocks)
+	 */
+	public void getSubBlocks(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		par3List.add(new ItemStack(par1, 1, 0));
+		par3List.add(new ItemStack(par1, 1, 1));
+		par3List.add(new ItemStack(par1, 1, 2));
+		par3List.add(new ItemStack(par1, 1, 3));
+	}
+
+	/**
+	 * Returns an item stack containing a single instance of the current block type. 'i' is the block's subtype/damage and
+	 * is ignored for blocks which do not support subtypes. Blocks which cannot be harvested should return null.
+	 */
+	protected ItemStack createStackedBlock(int par1) {
+		return new ItemStack(this.blockID, 1, par1 & 3);
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) { 
+		for (int var2 = 0; var2 < field_94396_b.length; ++var2) {
+			this.iconArray[var2] = new Icon[field_94396_b[var2].length];
+
+			for (int var3 = 0; var3 < field_94396_b[var2].length; ++var3) {
+				this.iconArray[var2][var3] = par1IconRegister.registerIcon(field_94396_b[var2][var3]); 
 			}
 		}
-
 	}
 }
