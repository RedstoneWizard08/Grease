--- net/minecraft/src/BlockLeavesBase.java
+++ net/minecraft/src/BlockLeavesBase.java
@@ -1,19 +1,32 @@
 package net.minecraft.src;
 
 public class BlockLeavesBase extends Block {
+
+	/**
+	 * Used to determine how to display leaves based on the graphics level. May also be used in rendering for transparency,
+	 * not sure.
+	 */
 	protected boolean graphicsLevel;
 
-	protected BlockLeavesBase(int var1, Material var2, boolean var3) {
-		super(var1, var2);
-		this.graphicsLevel = var3;
+	protected BlockLeavesBase(int par1, Material par2Material, boolean par3) {
+		super(par1, par2Material);
+		this.graphicsLevel = par3;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1.getBlockId(var2, var3, var4);
-		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(var1, var2, var3, var4, var5);
+	/**
+	 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
+	 * coordinates.  Args: blockAccess, x, y, z, side
+	 */
+	public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		int var6 = par1IBlockAccess.getBlockId(par2, par3, par4);
+		return !this.graphicsLevel && var6 == this.blockID ? false : super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5);
 	}
 }
