--- net/minecraft/src/BlockPistonBase.java
+++ net/minecraft/src/BlockPistonBase.java
@@ -3,139 +3,193 @@
 import java.util.List;
 
 public class BlockPistonBase extends Block {
+
+	/** This pistons is the sticky one? */
 	private final boolean isSticky;
+
+	/** Only visible when piston is extended */
 	private Icon innerTopIcon;
+
+	/** Bottom side texture */
 	private Icon bottomIcon;
+
+	/** Top icon of piston depends on (either sticky or normal) */
 	private Icon topIcon;
 
-	public BlockPistonBase(int var1, boolean var2) {
-		super(var1, Material.piston);
-		this.isSticky = var2;
+	public BlockPistonBase(int par1, boolean par2) {
+		super(par1, Material.piston);
+		this.isSticky = par2;
 		this.setStepSound(soundStoneFootstep);
 		this.setHardness(0.5F);
 		this.setCreativeTab(CreativeTabs.tabRedstone);
 	}
 
+	/**
+	 * Return the either 106 or 107 as the texture index depending on the isSticky flag. This will actually never get
+	 * called by TileEntityRendererPiston.renderPiston() because TileEntityPiston.shouldRenderHead() will always return false.
+	 */
 	public Icon getPistonExtensionTexture() {
 		return this.topIcon;
 	}
 
-	public void func_96479_b(float var1, float var2, float var3, float var4, float var5, float var6) {
-		this.setBlockBounds(var1, var2, var3, var4, var5, var6);
-	}
-
-	public Icon getIcon(int var1, int var2) {
-		int var3 = getOrientation(var2);
-		return var3 > 5 ? this.topIcon : (var1 == var3 ? (!isExtended(var2) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D ? this.topIcon : this.innerTopIcon) : (var1 == Facing.oppositeSide[var3] ? this.bottomIcon : this.blockIcon));
-	}
-
-	public static Icon getPistonBaseIcon(String var0) {
-		return var0 == "piston_side" ? Block.pistonBase.blockIcon : (var0 == "piston_top_normal" ? Block.pistonBase.topIcon : (var0 == "piston_top_sticky" ? Block.pistonStickyBase.topIcon : (var0 == "piston_inner" ? Block.pistonBase.innerTopIcon : null)));
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.blockIcon = var1.registerIcon("piston_side");
-		this.topIcon = var1.registerIcon(this.isSticky ? "piston_top_sticky" : "piston_top_normal");
-		this.innerTopIcon = var1.registerIcon("piston_inner");
-		this.bottomIcon = var1.registerIcon("piston_bottom");
-	}
-
+	public void func_96479_b(float par1, float par2, float par3, float par4, float par5, float par6) {
+		this.setBlockBounds(par1, par2, par3, par4, par5, par6);
+	}
+
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		int var3 = getOrientation(par2);
+		return var3 > 5 ? this.topIcon : (par1 == var3 ? (!isExtended(par2) && this.minX <= 0.0D && this.minY <= 0.0D && this.minZ <= 0.0D && this.maxX >= 1.0D && this.maxY >= 1.0D && this.maxZ >= 1.0D ? this.topIcon : this.innerTopIcon) : (par1 == Facing.oppositeSide[var3] ? this.bottomIcon : this.blockIcon));
+	}
+
+	public static Icon getPistonBaseIcon(String par0Str) {
+		return par0Str == "piston_side" ? Block.pistonBase.blockIcon : (par0Str == "piston_top_normal" ? Block.pistonBase.topIcon : (par0Str == "piston_top_sticky" ? Block.pistonStickyBase.topIcon : (par0Str == "piston_inner" ? Block.pistonBase.innerTopIcon : null)));
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.blockIcon = par1IconRegister.registerIcon("piston_side");
+		this.topIcon = par1IconRegister.registerIcon(this.isSticky ? "piston_top_sticky" : "piston_top_normal");
+		this.innerTopIcon = par1IconRegister.registerIcon("piston_inner");
+		this.bottomIcon = par1IconRegister.registerIcon("piston_bottom");
+	}
+
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 16;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
 		return false;
 	}
 
-	public void onBlockPlacedBy(World var1, int var2, int var3, int var4, EntityLivingBase var5, ItemStack var6) {
-		int var7 = determineOrientation(var1, var2, var3, var4, var5);
-		var1.setBlockMetadata(var2, var3, var4, var7, 2);
-		if(!var1.isRemote) {
-			this.updatePistonState(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isRemote) {
-			this.updatePistonState(var1, var2, var3, var4);
-		}
-
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(!var1.isRemote && var1.getBlockTileEntity(var2, var3, var4) == null) {
-			this.updatePistonState(var1, var2, var3, var4);
-		}
-
-	}
-
-	private void updatePistonState(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
+	/**
+	 * Called when the block is placed in the world.
+	 */
+	public void onBlockPlacedBy(World par1World, int par2, int par3, int par4, EntityLivingBase par5EntityLivingBase, ItemStack par6ItemStack) {
+		int var7 = determineOrientation(par1World, par2, par3, par4, par5EntityLivingBase);
+		par1World.setBlockMetadataWithNotify(par2, par3, par4, var7, 2);
+
+		if (!par1World.isRemote) {
+			this.updatePistonState(par1World, par2, par3, par4);
+		}
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!par1World.isRemote) {
+			this.updatePistonState(par1World, par2, par3, par4);
+		}
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		if (!par1World.isRemote && par1World.getBlockTileEntity(par2, par3, par4) == null) {
+			this.updatePistonState(par1World, par2, par3, par4);
+		}
+	}
+
+	/**
+	 * handles attempts to extend or retract the piston.
+	 */
+	private void updatePistonState(World par1World, int par2, int par3, int par4) {
+		int var5 = par1World.getBlockMetadata(par2, par3, par4);
 		int var6 = getOrientation(var5);
-		if(var6 != 7) {
-			boolean var7 = this.isIndirectlyPowered(var1, var2, var3, var4, var6);
-			if(var7 && !isExtended(var5)) {
-				if(canExtend(var1, var2, var3, var4, var6)) {
-					var1.addBlockEvent(var2, var3, var4, this.blockID, 0, var6);
+
+		if (var6 != 7) {
+			boolean var7 = this.isIndirectlyPowered(par1World, par2, par3, par4, var6);
+
+			if (var7 && !isExtended(var5)) {
+				if (canExtend(par1World, par2, par3, par4, var6)) {
+					par1World.addBlockEvent(par2, par3, par4, this.blockID, 0, var6);
 				}
-			} else if(!var7 && isExtended(var5)) {
-				var1.setBlockMetadata(var2, var3, var4, var6, 2);
-				var1.addBlockEvent(var2, var3, var4, this.blockID, 1, var6);
-			}
-
-		}
-	}
-
-	private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4, int var5) {
-		return var5 != 0 && var1.getIndirectPowerOutput(var2, var3 - 1, var4, 0) ? true : (var5 != 1 && var1.getIndirectPowerOutput(var2, var3 + 1, var4, 1) ? true : (var5 != 2 && var1.getIndirectPowerOutput(var2, var3, var4 - 1, 2) ? true : (var5 != 3 && var1.getIndirectPowerOutput(var2, var3, var4 + 1, 3) ? true : (var5 != 5 && var1.getIndirectPowerOutput(var2 + 1, var3, var4, 5) ? true : (var5 != 4 && var1.getIndirectPowerOutput(var2 - 1, var3, var4, 4) ? true : (var1.getIndirectPowerOutput(var2, var3, var4, 0) ? true : (var1.getIndirectPowerOutput(var2, var3 + 2, var4, 1) ? true : (var1.getIndirectPowerOutput(var2, var3 + 1, var4 - 1, 2) ? true : (var1.getIndirectPowerOutput(var2, var3 + 1, var4 + 1, 3) ? true : (var1.getIndirectPowerOutput(var2 - 1, var3 + 1, var4, 4) ? true : var1.getIndirectPowerOutput(var2 + 1, var3 + 1, var4, 5)))))))))));
-	}
-
-	public boolean onBlockEventReceived(World var1, int var2, int var3, int var4, int var5, int var6) {
-		if(!var1.isRemote) {
-			boolean var7 = this.isIndirectlyPowered(var1, var2, var3, var4, var6);
-			if(var7 && var5 == 1) {
-				var1.setBlockMetadata(var2, var3, var4, var6 | 8, 2);
-				return false;
-			}
-
-			if(!var7 && var5 == 0) {
-				return false;
-			}
-		}
-
-		if(var5 == 0) {
-			if(!this.tryExtend(var1, var2, var3, var4, var6)) {
-				return false;
-			}
-
-			var1.setBlockMetadata(var2, var3, var4, var6 | 8, 2);
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "tile.piston.out", 0.5F, var1.s.nextFloat() * 0.25F + 0.6F);
-		} else if(var5 == 1) {
-			TileEntity var16 = var1.getBlockTileEntity(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6]);
-			if(var16 instanceof TileEntityPiston) {
+			} else if (!var7 && isExtended(var5)) {
+				par1World.setBlockMetadataWithNotify(par2, par3, par4, var6, 2);
+				par1World.addBlockEvent(par2, par3, par4, this.blockID, 1, var6);
+			}
+		}
+	}
+
+	/**
+	 * checks the block to that side to see if it is indirectly powered.
+	 */
+	private boolean isIndirectlyPowered(World par1World, int par2, int par3, int par4, int par5) {
+		return par5 != 0 && par1World.getIndirectPowerOutput(par2, par3 - 1, par4, 0) ? true : (par5 != 1 && par1World.getIndirectPowerOutput(par2, par3 + 1, par4, 1) ? true : (par5 != 2 && par1World.getIndirectPowerOutput(par2, par3, par4 - 1, 2) ? true : (par5 != 3 && par1World.getIndirectPowerOutput(par2, par3, par4 + 1, 3) ? true : (par5 != 5 && par1World.getIndirectPowerOutput(par2 + 1, par3, par4, 5) ? true : (par5 != 4 && par1World.getIndirectPowerOutput(par2 - 1, par3, par4, 4) ? true : (par1World.getIndirectPowerOutput(par2, par3, par4, 0) ? true : (par1World.getIndirectPowerOutput(par2, par3 + 2, par4, 1) ? true : (par1World.getIndirectPowerOutput(par2, par3 + 1, par4 - 1, 2) ? true : (par1World.getIndirectPowerOutput(par2, par3 + 1, par4 + 1, 3) ? true : (par1World.getIndirectPowerOutput(par2 - 1, par3 + 1, par4, 4) ? true : par1World.getIndirectPowerOutput(par2 + 1, par3 + 1, par4, 5)))))))))));
+	}
+
+	/**
+	 * Called when the block receives a BlockEvent - see World.addBlockEvent. By default, passes it on to the tile entity
+	 * at this location. Args: world, x, y, z, blockID, EventID, event parameter
+	 */
+	public boolean onBlockEventReceived(World par1World, int par2, int par3, int par4, int par5, int par6) {
+		if (!par1World.isRemote) {
+			boolean var7 = this.isIndirectlyPowered(par1World, par2, par3, par4, par6);
+
+			if (var7 && par5 == 1) {
+				par1World.setBlockMetadataWithNotify(par2, par3, par4, par6 | 8, 2);
+				return false;
+			}
+
+			if (!var7 && par5 == 0) {
+				return false;
+			}
+		}
+
+		if (par5 == 0) {
+			if (!this.tryExtend(par1World, par2, par3, par4, par6)) {
+				return false;
+			}
+
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, par6 | 8, 2);
+			par1World.playSoundEffect((double)par2 + 0.5D, (double)par3 + 0.5D, (double)par4 + 0.5D, "tile.piston.out", 0.5F, par1World.rand.nextFloat() * 0.25F + 0.6F);
+		} else if (par5 == 1) {
+			TileEntity var16 = par1World.getBlockTileEntity(par2 + Facing.offsetsXForSide[par6], par3 + Facing.offsetsYForSide[par6], par4 + Facing.offsetsZForSide[par6]);
+
+			if (var16 instanceof TileEntityPiston) {
 				((TileEntityPiston)var16).clearPistonTileEntity();
 			}
 
-			var1.setBlock(var2, var3, var4, Block.pistonMoving.blockID, var6, 3);
-			var1.setBlockTileEntity(var2, var3, var4, BlockPistonMoving.getTileEntity(this.blockID, var6, var6, false, true));
-			if(this.isSticky) {
-				int var8 = var2 + Facing.offsetsXForSide[var6] * 2;
-				int var9 = var3 + Facing.offsetsYForSide[var6] * 2;
-				int var10 = var4 + Facing.offsetsZForSide[var6] * 2;
-				int var11 = var1.getBlockId(var8, var9, var10);
-				int var12 = var1.getBlockMetadata(var8, var9, var10);
+			par1World.setBlock(par2, par3, par4, Block.pistonMoving.blockID, par6, 3);
+			par1World.setBlockTileEntity(par2, par3, par4, BlockPistonMoving.getTileEntity(this.blockID, par6, par6, false, true));
+
+			if (this.isSticky) {
+				int var8 = par2 + Facing.offsetsXForSide[par6] * 2;
+				int var9 = par3 + Facing.offsetsYForSide[par6] * 2;
+				int var10 = par4 + Facing.offsetsZForSide[par6] * 2;
+				int var11 = par1World.getBlockId(var8, var9, var10);
+				int var12 = par1World.getBlockMetadata(var8, var9, var10);
 				boolean var13 = false;
-				if(var11 == Block.pistonMoving.blockID) {
-					TileEntity var14 = var1.getBlockTileEntity(var8, var9, var10);
-					if(var14 instanceof TileEntityPiston) {
+
+				if (var11 == Block.pistonMoving.blockID) {
+					TileEntity var14 = par1World.getBlockTileEntity(var8, var9, var10);
+
+					if (var14 instanceof TileEntityPiston) {
 						TileEntityPiston var15 = (TileEntityPiston)var14;
-						if(var15.getPistonOrientation() == var6 && var15.isExtending()) {
+
+						if (var15.getPistonOrientation() == par6 && var15.isExtending()) {
 							var15.clearPistonTileEntity();
 							var11 = var15.getStoredBlockID();
 							var12 = var15.getBlockMetadata();
@@ -144,153 +198,191 @@
 					}
 				}
 
-				if(var13 || var11 <= 0 || !canPushBlock(var11, var1, var8, var9, var10, false) || Block.blocksList[var11].getMobilityFlag() != 0 && var11 != Block.pistonBase.blockID && var11 != Block.pistonStickyBase.blockID) {
-					if(!var13) {
-						var1.setBlockToAir(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6]);
-					}
-				} else {
-					var2 += Facing.offsetsXForSide[var6];
-					var3 += Facing.offsetsYForSide[var6];
-					var4 += Facing.offsetsZForSide[var6];
-					var1.setBlock(var2, var3, var4, Block.pistonMoving.blockID, var12, 3);
-					var1.setBlockTileEntity(var2, var3, var4, BlockPistonMoving.getTileEntity(var11, var12, var6, false, false));
-					var1.setBlockToAir(var8, var9, var10);
+				if (!var13 && var11 > 0 && canPushBlock(var11, par1World, var8, var9, var10, false) && (Block.blocksList[var11].getMobilityFlag() == 0 || var11 == Block.pistonBase.blockID || var11 == Block.pistonStickyBase.blockID)) {
+					par2 += Facing.offsetsXForSide[par6];
+					par3 += Facing.offsetsYForSide[par6];
+					par4 += Facing.offsetsZForSide[par6];
+					par1World.setBlock(par2, par3, par4, Block.pistonMoving.blockID, var12, 3);
+					par1World.setBlockTileEntity(par2, par3, par4, BlockPistonMoving.getTileEntity(var11, var12, par6, false, false));
+					par1World.setBlockToAir(var8, var9, var10);
+				} else if (!var13) {
+					par1World.setBlockToAir(par2 + Facing.offsetsXForSide[par6], par3 + Facing.offsetsYForSide[par6], par4 + Facing.offsetsZForSide[par6]);
 				}
 			} else {
-				var1.setBlockToAir(var2 + Facing.offsetsXForSide[var6], var3 + Facing.offsetsYForSide[var6], var4 + Facing.offsetsZForSide[var6]);
+				par1World.setBlockToAir(par2 + Facing.offsetsXForSide[par6], par3 + Facing.offsetsYForSide[par6], par4 + Facing.offsetsZForSide[par6]);
 			}
 
-			var1.playSoundEffect((double)var2 + 0.5D, (double)var3 + 0.5D, (double)var4 + 0.5D, "tile.piston.in", 0.5F, var1.s.nextFloat() * 0.15F + 0.6F);
+			par1World.playSoundEffect((double)par2 + 0.5D, (double)par3 + 0.5D, (double)par4 + 0.5D, "tile.piston.in", 0.5F, par1World.rand.nextFloat() * 0.15F + 0.6F);
 		}
 
 		return true;
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		if(isExtended(var5)) {
+	/**
+	 * Updates the blocks bounds based on its current state. Args: world, x, y, z
+	 */
+	public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
+
+		if (isExtended(var5)) {
 			float var6 = 0.25F;
-			switch(getOrientation(var5)) {
-			case 0:
-				this.setBlockBounds(0.0F, 0.25F, 0.0F, 1.0F, 1.0F, 1.0F);
-				break;
-			case 1:
-				this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 12.0F / 16.0F, 1.0F);
-				break;
-			case 2:
-				this.setBlockBounds(0.0F, 0.0F, 0.25F, 1.0F, 1.0F, 1.0F);
-				break;
-			case 3:
-				this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 12.0F / 16.0F);
-				break;
-			case 4:
-				this.setBlockBounds(0.25F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-				break;
-			case 5:
-				this.setBlockBounds(0.0F, 0.0F, 0.0F, 12.0F / 16.0F, 1.0F, 1.0F);
+
+			switch (getOrientation(var5)) {
+				case 0:
+					this.setBlockBounds(0.0F, 0.25F, 0.0F, 1.0F, 1.0F, 1.0F);
+					break;
+
+				case 1:
+					this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 0.75F, 1.0F);
+					break;
+
+				case 2:
+					this.setBlockBounds(0.0F, 0.0F, 0.25F, 1.0F, 1.0F, 1.0F);
+					break;
+
+				case 3:
+					this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 0.75F);
+					break;
+
+				case 4:
+					this.setBlockBounds(0.25F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+					break;
+
+				case 5:
+					this.setBlockBounds(0.0F, 0.0F, 0.0F, 0.75F, 1.0F, 1.0F);
 			}
 		} else {
 			this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 		}
-
 	}
 
+	/**
+	 * Sets the block's bounds for rendering it as an item
+	 */
 	public void setBlockBoundsForItemRender() {
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
 	}
 
-	public void addCollisionBoxesToList(World var1, int var2, int var3, int var4, AxisAlignedBB var5, List var6, Entity var7) {
+	/**
+	 * Adds all intersecting collision boxes to a list. (Be sure to only add boxes to the list if they intersect the mask.)
+	 * Parameters: World, X, Y, Z, mask, list, colliding entity
+	 */
+	public void addCollisionBoxesToList(World par1World, int par2, int par3, int par4, AxisAlignedBB par5AxisAlignedBB, List par6List, Entity par7Entity) {
 		this.setBlockBounds(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
-		super.addCollisionBoxesToList(var1, var2, var3, var4, var5, var6, var7);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-	}
-
+		super.addCollisionBoxesToList(par1World, par2, par3, par4, par5AxisAlignedBB, par6List, par7Entity);
+	}
+
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
+		return super.getCollisionBoundingBoxFromPool(par1World, par2, par3, par4);
+	}
+
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
-	public static int getOrientation(int var0) {
-		return var0 & 7;
-	}
-
-	public static boolean isExtended(int var0) {
-		return (var0 & 8) != 0;
-	}
-
-	public static int determineOrientation(World var0, int var1, int var2, int var3, EntityLivingBase var4) {
-		if(MathHelper.abs((float)var4.posX - (float)var1) < 2.0F && MathHelper.abs((float)var4.posZ - (float)var3) < 2.0F) {
-			double var5 = var4.posY + 1.82D - (double)var4.yOffset;
-			if(var5 - (double)var2 > 2.0D) {
+	/**
+	 * returns an int which describes the direction the piston faces
+	 */
+	public static int getOrientation(int par0) {
+		return par0 & 7;
+	}
+
+	/**
+	 * Determine if the metadata is related to something powered.
+	 */
+	public static boolean isExtended(int par0) {
+		return (par0 & 8) != 0;
+	}
+
+	/**
+	 * gets the way this piston should face for that entity that placed it.
+	 */
+	public static int determineOrientation(World par0World, int par1, int par2, int par3, EntityLivingBase par4EntityLivingBase) {
+		if (MathHelper.abs((float)par4EntityLivingBase.posX - (float)par1) < 2.0F && MathHelper.abs((float)par4EntityLivingBase.posZ - (float)par3) < 2.0F) {
+			double var5 = par4EntityLivingBase.posY + 1.82D - (double)par4EntityLivingBase.yOffset;
+
+			if (var5 - (double)par2 > 2.0D) {
 				return 1;
 			}
 
-			if((double)var2 - var5 > 0.0D) {
+			if ((double)par2 - var5 > 0.0D) {
 				return 0;
 			}
 		}
 
-		int var7 = MathHelper.floor_double((double)(var4.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
+		int var7 = MathHelper.floor_double((double)(par4EntityLivingBase.rotationYaw * 4.0F / 360.0F) + 0.5D) & 3;
 		return var7 == 0 ? 2 : (var7 == 1 ? 5 : (var7 == 2 ? 3 : (var7 == 3 ? 4 : 0)));
 	}
 
-	private static boolean canPushBlock(int var0, World var1, int var2, int var3, int var4, boolean var5) {
-		if(var0 == Block.obsidian.blockID) {
+	/**
+	 * returns true if the piston can push the specified block
+	 */
+	private static boolean canPushBlock(int par0, World par1World, int par2, int par3, int par4, boolean par5) {
+		if (par0 == Block.obsidian.blockID) {
 			return false;
 		} else {
-			if(var0 != Block.pistonBase.blockID && var0 != Block.pistonStickyBase.blockID) {
-				if(Block.blocksList[var0].getBlockHardness(var1, var2, var3, var4) == -1.0F) {
-					return false;
-				}
-
-				if(Block.blocksList[var0].getMobilityFlag() == 2) {
-					return false;
-				}
-
-				if(Block.blocksList[var0].getMobilityFlag() == 1) {
-					if(!var5) {
+			if (par0 != Block.pistonBase.blockID && par0 != Block.pistonStickyBase.blockID) {
+				if (Block.blocksList[par0].getBlockHardness(par1World, par2, par3, par4) == -1.0F) {
+					return false;
+				}
+
+				if (Block.blocksList[par0].getMobilityFlag() == 2) {
+					return false;
+				}
+
+				if (Block.blocksList[par0].getMobilityFlag() == 1) {
+					if (!par5) {
 						return false;
 					}
 
 					return true;
 				}
-			} else if(isExtended(var1.getBlockMetadata(var2, var3, var4))) {
+			} else if (isExtended(par1World.getBlockMetadata(par2, par3, par4))) {
 				return false;
 			}
 
-			return !(Block.blocksList[var0] instanceof ITileEntityProvider);
+			return !(Block.blocksList[par0] instanceof ITileEntityProvider);
 		}
 	}
 
-	private static boolean canExtend(World var0, int var1, int var2, int var3, int var4) {
-		int var5 = var1 + Facing.offsetsXForSide[var4];
-		int var6 = var2 + Facing.offsetsYForSide[var4];
-		int var7 = var3 + Facing.offsetsZForSide[var4];
+	/**
+	 * checks to see if this piston could push the blocks in front of it.
+	 */
+	private static boolean canExtend(World par0World, int par1, int par2, int par3, int par4) {
+		int var5 = par1 + Facing.offsetsXForSide[par4];
+		int var6 = par2 + Facing.offsetsYForSide[par4];
+		int var7 = par3 + Facing.offsetsZForSide[par4];
 		int var8 = 0;
 
-		while(true) {
-			if(var8 < 13) {
-				if(var6 <= 0 || var6 >= 255) {
+		while (true) {
+			if (var8 < 13) {
+				if (var6 <= 0 || var6 >= 255) {
 					return false;
 				}
 
-				int var9 = var0.getBlockId(var5, var6, var7);
-				if(var9 != 0) {
-					if(!canPushBlock(var9, var0, var5, var6, var7, true)) {
+				int var9 = par0World.getBlockId(var5, var6, var7);
+
+				if (var9 != 0) {
+					if (!canPushBlock(var9, par0World, var5, var6, var7, true)) {
 						return false;
 					}
 
-					if(Block.blocksList[var9].getMobilityFlag() != 1) {
-						if(var8 == 12) {
+					if (Block.blocksList[var9].getMobilityFlag() != 1) {
+						if (var8 == 12) {
 							return false;
 						}
 
-						var5 += Facing.offsetsXForSide[var4];
-						var6 += Facing.offsetsYForSide[var4];
-						var7 += Facing.offsetsZForSide[var4];
+						var5 += Facing.offsetsXForSide[par4];
+						var6 += Facing.offsetsYForSide[par4];
+						var7 += Facing.offsetsZForSide[par4];
 						++var8;
 						continue;
 					}
@@ -301,39 +393,44 @@
 		}
 	}
 
-	private boolean tryExtend(World var1, int var2, int var3, int var4, int var5) {
-		int var6 = var2 + Facing.offsetsXForSide[var5];
-		int var7 = var3 + Facing.offsetsYForSide[var5];
-		int var8 = var4 + Facing.offsetsZForSide[var5];
+	/**
+	 * attempts to extend the piston. returns false if impossible.
+	 */
+	private boolean tryExtend(World par1World, int par2, int par3, int par4, int par5) {
+		int var6 = par2 + Facing.offsetsXForSide[par5];
+		int var7 = par3 + Facing.offsetsYForSide[par5];
+		int var8 = par4 + Facing.offsetsZForSide[par5];
 		int var9 = 0;
 
-		while(true) {
+		while (true) {
 			int var10;
-			if(var9 < 13) {
-				if(var7 <= 0 || var7 >= 255) {
+
+			if (var9 < 13) {
+				if (var7 <= 0 || var7 >= 255) {
 					return false;
 				}
 
-				var10 = var1.getBlockId(var6, var7, var8);
-				if(var10 != 0) {
-					if(!canPushBlock(var10, var1, var6, var7, var8, true)) {
+				var10 = par1World.getBlockId(var6, var7, var8);
+
+				if (var10 != 0) {
+					if (!canPushBlock(var10, par1World, var6, var7, var8, true)) {
 						return false;
 					}
 
-					if(Block.blocksList[var10].getMobilityFlag() != 1) {
-						if(var9 == 12) {
+					if (Block.blocksList[var10].getMobilityFlag() != 1) {
+						if (var9 == 12) {
 							return false;
 						}
 
-						var6 += Facing.offsetsXForSide[var5];
-						var7 += Facing.offsetsYForSide[var5];
-						var8 += Facing.offsetsZForSide[var5];
+						var6 += Facing.offsetsXForSide[par5];
+						var7 += Facing.offsetsYForSide[par5];
+						var8 += Facing.offsetsZForSide[par5];
 						++var9;
 						continue;
 					}
 
-					Block.blocksList[var10].dropBlockAsItem(var1, var6, var7, var8, var1.getBlockMetadata(var6, var7, var8), 0);
-					var1.setBlockToAir(var6, var7, var8);
+					Block.blocksList[var10].dropBlockAsItem(par1World, var6, var7, var8, par1World.getBlockMetadata(var6, var7, var8), 0);
+					par1World.setBlockToAir(var6, var7, var8);
 				}
 			}
 
@@ -341,23 +438,24 @@
 			var10 = var7;
 			int var11 = var8;
 			int var12 = 0;
-
 			int[] var13;
 			int var14;
 			int var15;
 			int var16;
-			for(var13 = new int[13]; var6 != var2 || var7 != var3 || var8 != var4; var8 = var16) {
-				var14 = var6 - Facing.offsetsXForSide[var5];
-				var15 = var7 - Facing.offsetsYForSide[var5];
-				var16 = var8 - Facing.offsetsZForSide[var5];
-				int var17 = var1.getBlockId(var14, var15, var16);
-				int var18 = var1.getBlockMetadata(var14, var15, var16);
-				if(var17 == this.blockID && var14 == var2 && var15 == var3 && var16 == var4) {
-					var1.setBlock(var6, var7, var8, Block.pistonMoving.blockID, var5 | (this.isSticky ? 8 : 0), 4);
-					var1.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(Block.pistonExtension.blockID, var5 | (this.isSticky ? 8 : 0), var5, true, false));
+
+			for (var13 = new int[13]; var6 != par2 || var7 != par3 || var8 != par4; var8 = var16) {
+				var14 = var6 - Facing.offsetsXForSide[par5];
+				var15 = var7 - Facing.offsetsYForSide[par5];
+				var16 = var8 - Facing.offsetsZForSide[par5];
+				int var17 = par1World.getBlockId(var14, var15, var16);
+				int var18 = par1World.getBlockMetadata(var14, var15, var16);
+
+				if (var17 == this.blockID && var14 == par2 && var15 == par3 && var16 == par4) {
+					par1World.setBlock(var6, var7, var8, Block.pistonMoving.blockID, par5 | (this.isSticky ? 8 : 0), 4);
+					par1World.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(Block.pistonExtension.blockID, par5 | (this.isSticky ? 8 : 0), par5, true, false));
 				} else {
-					var1.setBlock(var6, var7, var8, Block.pistonMoving.blockID, var18, 4);
-					var1.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(var17, var18, var5, true, false));
+					par1World.setBlock(var6, var7, var8, Block.pistonMoving.blockID, var18, 4);
+					par1World.setBlockTileEntity(var6, var7, var8, BlockPistonMoving.getTileEntity(var17, var18, par5, true, false));
 				}
 
 				var13[var12++] = var17;
@@ -369,11 +467,11 @@
 			var7 = var10;
 			var8 = var11;
 
-			for(var12 = 0; var6 != var2 || var7 != var3 || var8 != var4; var8 = var16) {
-				var14 = var6 - Facing.offsetsXForSide[var5];
-				var15 = var7 - Facing.offsetsYForSide[var5];
-				var16 = var8 - Facing.offsetsZForSide[var5];
-				var1.notifyBlocksOfNeighborChange(var14, var15, var16, var13[var12++]);
+			for (var12 = 0; var6 != par2 || var7 != par3 || var8 != par4; var8 = var16) {
+				var14 = var6 - Facing.offsetsXForSide[par5];
+				var15 = var7 - Facing.offsetsYForSide[par5];
+				var16 = var8 - Facing.offsetsZForSide[par5];
+				par1World.notifyBlocksOfNeighborChange(var14, var15, var16, var13[var12++]);
 				var6 = var14;
 				var7 = var15;
 			}
