--- net/minecraft/src/BlockPistonMoving.java
+++ net/minecraft/src/BlockPistonMoving.java
@@ -3,142 +3,195 @@
 import java.util.Random;
 
 public class BlockPistonMoving extends BlockContainer {
-	public BlockPistonMoving(int var1) {
-		super(var1, Material.piston);
+	public BlockPistonMoving(int par1) {
+		super(par1, Material.piston);
 		this.setHardness(-1.0F);
 	}
 
-	public TileEntity createNewTileEntity(World var1) {
+	/**
+	 * Returns a new instance of a block's tile entity class. Called on placing the block.
+	 */
+	public TileEntity createNewTileEntity(World par1World) {
 		return null;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-	}
-
-	public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-		TileEntity var7 = var1.getBlockTileEntity(var2, var3, var4);
-		if(var7 instanceof TileEntityPiston) {
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {}
+
+	/**
+	 * Called on server worlds only when the block has been replaced by a different block ID, or the same block with a
+	 * different metadata value, but before the new metadata value is set. Args: World, x, y, z, old block ID, old metadata
+	 */
+	public void breakBlock(World par1World, int par2, int par3, int par4, int par5, int par6) {
+		TileEntity var7 = par1World.getBlockTileEntity(par2, par3, par4);
+
+		if (var7 instanceof TileEntityPiston) {
 			((TileEntityPiston)var7).clearPistonTileEntity();
 		} else {
-			super.breakBlock(var1, var2, var3, var4, var5, var6);
+			super.breakBlock(par1World, par2, par3, par4, par5, par6);
 		}
-
-	}
-
-	public boolean canPlaceBlockAt(World var1, int var2, int var3, int var4) {
-		return false;
-	}
-
-	public boolean canPlaceBlockOnSide(World var1, int var2, int var3, int var4, int var5) {
-		return false;
-	}
-
+	}
+
+	/**
+	 * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
+	 */
+	public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4) {
+		return false;
+	}
+
+	/**
+	 * checks to see if you can place this block can be placed on that side of a block: BlockLever overrides
+	 */
+	public boolean canPlaceBlockOnSide(World par1World, int par2, int par3, int par4, int par5) {
+		return false;
+	}
+
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return -1;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
-	public boolean onBlockActivated(World var1, int var2, int var3, int var4, EntityPlayer var5, int var6, float var7, float var8, float var9) {
-		if(!var1.isRemote && var1.getBlockTileEntity(var2, var3, var4) == null) {
-			var1.setBlockToAir(var2, var3, var4);
+	/**
+	 * Called upon block activation (right click on the block.)
+	 */
+	public boolean onBlockActivated(World par1World, int par2, int par3, int par4, EntityPlayer par5EntityPlayer, int par6, float par7, float par8, float par9) {
+		if (!par1World.isRemote && par1World.getBlockTileEntity(par2, par3, par4) == null) {
+			par1World.setBlockToAir(par2, par3, par4);
 			return true;
 		} else {
 			return false;
 		}
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
 		return 0;
 	}
 
-	public void dropBlockAsItemWithChance(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-		if(!var1.isRemote) {
-			TileEntityPiston var8 = this.getTileEntityAtLocation(var1, var2, var3, var4);
-			if(var8 != null) {
-				Block.blocksList[var8.getStoredBlockID()].dropBlockAsItem(var1, var2, var3, var4, var8.getBlockMetadata(), 0);
+	/**
+	 * Drops the block items with a specified chance of dropping the specified items
+	 */
+	public void dropBlockAsItemWithChance(World par1World, int par2, int par3, int par4, int par5, float par6, int par7) {
+		if (!par1World.isRemote) {
+			TileEntityPiston var8 = this.getTileEntityAtLocation(par1World, par2, par3, par4);
+
+			if (var8 != null) {
+				Block.blocksList[var8.getStoredBlockID()].dropBlockAsItem(par1World, par2, par3, par4, var8.getBlockMetadata(), 0);
 			}
 		}
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isRemote) {
-			var1.getBlockTileEntity(var2, var3, var4);
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!par1World.isRemote) {
+			par1World.getBlockTileEntity(par2, par3, par4);
 		}
-
-	}
-
-	public static TileEntity getTileEntity(int var0, int var1, int var2, boolean var3, boolean var4) {
-		return new TileEntityPiston(var0, var1, var2, var3, var4);
-	}
-
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		TileEntityPiston var5 = this.getTileEntityAtLocation(var1, var2, var3, var4);
-		if(var5 == null) {
+	}
+
+	/**
+	 * gets a new TileEntityPiston created with the arguments provided.
+	 */
+	public static TileEntity getTileEntity(int par0, int par1, int par2, boolean par3, boolean par4) {
+		return new TileEntityPiston(par0, par1, par2, par3, par4);
+	}
+
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		TileEntityPiston var5 = this.getTileEntityAtLocation(par1World, par2, par3, par4);
+
+		if (var5 == null) {
 			return null;
 		} else {
 			float var6 = var5.getProgress(0.0F);
-			if(var5.isExtending()) {
+
+			if (var5.isExtending()) {
 				var6 = 1.0F - var6;
 			}
 
-			return this.getAxisAlignedBB(var1, var2, var3, var4, var5.getStoredBlockID(), var6, var5.getPistonOrientation());
+			return this.getAxisAlignedBB(par1World, par2, par3, par4, var5.getStoredBlockID(), var6, var5.getPistonOrientation());
 		}
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		TileEntityPiston var5 = this.getTileEntityAtLocation(var1, var2, var3, var4);
-		if(var5 != null) {
+	/**
+	 * Updates the blocks bounds based on its current state. Args: world, x, y, z
+	 */
+	public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		TileEntityPiston var5 = this.getTileEntityAtLocation(par1IBlockAccess, par2, par3, par4);
+
+		if (var5 != null) {
 			Block var6 = Block.blocksList[var5.getStoredBlockID()];
-			if(var6 == null || var6 == this) {
+
+			if (var6 == null || var6 == this) {
 				return;
 			}
 
-			var6.setBlockBoundsBasedOnState(var1, var2, var3, var4);
+			var6.setBlockBoundsBasedOnState(par1IBlockAccess, par2, par3, par4);
 			float var7 = var5.getProgress(0.0F);
-			if(var5.isExtending()) {
+
+			if (var5.isExtending()) {
 				var7 = 1.0F - var7;
 			}
 
 			int var8 = var5.getPistonOrientation();
-			this.minX = var6.getMinX() - (double)((float)Facing.offsetsXForSide[var8] * var7);
+			this.minX = var6.getBlockBoundsMinX() - (double)((float)Facing.offsetsXForSide[var8] * var7);
 			this.minY = var6.getBlockBoundsMinY() - (double)((float)Facing.offsetsYForSide[var8] * var7);
 			this.minZ = var6.getBlockBoundsMinZ() - (double)((float)Facing.offsetsZForSide[var8] * var7);
 			this.maxX = var6.getBlockBoundsMaxX() - (double)((float)Facing.offsetsXForSide[var8] * var7);
 			this.maxY = var6.getBlockBoundsMaxY() - (double)((float)Facing.offsetsYForSide[var8] * var7);
 			this.maxZ = var6.getBlockBoundsMaxZ() - (double)((float)Facing.offsetsZForSide[var8] * var7);
 		}
-
 	}
 
-	public AxisAlignedBB getAxisAlignedBB(World var1, int var2, int var3, int var4, int var5, float var6, int var7) {
-		if(var5 != 0 && var5 != this.blockID) {
-			AxisAlignedBB var8 = Block.blocksList[var5].getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
-			if(var8 == null) {
+	public AxisAlignedBB getAxisAlignedBB(World par1World, int par2, int par3, int par4, int par5, float par6, int par7) {
+		if (par5 != 0 && par5 != this.blockID) {
+			AxisAlignedBB var8 = Block.blocksList[par5].getCollisionBoundingBoxFromPool(par1World, par2, par3, par4);
+
+			if (var8 == null) {
 				return null;
 			} else {
-				if(Facing.offsetsXForSide[var7] < 0) {
-					var8.minX -= (double)((float)Facing.offsetsXForSide[var7] * var6);
-				} else {
-					var8.maxX -= (double)((float)Facing.offsetsXForSide[var7] * var6);
-				}
-
-				if(Facing.offsetsYForSide[var7] < 0) {
-					var8.minY -= (double)((float)Facing.offsetsYForSide[var7] * var6);
-				} else {
-					var8.maxY -= (double)((float)Facing.offsetsYForSide[var7] * var6);
-				}
-
-				if(Facing.offsetsZForSide[var7] < 0) {
-					var8.minZ -= (double)((float)Facing.offsetsZForSide[var7] * var6);
-				} else {
-					var8.maxZ -= (double)((float)Facing.offsetsZForSide[var7] * var6);
+				if (Facing.offsetsXForSide[par7] < 0) {
+					var8.minX -= (double)((float)Facing.offsetsXForSide[par7] * par6);
+				} else {
+					var8.maxX -= (double)((float)Facing.offsetsXForSide[par7] * par6);
+				}
+
+				if (Facing.offsetsYForSide[par7] < 0) {
+					var8.minY -= (double)((float)Facing.offsetsYForSide[par7] * par6);
+				} else {
+					var8.maxY -= (double)((float)Facing.offsetsYForSide[par7] * par6);
+				}
+
+				if (Facing.offsetsZForSide[par7] < 0) {
+					var8.minZ -= (double)((float)Facing.offsetsZForSide[par7] * par6);
+				} else {
+					var8.maxZ -= (double)((float)Facing.offsetsZForSide[par7] * par6);
 				}
 
 				return var8;
@@ -148,16 +201,26 @@
 		}
 	}
 
-	private TileEntityPiston getTileEntityAtLocation(IBlockAccess var1, int var2, int var3, int var4) {
-		TileEntity var5 = var1.getBlockTileEntity(var2, var3, var4);
+	/**
+	 * gets the piston tile entity at the specified location
+	 */
+	private TileEntityPiston getTileEntityAtLocation(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		TileEntity var5 = par1IBlockAccess.getBlockTileEntity(par2, par3, par4);
 		return var5 instanceof TileEntityPiston ? (TileEntityPiston)var5 : null;
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return 0;
 	}
 
-	public void registerIcons(IconRegister var1) {
-		this.blockIcon = var1.registerIcon("piston_top_normal");
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.blockIcon = par1IconRegister.registerIcon("piston_top_normal");
 	}
 }
