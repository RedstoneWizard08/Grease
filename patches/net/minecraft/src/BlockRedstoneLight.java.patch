--- net/minecraft/src/BlockRedstoneLight.java
+++ net/minecraft/src/BlockRedstoneLight.java
@@ -3,51 +3,66 @@
 import java.util.Random;
 
 public class BlockRedstoneLight extends Block {
+
+	/** Whether this lamp block is the powered version. */
 	private final boolean powered;
 
-	public BlockRedstoneLight(int var1, boolean var2) {
-		super(var1, Material.redstoneLight);
-		this.powered = var2;
-		if(var2) {
+	public BlockRedstoneLight(int par1, boolean par2) {
+		super(par1, Material.redstoneLight);
+		this.powered = par2;
+
+		if (par2) {
 			this.setLightValue(1.0F);
 		}
-
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(!var1.isRemote) {
-			if(this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-				var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, 4);
-			} else if(!this.powered && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-				var1.setBlock(var2, var3, var4, Block.redstoneLampActive.blockID, 0, 2);
-			}
-		}
-
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isRemote) {
-			if(this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-				var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, 4);
-			} else if(!this.powered && var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-				var1.setBlock(var2, var3, var4, Block.redstoneLampActive.blockID, 0, 2);
-			}
-		}
-
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote && this.powered && !var1.isBlockIndirectlyGettingPowered(var2, var3, var4)) {
-			var1.setBlock(var2, var3, var4, Block.redstoneLampIdle.blockID, 0, 2);
-		}
-
-	}
-
-	public int idDropped(int var1, Random var2, int var3) {
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		if (!par1World.isRemote) {
+			if (this.powered && !par1World.isBlockIndirectlyGettingPowered(par2, par3, par4)) {
+				par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, 4);
+			} else if (!this.powered && par1World.isBlockIndirectlyGettingPowered(par2, par3, par4)) {
+				par1World.setBlock(par2, par3, par4, Block.redstoneLampActive.blockID, 0, 2);
+			}
+		}
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!par1World.isRemote) {
+			if (this.powered && !par1World.isBlockIndirectlyGettingPowered(par2, par3, par4)) {
+				par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, 4);
+			} else if (!this.powered && par1World.isBlockIndirectlyGettingPowered(par2, par3, par4)) {
+				par1World.setBlock(par2, par3, par4, Block.redstoneLampActive.blockID, 0, 2);
+			}
+		}
+	}
+
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote && this.powered && !par1World.isBlockIndirectlyGettingPowered(par2, par3, par4)) {
+			par1World.setBlock(par2, par3, par4, Block.redstoneLampIdle.blockID, 0, 2);
+		}
+	}
+
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
 		return Block.redstoneLampIdle.blockID;
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return Block.redstoneLampIdle.blockID;
 	}
 }
