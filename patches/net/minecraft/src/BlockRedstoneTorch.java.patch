--- net/minecraft/src/BlockRedstoneTorch.java
+++ net/minecraft/src/BlockRedstoneTorch.java
@@ -7,26 +7,33 @@
 import java.util.Random;
 
 public class BlockRedstoneTorch extends BlockTorch {
+
+	/** Whether the redstone torch is currently active or not. */
 	private boolean torchActive;
-	private static Map b = new HashMap();
-
-	private boolean checkForBurnout(World var1, int var2, int var3, int var4, boolean var5) {
-		if(!b.containsKey(var1)) {
-			b.put(var1, new ArrayList());
+
+	/** Map of ArrayLists of RedstoneUpdateInfo. Key of map is World. */
+	private static Map redstoneUpdateInfoCache = new HashMap();
+
+	private boolean checkForBurnout(World par1World, int par2, int par3, int par4, boolean par5) {
+		if (!redstoneUpdateInfoCache.containsKey(par1World)) {
+			redstoneUpdateInfoCache.put(par1World, new ArrayList());
 		}
 
-		List var6 = (List)b.get(var1);
-		if(var5) {
-			var6.add(new RedstoneUpdateInfo(var2, var3, var4, var1.getTotalWorldTime()));
+		List var6 = (List)redstoneUpdateInfoCache.get(par1World);
+
+		if (par5) {
+			var6.add(new RedstoneUpdateInfo(par2, par3, par4, par1World.getTotalWorldTime()));
 		}
 
 		int var7 = 0;
 
-		for(int var8 = 0; var8 < var6.size(); ++var8) {
+		for (int var8 = 0; var8 < var6.size(); ++var8) {
 			RedstoneUpdateInfo var9 = (RedstoneUpdateInfo)var6.get(var8);
-			if(var9.x == var2 && var9.y == var3 && var9.z == var4) {
+
+			if (var9.x == par2 && var9.y == par3 && var9.z == par4) {
 				++var7;
-				if(var7 >= 8) {
+
+				if (var7 >= 8) {
 					return true;
 				}
 			}
@@ -35,137 +42,180 @@
 		return false;
 	}
 
-	protected BlockRedstoneTorch(int var1, boolean var2) {
-		super(var1);
-		this.torchActive = var2;
+	protected BlockRedstoneTorch(int par1, boolean par2) {
+		super(par1);
+		this.torchActive = par2;
 		this.setTickRandomly(true);
 		this.setCreativeTab((CreativeTabs)null);
 	}
 
-	public int tickRate(World var1) {
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 2;
 	}
 
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		if(var1.getBlockMetadata(var2, var3, var4) == 0) {
-			super.onBlockAdded(var1, var2, var3, var4);
-		}
-
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public void breakBlock(World var1, int var2, int var3, int var4, int var5, int var6) {
-		if(this.torchActive) {
-			var1.notifyBlocksOfNeighborChange(var2, var3 - 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3 + 1, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 - 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2 + 1, var3, var4, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 - 1, this.blockID);
-			var1.notifyBlocksOfNeighborChange(var2, var3, var4 + 1, this.blockID);
-		}
-
-	}
-
-	public int isProvidingWeakPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		if(!this.torchActive) {
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		if (par1World.getBlockMetadata(par2, par3, par4) == 0) {
+			super.onBlockAdded(par1World, par2, par3, par4);
+		}
+
+		if (this.torchActive) {
+			par1World.notifyBlocksOfNeighborChange(par2, par3 - 1, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3 + 1, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2 - 1, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2 + 1, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4 - 1, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4 + 1, this.blockID);
+		}
+	}
+
+	/**
+	 * Called on server worlds only when the block has been replaced by a different block ID, or the same block with a
+	 * different metadata value, but before the new metadata value is set. Args: World, x, y, z, old block ID, old metadata
+	 */
+	public void breakBlock(World par1World, int par2, int par3, int par4, int par5, int par6) {
+		if (this.torchActive) {
+			par1World.notifyBlocksOfNeighborChange(par2, par3 - 1, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3 + 1, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2 - 1, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2 + 1, par3, par4, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4 - 1, this.blockID);
+			par1World.notifyBlocksOfNeighborChange(par2, par3, par4 + 1, this.blockID);
+		}
+	}
+
+	/**
+	 * Returns true if the block is emitting indirect/weak redstone power on the specified side. If isBlockNormalCube
+	 * returns true, standard redstone propagation rules will apply instead and this will not be called. Args: World, X, Y,
+	 * Z, side. Note that the side is reversed - eg it is 1 (up) when checking the bottom of the block.
+	 */
+	public int isProvidingWeakPower(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		if (!this.torchActive) {
 			return 0;
 		} else {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			return var6 == 5 && var5 == 1 ? 0 : (var6 == 3 && var5 == 3 ? 0 : (var6 == 4 && var5 == 2 ? 0 : (var6 == 1 && var5 == 5 ? 0 : (var6 == 2 && var5 == 4 ? 0 : 15))));
+			int var6 = par1IBlockAccess.getBlockMetadata(par2, par3, par4);
+			return var6 == 5 && par5 == 1 ? 0 : (var6 == 3 && par5 == 3 ? 0 : (var6 == 4 && par5 == 2 ? 0 : (var6 == 1 && par5 == 5 ? 0 : (var6 == 2 && par5 == 4 ? 0 : 15))));
 		}
 	}
 
-	private boolean isIndirectlyPowered(World var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockMetadata(var2, var3, var4);
-		return var5 == 5 && var1.getIndirectPowerOutput(var2, var3 - 1, var4, 0) ? true : (var5 == 3 && var1.getIndirectPowerOutput(var2, var3, var4 - 1, 2) ? true : (var5 == 4 && var1.getIndirectPowerOutput(var2, var3, var4 + 1, 3) ? true : (var5 == 1 && var1.getIndirectPowerOutput(var2 - 1, var3, var4, 4) ? true : var5 == 2 && var1.getIndirectPowerOutput(var2 + 1, var3, var4, 5))));
+	/**
+	 * Returns true or false based on whether the block the torch is attached to is providing indirect power.
+	 */
+	private boolean isIndirectlyPowered(World par1World, int par2, int par3, int par4) {
+		int var5 = par1World.getBlockMetadata(par2, par3, par4);
+		return var5 == 5 && par1World.getIndirectPowerOutput(par2, par3 - 1, par4, 0) ? true : (var5 == 3 && par1World.getIndirectPowerOutput(par2, par3, par4 - 1, 2) ? true : (var5 == 4 && par1World.getIndirectPowerOutput(par2, par3, par4 + 1, 3) ? true : (var5 == 1 && par1World.getIndirectPowerOutput(par2 - 1, par3, par4, 4) ? true : var5 == 2 && par1World.getIndirectPowerOutput(par2 + 1, par3, par4, 5))));
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
-		List var7 = (List)b.get(var1);
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		boolean var6 = this.isIndirectlyPowered(par1World, par2, par3, par4);
+		List var7 = (List)redstoneUpdateInfoCache.get(par1World);
 
-		while(var7 != null && !var7.isEmpty() && var1.getTotalWorldTime() - ((RedstoneUpdateInfo)var7.get(0)).updateTime > 60L) {
+		while (var7 != null && !var7.isEmpty() && par1World.getTotalWorldTime() - ((RedstoneUpdateInfo)var7.get(0)).updateTime > 60L) {
 			var7.remove(0);
 		}
 
-		if(this.torchActive) {
-			if(var6) {
-				var1.setBlock(var2, var3, var4, Block.torchRedstoneIdle.blockID, var1.getBlockMetadata(var2, var3, var4), 3);
-				if(this.checkForBurnout(var1, var2, var3, var4, true)) {
-					var1.playSoundEffect((double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), "random.fizz", 0.5F, 2.6F + (var1.s.nextFloat() - var1.s.nextFloat()) * 0.8F);
-
-					for(int var8 = 0; var8 < 5; ++var8) {
-						double var9 = (double)var2 + var5.nextDouble() * 0.6D + 0.2D;
-						double var11 = (double)var3 + var5.nextDouble() * 0.6D + 0.2D;
-						double var13 = (double)var4 + var5.nextDouble() * 0.6D + 0.2D;
-						var1.spawnParticle("smoke", var9, var11, var13, 0.0D, 0.0D, 0.0D);
+		if (this.torchActive) {
+			if (var6) {
+				par1World.setBlock(par2, par3, par4, Block.torchRedstoneIdle.blockID, par1World.getBlockMetadata(par2, par3, par4), 3);
+
+				if (this.checkForBurnout(par1World, par2, par3, par4, true)) {
+					par1World.playSoundEffect((double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), "random.fizz", 0.5F, 2.6F + (par1World.rand.nextFloat() - par1World.rand.nextFloat()) * 0.8F);
+
+					for (int var8 = 0; var8 < 5; ++var8) {
+						double var9 = (double)par2 + par5Random.nextDouble() * 0.6D + 0.2D;
+						double var11 = (double)par3 + par5Random.nextDouble() * 0.6D + 0.2D;
+						double var13 = (double)par4 + par5Random.nextDouble() * 0.6D + 0.2D;
+						par1World.spawnParticle("smoke", var9, var11, var13, 0.0D, 0.0D, 0.0D);
 					}
 				}
 			}
-		} else if(!var6 && !this.checkForBurnout(var1, var2, var3, var4, false)) {
-			var1.setBlock(var2, var3, var4, Block.torchRedstoneActive.blockID, var1.getBlockMetadata(var2, var3, var4), 3);
+		} else if (!var6 && !this.checkForBurnout(par1World, par2, par3, par4, false)) {
+			par1World.setBlock(par2, par3, par4, Block.torchRedstoneActive.blockID, par1World.getBlockMetadata(par2, par3, par4), 3);
 		}
-
 	}
 
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		if(!this.func_94397_d(var1, var2, var3, var4, var5)) {
-			boolean var6 = this.isIndirectlyPowered(var1, var2, var3, var4);
-			if(this.torchActive && var6 || !this.torchActive && !var6) {
-				var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		if (!this.func_94397_d(par1World, par2, par3, par4, par5)) {
+			boolean var6 = this.isIndirectlyPowered(par1World, par2, par3, par4);
+
+			if (this.torchActive && var6 || !this.torchActive && !var6) {
+				par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
 			}
-
 		}
 	}
 
-	public int isProvidingStrongPower(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 ? this.isProvidingWeakPower(var1, var2, var3, var4, var5) : 0;
+	/**
+	 * Returns true if the block is emitting direct/strong redstone power on the specified side. Args: World, X, Y, Z,
+	 * side. Note that the side is reversed - eg it is 1 (up) when checking the bottom of the block.
+	 */
+	public int isProvidingStrongPower(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		return par5 == 0 ? this.isProvidingWeakPower(par1IBlockAccess, par2, par3, par4, par5) : 0;
 	}
 
-	public int idDropped(int var1, Random var2, int var3) {
+	/**
+	 * Returns the ID of the items to drop on destruction.
+	 */
+	public int idDropped(int par1, Random par2Random, int par3) {
 		return Block.torchRedstoneActive.blockID;
 	}
 
+	/**
+	 * Can this block provide power. Only wire currently seems to have this change based on its state.
+	 */
 	public boolean canProvidePower() {
 		return true;
 	}
 
-	public void randomDisplayTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(this.torchActive) {
-			int var6 = var1.getBlockMetadata(var2, var3, var4);
-			double var7 = (double)((float)var2 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var9 = (double)((float)var3 + 0.7F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var11 = (double)((float)var4 + 0.5F) + (double)(var5.nextFloat() - 0.5F) * 0.2D;
-			double var13 = (double)0.22F;
-			double var15 = (double)0.27F;
-			if(var6 == 1) {
-				var1.spawnParticle("reddust", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 2) {
-				var1.spawnParticle("reddust", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 3) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
-			} else if(var6 == 4) {
-				var1.spawnParticle("reddust", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
+	/**
+	 * A randomly called display update to be able to add particles or other items for display
+	 */
+	public void randomDisplayTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (this.torchActive) {
+			int var6 = par1World.getBlockMetadata(par2, par3, par4);
+			double var7 = (double)((float)par2 + 0.5F) + (double)(par5Random.nextFloat() - 0.5F) * 0.2D;
+			double var9 = (double)((float)par3 + 0.7F) + (double)(par5Random.nextFloat() - 0.5F) * 0.2D;
+			double var11 = (double)((float)par4 + 0.5F) + (double)(par5Random.nextFloat() - 0.5F) * 0.2D;
+			double var13 = 0.2199999988079071D;
+			double var15 = 0.27000001072883606D;
+
+			if (var6 == 1) {
+				par1World.spawnParticle("reddust", var7 - var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			} else if (var6 == 2) {
+				par1World.spawnParticle("reddust", var7 + var15, var9 + var13, var11, 0.0D, 0.0D, 0.0D);
+			} else if (var6 == 3) {
+				par1World.spawnParticle("reddust", var7, var9 + var13, var11 - var15, 0.0D, 0.0D, 0.0D);
+			} else if (var6 == 4) {
+				par1World.spawnParticle("reddust", var7, var9 + var13, var11 + var15, 0.0D, 0.0D, 0.0D);
 			} else {
-				var1.spawnParticle("reddust", var7, var9, var11, 0.0D, 0.0D, 0.0D);
+				par1World.spawnParticle("reddust", var7, var9, var11, 0.0D, 0.0D, 0.0D);
 			}
-
 		}
 	}
 
-	public int idPicked(World var1, int var2, int var3, int var4) {
+	/**
+	 * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
+	 */
+	public int idPicked(World par1World, int par2, int par3, int par4) {
 		return Block.torchRedstoneActive.blockID;
 	}
 
-	public boolean isAssociatedBlockID(int var1) {
-		return var1 == Block.torchRedstoneIdle.blockID || var1 == Block.torchRedstoneActive.blockID;
+	/**
+	 * Returns true if the given block ID is equivalent to this one. Example: redstoneTorchOn matches itself and
+	 * redstoneTorchOff, and vice versa. Most blocks only match themselves.
+	 */
+	public boolean isAssociatedBlockID(int par1) {
+		return par1 == Block.torchRedstoneIdle.blockID || par1 == Block.torchRedstoneActive.blockID;
 	}
 }
