--- net/minecraft/src/BlockSand.java
+++ net/minecraft/src/BlockSand.java
@@ -3,68 +3,91 @@
 import java.util.Random;
 
 public class BlockSand extends Block {
+
+	/** Do blocks fall instantly to where they stop or do they fall over time */
 	public static boolean fallInstantly;
 
-	public BlockSand(int var1) {
-		super(var1, Material.sand);
+	public BlockSand(int par1) {
+		super(par1, Material.sand);
 		this.setCreativeTab(CreativeTabs.tabBlock);
 	}
 
-	public BlockSand(int var1, Material var2) {
-		super(var1, var2);
-	}
-
-	public void onBlockAdded(World var1, int var2, int var3, int var4) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-	}
-
-	public void onNeighborBlockChange(World var1, int var2, int var3, int var4, int var5) {
-		var1.scheduleBlockUpdate(var2, var3, var4, this.blockID, this.tickRate(var1));
-	}
-
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote) {
-			this.tryToFall(var1, var2, var3, var4);
+	public BlockSand(int par1, Material par2Material) {
+		super(par1, par2Material);
+	}
+
+	/**
+	 * Called whenever the block is added into the world. Args: world, x, y, z
+	 */
+	public void onBlockAdded(World par1World, int par2, int par3, int par4) {
+		par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+	}
+
+	/**
+	 * Lets the block know when one of its neighbor changes. Doesn't know which neighbor changed (coordinates passed are
+	 * their own) Args: x, y, z, neighbor blockID
+	 */
+	public void onNeighborBlockChange(World par1World, int par2, int par3, int par4, int par5) {
+		par1World.scheduleBlockUpdate(par2, par3, par4, this.blockID, this.tickRate(par1World));
+	}
+
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote) {
+			this.tryToFall(par1World, par2, par3, par4);
 		}
-
 	}
 
-	private void tryToFall(World var1, int var2, int var3, int var4) {
-		if(canFallBelow(var1, var2, var3 - 1, var4) && var3 >= 0) {
+	/**
+	 * If there is space to fall below will start this block falling
+	 */
+	private void tryToFall(World par1World, int par2, int par3, int par4) {
+		if (canFallBelow(par1World, par2, par3 - 1, par4) && par3 >= 0) {
 			byte var8 = 32;
-			if(!fallInstantly && var1.checkChunksExist(var2 - var8, var3 - var8, var4 - var8, var2 + var8, var3 + var8, var4 + var8)) {
-				if(!var1.isRemote) {
-					EntityFallingSand var9 = new EntityFallingSand(var1, (double)((float)var2 + 0.5F), (double)((float)var3 + 0.5F), (double)((float)var4 + 0.5F), this.blockID, var1.getBlockMetadata(var2, var3, var4));
+
+			if (!fallInstantly && par1World.checkChunksExist(par2 - var8, par3 - var8, par4 - var8, par2 + var8, par3 + var8, par4 + var8)) {
+				if (!par1World.isRemote) {
+					EntityFallingSand var9 = new EntityFallingSand(par1World, (double)((float)par2 + 0.5F), (double)((float)par3 + 0.5F), (double)((float)par4 + 0.5F), this.blockID, par1World.getBlockMetadata(par2, par3, par4));
 					this.onStartFalling(var9);
-					var1.spawnEntityInWorld(var9);
+					par1World.spawnEntityInWorld(var9);
 				}
 			} else {
-				var1.setBlockToAir(var2, var3, var4);
+				par1World.setBlockToAir(par2, par3, par4);
 
-				while(canFallBelow(var1, var2, var3 - 1, var4) && var3 > 0) {
-					--var3;
+				while (canFallBelow(par1World, par2, par3 - 1, par4) && par3 > 0) {
+					--par3;
 				}
 
-				if(var3 > 0) {
-					var1.setBlock(var2, var3, var4, this.blockID);
+				if (par3 > 0) {
+					par1World.setBlock(par2, par3, par4, this.blockID);
 				}
 			}
 		}
-
-	}
-
-	protected void onStartFalling(EntityFallingSand var1) {
-	}
-
-	public int tickRate(World var1) {
+	}
+
+	/**
+	 * Called when the falling block entity for this block is created
+	 */
+	protected void onStartFalling(EntityFallingSand par1EntityFallingSand) {}
+
+	/**
+	 * How many world ticks before ticking
+	 */
+	public int tickRate(World par1World) {
 		return 2;
 	}
 
-	public static boolean canFallBelow(World var0, int var1, int var2, int var3) {
-		int var4 = var0.getBlockId(var1, var2, var3);
-		if(var4 == 0) {
+	/**
+	 * Checks to see if the sand can fall into the block below it
+	 */
+	public static boolean canFallBelow(World par0World, int par1, int par2, int par3) {
+		int var4 = par0World.getBlockId(par1, par2, par3);
+
+		if (var4 == 0) {
 			return true;
-		} else if(var4 == Block.fire.blockID) {
+		} else if (var4 == Block.fire.blockID) {
 			return true;
 		} else {
 			Material var5 = Block.blocksList[var4].blockMaterial;
@@ -72,6 +95,8 @@
 		}
 	}
 
-	public void onFinishFalling(World var1, int var2, int var3, int var4, int var5) {
-	}
+	/**
+	 * Called when the falling block entity for this block hits the ground and turns back into a block
+	 */
+	public void onFinishFalling(World par1World, int par2, int par3, int par4, int par5) {}
 }
