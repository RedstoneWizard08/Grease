--- net/minecraft/src/BlockSapling.java
+++ net/minecraft/src/BlockSapling.java
@@ -4,121 +4,143 @@
 import java.util.Random;
 
 public class BlockSapling extends BlockFlower {
-	public static final String[] a = new String[]{"oak", "spruce", "birch", "jungle"};
+	public static final String[] WOOD_TYPES = new String[] {"oak", "spruce", "birch", "jungle"};
 	private Icon[] saplingIcon;
 
-	protected BlockSapling(int var1) {
-		super(var1);
+	protected BlockSapling(int par1) {
+		super(par1);
 		float var2 = 0.4F;
 		this.setBlockBounds(0.5F - var2, 0.0F, 0.5F - var2, 0.5F + var2, var2 * 2.0F, 0.5F + var2);
 		this.setCreativeTab(CreativeTabs.tabDecorations);
 	}
 
-	public void updateTick(World var1, int var2, int var3, int var4, Random var5) {
-		if(!var1.isRemote) {
-			super.updateTick(var1, var2, var3, var4, var5);
-			if(var1.getBlockLightValue(var2, var3 + 1, var4) >= 9 && var5.nextInt(7) == 0) {
-				this.markOrGrowMarked(var1, var2, var3, var4, var5);
+	/**
+	 * Ticks the block if it's been scheduled
+	 */
+	public void updateTick(World par1World, int par2, int par3, int par4, Random par5Random) {
+		if (!par1World.isRemote) {
+			super.updateTick(par1World, par2, par3, par4, par5Random);
+
+			if (par1World.getBlockLightValue(par2, par3 + 1, par4) >= 9 && par5Random.nextInt(7) == 0) {
+				this.markOrGrowMarked(par1World, par2, par3, par4, par5Random);
 			}
-
 		}
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		var2 &= 3;
-		return this.saplingIcon[var2];
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		par2 &= 3;
+		return this.saplingIcon[par2];
 	}
 
-	public void markOrGrowMarked(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4);
-		if((var6 & 8) == 0) {
-			var1.setBlockMetadata(var2, var3, var4, var6 | 8, 4);
+	public void markOrGrowMarked(World par1World, int par2, int par3, int par4, Random par5Random) {
+		int var6 = par1World.getBlockMetadata(par2, par3, par4);
+
+		if ((var6 & 8) == 0) {
+			par1World.setBlockMetadataWithNotify(par2, par3, par4, var6 | 8, 4);
 		} else {
-			this.growTree(var1, var2, var3, var4, var5);
+			this.growTree(par1World, par2, par3, par4, par5Random);
 		}
-
 	}
 
-	public void growTree(World var1, int var2, int var3, int var4, Random var5) {
-		int var6 = var1.getBlockMetadata(var2, var3, var4) & 3;
+	/**
+	 * Attempts to grow a sapling into a tree
+	 */
+	public void growTree(World par1World, int par2, int par3, int par4, Random par5Random) {
+		int var6 = par1World.getBlockMetadata(par2, par3, par4) & 3;
 		Object var7 = null;
 		int var8 = 0;
 		int var9 = 0;
 		boolean var10 = false;
-		if(var6 == 1) {
+
+		if (var6 == 1) {
 			var7 = new WorldGenTaiga2(true);
-		} else if(var6 == 2) {
+		} else if (var6 == 2) {
 			var7 = new WorldGenForest(true);
-		} else if(var6 == 3) {
-			for(var8 = 0; var8 >= -1; --var8) {
-				for(var9 = 0; var9 >= -1; --var9) {
-					if(this.isSameSapling(var1, var2 + var8, var3, var4 + var9, 3) && this.isSameSapling(var1, var2 + var8 + 1, var3, var4 + var9, 3) && this.isSameSapling(var1, var2 + var8, var3, var4 + var9 + 1, 3) && this.isSameSapling(var1, var2 + var8 + 1, var3, var4 + var9 + 1, 3)) {
-						var7 = new WorldGenHugeTrees(true, 10 + var5.nextInt(20), 3, 3);
+		} else if (var6 == 3) {
+			for (var8 = 0; var8 >= -1; --var8) {
+				for (var9 = 0; var9 >= -1; --var9) {
+					if (this.isSameSapling(par1World, par2 + var8, par3, par4 + var9, 3) && this.isSameSapling(par1World, par2 + var8 + 1, par3, par4 + var9, 3) && this.isSameSapling(par1World, par2 + var8, par3, par4 + var9 + 1, 3) && this.isSameSapling(par1World, par2 + var8 + 1, par3, par4 + var9 + 1, 3)) {
+						var7 = new WorldGenHugeTrees(true, 10 + par5Random.nextInt(20), 3, 3);
 						var10 = true;
 						break;
 					}
 				}
 
-				if(var7 != null) {
+				if (var7 != null) {
 					break;
 				}
 			}
 
-			if(var7 == null) {
+			if (var7 == null) {
 				var9 = 0;
-				var8 = var9;
-				var7 = new WorldGenTrees(true, 4 + var5.nextInt(7), 3, 3, false);
+				var8 = 0;
+				var7 = new WorldGenTrees(true, 4 + par5Random.nextInt(7), 3, 3, false);
 			}
 		} else {
 			var7 = new WorldGenTrees(true);
-			if(var5.nextInt(10) == 0) {
+
+			if (par5Random.nextInt(10) == 0) {
 				var7 = new WorldGenBigTree(true);
 			}
 		}
 
-		if(var10) {
-			var1.setBlock(var2 + var8, var3, var4 + var9, 0, 0, 4);
-			var1.setBlock(var2 + var8 + 1, var3, var4 + var9, 0, 0, 4);
-			var1.setBlock(var2 + var8, var3, var4 + var9 + 1, 0, 0, 4);
-			var1.setBlock(var2 + var8 + 1, var3, var4 + var9 + 1, 0, 0, 4);
+		if (var10) {
+			par1World.setBlock(par2 + var8, par3, par4 + var9, 0, 0, 4);
+			par1World.setBlock(par2 + var8 + 1, par3, par4 + var9, 0, 0, 4);
+			par1World.setBlock(par2 + var8, par3, par4 + var9 + 1, 0, 0, 4);
+			par1World.setBlock(par2 + var8 + 1, par3, par4 + var9 + 1, 0, 0, 4);
 		} else {
-			var1.setBlock(var2, var3, var4, 0, 0, 4);
+			par1World.setBlock(par2, par3, par4, 0, 0, 4);
 		}
 
-		if(!((WorldGenerator)var7).generate(var1, var5, var2 + var8, var3, var4 + var9)) {
-			if(var10) {
-				var1.setBlock(var2 + var8, var3, var4 + var9, this.blockID, var6, 4);
-				var1.setBlock(var2 + var8 + 1, var3, var4 + var9, this.blockID, var6, 4);
-				var1.setBlock(var2 + var8, var3, var4 + var9 + 1, this.blockID, var6, 4);
-				var1.setBlock(var2 + var8 + 1, var3, var4 + var9 + 1, this.blockID, var6, 4);
+		if (!((WorldGenerator)var7).generate(par1World, par5Random, par2 + var8, par3, par4 + var9)) {
+			if (var10) {
+				par1World.setBlock(par2 + var8, par3, par4 + var9, this.blockID, var6, 4);
+				par1World.setBlock(par2 + var8 + 1, par3, par4 + var9, this.blockID, var6, 4);
+				par1World.setBlock(par2 + var8, par3, par4 + var9 + 1, this.blockID, var6, 4);
+				par1World.setBlock(par2 + var8 + 1, par3, par4 + var9 + 1, this.blockID, var6, 4);
 			} else {
-				var1.setBlock(var2, var3, var4, this.blockID, var6, 4);
+				par1World.setBlock(par2, par3, par4, this.blockID, var6, 4);
 			}
 		}
-
-	}
-
-	public boolean isSameSapling(World var1, int var2, int var3, int var4, int var5) {
-		return var1.getBlockId(var2, var3, var4) == this.blockID && (var1.getBlockMetadata(var2, var3, var4) & 3) == var5;
-	}
-
-	public int damageDropped(int var1) {
-		return var1 & 3;
-	}
-
-	public void getSubBlocks(int var1, CreativeTabs var2, List var3) {
-		var3.add(new ItemStack(var1, 1, 0));
-		var3.add(new ItemStack(var1, 1, 1));
-		var3.add(new ItemStack(var1, 1, 2));
-		var3.add(new ItemStack(var1, 1, 3));
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.saplingIcon = new Icon[a.length];
-
-		for(int var2 = 0; var2 < this.saplingIcon.length; ++var2) {
-			this.saplingIcon[var2] = var1.registerIcon(this.getTextureName() + "_" + a[var2]);
+	}
+
+	/**
+	 * Determines if the same sapling is present at the given location.
+	 */
+	public boolean isSameSapling(World par1World, int par2, int par3, int par4, int par5) {
+		return par1World.getBlockId(par2, par3, par4) == this.blockID && (par1World.getBlockMetadata(par2, par3, par4) & 3) == par5;
+	}
+
+	/**
+	 * Determines the damage on the item the block drops. Used in cloth and wood.
+	 */
+	public int damageDropped(int par1) {
+		return par1 & 3;
+	}
+
+	/**
+	 * returns a list of blocks with the same ID, but different meta (eg: wood returns 4 blocks)
+	 */
+	public void getSubBlocks(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		par3List.add(new ItemStack(par1, 1, 0));
+		par3List.add(new ItemStack(par1, 1, 1));
+		par3List.add(new ItemStack(par1, 1, 2));
+		par3List.add(new ItemStack(par1, 1, 3));
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.saplingIcon = new Icon[WOOD_TYPES.length];
+
+		for (int var2 = 0; var2 < this.saplingIcon.length; ++var2) {
+			this.saplingIcon[var2] = par1IconRegister.registerIcon(this.getTextureName() + "_" + WOOD_TYPES[var2]);
 		}
-
 	}
 }
