--- net/minecraft/src/BlockSilverfish.java
+++ net/minecraft/src/BlockSilverfish.java
@@ -4,65 +4,96 @@
 import java.util.Random;
 
 public class BlockSilverfish extends Block {
-	public static final String[] a = new String[]{"stone", "cobble", "brick"};
-
-	public BlockSilverfish(int var1) {
-		super(var1, Material.clay);
+
+	/** Block names that can be a silverfish stone. */
+	public static final String[] silverfishStoneTypes = new String[] {"stone", "cobble", "brick"};
+
+	public BlockSilverfish(int par1) {
+		super(par1, Material.clay);
 		this.setHardness(0.0F);
 		this.setCreativeTab(CreativeTabs.tabDecorations);
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		return var2 == 1 ? Block.cobblestone.getBlockTextureFromSide(var1) : (var2 == 2 ? Block.stoneBrick.getBlockTextureFromSide(var1) : Block.stone.getBlockTextureFromSide(var1));
-	}
-
-	public void registerIcons(IconRegister var1) {
-	}
-
-	public void onBlockDestroyedByPlayer(World var1, int var2, int var3, int var4, int var5) {
-		if(!var1.isRemote) {
-			EntitySilverfish var6 = new EntitySilverfish(var1);
-			var6.setLocationAndAngles((double)var2 + 0.5D, (double)var3, (double)var4 + 0.5D, 0.0F, 0.0F);
-			var1.spawnEntityInWorld(var6);
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par2 == 1 ? Block.cobblestone.getBlockTextureFromSide(par1) : (par2 == 2 ? Block.stoneBrick.getBlockTextureFromSide(par1) : Block.stone.getBlockTextureFromSide(par1));
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {}
+
+	/**
+	 * Called right before the block is destroyed by a player.  Args: world, x, y, z, metaData
+	 */
+	public void onBlockDestroyedByPlayer(World par1World, int par2, int par3, int par4, int par5) {
+		if (!par1World.isRemote) {
+			EntitySilverfish var6 = new EntitySilverfish(par1World);
+			var6.setLocationAndAngles((double)par2 + 0.5D, (double)par3, (double)par4 + 0.5D, 0.0F, 0.0F);
+			par1World.spawnEntityInWorld(var6);
 			var6.spawnExplosionParticle();
 		}
 
-		super.onBlockDestroyedByPlayer(var1, var2, var3, var4, var5);
+		super.onBlockDestroyedByPlayer(par1World, par2, par3, par4, par5);
 	}
 
-	public int quantityDropped(Random var1) {
+	/**
+	 * Returns the quantity of items to drop on block destruction.
+	 */
+	public int quantityDropped(Random par1Random) {
 		return 0;
 	}
 
-	public static boolean getPosingIdByMetadata(int var0) {
-		return var0 == Block.stone.blockID || var0 == Block.cobblestone.blockID || var0 == Block.stoneBrick.blockID;
-	}
-
-	public static int getMetadataForBlockType(int var0) {
-		return var0 == Block.cobblestone.blockID ? 1 : (var0 == Block.stoneBrick.blockID ? 2 : 0);
-	}
-
-	protected ItemStack createStackedBlock(int var1) {
+	/**
+	 * Gets the blockID of the block this block is pretending to be according to this block's metadata.
+	 */
+	public static boolean getPosingIdByMetadata(int par0) {
+		return par0 == Block.stone.blockID || par0 == Block.cobblestone.blockID || par0 == Block.stoneBrick.blockID;
+	}
+
+	/**
+	 * Returns the metadata to use when a Silverfish hides in the block. Sets the block to BlockSilverfish with this
+	 * metadata. It changes the displayed texture client side to look like a normal block.
+	 */
+	public static int getMetadataForBlockType(int par0) {
+		return par0 == Block.cobblestone.blockID ? 1 : (par0 == Block.stoneBrick.blockID ? 2 : 0);
+	}
+
+	/**
+	 * Returns an item stack containing a single instance of the current block type. 'i' is the block's subtype/damage and
+	 * is ignored for blocks which do not support subtypes. Blocks which cannot be harvested should return null.
+	 */
+	protected ItemStack createStackedBlock(int par1) {
 		Block var2 = Block.stone;
-		if(var1 == 1) {
+
+		if (par1 == 1) {
 			var2 = Block.cobblestone;
 		}
 
-		if(var1 == 2) {
+		if (par1 == 2) {
 			var2 = Block.stoneBrick;
 		}
 
 		return new ItemStack(var2);
 	}
 
-	public int getDamageValue(World var1, int var2, int var3, int var4) {
-		return var1.getBlockMetadata(var2, var3, var4);
+	/**
+	 * Get the block's damage value (for use with pick block).
+	 */
+	public int getDamageValue(World par1World, int par2, int par3, int par4) {
+		return par1World.getBlockMetadata(par2, par3, par4);
 	}
 
-	public void getSubBlocks(int var1, CreativeTabs var2, List var3) {
-		for(int var4 = 0; var4 < 3; ++var4) {
-			var3.add(new ItemStack(var1, 1, var4));
+	/**
+	 * returns a list of blocks with the same ID, but different meta (eg: wood returns 4 blocks)
+	 */
+	public void getSubBlocks(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		for (int var4 = 0; var4 < 3; ++var4) {
+			par3List.add(new ItemStack(par1, 1, var4));
 		}
-
 	}
 }
