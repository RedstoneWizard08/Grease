--- net/minecraft/src/BlockWall.java
+++ net/minecraft/src/BlockWall.java
@@ -3,84 +3,111 @@
 import java.util.List;
 
 public class BlockWall extends Block {
-	public static final String[] a = new String[]{"normal", "mossy"};
-
-	public BlockWall(int var1, Block var2) {
-		super(var1, var2.blockMaterial);
-		this.setHardness(var2.blockHardness);
-		this.setResistance(var2.blockResistance / 3.0F);
-		this.setStepSound(var2.stepSound);
+
+	/** The types of the wall. */
+	public static final String[] types = new String[] {"normal", "mossy"};
+
+	public BlockWall(int par1, Block par2Block) {
+		super(par1, par2Block.blockMaterial);
+		this.setHardness(par2Block.blockHardness);
+		this.setResistance(par2Block.blockResistance / 3.0F);
+		this.setStepSound(par2Block.stepSound);
 		this.setCreativeTab(CreativeTabs.tabBlock);
 	}
 
-	public Icon getIcon(int var1, int var2) {
-		return var2 == 1 ? Block.cobblestoneMossy.getBlockTextureFromSide(var1) : Block.cobblestone.getBlockTextureFromSide(var1);
+	/**
+	 * From the specified side and block metadata retrieves the blocks texture. Args: side, metadata
+	 */
+	public Icon getIcon(int par1, int par2) {
+		return par2 == 1 ? Block.cobblestoneMossy.getBlockTextureFromSide(par1) : Block.cobblestone.getBlockTextureFromSide(par1);
 	}
 
+	/**
+	 * The type of render function that is called for this block
+	 */
 	public int getRenderType() {
 		return 32;
 	}
 
+	/**
+	 * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
+	 */
 	public boolean renderAsNormalBlock() {
 		return false;
 	}
 
-	public boolean getBlocksMovement(IBlockAccess var1, int var2, int var3, int var4) {
+	public boolean getBlocksMovement(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
 		return false;
 	}
 
+	/**
+	 * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
+	 * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
+	 */
 	public boolean isOpaqueCube() {
 		return false;
 	}
 
-	public void setBlockBoundsBasedOnState(IBlockAccess var1, int var2, int var3, int var4) {
-		boolean var5 = this.canConnectWallTo(var1, var2, var3, var4 - 1);
-		boolean var6 = this.canConnectWallTo(var1, var2, var3, var4 + 1);
-		boolean var7 = this.canConnectWallTo(var1, var2 - 1, var3, var4);
-		boolean var8 = this.canConnectWallTo(var1, var2 + 1, var3, var4);
+	/**
+	 * Updates the blocks bounds based on its current state. Args: world, x, y, z
+	 */
+	public void setBlockBoundsBasedOnState(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		boolean var5 = this.canConnectWallTo(par1IBlockAccess, par2, par3, par4 - 1);
+		boolean var6 = this.canConnectWallTo(par1IBlockAccess, par2, par3, par4 + 1);
+		boolean var7 = this.canConnectWallTo(par1IBlockAccess, par2 - 1, par3, par4);
+		boolean var8 = this.canConnectWallTo(par1IBlockAccess, par2 + 1, par3, par4);
 		float var9 = 0.25F;
-		float var10 = 12.0F / 16.0F;
+		float var10 = 0.75F;
 		float var11 = 0.25F;
-		float var12 = 12.0F / 16.0F;
+		float var12 = 0.75F;
 		float var13 = 1.0F;
-		if(var5) {
+
+		if (var5) {
 			var11 = 0.0F;
 		}
 
-		if(var6) {
+		if (var6) {
 			var12 = 1.0F;
 		}
 
-		if(var7) {
+		if (var7) {
 			var9 = 0.0F;
 		}
 
-		if(var8) {
+		if (var8) {
 			var10 = 1.0F;
 		}
 
-		if(var5 && var6 && !var7 && !var8) {
-			var13 = 13.0F / 16.0F;
-			var9 = 5.0F / 16.0F;
-			var10 = 11.0F / 16.0F;
-		} else if(!var5 && !var6 && var7 && var8) {
-			var13 = 13.0F / 16.0F;
-			var11 = 5.0F / 16.0F;
-			var12 = 11.0F / 16.0F;
+		if (var5 && var6 && !var7 && !var8) {
+			var13 = 0.8125F;
+			var9 = 0.3125F;
+			var10 = 0.6875F;
+		} else if (!var5 && !var6 && var7 && var8) {
+			var13 = 0.8125F;
+			var11 = 0.3125F;
+			var12 = 0.6875F;
 		}
 
 		this.setBlockBounds(var9, 0.0F, var11, var10, var13, var12);
 	}
 
-	public AxisAlignedBB getCollisionBoundingBoxFromPool(World var1, int var2, int var3, int var4) {
-		this.setBlockBoundsBasedOnState(var1, var2, var3, var4);
+	/**
+	 * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
+	 * cleared to be reused)
+	 */
+	public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4) {
+		this.setBlockBoundsBasedOnState(par1World, par2, par3, par4);
 		this.maxY = 1.5D;
-		return super.getCollisionBoundingBoxFromPool(var1, var2, var3, var4);
+		return super.getCollisionBoundingBoxFromPool(par1World, par2, par3, par4);
 	}
 
-	public boolean canConnectWallTo(IBlockAccess var1, int var2, int var3, int var4) {
-		int var5 = var1.getBlockId(var2, var3, var4);
-		if(var5 != this.blockID && var5 != Block.fenceGate.blockID) {
+	/**
+	 * Return whether an adjacent block can connect to a wall.
+	 */
+	public boolean canConnectWallTo(IBlockAccess par1IBlockAccess, int par2, int par3, int par4) {
+		int var5 = par1IBlockAccess.getBlockId(par2, par3, par4);
+
+		if (var5 != this.blockID && var5 != Block.fenceGate.blockID) {
 			Block var6 = Block.blocksList[var5];
 			return var6 != null && var6.blockMaterial.isOpaque() && var6.renderAsNormalBlock() ? var6.blockMaterial != Material.pumpkin : false;
 		} else {
@@ -88,19 +115,32 @@
 		}
 	}
 
-	public void getSubBlocks(int var1, CreativeTabs var2, List var3) {
-		var3.add(new ItemStack(var1, 1, 0));
-		var3.add(new ItemStack(var1, 1, 1));
-	}
-
-	public int damageDropped(int var1) {
-		return var1;
-	}
-
-	public boolean shouldSideBeRendered(IBlockAccess var1, int var2, int var3, int var4, int var5) {
-		return var5 == 0 ? super.shouldSideBeRendered(var1, var2, var3, var4, var5) : true;
-	}
-
-	public void registerIcons(IconRegister var1) {
-	}
+	/**
+	 * returns a list of blocks with the same ID, but different meta (eg: wood returns 4 blocks)
+	 */
+	public void getSubBlocks(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		par3List.add(new ItemStack(par1, 1, 0));
+		par3List.add(new ItemStack(par1, 1, 1));
+	}
+
+	/**
+	 * Determines the damage on the item the block drops. Used in cloth and wood.
+	 */
+	public int damageDropped(int par1) {
+		return par1;
+	}
+
+	/**
+	 * Returns true if the given side of this block type should be rendered, if the adjacent block is at the given
+	 * coordinates.  Args: blockAccess, x, y, z, side
+	 */
+	public boolean shouldSideBeRendered(IBlockAccess par1IBlockAccess, int par2, int par3, int par4, int par5) {
+		return par5 == 0 ? super.shouldSideBeRendered(par1IBlockAccess, par2, par3, par4, par5) : true;
+	}
+
+	/**
+	 * When this method is called, your block should register all the icons it needs with the given IconRegister. This is
+	 * the only chance you get to register icons.
+	 */
+	public void registerIcons(IconRegister par1IconRegister) {}
 }
