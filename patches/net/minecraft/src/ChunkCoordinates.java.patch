--- net/minecraft/src/ChunkCoordinates.java
+++ net/minecraft/src/ChunkCoordinates.java
@@ -2,29 +2,32 @@
 
 public class ChunkCoordinates implements Comparable {
 	public int posX;
+
+	/** the y coordinate */
 	public int posY;
+
+	/** the z coordinate */
 	public int posZ;
 
-	public ChunkCoordinates() {
-	}
-
-	public ChunkCoordinates(int var1, int var2, int var3) {
-		this.posX = var1;
-		this.posY = var2;
-		this.posZ = var3;
-	}
-
-	public ChunkCoordinates(ChunkCoordinates var1) {
-		this.posX = var1.posX;
-		this.posY = var1.posY;
-		this.posZ = var1.posZ;
-	}
-
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof ChunkCoordinates)) {
+	public ChunkCoordinates() {}
+
+	public ChunkCoordinates(int par1, int par2, int par3) {
+		this.posX = par1;
+		this.posY = par2;
+		this.posZ = par3;
+	}
+
+	public ChunkCoordinates(ChunkCoordinates par1ChunkCoordinates) {
+		this.posX = par1ChunkCoordinates.posX;
+		this.posY = par1ChunkCoordinates.posY;
+		this.posZ = par1ChunkCoordinates.posZ;
+	}
+
+	public boolean equals(Object par1Obj) {
+		if (!(par1Obj instanceof ChunkCoordinates)) {
 			return false;
 		} else {
-			ChunkCoordinates var2 = (ChunkCoordinates)var1;
+			ChunkCoordinates var2 = (ChunkCoordinates)par1Obj;
 			return this.posX == var2.posX && this.posY == var2.posY && this.posZ == var2.posZ;
 		}
 	}
@@ -33,28 +36,37 @@
 		return this.posX + this.posZ << 8 + this.posY << 16;
 	}
 
-	public int compareChunkCoordinate(ChunkCoordinates var1) {
-		return this.posY == var1.posY ? (this.posZ == var1.posZ ? this.posX - var1.posX : this.posZ - var1.posZ) : this.posY - var1.posY;
-	}
-
-	public void set(int var1, int var2, int var3) {
-		this.posX = var1;
-		this.posY = var2;
-		this.posZ = var3;
-	}
-
-	public float getDistanceSquared(int var1, int var2, int var3) {
-		float var4 = (float)(this.posX - var1);
-		float var5 = (float)(this.posY - var2);
-		float var6 = (float)(this.posZ - var3);
+	/**
+	 * Compare the coordinate with another coordinate
+	 */
+	public int compareChunkCoordinate(ChunkCoordinates par1ChunkCoordinates) {
+		return this.posY == par1ChunkCoordinates.posY ? (this.posZ == par1ChunkCoordinates.posZ ? this.posX - par1ChunkCoordinates.posX : this.posZ - par1ChunkCoordinates.posZ) : this.posY - par1ChunkCoordinates.posY;
+	}
+
+	public void set(int par1, int par2, int par3) {
+		this.posX = par1;
+		this.posY = par2;
+		this.posZ = par3;
+	}
+
+	/**
+	 * Returns the squared distance between this coordinates and the coordinates given as argument.
+	 */
+	public float getDistanceSquared(int par1, int par2, int par3) {
+		float var4 = (float)(this.posX - par1);
+		float var5 = (float)(this.posY - par2);
+		float var6 = (float)(this.posZ - par3);
 		return var4 * var4 + var5 * var5 + var6 * var6;
 	}
 
-	public float getDistanceSquaredToChunkCoordinates(ChunkCoordinates var1) {
-		return this.getDistanceSquared(var1.posX, var1.posY, var1.posZ);
+	/**
+	 * Return the squared distance between this coordinates and the ChunkCoordinates given as argument.
+	 */
+	public float getDistanceSquaredToChunkCoordinates(ChunkCoordinates par1ChunkCoordinates) {
+		return this.getDistanceSquared(par1ChunkCoordinates.posX, par1ChunkCoordinates.posY, par1ChunkCoordinates.posZ);
 	}
 
-	public int compareTo(Object var1) {
-		return this.compareChunkCoordinate((ChunkCoordinates)var1);
+	public int compareTo(Object par1Obj) {
+		return this.compareChunkCoordinate((ChunkCoordinates)par1Obj);
 	}
 }
