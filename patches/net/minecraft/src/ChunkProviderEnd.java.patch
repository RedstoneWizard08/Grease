--- net/minecraft/src/ChunkProviderEnd.java
+++ net/minecraft/src/ChunkProviderEnd.java
@@ -4,7 +4,7 @@
 import java.util.Random;
 
 public class ChunkProviderEnd implements IChunkProvider {
-	private Random i;
+	private Random endRNG;
 	private NoiseGeneratorOctaves noiseGen1;
 	private NoiseGeneratorOctaves noiseGen2;
 	private NoiseGeneratorOctaves noiseGen3;
@@ -12,6 +12,8 @@
 	public NoiseGeneratorOctaves noiseGen5;
 	private World endWorld;
 	private double[] densities;
+
+	/** The biomes that are used to generate the chunk */
 	private BiomeGenBase[] biomesForGeneration;
 	double[] noiseData1;
 	double[] noiseData2;
@@ -20,26 +22,26 @@
 	double[] noiseData5;
 	int[][] field_73203_h = new int[32][32];
 
-	public ChunkProviderEnd(World var1, long var2) {
-		this.endWorld = var1;
-		this.i = new Random(var2);
-		this.noiseGen1 = new NoiseGeneratorOctaves(this.i, 16);
-		this.noiseGen2 = new NoiseGeneratorOctaves(this.i, 16);
-		this.noiseGen3 = new NoiseGeneratorOctaves(this.i, 8);
-		this.noiseGen4 = new NoiseGeneratorOctaves(this.i, 10);
-		this.noiseGen5 = new NoiseGeneratorOctaves(this.i, 16);
+	public ChunkProviderEnd(World par1World, long par2) {
+		this.endWorld = par1World;
+		this.endRNG = new Random(par2);
+		this.noiseGen1 = new NoiseGeneratorOctaves(this.endRNG, 16);
+		this.noiseGen2 = new NoiseGeneratorOctaves(this.endRNG, 16);
+		this.noiseGen3 = new NoiseGeneratorOctaves(this.endRNG, 8);
+		this.noiseGen4 = new NoiseGeneratorOctaves(this.endRNG, 10);
+		this.noiseGen5 = new NoiseGeneratorOctaves(this.endRNG, 16);
 	}
 
-	public void generateTerrain(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
+	public void generateTerrain(int par1, int par2, byte[] par3ArrayOfByte, BiomeGenBase[] par4ArrayOfBiomeGenBase) {
 		byte var5 = 2;
 		int var6 = var5 + 1;
 		byte var7 = 33;
 		int var8 = var5 + 1;
-		this.densities = this.initializeNoiseField(this.densities, var1 * var5, 0, var2 * var5, var6, var7, var8);
+		this.densities = this.initializeNoiseField(this.densities, par1 * var5, 0, par2 * var5, var6, var7, var8);
 
-		for(int var9 = 0; var9 < var5; ++var9) {
-			for(int var10 = 0; var10 < var5; ++var10) {
-				for(int var11 = 0; var11 < 32; ++var11) {
+		for (int var9 = 0; var9 < var5; ++var9) {
+			for (int var10 = 0; var10 < var5; ++var10) {
+				for (int var11 = 0; var11 < 32; ++var11) {
 					double var12 = 0.25D;
 					double var14 = this.densities[((var9 + 0) * var8 + var10 + 0) * var7 + var11 + 0];
 					double var16 = this.densities[((var9 + 0) * var8 + var10 + 1) * var7 + var11 + 0];
@@ -50,27 +52,28 @@
 					double var26 = (this.densities[((var9 + 1) * var8 + var10 + 0) * var7 + var11 + 1] - var18) * var12;
 					double var28 = (this.densities[((var9 + 1) * var8 + var10 + 1) * var7 + var11 + 1] - var20) * var12;
 
-					for(int var30 = 0; var30 < 4; ++var30) {
+					for (int var30 = 0; var30 < 4; ++var30) {
 						double var31 = 0.125D;
 						double var33 = var14;
 						double var35 = var16;
 						double var37 = (var18 - var14) * var31;
 						double var39 = (var20 - var16) * var31;
 
-						for(int var41 = 0; var41 < 8; ++var41) {
+						for (int var41 = 0; var41 < 8; ++var41) {
 							int var42 = var41 + var9 * 8 << 11 | 0 + var10 * 8 << 7 | var11 * 4 + var30;
 							short var43 = 128;
 							double var44 = 0.125D;
 							double var46 = var33;
 							double var48 = (var35 - var33) * var44;
 
-							for(int var50 = 0; var50 < 8; ++var50) {
+							for (int var50 = 0; var50 < 8; ++var50) {
 								int var51 = 0;
-								if(var46 > 0.0D) {
+
+								if (var46 > 0.0D) {
 									var51 = Block.whiteStone.blockID;
 								}
 
-								var3[var42] = (byte)var51;
+								par3ArrayOfByte[var42] = (byte)var51;
 								var42 += var43;
 								var46 += var48;
 							}
@@ -87,60 +90,67 @@
 				}
 			}
 		}
-
 	}
 
-	public void replaceBlocksForBiome(int var1, int var2, byte[] var3, BiomeGenBase[] var4) {
-		for(int var5 = 0; var5 < 16; ++var5) {
-			for(int var6 = 0; var6 < 16; ++var6) {
+	public void replaceBlocksForBiome(int par1, int par2, byte[] par3ArrayOfByte, BiomeGenBase[] par4ArrayOfBiomeGenBase) {
+		for (int var5 = 0; var5 < 16; ++var5) {
+			for (int var6 = 0; var6 < 16; ++var6) {
 				byte var7 = 1;
 				int var8 = -1;
 				byte var9 = (byte)Block.whiteStone.blockID;
 				byte var10 = (byte)Block.whiteStone.blockID;
 
-				for(int var11 = 127; var11 >= 0; --var11) {
+				for (int var11 = 127; var11 >= 0; --var11) {
 					int var12 = (var6 * 16 + var5) * 128 + var11;
-					byte var13 = var3[var12];
-					if(var13 == 0) {
+					byte var13 = par3ArrayOfByte[var12];
+
+					if (var13 == 0) {
 						var8 = -1;
-					} else if(var13 == Block.stone.blockID) {
-						if(var8 == -1) {
-							if(var7 <= 0) {
+					} else if (var13 == Block.stone.blockID) {
+						if (var8 == -1) {
+							if (var7 <= 0) {
 								var9 = 0;
 								var10 = (byte)Block.whiteStone.blockID;
 							}
 
 							var8 = var7;
-							if(var11 >= 0) {
-								var3[var12] = var9;
+
+							if (var11 >= 0) {
+								par3ArrayOfByte[var12] = var9;
 							} else {
-								var3[var12] = var10;
+								par3ArrayOfByte[var12] = var10;
 							}
-						} else if(var8 > 0) {
+						} else if (var8 > 0) {
 							--var8;
-							var3[var12] = var10;
+							par3ArrayOfByte[var12] = var10;
 						}
 					}
 				}
 			}
 		}
-
-	}
-
-	public Chunk loadChunk(int var1, int var2) {
-		return this.provideChunk(var1, var2);
-	}
-
-	public Chunk provideChunk(int var1, int var2) {
-		this.i.setSeed((long)var1 * 341873128712L + (long)var2 * 132897987541L);
-		byte[] var3 = new byte[-Short.MIN_VALUE];
-		this.biomesForGeneration = this.endWorld.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, var1 * 16, var2 * 16, 16, 16);
-		this.generateTerrain(var1, var2, var3, this.biomesForGeneration);
-		this.replaceBlocksForBiome(var1, var2, var3, this.biomesForGeneration);
-		Chunk var4 = new Chunk(this.endWorld, var3, var1, var2);
+	}
+
+	/**
+	 * loads or generates the chunk at the chunk location specified
+	 */
+	public Chunk loadChunk(int par1, int par2) {
+		return this.provideChunk(par1, par2);
+	}
+
+	/**
+	 * Will return back a chunk, if it doesn't exist and its not a MP client it will generates all the blocks for the
+	 * specified chunk from the map seed and chunk seed
+	 */
+	public Chunk provideChunk(int par1, int par2) {
+		this.endRNG.setSeed((long)par1 * 341873128712L + (long)par2 * 132897987541L);
+		byte[] var3 = new byte[32768];
+		this.biomesForGeneration = this.endWorld.getWorldChunkManager().loadBlockGeneratorData(this.biomesForGeneration, par1 * 16, par2 * 16, 16, 16);
+		this.generateTerrain(par1, par2, var3, this.biomesForGeneration);
+		this.replaceBlocksForBiome(par1, par2, var3, this.biomesForGeneration);
+		Chunk var4 = new Chunk(this.endWorld, var3, par1, par2);
 		byte[] var5 = var4.getBiomeArray();
 
-		for(int var6 = 0; var6 < var5.length; ++var6) {
+		for (int var6 = 0; var6 < var5.length; ++var6) {
 			var5[var6] = (byte)this.biomesForGeneration[var6].biomeID;
 		}
 
@@ -148,74 +158,84 @@
 		return var4;
 	}
 
-	private double[] initializeNoiseField(double[] var1, int var2, int var3, int var4, int var5, int var6, int var7) {
-		if(var1 == null) {
-			var1 = new double[var5 * var6 * var7];
+	/**
+	 * generates a subset of the level's terrain data. Takes 7 arguments: the [empty] noise array, the position, and the
+	 * size.
+	 */
+	private double[] initializeNoiseField(double[] par1ArrayOfDouble, int par2, int par3, int par4, int par5, int par6, int par7) {
+		if (par1ArrayOfDouble == null) {
+			par1ArrayOfDouble = new double[par5 * par6 * par7];
 		}
 
 		double var8 = 684.412D;
 		double var10 = 684.412D;
-		this.noiseData4 = this.noiseGen4.generateNoiseOctaves(this.noiseData4, var2, var4, var5, var7, 1.121D, 1.121D, 0.5D);
-		this.noiseData5 = this.noiseGen5.generateNoiseOctaves(this.noiseData5, var2, var4, var5, var7, 200.0D, 200.0D, 0.5D);
+		this.noiseData4 = this.noiseGen4.generateNoiseOctaves(this.noiseData4, par2, par4, par5, par7, 1.121D, 1.121D, 0.5D);
+		this.noiseData5 = this.noiseGen5.generateNoiseOctaves(this.noiseData5, par2, par4, par5, par7, 200.0D, 200.0D, 0.5D);
 		var8 *= 2.0D;
-		this.noiseData1 = this.noiseGen3.generateNoiseOctaves(this.noiseData1, var2, var3, var4, var5, var6, var7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
-		this.noiseData2 = this.noiseGen1.generateNoiseOctaves(this.noiseData2, var2, var3, var4, var5, var6, var7, var8, var10, var8);
-		this.noiseData3 = this.noiseGen2.generateNoiseOctaves(this.noiseData3, var2, var3, var4, var5, var6, var7, var8, var10, var8);
+		this.noiseData1 = this.noiseGen3.generateNoiseOctaves(this.noiseData1, par2, par3, par4, par5, par6, par7, var8 / 80.0D, var10 / 160.0D, var8 / 80.0D);
+		this.noiseData2 = this.noiseGen1.generateNoiseOctaves(this.noiseData2, par2, par3, par4, par5, par6, par7, var8, var10, var8);
+		this.noiseData3 = this.noiseGen2.generateNoiseOctaves(this.noiseData3, par2, par3, par4, par5, par6, par7, var8, var10, var8);
 		int var12 = 0;
 		int var13 = 0;
 
-		for(int var14 = 0; var14 < var5; ++var14) {
-			for(int var15 = 0; var15 < var7; ++var15) {
+		for (int var14 = 0; var14 < par5; ++var14) {
+			for (int var15 = 0; var15 < par7; ++var15) {
 				double var16 = (this.noiseData4[var13] + 256.0D) / 512.0D;
-				if(var16 > 1.0D) {
+
+				if (var16 > 1.0D) {
 					var16 = 1.0D;
 				}
 
 				double var18 = this.noiseData5[var13] / 8000.0D;
-				if(var18 < 0.0D) {
+
+				if (var18 < 0.0D) {
 					var18 = -var18 * 0.3D;
 				}
 
 				var18 = var18 * 3.0D - 2.0D;
-				float var20 = (float)(var14 + var2 - 0) / 1.0F;
-				float var21 = (float)(var15 + var4 - 0) / 1.0F;
+				float var20 = (float)(var14 + par2 - 0) / 1.0F;
+				float var21 = (float)(var15 + par4 - 0) / 1.0F;
 				float var22 = 100.0F - MathHelper.sqrt_float(var20 * var20 + var21 * var21) * 8.0F;
-				if(var22 > 80.0F) {
+
+				if (var22 > 80.0F) {
 					var22 = 80.0F;
 				}
 
-				if(var22 < -100.0F) {
+				if (var22 < -100.0F) {
 					var22 = -100.0F;
 				}
 
-				if(var18 > 1.0D) {
+				if (var18 > 1.0D) {
 					var18 = 1.0D;
 				}
 
 				var18 /= 8.0D;
 				var18 = 0.0D;
-				if(var16 < 0.0D) {
+
+				if (var16 < 0.0D) {
 					var16 = 0.0D;
 				}
 
 				var16 += 0.5D;
-				var18 = var18 * (double)var6 / 16.0D;
+				var18 = var18 * (double)par6 / 16.0D;
 				++var13;
-				double var23 = (double)var6 / 2.0D;
+				double var23 = (double)par6 / 2.0D;
 
-				for(int var25 = 0; var25 < var6; ++var25) {
+				for (int var25 = 0; var25 < par6; ++var25) {
 					double var26 = 0.0D;
 					double var28 = ((double)var25 - var23) * 8.0D / var16;
-					if(var28 < 0.0D) {
+
+					if (var28 < 0.0D) {
 						var28 *= -1.0D;
 					}
 
 					double var30 = this.noiseData2[var12] / 512.0D;
 					double var32 = this.noiseData3[var12] / 512.0D;
 					double var34 = (this.noiseData1[var12] / 10.0D + 1.0D) / 2.0D;
-					if(var34 < 0.0D) {
+
+					if (var34 < 0.0D) {
 						var26 = var30;
-					} else if(var34 > 1.0D) {
+					} else if (var34 > 1.0D) {
 						var26 = var32;
 					} else {
 						var26 = var30 + (var32 - var30) * var34;
@@ -225,13 +245,15 @@
 					var26 += (double)var22;
 					byte var36 = 2;
 					double var37;
-					if(var25 > var6 / 2 - var36) {
-						var37 = (double)((float)(var25 - (var6 / 2 - var36)) / 64.0F);
-						if(var37 < 0.0D) {
+
+					if (var25 > par6 / 2 - var36) {
+						var37 = (double)((float)(var25 - (par6 / 2 - var36)) / 64.0F);
+
+						if (var37 < 0.0D) {
 							var37 = 0.0D;
 						}
 
-						if(var37 > 1.0D) {
+						if (var37 > 1.0D) {
 							var37 = 1.0D;
 						}
 
@@ -239,58 +261,87 @@
 					}
 
 					var36 = 8;
-					if(var25 < var36) {
+
+					if (var25 < var36) {
 						var37 = (double)((float)(var36 - var25) / ((float)var36 - 1.0F));
 						var26 = var26 * (1.0D - var37) + -30.0D * var37;
 					}
 
-					var1[var12] = var26;
+					par1ArrayOfDouble[var12] = var26;
 					++var12;
 				}
 			}
 		}
 
-		return var1;
+		return par1ArrayOfDouble;
 	}
 
-	public boolean chunkExists(int var1, int var2) {
+	/**
+	 * Checks to see if a chunk exists at x, y
+	 */
+	public boolean chunkExists(int par1, int par2) {
 		return true;
 	}
 
-	public void populate(IChunkProvider var1, int var2, int var3) {
+	/**
+	 * Populates chunk with ores etc etc
+	 */
+	public void populate(IChunkProvider par1IChunkProvider, int par2, int par3) {
 		BlockSand.fallInstantly = true;
-		int var4 = var2 * 16;
-		int var5 = var3 * 16;
+		int var4 = par2 * 16;
+		int var5 = par3 * 16;
 		BiomeGenBase var6 = this.endWorld.getBiomeGenForCoords(var4 + 16, var5 + 16);
-		var6.decorate(this.endWorld, this.endWorld.s, var4, var5);
+		var6.decorate(this.endWorld, this.endWorld.rand, var4, var5);
 		BlockSand.fallInstantly = false;
 	}
 
-	public boolean saveChunks(boolean var1, IProgressUpdate var2) {
+	/**
+	 * Two modes of operation: if passed true, save all Chunks in one go.  If passed false, save up to two chunks.  Return
+	 * true if all chunks have been saved.
+	 */
+	public boolean saveChunks(boolean par1, IProgressUpdate par2IProgressUpdate) {
 		return true;
 	}
 
-	public void saveExtraData() {
-	}
+	/**
+	 * Save extra data not associated with any Chunk.  Not saved during autosave, only during world unload.  Currently
+	 * unimplemented.
+	 */
+	public void saveExtraData() {}
 
+	/**
+	 * Unloads chunks that are marked to be unloaded. This is not guaranteed to unload every such chunk.
+	 */
 	public boolean unloadQueuedChunks() {
 		return false;
 	}
 
+	/**
+	 * Returns if the IChunkProvider supports saving.
+	 */
 	public boolean canSave() {
 		return true;
 	}
 
+	/**
+	 * Converts the instance data to a readable string.
+	 */
 	public String makeString() {
 		return "RandomLevelSource";
 	}
 
-	public List getPossibleCreatures(EnumCreatureType var1, int var2, int var3, int var4) {
-		BiomeGenBase var5 = this.endWorld.getBiomeGenForCoords(var2, var4);
-		return var5 == null ? null : var5.getSpawnableList(var1);
+	/**
+	 * Returns a list of creatures of the specified type that can spawn at the given location.
+	 */
+	public List getPossibleCreatures(EnumCreatureType par1EnumCreatureType, int par2, int par3, int par4) {
+		BiomeGenBase var5 = this.endWorld.getBiomeGenForCoords(par2, par4);
+		return var5 == null ? null : var5.getSpawnableList(par1EnumCreatureType);
 	}
 
-	public ChunkPosition findClosestStructure(World var1, String var2, int var3, int var4, int var5) {
+	/**
+	 * Returns the location of the closest structure of the specified type. If not found returns null.
+	 */
+	public ChunkPosition findClosestStructure(World par1World, String par2Str, int par3, int par4, int par5) {
 		return null;
 	}
 
@@ -298,6 +349,5 @@
 		return 0;
 	}
 
-	public void recreateStructures(int var1, int var2) {
-	}
+	public void recreateStructures(int par1, int par2) {}
 }
