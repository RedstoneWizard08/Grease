--- net/minecraft/src/ClippingHelperImpl.java
+++ net/minecraft/src/ClippingHelperImpl.java
@@ -1,37 +1,52 @@
 package net.minecraft.src;
 
 import java.nio.FloatBuffer;
-import org.lwjgl.opengl.GL11;
+// Spout Start - Unused import
+//import org.lwjgl.opengl.GL11;
+// Spout End
 
 public class ClippingHelperImpl extends ClippingHelper {
 	private static ClippingHelperImpl instance = new ClippingHelperImpl();
-	private FloatBuffer f = GLAllocation.createDirectFloatBuffer(16);
-	private FloatBuffer g = GLAllocation.createDirectFloatBuffer(16);
-	private FloatBuffer h = GLAllocation.createDirectFloatBuffer(16);
+	private FloatBuffer projectionMatrixBuffer = GLAllocation.createDirectFloatBuffer(16);
+	private FloatBuffer modelviewMatrixBuffer = GLAllocation.createDirectFloatBuffer(16);
+	private FloatBuffer field_78564_h = GLAllocation.createDirectFloatBuffer(16);
 
+	/**
+	 * Initialises the ClippingHelper object then returns an instance of it.
+	 */
 	public static ClippingHelper getInstance() {
 		instance.init();
 		return instance;
 	}
 
-	private void normalize(float[][] var1, int var2) {
-		float var3 = MathHelper.sqrt_float(var1[var2][0] * var1[var2][0] + var1[var2][1] * var1[var2][1] + var1[var2][2] * var1[var2][2]);
-		var1[var2][0] /= var3;
-		var1[var2][1] /= var3;
-		var1[var2][2] /= var3;
-		var1[var2][3] /= var3;
+	/**
+	 * Normalize the frustum.
+	 */
+	private void normalize(float[][] par1ArrayOfFloat, int par2) {
+		float var3 = MathHelper.sqrt_float(par1ArrayOfFloat[par2][0] * par1ArrayOfFloat[par2][0] + par1ArrayOfFloat[par2][1] * par1ArrayOfFloat[par2][1] + par1ArrayOfFloat[par2][2] * par1ArrayOfFloat[par2][2]);
+		par1ArrayOfFloat[par2][0] /= var3;
+		par1ArrayOfFloat[par2][1] /= var3;
+		par1ArrayOfFloat[par2][2] /= var3;
+		par1ArrayOfFloat[par2][3] /= var3;
 	}
 
 	private void init() {
-		this.f.clear();
-		this.g.clear();
-		this.h.clear();
-		GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX, this.f);
-		GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, this.g);
-		this.f.flip().limit(16);
-		this.f.get(this.projectionMatrix);
-		this.g.flip().limit(16);
-		this.g.get(this.modelviewMatrix);
+		// Spout Start
+		/*
+		this.projectionMatrixBuffer.clear();
+		this.modelviewMatrixBuffer.clear();
+		this.field_78564_h.clear();
+		GL11.glGetFloat(GL11.GL_PROJECTION_MATRIX, this.projectionMatrixBuffer);
+		GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, this.modelviewMatrixBuffer);
+		*/
+		modelviewMatrixBuffer = ActiveRenderInfo.modelMatrix.duplicate();
+		projectionMatrixBuffer = ActiveRenderInfo.projectionMatrix.duplicate();
+		// Spout End
+
+		this.projectionMatrixBuffer.flip().limit(16);
+		this.projectionMatrixBuffer.get(this.projectionMatrix);
+		this.modelviewMatrixBuffer.flip().limit(16);
+		this.modelviewMatrixBuffer.get(this.modelviewMatrix);
 		this.clippingMatrix[0] = this.modelviewMatrix[0] * this.projectionMatrix[0] + this.modelviewMatrix[1] * this.projectionMatrix[4] + this.modelviewMatrix[2] * this.projectionMatrix[8] + this.modelviewMatrix[3] * this.projectionMatrix[12];
 		this.clippingMatrix[1] = this.modelviewMatrix[0] * this.projectionMatrix[1] + this.modelviewMatrix[1] * this.projectionMatrix[5] + this.modelviewMatrix[2] * this.projectionMatrix[9] + this.modelviewMatrix[3] * this.projectionMatrix[13];
 		this.clippingMatrix[2] = this.modelviewMatrix[0] * this.projectionMatrix[2] + this.modelviewMatrix[1] * this.projectionMatrix[6] + this.modelviewMatrix[2] * this.projectionMatrix[10] + this.modelviewMatrix[3] * this.projectionMatrix[14];
