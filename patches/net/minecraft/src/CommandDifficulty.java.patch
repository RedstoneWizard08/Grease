--- net/minecraft/src/CommandDifficulty.java
+++ net/minecraft/src/CommandDifficulty.java
@@ -4,35 +4,44 @@
 import net.minecraft.server.MinecraftServer;
 
 public class CommandDifficulty extends CommandBase {
-	private static final String[] a = new String[]{"options.difficulty.peaceful", "options.difficulty.easy", "options.difficulty.normal", "options.difficulty.hard"};
+	private static final String[] difficulties = new String[] {"options.difficulty.peaceful", "options.difficulty.easy", "options.difficulty.normal", "options.difficulty.hard"};
 
 	public String getCommandName() {
 		return "difficulty";
 	}
 
+	/**
+	 * Return the required permission level for this command.
+	 */
 	public int getRequiredPermissionLevel() {
 		return 2;
 	}
 
-	public String getCommandUsage(ICommandSender var1) {
+	public String getCommandUsage(ICommandSender par1ICommandSender) {
 		return "commands.difficulty.usage";
 	}
 
-	public void processCommand(ICommandSender var1, String[] var2) {
-		if(var2.length > 0) {
-			int var3 = this.getDifficultyForName(var1, var2[0]);
+	public void processCommand(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		if (par2ArrayOfStr.length > 0) {
+			int var3 = this.getDifficultyForName(par1ICommandSender, par2ArrayOfStr[0]);
 			MinecraftServer.getServer().setDifficultyForAllWorlds(var3);
-			notifyAdmins(var1, "commands.difficulty.success", new Object[]{ChatMessageComponent.createFromTranslationKey(a[var3])});
+			notifyAdmins(par1ICommandSender, "commands.difficulty.success", new Object[] {ChatMessageComponent.createFromTranslationKey(difficulties[var3])});
 		} else {
 			throw new WrongUsageException("commands.difficulty.usage", new Object[0]);
 		}
 	}
 
-	protected int getDifficultyForName(ICommandSender var1, String var2) {
-		return !var2.equalsIgnoreCase("peaceful") && !var2.equalsIgnoreCase("p") ? (!var2.equalsIgnoreCase("easy") && !var2.equalsIgnoreCase("e") ? (!var2.equalsIgnoreCase("normal") && !var2.equalsIgnoreCase("n") ? (!var2.equalsIgnoreCase("hard") && !var2.equalsIgnoreCase("h") ? parseIntBounded(var1, var2, 0, 3) : 3) : 2) : 1) : 0;
+	/**
+	 * Return the difficulty value for the specified string.
+	 */
+	protected int getDifficultyForName(ICommandSender par1ICommandSender, String par2Str) {
+		return !par2Str.equalsIgnoreCase("peaceful") && !par2Str.equalsIgnoreCase("p") ? (!par2Str.equalsIgnoreCase("easy") && !par2Str.equalsIgnoreCase("e") ? (!par2Str.equalsIgnoreCase("normal") && !par2Str.equalsIgnoreCase("n") ? (!par2Str.equalsIgnoreCase("hard") && !par2Str.equalsIgnoreCase("h") ? parseIntBounded(par1ICommandSender, par2Str, 0, 3) : 3) : 2) : 1) : 0;
 	}
 
-	public List addTabCompletionOptions(ICommandSender var1, String[] var2) {
-		return var2.length == 1 ? getListOfStringsMatchingLastWord(var2, new String[]{"peaceful", "easy", "normal", "hard"}) : null;
+	/**
+	 * Adds the strings available in this command to the given list of tab completion options.
+	 */
+	public List addTabCompletionOptions(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		return par2ArrayOfStr.length == 1 ? getListOfStringsMatchingLastWord(par2ArrayOfStr, new String[] {"peaceful", "easy", "normal", "hard"}): null;
 	}
 }
