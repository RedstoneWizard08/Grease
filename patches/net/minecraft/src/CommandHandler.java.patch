--- net/minecraft/src/CommandHandler.java
+++ net/minecraft/src/CommandHandler.java
@@ -10,122 +10,134 @@
 import java.util.Map.Entry;
 
 public class CommandHandler implements ICommandManager {
-	private final Map a = new HashMap();
-	private final Set b = new HashSet();
-
-	public int executeCommand(ICommandSender var1, String var2) {
-		var2 = var2.trim();
-		if(var2.startsWith("/")) {
-			var2 = var2.substring(1);
+
+	/** Map of Strings to the ICommand objects they represent */
+	private final Map commandMap = new HashMap();
+
+	/** The set of ICommand objects currently loaded. */
+	private final Set commandSet = new HashSet();
+
+	public int executeCommand(ICommandSender par1ICommandSender, String par2Str) {
+		par2Str = par2Str.trim();
+
+		if (par2Str.startsWith("/")) {
+			par2Str = par2Str.substring(1);
 		}
 
-		String[] var3 = var2.split(" ");
+		String[] var3 = par2Str.split(" ");
 		String var4 = var3[0];
 		var3 = dropFirstString(var3);
-		ICommand var5 = (ICommand)this.a.get(var4);
+		ICommand var5 = (ICommand)this.commandMap.get(var4);
 		int var6 = this.getUsernameIndex(var5, var3);
 		int var7 = 0;
 
 		try {
-			if(var5 == null) {
+			if (var5 == null) {
 				throw new CommandNotFoundException();
 			}
 
-			if(var5.canCommandSenderUseCommand(var1)) {
-				if(var6 > -1) {
-					EntityPlayerMP[] var8 = PlayerSelector.matchPlayers(var1, var3[var6]);
+			if (var5.canCommandSenderUseCommand(par1ICommandSender)) {
+				if (var6 > -1) {
+					EntityPlayerMP[] var8 = PlayerSelector.matchPlayers(par1ICommandSender, var3[var6]);
 					String var9 = var3[var6];
 					EntityPlayerMP[] var10 = var8;
 					int var11 = var8.length;
 
-					for(int var12 = 0; var12 < var11; ++var12) {
+					for (int var12 = 0; var12 < var11; ++var12) {
 						EntityPlayerMP var13 = var10[var12];
 						var3[var6] = var13.getEntityName();
 
 						try {
-							var5.processCommand(var1, var3);
+							var5.processCommand(par1ICommandSender, var3);
 							++var7;
 						} catch (CommandException var15) {
-							var1.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions(var15.getMessage(), var15.getErrorOjbects()).setColor(EnumChatFormatting.RED));
+							par1ICommandSender.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions(var15.getMessage(), var15.getErrorOjbects()).setColor(EnumChatFormatting.RED));
 						}
 					}
 
 					var3[var6] = var9;
 				} else {
-					var5.processCommand(var1, var3);
+					var5.processCommand(par1ICommandSender, var3);
 					++var7;
 				}
 			} else {
-				var1.sendChatToPlayer(ChatMessageComponent.createFromTranslationKey("commands.generic.permission").setColor(EnumChatFormatting.RED));
+				par1ICommandSender.sendChatToPlayer(ChatMessageComponent.createFromTranslationKey("commands.generic.permission").setColor(EnumChatFormatting.RED));
 			}
 		} catch (WrongUsageException var16) {
-			var1.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions("commands.generic.usage", new Object[]{ChatMessageComponent.createFromTranslationWithSubstitutions(var16.getMessage(), var16.getErrorOjbects())}).setColor(EnumChatFormatting.RED));
+			par1ICommandSender.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions("commands.generic.usage", new Object[] {ChatMessageComponent.createFromTranslationWithSubstitutions(var16.getMessage(), var16.getErrorOjbects())}).setColor(EnumChatFormatting.RED));
 		} catch (CommandException var17) {
-			var1.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions(var17.getMessage(), var17.getErrorOjbects()).setColor(EnumChatFormatting.RED));
+			par1ICommandSender.sendChatToPlayer(ChatMessageComponent.createFromTranslationWithSubstitutions(var17.getMessage(), var17.getErrorOjbects()).setColor(EnumChatFormatting.RED));
 		} catch (Throwable var18) {
-			var1.sendChatToPlayer(ChatMessageComponent.createFromTranslationKey("commands.generic.exception").setColor(EnumChatFormatting.RED));
+			par1ICommandSender.sendChatToPlayer(ChatMessageComponent.createFromTranslationKey("commands.generic.exception").setColor(EnumChatFormatting.RED));
 			var18.printStackTrace();
 		}
 
 		return var7;
 	}
 
-	public ICommand registerCommand(ICommand var1) {
-		List var2 = var1.getCommandAliases();
-		this.a.put(var1.getCommandName(), var1);
-		this.b.add(var1);
-		if(var2 != null) {
+	/**
+	 * adds the command and any aliases it has to the internal map of available commands
+	 */
+	public ICommand registerCommand(ICommand par1ICommand) {
+		List var2 = par1ICommand.getCommandAliases();
+		this.commandMap.put(par1ICommand.getCommandName(), par1ICommand);
+		this.commandSet.add(par1ICommand);
+
+		if (var2 != null) {
 			Iterator var3 = var2.iterator();
 
-			while(true) {
-				String var4;
-				ICommand var5;
-				do {
-					if(!var3.hasNext()) {
-						return var1;
-					}
-
-					var4 = (String)var3.next();
-					var5 = (ICommand)this.a.get(var4);
-				} while(var5 != null && var5.getCommandName().equals(var4));
-
-				this.a.put(var4, var1);
+			while (var3.hasNext()) {
+				String var4 = (String)var3.next();
+				ICommand var5 = (ICommand)this.commandMap.get(var4);
+
+				if (var5 == null || !var5.getCommandName().equals(var4)) {
+					this.commandMap.put(var4, par1ICommand);
+				}
 			}
-		} else {
-			return var1;
 		}
+
+		return par1ICommand;
 	}
 
-	private static String[] dropFirstString(String[] var0) {
-		String[] var1 = new String[var0.length - 1];
+	/**
+	 * creates a new array and sets elements 0..n-2 to be 0..n-1 of the input (n elements)
+	 */
+	private static String[] dropFirstString(String[] par0ArrayOfStr) {
+		String[] var1 = new String[par0ArrayOfStr.length - 1];
 
-		for(int var2 = 1; var2 < var0.length; ++var2) {
-			var1[var2 - 1] = var0[var2];
+		for (int var2 = 1; var2 < par0ArrayOfStr.length; ++var2) {
+			var1[var2 - 1] = par0ArrayOfStr[var2];
 		}
 
 		return var1;
 	}
 
-	public List getPossibleCommands(ICommandSender var1, String var2) {
-		String[] var3 = var2.split(" ", -1);
+	/**
+	 * Performs a "begins with" string match on each token in par2. Only returns commands that par1 can use.
+	 */
+	public List getPossibleCommands(ICommandSender par1ICommandSender, String par2Str) {
+		String[] var3 = par2Str.split(" ", -1);
 		String var4 = var3[0];
-		if(var3.length == 1) {
+
+		if (var3.length == 1) {
 			ArrayList var8 = new ArrayList();
-			Iterator var6 = this.a.entrySet().iterator();
+			Iterator var6 = this.commandMap.entrySet().iterator();
 
-			while(var6.hasNext()) {
+			while (var6.hasNext()) {
 				Entry var7 = (Entry)var6.next();
-				if(CommandBase.doesStringStartWith(var4, (String)var7.getKey()) && ((ICommand)var7.getValue()).canCommandSenderUseCommand(var1)) {
+
+				if (CommandBase.doesStringStartWith(var4, (String)var7.getKey()) && ((ICommand)var7.getValue()).canCommandSenderUseCommand(par1ICommandSender)) {
 					var8.add(var7.getKey());
 				}
 			}
 
 			return var8;
 		} else {
-			if(var3.length > 1) {
-				ICommand var5 = (ICommand)this.a.get(var4);
-				if(var5 != null) {
-					return var5.addTabCompletionOptions(var1, dropFirstString(var3));
+			if (var3.length > 1) {
+				ICommand var5 = (ICommand)this.commandMap.get(var4);
+
+				if (var5 != null) {
+					return var5.addTabCompletionOptions(par1ICommandSender, dropFirstString(var3));
 				}
 			}
 
@@ -133,13 +145,17 @@
 		}
 	}
 
-	public List getPossibleCommands(ICommandSender var1) {
+	/**
+	 * returns all commands that the commandSender can use
+	 */
+	public List getPossibleCommands(ICommandSender par1ICommandSender) {
 		ArrayList var2 = new ArrayList();
-		Iterator var3 = this.b.iterator();
+		Iterator var3 = this.commandSet.iterator();
 
-		while(var3.hasNext()) {
+		while (var3.hasNext()) {
 			ICommand var4 = (ICommand)var3.next();
-			if(var4.canCommandSenderUseCommand(var1)) {
+
+			if (var4.canCommandSenderUseCommand(par1ICommandSender)) {
 				var2.add(var4);
 			}
 		}
@@ -147,16 +163,22 @@
 		return var2;
 	}
 
+	/**
+	 * returns a map of string to commads. All commands are returned, not just ones which someone has permission to use.
+	 */
 	public Map getCommands() {
-		return this.a;
+		return this.commandMap;
 	}
 
-	private int getUsernameIndex(ICommand var1, String[] var2) {
-		if(var1 == null) {
+	/**
+	 * Return a command's first parameter index containing a valid username.
+	 */
+	private int getUsernameIndex(ICommand par1ICommand, String[] par2ArrayOfStr) {
+		if (par1ICommand == null) {
 			return -1;
 		} else {
-			for(int var3 = 0; var3 < var2.length; ++var3) {
-				if(var1.isUsernameIndex(var2, var3) && PlayerSelector.matchesMultiplePlayers(var2[var3])) {
+			for (int var3 = 0; var3 < par2ArrayOfStr.length; ++var3) {
+				if (par1ICommand.isUsernameIndex(par2ArrayOfStr, var3) && PlayerSelector.matchesMultiplePlayers(par2ArrayOfStr[var3])) {
 					return var3;
 				}
 			}
