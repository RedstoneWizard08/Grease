--- net/minecraft/src/CommandServerKick.java
+++ net/minecraft/src/CommandServerKick.java
@@ -8,41 +8,48 @@
 		return "kick";
 	}
 
+	/**
+	 * Return the required permission level for this command.
+	 */
 	public int getRequiredPermissionLevel() {
 		return 3;
 	}
 
-	public String getCommandUsage(ICommandSender var1) {
+	public String getCommandUsage(ICommandSender par1ICommandSender) {
 		return "commands.kick.usage";
 	}
 
-	public void processCommand(ICommandSender var1, String[] var2) {
-		if(var2.length > 0 && var2[0].length() > 1) {
-			EntityPlayerMP var3 = MinecraftServer.getServer().getConfigurationManager().getPlayerEntity(var2[0]);
+	public void processCommand(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		if (par2ArrayOfStr.length > 0 && par2ArrayOfStr[0].length() > 1) {
+			EntityPlayerMP var3 = MinecraftServer.getServer().getConfigurationManager().getPlayerForUsername(par2ArrayOfStr[0]);
 			String var4 = "Kicked by an operator.";
 			boolean var5 = false;
-			if(var3 == null) {
+
+			if (var3 == null) {
 				throw new PlayerNotFoundException();
 			} else {
-				if(var2.length >= 2) {
-					var4 = func_82360_a(var1, var2, 1);
+				if (par2ArrayOfStr.length >= 2) {
+					var4 = func_82360_a(par1ICommandSender, par2ArrayOfStr, 1);
 					var5 = true;
 				}
 
-				var3.playerNetServerHandler.kickPlayer(var4);
-				if(var5) {
-					notifyAdmins(var1, "commands.kick.success.reason", new Object[]{var3.getEntityName(), var4});
+				var3.playerNetServerHandler.kickPlayerFromServer(var4);
+
+				if (var5) {
+					notifyAdmins(par1ICommandSender, "commands.kick.success.reason", new Object[] {var3.getEntityName(), var4});
 				} else {
-					notifyAdmins(var1, "commands.kick.success", new Object[]{var3.getEntityName()});
+					notifyAdmins(par1ICommandSender, "commands.kick.success", new Object[] {var3.getEntityName()});
 				}
-
 			}
 		} else {
 			throw new WrongUsageException("commands.kick.usage", new Object[0]);
 		}
 	}
 
-	public List addTabCompletionOptions(ICommandSender var1, String[] var2) {
-		return var2.length >= 1 ? getListOfStringsMatchingLastWord(var2, MinecraftServer.getServer().getAllUsernames()) : null;
+	/**
+	 * Adds the strings available in this command to the given list of tab completion options.
+	 */
+	public List addTabCompletionOptions(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		return par2ArrayOfStr.length >= 1 ? getListOfStringsMatchingLastWord(par2ArrayOfStr, MinecraftServer.getServer().getAllUsernames()) : null;
 	}
 }
