--- net/minecraft/src/CommandServerPardon.java
+++ net/minecraft/src/CommandServerPardon.java
@@ -8,28 +8,37 @@
 		return "pardon";
 	}
 
+	/**
+	 * Return the required permission level for this command.
+	 */
 	public int getRequiredPermissionLevel() {
 		return 3;
 	}
 
-	public String getCommandUsage(ICommandSender var1) {
+	public String getCommandUsage(ICommandSender par1ICommandSender) {
 		return "commands.unban.usage";
 	}
 
-	public boolean canCommandSenderUseCommand(ICommandSender var1) {
-		return MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().isListActive() && super.canCommandSenderUseCommand(var1);
+	/**
+	 * Returns true if the given command sender is allowed to use this command.
+	 */
+	public boolean canCommandSenderUseCommand(ICommandSender par1ICommandSender) {
+		return MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().isListActive() && super.canCommandSenderUseCommand(par1ICommandSender);
 	}
 
-	public void processCommand(ICommandSender var1, String[] var2) {
-		if(var2.length == 1 && var2[0].length() > 0) {
-			MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().remove(var2[0]);
-			notifyAdmins(var1, "commands.unban.success", new Object[]{var2[0]});
+	public void processCommand(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		if (par2ArrayOfStr.length == 1 && par2ArrayOfStr[0].length() > 0) {
+			MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().remove(par2ArrayOfStr[0]);
+			notifyAdmins(par1ICommandSender, "commands.unban.success", new Object[] {par2ArrayOfStr[0]});
 		} else {
 			throw new WrongUsageException("commands.unban.usage", new Object[0]);
 		}
 	}
 
-	public List addTabCompletionOptions(ICommandSender var1, String[] var2) {
-		return var2.length == 1 ? getListOfStringsFromIterableMatchingLastWord(var2, MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().getBannedList().keySet()) : null;
+	/**
+	 * Adds the strings available in this command to the given list of tab completion options.
+	 */
+	public List addTabCompletionOptions(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		return par2ArrayOfStr.length == 1 ? getListOfStringsFromIterableMatchingLastWord(par2ArrayOfStr, MinecraftServer.getServer().getConfigurationManager().getBannedPlayers().getBannedList().keySet()) : null;
 	}
 }
