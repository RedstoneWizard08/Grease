--- net/minecraft/src/CommandSetSpawnpoint.java
+++ net/minecraft/src/CommandSetSpawnpoint.java
@@ -8,44 +8,53 @@
 		return "spawnpoint";
 	}
 
+	/**
+	 * Return the required permission level for this command.
+	 */
 	public int getRequiredPermissionLevel() {
 		return 2;
 	}
 
-	public String getCommandUsage(ICommandSender var1) {
+	public String getCommandUsage(ICommandSender par1ICommandSender) {
 		return "commands.spawnpoint.usage";
 	}
 
-	public void processCommand(ICommandSender var1, String[] var2) {
-		EntityPlayerMP var3 = var2.length == 0 ? getCommandSenderAsPlayer(var1) : getPlayer(var1, var2[0]);
-		if(var2.length == 4) {
-			if(var3.worldObj != null) {
+	public void processCommand(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		EntityPlayerMP var3 = par2ArrayOfStr.length == 0 ? getCommandSenderAsPlayer(par1ICommandSender) : getPlayer(par1ICommandSender, par2ArrayOfStr[0]);
+
+		if (par2ArrayOfStr.length == 4) {
+			if (var3.worldObj != null) {
 				byte var4 = 1;
 				int var5 = 30000000;
 				int var9 = var4 + 1;
-				int var6 = parseIntBounded(var1, var2[var4], -var5, var5);
-				int var7 = parseIntBounded(var1, var2[var9++], 0, 256);
-				int var8 = parseIntBounded(var1, var2[var9++], -var5, var5);
+				int var6 = parseIntBounded(par1ICommandSender, par2ArrayOfStr[var4], -var5, var5);
+				int var7 = parseIntBounded(par1ICommandSender, par2ArrayOfStr[var9++], 0, 256);
+				int var8 = parseIntBounded(par1ICommandSender, par2ArrayOfStr[var9++], -var5, var5);
 				var3.setSpawnChunk(new ChunkCoordinates(var6, var7, var8), true);
-				notifyAdmins(var1, "commands.spawnpoint.success", new Object[]{var3.getEntityName(), Integer.valueOf(var6), Integer.valueOf(var7), Integer.valueOf(var8)});
+				notifyAdmins(par1ICommandSender, "commands.spawnpoint.success", new Object[] {var3.getEntityName(), Integer.valueOf(var6), Integer.valueOf(var7), Integer.valueOf(var8)});
 			}
 		} else {
-			if(var2.length > 1) {
+			if (par2ArrayOfStr.length > 1) {
 				throw new WrongUsageException("commands.spawnpoint.usage", new Object[0]);
 			}
 
-			ChunkCoordinates var10 = var3.getCommandSenderPosition();
+			ChunkCoordinates var10 = var3.getPlayerCoordinates();
 			var3.setSpawnChunk(var10, true);
-			notifyAdmins(var1, "commands.spawnpoint.success", new Object[]{var3.getEntityName(), Integer.valueOf(var10.posX), Integer.valueOf(var10.posY), Integer.valueOf(var10.posZ)});
+			notifyAdmins(par1ICommandSender, "commands.spawnpoint.success", new Object[] {var3.getEntityName(), Integer.valueOf(var10.posX), Integer.valueOf(var10.posY), Integer.valueOf(var10.posZ)});
 		}
-
-	}
-
-	public List addTabCompletionOptions(ICommandSender var1, String[] var2) {
-		return var2.length != 1 && var2.length != 2 ? null : getListOfStringsMatchingLastWord(var2, MinecraftServer.getServer().getAllUsernames());
-	}
-
-	public boolean isUsernameIndex(String[] var1, int var2) {
-		return var2 == 0;
+	}
+
+	/**
+	 * Adds the strings available in this command to the given list of tab completion options.
+	 */
+	public List addTabCompletionOptions(ICommandSender par1ICommandSender, String[] par2ArrayOfStr) {
+		return par2ArrayOfStr.length != 1 && par2ArrayOfStr.length != 2 ? null : getListOfStringsMatchingLastWord(par2ArrayOfStr, MinecraftServer.getServer().getAllUsernames());
+	}
+
+	/**
+	 * Return whether the specified command parameter index is a username parameter.
+	 */
+	public boolean isUsernameIndex(String[] par1ArrayOfStr, int par2) {
+		return par2 == 0;
 	}
 }
