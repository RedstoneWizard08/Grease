--- net/minecraft/src/ComponentStrongholdStraight.java
+++ net/minecraft/src/ComponentStrongholdStraight.java
@@ -7,64 +7,71 @@
 	private boolean expandsX;
 	private boolean expandsZ;
 
-	public ComponentStrongholdStraight() {
-	}
-
-	public ComponentStrongholdStraight(int var1, Random var2, StructureBoundingBox var3, int var4) {
-		super(var1);
-		this.coordBaseMode = var4;
-		this.field_143013_d = this.getRandomDoor(var2);
-		this.boundingBox = var3;
-		this.expandsX = var2.nextInt(2) == 0;
-		this.expandsZ = var2.nextInt(2) == 0;
-	}
-
-	protected void func_143012_a(NBTTagCompound var1) {
-		super.func_143012_a(var1);
-		var1.setBoolean("Left", this.expandsX);
-		var1.setBoolean("Right", this.expandsZ);
-	}
-
-	protected void func_143011_b(NBTTagCompound var1) {
-		super.func_143011_b(var1);
-		this.expandsX = var1.getBoolean("Left");
-		this.expandsZ = var1.getBoolean("Right");
-	}
-
-	public void buildComponent(StructureComponent var1, List var2, Random var3) {
-		this.getNextComponentNormal((ComponentStrongholdStairs2)var1, var2, var3, 1, 1);
-		if(this.expandsX) {
-			this.getNextComponentX((ComponentStrongholdStairs2)var1, var2, var3, 1, 2);
-		}
-
-		if(this.expandsZ) {
-			this.getNextComponentZ((ComponentStrongholdStairs2)var1, var2, var3, 1, 2);
-		}
-
-	}
-
-	public static ComponentStrongholdStraight findValidPlacement(List var0, Random var1, int var2, int var3, int var4, int var5, int var6) {
-		StructureBoundingBox var7 = StructureBoundingBox.getComponentToAddBoundingBox(var2, var3, var4, -1, -1, 0, 5, 5, 7, var5);
-		return canStrongholdGoDeeper(var7) && StructureComponent.findIntersecting(var0, var7) == null ? new ComponentStrongholdStraight(var6, var1, var7, var5) : null;
-	}
-
-	public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
-		if(this.isLiquidInStructureBoundingBox(var1, var3)) {
+	public ComponentStrongholdStraight() {}
+
+	public ComponentStrongholdStraight(int par1, Random par2Random, StructureBoundingBox par3StructureBoundingBox, int par4) {
+		super(par1);
+		this.coordBaseMode = par4;
+		this.field_143013_d = this.getRandomDoor(par2Random);
+		this.boundingBox = par3StructureBoundingBox;
+		this.expandsX = par2Random.nextInt(2) == 0;
+		this.expandsZ = par2Random.nextInt(2) == 0;
+	}
+
+	protected void func_143012_a(NBTTagCompound par1NBTTagCompound) {
+		super.func_143012_a(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("Left", this.expandsX);
+		par1NBTTagCompound.setBoolean("Right", this.expandsZ);
+	}
+
+	protected void func_143011_b(NBTTagCompound par1NBTTagCompound) {
+		super.func_143011_b(par1NBTTagCompound);
+		this.expandsX = par1NBTTagCompound.getBoolean("Left");
+		this.expandsZ = par1NBTTagCompound.getBoolean("Right");
+	}
+
+	/**
+	 * Initiates construction of the Structure Component picked, at the current Location of StructGen
+	 */
+	public void buildComponent(StructureComponent par1StructureComponent, List par2List, Random par3Random) {
+		this.getNextComponentNormal((ComponentStrongholdStairs2)par1StructureComponent, par2List, par3Random, 1, 1);
+
+		if (this.expandsX) {
+			this.getNextComponentX((ComponentStrongholdStairs2)par1StructureComponent, par2List, par3Random, 1, 2);
+		}
+
+		if (this.expandsZ) {
+			this.getNextComponentZ((ComponentStrongholdStairs2)par1StructureComponent, par2List, par3Random, 1, 2);
+		}
+	}
+
+	public static ComponentStrongholdStraight findValidPlacement(List par0List, Random par1Random, int par2, int par3, int par4, int par5, int par6) {
+		StructureBoundingBox var7 = StructureBoundingBox.getComponentToAddBoundingBox(par2, par3, par4, -1, -1, 0, 5, 5, 7, par5);
+		return canStrongholdGoDeeper(var7) && StructureComponent.findIntersecting(par0List, var7) == null ? new ComponentStrongholdStraight(par6, par1Random, var7, par5) : null;
+	}
+
+	/**
+	 * second Part of Structure generating, this for example places Spiderwebs, Mob Spawners, it closes Mineshafts at the
+	 * end, it adds Fences...
+	 */
+	public boolean addComponentParts(World par1World, Random par2Random, StructureBoundingBox par3StructureBoundingBox) {
+		if (this.isLiquidInStructureBoundingBox(par1World, par3StructureBoundingBox)) {
 			return false;
 		} else {
-			this.fillWithRandomizedBlocks(var1, var3, 0, 0, 0, 4, 4, 6, true, var2, StructureStrongholdPieces.getStrongholdStones());
-			this.placeDoor(var1, var2, var3, this.field_143013_d, 1, 1, 0);
-			this.placeDoor(var1, var2, var3, EnumDoor.OPENING, 1, 1, 6);
-			this.randomlyPlaceBlock(var1, var3, var2, 0.1F, 1, 2, 1, Block.torchWood.blockID, 0);
-			this.randomlyPlaceBlock(var1, var3, var2, 0.1F, 3, 2, 1, Block.torchWood.blockID, 0);
-			this.randomlyPlaceBlock(var1, var3, var2, 0.1F, 1, 2, 5, Block.torchWood.blockID, 0);
-			this.randomlyPlaceBlock(var1, var3, var2, 0.1F, 3, 2, 5, Block.torchWood.blockID, 0);
-			if(this.expandsX) {
-				this.fillWithBlocks(var1, var3, 0, 1, 2, 0, 3, 4, 0, 0, false);
+			this.fillWithRandomizedBlocks(par1World, par3StructureBoundingBox, 0, 0, 0, 4, 4, 6, true, par2Random, StructureStrongholdPieces.getStrongholdStones());
+			this.placeDoor(par1World, par2Random, par3StructureBoundingBox, this.field_143013_d, 1, 1, 0);
+			this.placeDoor(par1World, par2Random, par3StructureBoundingBox, EnumDoor.OPENING, 1, 1, 6);
+			this.randomlyPlaceBlock(par1World, par3StructureBoundingBox, par2Random, 0.1F, 1, 2, 1, Block.torchWood.blockID, 0);
+			this.randomlyPlaceBlock(par1World, par3StructureBoundingBox, par2Random, 0.1F, 3, 2, 1, Block.torchWood.blockID, 0);
+			this.randomlyPlaceBlock(par1World, par3StructureBoundingBox, par2Random, 0.1F, 1, 2, 5, Block.torchWood.blockID, 0);
+			this.randomlyPlaceBlock(par1World, par3StructureBoundingBox, par2Random, 0.1F, 3, 2, 5, Block.torchWood.blockID, 0);
+
+			if (this.expandsX) {
+				this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 1, 2, 0, 3, 4, 0, 0, false);
 			}
 
-			if(this.expandsZ) {
-				this.fillWithBlocks(var1, var3, 4, 1, 2, 4, 3, 4, 0, 0, false);
+			if (this.expandsZ) {
+				this.fillWithBlocks(par1World, par3StructureBoundingBox, 4, 1, 2, 4, 3, 4, 0, 0, false);
 			}
 
 			return true;
