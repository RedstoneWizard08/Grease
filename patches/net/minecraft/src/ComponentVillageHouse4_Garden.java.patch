--- net/minecraft/src/ComponentVillageHouse4_Garden.java
+++ net/minecraft/src/ComponentVillageHouse4_Garden.java
@@ -6,112 +6,119 @@
 public class ComponentVillageHouse4_Garden extends ComponentVillage {
 	private boolean isRoofAccessible;
 
-	public ComponentVillageHouse4_Garden() {
-	}
-
-	public ComponentVillageHouse4_Garden(ComponentVillageStartPiece var1, int var2, Random var3, StructureBoundingBox var4, int var5) {
-		super(var1, var2);
-		this.coordBaseMode = var5;
-		this.boundingBox = var4;
-		this.isRoofAccessible = var3.nextBoolean();
-	}
-
-	protected void func_143012_a(NBTTagCompound var1) {
-		super.func_143012_a(var1);
-		var1.setBoolean("Terrace", this.isRoofAccessible);
-	}
-
-	protected void func_143011_b(NBTTagCompound var1) {
-		super.func_143011_b(var1);
-		this.isRoofAccessible = var1.getBoolean("Terrace");
-	}
-
-	public static ComponentVillageHouse4_Garden func_74912_a(ComponentVillageStartPiece var0, List var1, Random var2, int var3, int var4, int var5, int var6, int var7) {
-		StructureBoundingBox var8 = StructureBoundingBox.getComponentToAddBoundingBox(var3, var4, var5, 0, 0, 0, 5, 6, 5, var6);
-		return StructureComponent.findIntersecting(var1, var8) != null ? null : new ComponentVillageHouse4_Garden(var0, var7, var2, var8, var6);
-	}
-
-	public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
-		if(this.field_143015_k < 0) {
-			this.field_143015_k = this.getAverageGroundLevel(var1, var3);
-			if(this.field_143015_k < 0) {
+	public ComponentVillageHouse4_Garden() {}
+
+	public ComponentVillageHouse4_Garden(ComponentVillageStartPiece par1ComponentVillageStartPiece, int par2, Random par3Random, StructureBoundingBox par4StructureBoundingBox, int par5) {
+		super(par1ComponentVillageStartPiece, par2);
+		this.coordBaseMode = par5;
+		this.boundingBox = par4StructureBoundingBox;
+		this.isRoofAccessible = par3Random.nextBoolean();
+	}
+
+	protected void func_143012_a(NBTTagCompound par1NBTTagCompound) {
+		super.func_143012_a(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("Terrace", this.isRoofAccessible);
+	}
+
+	protected void func_143011_b(NBTTagCompound par1NBTTagCompound) {
+		super.func_143011_b(par1NBTTagCompound);
+		this.isRoofAccessible = par1NBTTagCompound.getBoolean("Terrace");
+	}
+
+	public static ComponentVillageHouse4_Garden func_74912_a(ComponentVillageStartPiece par0ComponentVillageStartPiece, List par1List, Random par2Random, int par3, int par4, int par5, int par6, int par7) {
+		StructureBoundingBox var8 = StructureBoundingBox.getComponentToAddBoundingBox(par3, par4, par5, 0, 0, 0, 5, 6, 5, par6);
+		return StructureComponent.findIntersecting(par1List, var8) != null ? null : new ComponentVillageHouse4_Garden(par0ComponentVillageStartPiece, par7, par2Random, var8, par6);
+	}
+
+	/**
+	 * second Part of Structure generating, this for example places Spiderwebs, Mob Spawners, it closes Mineshafts at the
+	 * end, it adds Fences...
+	 */
+	public boolean addComponentParts(World par1World, Random par2Random, StructureBoundingBox par3StructureBoundingBox) {
+		if (this.field_143015_k < 0) {
+			this.field_143015_k = this.getAverageGroundLevel(par1World, par3StructureBoundingBox);
+
+			if (this.field_143015_k < 0) {
 				return true;
 			}
 
 			this.boundingBox.offset(0, this.field_143015_k - this.boundingBox.maxY + 6 - 1, 0);
 		}
 
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 4, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 4, 0, 4, 4, 4, Block.wood.blockID, Block.wood.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 4, 1, 3, 4, 3, Block.planks.blockID, Block.planks.blockID, false);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 1, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 2, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 3, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 1, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 2, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 3, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 1, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 2, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 0, 3, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 1, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 2, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.cobblestone.blockID, 0, 4, 3, 4, var3);
-		this.fillWithBlocks(var1, var3, 0, 1, 1, 0, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 4, 1, 1, 4, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 4, 3, 3, 4, Block.planks.blockID, Block.planks.blockID, false);
-		this.placeBlockAtCurrentPosition(var1, Block.thinGlass.blockID, 0, 0, 2, 2, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.thinGlass.blockID, 0, 2, 2, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.thinGlass.blockID, 0, 4, 2, 2, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 1, 1, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 1, 2, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 1, 3, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 2, 3, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 3, 3, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 3, 2, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.planks.blockID, 0, 3, 1, 0, var3);
-		if(this.getBlockIdAtCurrentPosition(var1, 2, 0, -1, var3) == 0 && this.getBlockIdAtCurrentPosition(var1, 2, -1, -1, var3) != 0) {
-			this.placeBlockAtCurrentPosition(var1, Block.stairsCobblestone.blockID, this.getMetadataWithOffset(Block.stairsCobblestone.blockID, 3), 2, 0, -1, var3);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 0, 0, 4, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 4, 0, 4, 4, 4, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 4, 1, 3, 4, 3, Block.planks.blockID, Block.planks.blockID, false);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 1, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 2, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 3, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 1, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 2, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 3, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 1, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 2, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 0, 3, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 1, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 2, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.cobblestone.blockID, 0, 4, 3, 4, par3StructureBoundingBox);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 1, 1, 0, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 4, 1, 1, 4, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 1, 4, 3, 3, 4, Block.planks.blockID, Block.planks.blockID, false);
+		this.placeBlockAtCurrentPosition(par1World, Block.thinGlass.blockID, 0, 0, 2, 2, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.thinGlass.blockID, 0, 2, 2, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.thinGlass.blockID, 0, 4, 2, 2, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 1, 1, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 1, 2, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 1, 3, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 2, 3, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 3, 3, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 3, 2, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.planks.blockID, 0, 3, 1, 0, par3StructureBoundingBox);
+
+		if (this.getBlockIdAtCurrentPosition(par1World, 2, 0, -1, par3StructureBoundingBox) == 0 && this.getBlockIdAtCurrentPosition(par1World, 2, -1, -1, par3StructureBoundingBox) != 0) {
+			this.placeBlockAtCurrentPosition(par1World, Block.stairsCobblestone.blockID, this.getMetadataWithOffset(Block.stairsCobblestone.blockID, 3), 2, 0, -1, par3StructureBoundingBox);
 		}
 
-		this.fillWithBlocks(var1, var3, 1, 1, 1, 3, 3, 3, 0, 0, false);
-		if(this.isRoofAccessible) {
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 0, 5, 0, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 1, 5, 0, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 2, 5, 0, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 3, 5, 0, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 4, 5, 0, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 0, 5, 4, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 1, 5, 4, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 2, 5, 4, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 3, 5, 4, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 4, 5, 4, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 4, 5, 1, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 4, 5, 2, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 4, 5, 3, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 0, 5, 1, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 0, 5, 2, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, 0, 5, 3, var3);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 1, 1, 3, 3, 3, 0, 0, false);
+
+		if (this.isRoofAccessible) {
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 0, 5, 0, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 1, 5, 0, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 2, 5, 0, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 3, 5, 0, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 4, 5, 0, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 0, 5, 4, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 1, 5, 4, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 2, 5, 4, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 3, 5, 4, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 4, 5, 4, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 4, 5, 1, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 4, 5, 2, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 4, 5, 3, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 0, 5, 1, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 0, 5, 2, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, 0, 5, 3, par3StructureBoundingBox);
 		}
 
 		int var4;
-		if(this.isRoofAccessible) {
+
+		if (this.isRoofAccessible) {
 			var4 = this.getMetadataWithOffset(Block.ladder.blockID, 3);
-			this.placeBlockAtCurrentPosition(var1, Block.ladder.blockID, var4, 3, 1, 3, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.ladder.blockID, var4, 3, 2, 3, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.ladder.blockID, var4, 3, 3, 3, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.ladder.blockID, var4, 3, 4, 3, var3);
+			this.placeBlockAtCurrentPosition(par1World, Block.ladder.blockID, var4, 3, 1, 3, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.ladder.blockID, var4, 3, 2, 3, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.ladder.blockID, var4, 3, 3, 3, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.ladder.blockID, var4, 3, 4, 3, par3StructureBoundingBox);
 		}
 
-		this.placeBlockAtCurrentPosition(var1, Block.torchWood.blockID, 0, 2, 3, 1, var3);
+		this.placeBlockAtCurrentPosition(par1World, Block.torchWood.blockID, 0, 2, 3, 1, par3StructureBoundingBox);
 
-		for(var4 = 0; var4 < 5; ++var4) {
-			for(int var5 = 0; var5 < 5; ++var5) {
-				this.clearCurrentPositionBlocksUpwards(var1, var5, 6, var4, var3);
-				this.fillCurrentPositionBlocksDownwards(var1, Block.cobblestone.blockID, 0, var5, -1, var4, var3);
+		for (var4 = 0; var4 < 5; ++var4) {
+			for (int var5 = 0; var5 < 5; ++var5) {
+				this.clearCurrentPositionBlocksUpwards(par1World, var5, 6, var4, par3StructureBoundingBox);
+				this.fillCurrentPositionBlocksDownwards(par1World, Block.cobblestone.blockID, 0, var5, -1, var4, par3StructureBoundingBox);
 			}
 		}
 
-		this.spawnVillagers(var1, var3, 1, 1, 2, 1);
+		this.spawnVillagers(par1World, par3StructureBoundingBox, 1, 1, 2, 1);
 		return true;
 	}
 }
