--- net/minecraft/src/ComponentVillageWoodHut.java
+++ net/minecraft/src/ComponentVillageWoodHut.java
@@ -7,93 +7,100 @@
 	private boolean isTallHouse;
 	private int tablePosition;
 
-	public ComponentVillageWoodHut() {
-	}
-
-	public ComponentVillageWoodHut(ComponentVillageStartPiece var1, int var2, Random var3, StructureBoundingBox var4, int var5) {
-		super(var1, var2);
-		this.coordBaseMode = var5;
-		this.boundingBox = var4;
-		this.isTallHouse = var3.nextBoolean();
-		this.tablePosition = var3.nextInt(3);
-	}
-
-	protected void func_143012_a(NBTTagCompound var1) {
-		super.func_143012_a(var1);
-		var1.setInteger("T", this.tablePosition);
-		var1.setBoolean("C", this.isTallHouse);
-	}
-
-	protected void func_143011_b(NBTTagCompound var1) {
-		super.func_143011_b(var1);
-		this.tablePosition = var1.getInteger("T");
-		this.isTallHouse = var1.getBoolean("C");
-	}
-
-	public static ComponentVillageWoodHut func_74908_a(ComponentVillageStartPiece var0, List var1, Random var2, int var3, int var4, int var5, int var6, int var7) {
-		StructureBoundingBox var8 = StructureBoundingBox.getComponentToAddBoundingBox(var3, var4, var5, 0, 0, 0, 4, 6, 5, var6);
-		return canVillageGoDeeper(var8) && StructureComponent.findIntersecting(var1, var8) == null ? new ComponentVillageWoodHut(var0, var7, var2, var8, var6) : null;
-	}
-
-	public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
-		if(this.field_143015_k < 0) {
-			this.field_143015_k = this.getAverageGroundLevel(var1, var3);
-			if(this.field_143015_k < 0) {
+	public ComponentVillageWoodHut() {}
+
+	public ComponentVillageWoodHut(ComponentVillageStartPiece par1ComponentVillageStartPiece, int par2, Random par3Random, StructureBoundingBox par4StructureBoundingBox, int par5) {
+		super(par1ComponentVillageStartPiece, par2);
+		this.coordBaseMode = par5;
+		this.boundingBox = par4StructureBoundingBox;
+		this.isTallHouse = par3Random.nextBoolean();
+		this.tablePosition = par3Random.nextInt(3);
+	}
+
+	protected void func_143012_a(NBTTagCompound par1NBTTagCompound) {
+		super.func_143012_a(par1NBTTagCompound);
+		par1NBTTagCompound.setInteger("T", this.tablePosition);
+		par1NBTTagCompound.setBoolean("C", this.isTallHouse);
+	}
+
+	protected void func_143011_b(NBTTagCompound par1NBTTagCompound) {
+		super.func_143011_b(par1NBTTagCompound);
+		this.tablePosition = par1NBTTagCompound.getInteger("T");
+		this.isTallHouse = par1NBTTagCompound.getBoolean("C");
+	}
+
+	public static ComponentVillageWoodHut func_74908_a(ComponentVillageStartPiece par0ComponentVillageStartPiece, List par1List, Random par2Random, int par3, int par4, int par5, int par6, int par7) {
+		StructureBoundingBox var8 = StructureBoundingBox.getComponentToAddBoundingBox(par3, par4, par5, 0, 0, 0, 4, 6, 5, par6);
+		return canVillageGoDeeper(var8) && StructureComponent.findIntersecting(par1List, var8) == null ? new ComponentVillageWoodHut(par0ComponentVillageStartPiece, par7, par2Random, var8, par6) : null;
+	}
+
+	/**
+	 * second Part of Structure generating, this for example places Spiderwebs, Mob Spawners, it closes Mineshafts at the
+	 * end, it adds Fences...
+	 */
+	public boolean addComponentParts(World par1World, Random par2Random, StructureBoundingBox par3StructureBoundingBox) {
+		if (this.field_143015_k < 0) {
+			this.field_143015_k = this.getAverageGroundLevel(par1World, par3StructureBoundingBox);
+
+			if (this.field_143015_k < 0) {
 				return true;
 			}
 
 			this.boundingBox.offset(0, this.field_143015_k - this.boundingBox.maxY + 6 - 1, 0);
 		}
 
-		this.fillWithBlocks(var1, var3, 1, 1, 1, 3, 5, 4, 0, 0, false);
-		this.fillWithBlocks(var1, var3, 0, 0, 0, 3, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 0, 1, 2, 0, 3, Block.dirt.blockID, Block.dirt.blockID, false);
-		if(this.isTallHouse) {
-			this.fillWithBlocks(var1, var3, 1, 4, 1, 2, 4, 3, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 1, 1, 3, 5, 4, 0, 0, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 0, 0, 3, 0, 4, Block.cobblestone.blockID, Block.cobblestone.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 0, 1, 2, 0, 3, Block.dirt.blockID, Block.dirt.blockID, false);
+
+		if (this.isTallHouse) {
+			this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 4, 1, 2, 4, 3, Block.wood.blockID, Block.wood.blockID, false);
 		} else {
-			this.fillWithBlocks(var1, var3, 1, 5, 1, 2, 5, 3, Block.wood.blockID, Block.wood.blockID, false);
-		}
-
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 1, 4, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 2, 4, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 1, 4, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 2, 4, 4, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 0, 4, 1, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 0, 4, 2, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 0, 4, 3, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 3, 4, 1, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 3, 4, 2, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.wood.blockID, 0, 3, 4, 3, var3);
-		this.fillWithBlocks(var1, var3, 0, 1, 0, 0, 3, 0, Block.wood.blockID, Block.wood.blockID, false);
-		this.fillWithBlocks(var1, var3, 3, 1, 0, 3, 3, 0, Block.wood.blockID, Block.wood.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 1, 4, 0, 3, 4, Block.wood.blockID, Block.wood.blockID, false);
-		this.fillWithBlocks(var1, var3, 3, 1, 4, 3, 3, 4, Block.wood.blockID, Block.wood.blockID, false);
-		this.fillWithBlocks(var1, var3, 0, 1, 1, 0, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 3, 1, 1, 3, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 0, 2, 3, 0, Block.planks.blockID, Block.planks.blockID, false);
-		this.fillWithBlocks(var1, var3, 1, 1, 4, 2, 3, 4, Block.planks.blockID, Block.planks.blockID, false);
-		this.placeBlockAtCurrentPosition(var1, Block.thinGlass.blockID, 0, 0, 2, 2, var3);
-		this.placeBlockAtCurrentPosition(var1, Block.thinGlass.blockID, 0, 3, 2, 2, var3);
-		if(this.tablePosition > 0) {
-			this.placeBlockAtCurrentPosition(var1, Block.fence.blockID, 0, this.tablePosition, 1, 3, var3);
-			this.placeBlockAtCurrentPosition(var1, Block.pressurePlatePlanks.blockID, 0, this.tablePosition, 2, 3, var3);
-		}
-
-		this.placeBlockAtCurrentPosition(var1, 0, 0, 1, 1, 0, var3);
-		this.placeBlockAtCurrentPosition(var1, 0, 0, 1, 2, 0, var3);
-		this.placeDoorAtCurrentPosition(var1, var3, var2, 1, 1, 0, this.getMetadataWithOffset(Block.doorWood.blockID, 1));
-		if(this.getBlockIdAtCurrentPosition(var1, 1, 0, -1, var3) == 0 && this.getBlockIdAtCurrentPosition(var1, 1, -1, -1, var3) != 0) {
-			this.placeBlockAtCurrentPosition(var1, Block.stairsCobblestone.blockID, this.getMetadataWithOffset(Block.stairsCobblestone.blockID, 3), 1, 0, -1, var3);
-		}
-
-		for(int var4 = 0; var4 < 5; ++var4) {
-			for(int var5 = 0; var5 < 4; ++var5) {
-				this.clearCurrentPositionBlocksUpwards(var1, var5, 6, var4, var3);
-				this.fillCurrentPositionBlocksDownwards(var1, Block.cobblestone.blockID, 0, var5, -1, var4, var3);
+			this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 5, 1, 2, 5, 3, Block.wood.blockID, Block.wood.blockID, false);
+		}
+
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 1, 4, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 2, 4, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 1, 4, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 2, 4, 4, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 0, 4, 1, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 0, 4, 2, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 0, 4, 3, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 3, 4, 1, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 3, 4, 2, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.wood.blockID, 0, 3, 4, 3, par3StructureBoundingBox);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 1, 0, 0, 3, 0, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 3, 1, 0, 3, 3, 0, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 1, 4, 0, 3, 4, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 3, 1, 4, 3, 3, 4, Block.wood.blockID, Block.wood.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 0, 1, 1, 0, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 3, 1, 1, 3, 3, 3, Block.planks.blockID, Block.planks.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 1, 0, 2, 3, 0, Block.planks.blockID, Block.planks.blockID, false);
+		this.fillWithBlocks(par1World, par3StructureBoundingBox, 1, 1, 4, 2, 3, 4, Block.planks.blockID, Block.planks.blockID, false);
+		this.placeBlockAtCurrentPosition(par1World, Block.thinGlass.blockID, 0, 0, 2, 2, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, Block.thinGlass.blockID, 0, 3, 2, 2, par3StructureBoundingBox);
+
+		if (this.tablePosition > 0) {
+			this.placeBlockAtCurrentPosition(par1World, Block.fence.blockID, 0, this.tablePosition, 1, 3, par3StructureBoundingBox);
+			this.placeBlockAtCurrentPosition(par1World, Block.pressurePlatePlanks.blockID, 0, this.tablePosition, 2, 3, par3StructureBoundingBox);
+		}
+
+		this.placeBlockAtCurrentPosition(par1World, 0, 0, 1, 1, 0, par3StructureBoundingBox);
+		this.placeBlockAtCurrentPosition(par1World, 0, 0, 1, 2, 0, par3StructureBoundingBox);
+		this.placeDoorAtCurrentPosition(par1World, par3StructureBoundingBox, par2Random, 1, 1, 0, this.getMetadataWithOffset(Block.doorWood.blockID, 1));
+
+		if (this.getBlockIdAtCurrentPosition(par1World, 1, 0, -1, par3StructureBoundingBox) == 0 && this.getBlockIdAtCurrentPosition(par1World, 1, -1, -1, par3StructureBoundingBox) != 0) {
+			this.placeBlockAtCurrentPosition(par1World, Block.stairsCobblestone.blockID, this.getMetadataWithOffset(Block.stairsCobblestone.blockID, 3), 1, 0, -1, par3StructureBoundingBox);
+		}
+
+		for (int var4 = 0; var4 < 5; ++var4) {
+			for (int var5 = 0; var5 < 4; ++var5) {
+				this.clearCurrentPositionBlocksUpwards(par1World, var5, 6, var4, par3StructureBoundingBox);
+				this.fillCurrentPositionBlocksDownwards(par1World, Block.cobblestone.blockID, 0, var5, -1, var4, par3StructureBoundingBox);
 			}
 		}
 
-		this.spawnVillagers(var1, var3, 1, 1, 2, 1);
+		this.spawnVillagers(par1World, par3StructureBoundingBox, 1, 1, 2, 1);
 		return true;
 	}
 }
