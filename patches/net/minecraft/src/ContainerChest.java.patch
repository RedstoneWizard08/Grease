--- net/minecraft/src/ContainerChest.java
+++ net/minecraft/src/ContainerChest.java
@@ -4,51 +4,66 @@
 	private IInventory lowerChestInventory;
 	private int numRows;
 
-	public ContainerChest(IInventory var1, IInventory var2) {
-		this.lowerChestInventory = var2;
-		this.numRows = var2.getSizeInventory() / 9;
-		var2.openChest();
+	public ContainerChest(IInventory par1IInventory, IInventory par2IInventory) {
+		this.lowerChestInventory = par2IInventory;
+		this.numRows = par2IInventory.getSizeInventory() / 9;
+		par2IInventory.openChest();
 		int var3 = (this.numRows - 4) * 18;
-
 		int var4;
 		int var5;
-		for(var4 = 0; var4 < this.numRows; ++var4) {
-			for(var5 = 0; var5 < 9; ++var5) {
-				this.addSlotToContainer(new Slot(var2, var5 + var4 * 9, 8 + var5 * 18, 18 + var4 * 18));
-			}
-		}
-
-		for(var4 = 0; var4 < 3; ++var4) {
-			for(var5 = 0; var5 < 9; ++var5) {
-				this.addSlotToContainer(new Slot(var1, var5 + var4 * 9 + 9, 8 + var5 * 18, 103 + var4 * 18 + var3));
-			}
-		}
-
-		for(var4 = 0; var4 < 9; ++var4) {
-			this.addSlotToContainer(new Slot(var1, var4, 8 + var4 * 18, 161 + var3));
-		}
-
-	}
-
-	public boolean canInteractWith(EntityPlayer var1) {
-		return this.lowerChestInventory.isUseableByPlayer(var1);
-	}
-
-	public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
+
+		for (var4 = 0; var4 < this.numRows; ++var4) {
+			for (var5 = 0; var5 < 9; ++var5) {
+				this.addSlotToContainer(new Slot(par2IInventory, var5 + var4 * 9, 8 + var5 * 18, 18 + var4 * 18));
+			}
+		}
+
+		for (var4 = 0; var4 < 3; ++var4) {
+			for (var5 = 0; var5 < 9; ++var5) {
+				this.addSlotToContainer(new Slot(par1IInventory, var5 + var4 * 9 + 9, 8 + var5 * 18, 103 + var4 * 18 + var3));
+			}
+		}
+
+		for (var4 = 0; var4 < 9; ++var4) {
+			this.addSlotToContainer(new Slot(par1IInventory, var4, 8 + var4 * 18, 161 + var3));
+		}
+	}
+
+	// Spout Start - Chest sorting
+	public IInventory getIInventory() {
+		return lowerChestInventory;
+	}
+
+	@Override
+	public boolean isSortableInventory() {
+		return true;
+	}
+	// Spout End
+
+	public boolean canInteractWith(EntityPlayer par1EntityPlayer) {
+		return this.lowerChestInventory.isUseableByPlayer(par1EntityPlayer);
+	}
+
+	/**
+	 * Called when a player shift-clicks on a slot. You must override this or you will crash when someone does that.
+	 */
+	public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2) {
 		ItemStack var3 = null;
-		Slot var4 = (Slot)this.c.get(var2);
-		if(var4 != null && var4.getHasStack()) {
+		Slot var4 = (Slot)this.inventorySlots.get(par2);
+
+		if (var4 != null && var4.getHasStack()) {
 			ItemStack var5 = var4.getStack();
 			var3 = var5.copy();
-			if(var2 < this.numRows * 9) {
-				if(!this.mergeItemStack(var5, this.numRows * 9, this.c.size(), true)) {
+
+			if (par2 < this.numRows * 9) {
+				if (!this.mergeItemStack(var5, this.numRows * 9, this.inventorySlots.size(), true)) {
 					return null;
 				}
-			} else if(!this.mergeItemStack(var5, 0, this.numRows * 9, false)) {
+			} else if (!this.mergeItemStack(var5, 0, this.numRows * 9, false)) {
 				return null;
 			}
 
-			if(var5.stackSize == 0) {
+			if (var5.stackSize == 0) {
 				var4.putStack((ItemStack)null);
 			} else {
 				var4.onSlotChanged();
@@ -58,11 +73,17 @@
 		return var3;
 	}
 
-	public void onContainerClosed(EntityPlayer var1) {
-		super.onContainerClosed(var1);
+	/**
+	 * Called when the container is closed.
+	 */
+	public void onContainerClosed(EntityPlayer par1EntityPlayer) {
+		super.onContainerClosed(par1EntityPlayer);
 		this.lowerChestInventory.closeChest();
 	}
-
+	
+	/**
+	 * Return this chest container's lower chest inventory.
+	 */
 	public IInventory getLowerChestInventory() {
 		return this.lowerChestInventory;
 	}
