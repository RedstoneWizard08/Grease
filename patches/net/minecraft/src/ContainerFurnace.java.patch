--- net/minecraft/src/ContainerFurnace.java
+++ net/minecraft/src/ContainerFurnace.java
@@ -6,46 +6,55 @@
 	private int lastBurnTime;
 	private int lastItemBurnTime;
 
-	public ContainerFurnace(InventoryPlayer var1, TileEntityFurnace var2) {
-		this.furnace = var2;
-		this.addSlotToContainer(new Slot(var2, 0, 56, 17));
-		this.addSlotToContainer(new Slot(var2, 1, 56, 53));
-		this.addSlotToContainer(new SlotFurnace(var1.player, var2, 2, 116, 35));
-
+	public ContainerFurnace(InventoryPlayer par1InventoryPlayer, TileEntityFurnace par2TileEntityFurnace) {
+		this.furnace = par2TileEntityFurnace;
+		this.addSlotToContainer(new Slot(par2TileEntityFurnace, 0, 56, 17));
+		this.addSlotToContainer(new Slot(par2TileEntityFurnace, 1, 56, 53));
+		this.addSlotToContainer(new SlotFurnace(par1InventoryPlayer.player, par2TileEntityFurnace, 2, 116, 35));
 		int var3;
-		for(var3 = 0; var3 < 3; ++var3) {
-			for(int var4 = 0; var4 < 9; ++var4) {
-				this.addSlotToContainer(new Slot(var1, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
+
+		for (var3 = 0; var3 < 3; ++var3) {
+			for (int var4 = 0; var4 < 9; ++var4) {
+				this.addSlotToContainer(new Slot(par1InventoryPlayer, var4 + var3 * 9 + 9, 8 + var4 * 18, 84 + var3 * 18));
 			}
 		}
 
-		for(var3 = 0; var3 < 9; ++var3) {
-			this.addSlotToContainer(new Slot(var1, var3, 8 + var3 * 18, 142));
+		for (var3 = 0; var3 < 9; ++var3) {
+			this.addSlotToContainer(new Slot(par1InventoryPlayer, var3, 8 + var3 * 18, 142));
 		}
-
-	}
-
-	public void onCraftGuiOpened(ICrafting var1) {
-		super.onCraftGuiOpened(var1);
-		var1.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
-		var1.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
-		var1.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
-	}
-
+	}
+
+	// Spout Start
+	public IInventory getIInventory() {
+		return furnace;
+	}
+	// Spout End
+
+	public void addCraftingToCrafters(ICrafting par1ICrafting) {
+		super.addCraftingToCrafters(par1ICrafting);
+		par1ICrafting.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
+		par1ICrafting.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
+		par1ICrafting.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
+	}
+
+	/**
+	 * Looks for changes made in the container, sends them to every listener.
+	 */
 	public void detectAndSendChanges() {
 		super.detectAndSendChanges();
 
-		for(int var1 = 0; var1 < this.e.size(); ++var1) {
-			ICrafting var2 = (ICrafting)this.e.get(var1);
-			if(this.lastCookTime != this.furnace.furnaceCookTime) {
+		for (int var1 = 0; var1 < this.crafters.size(); ++var1) {
+			ICrafting var2 = (ICrafting)this.crafters.get(var1);
+
+			if (this.lastCookTime != this.furnace.furnaceCookTime) {
 				var2.sendProgressBarUpdate(this, 0, this.furnace.furnaceCookTime);
 			}
 
-			if(this.lastBurnTime != this.furnace.furnaceBurnTime) {
+			if (this.lastBurnTime != this.furnace.furnaceBurnTime) {
 				var2.sendProgressBarUpdate(this, 1, this.furnace.furnaceBurnTime);
 			}
 
-			if(this.lastItemBurnTime != this.furnace.currentItemBurnTime) {
+			if (this.lastItemBurnTime != this.furnace.currentItemBurnTime) {
 				var2.sendProgressBarUpdate(this, 2, this.furnace.currentItemBurnTime);
 			}
 		}
@@ -55,68 +64,72 @@
 		this.lastItemBurnTime = this.furnace.currentItemBurnTime;
 	}
 
-	public void updateProgressBar(int var1, int var2) {
-		if(var1 == 0) {
-			this.furnace.furnaceCookTime = var2;
-		}
-
-		if(var1 == 1) {
-			this.furnace.furnaceBurnTime = var2;
-		}
-
-		if(var1 == 2) {
-			this.furnace.currentItemBurnTime = var2;
-		}
-
-	}
-
-	public boolean canInteractWith(EntityPlayer var1) {
-		return this.furnace.isUseableByPlayer(var1);
-	}
-
-	public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
+	public void updateProgressBar(int par1, int par2) {
+		if (par1 == 0) {
+			this.furnace.furnaceCookTime = par2;
+		}
+
+		if (par1 == 1) {
+			this.furnace.furnaceBurnTime = par2;
+		}
+
+		if (par1 == 2) {
+			this.furnace.currentItemBurnTime = par2;
+		}
+	}
+
+	public boolean canInteractWith(EntityPlayer par1EntityPlayer) {
+		return this.furnace.isUseableByPlayer(par1EntityPlayer);
+	}
+
+	/**
+	 * Called when a player shift-clicks on a slot. You must override this or you will crash when someone does that.
+	 */
+	public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2) {
 		ItemStack var3 = null;
-		Slot var4 = (Slot)this.c.get(var2);
-		if(var4 != null && var4.getHasStack()) {
+		Slot var4 = (Slot)this.inventorySlots.get(par2);
+
+		if (var4 != null && var4.getHasStack()) {
 			ItemStack var5 = var4.getStack();
 			var3 = var5.copy();
-			if(var2 == 2) {
-				if(!this.mergeItemStack(var5, 3, 39, true)) {
+
+			if (par2 == 2) {
+				if (!this.mergeItemStack(var5, 3, 39, true)) {
 					return null;
 				}
 
 				var4.onSlotChange(var5, var3);
-			} else if(var2 != 1 && var2 != 0) {
-				if(FurnaceRecipes.smelting().getSmeltingResult(var5.getItem().itemID) != null) {
-					if(!this.mergeItemStack(var5, 0, 1, false)) {
-						return null;
-					}
-				} else if(TileEntityFurnace.isItemFuel(var5)) {
-					if(!this.mergeItemStack(var5, 1, 2, false)) {
-						return null;
-					}
-				} else if(var2 >= 3 && var2 < 30) {
-					if(!this.mergeItemStack(var5, 30, 39, false)) {
-						return null;
-					}
-				} else if(var2 >= 30 && var2 < 39 && !this.mergeItemStack(var5, 3, 30, false)) {
+			} else if (par2 != 1 && par2 != 0) {
+				if (FurnaceRecipes.smelting().getSmeltingResult(var5.getItem().itemID) != null) {
+					if (!this.mergeItemStack(var5, 0, 1, false)) {
+						return null;
+					}
+				} else if (TileEntityFurnace.isItemFuel(var5)) {
+					if (!this.mergeItemStack(var5, 1, 2, false)) {
+						return null;
+					}
+				} else if (par2 >= 3 && par2 < 30) {
+					if (!this.mergeItemStack(var5, 30, 39, false)) {
+						return null;
+					}
+				} else if (par2 >= 30 && par2 < 39 && !this.mergeItemStack(var5, 3, 30, false)) {
 					return null;
 				}
-			} else if(!this.mergeItemStack(var5, 3, 39, false)) {
+			} else if (!this.mergeItemStack(var5, 3, 39, false)) {
 				return null;
 			}
 
-			if(var5.stackSize == 0) {
+			if (var5.stackSize == 0) {
 				var4.putStack((ItemStack)null);
 			} else {
 				var4.onSlotChanged();
 			}
 
-			if(var5.stackSize == var3.stackSize) {
+			if (var5.stackSize == var3.stackSize) {
 				return null;
 			}
 
-			var4.onPickupFromSlot(var1, var5);
+			var4.onPickupFromSlot(par1EntityPlayer, var5);
 		}
 
 		return var3;
