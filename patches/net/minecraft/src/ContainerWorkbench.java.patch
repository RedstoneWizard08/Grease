--- net/minecraft/src/ContainerWorkbench.java
+++ net/minecraft/src/ContainerWorkbench.java
@@ -1,6 +1,8 @@
 package net.minecraft.src;
 
 public class ContainerWorkbench extends Container {
+
+	/** The crafting matrix inventory (3x3). */
 	public InventoryCrafting craftMatrix = new InventoryCrafting(this, 3, 3);
 	public IInventory craftResult = new InventoryCraftResult();
 	private World worldObj;
@@ -8,96 +10,114 @@
 	private int posY;
 	private int posZ;
 
-	public ContainerWorkbench(InventoryPlayer var1, World var2, int var3, int var4, int var5) {
-		this.worldObj = var2;
-		this.posX = var3;
-		this.posY = var4;
-		this.posZ = var5;
-		this.addSlotToContainer(new SlotCrafting(var1.player, this.craftMatrix, this.craftResult, 0, 124, 35));
-
-		int var6;
+	public ContainerWorkbench(InventoryPlayer par1InventoryPlayer, World par2World, int par3, int par4, int par5) {
+		this.worldObj = par2World;
+		this.posX = par3;
+		this.posY = par4;
+		this.posZ = par5;
+		this.addSlotToContainer(new SlotCrafting(par1InventoryPlayer.player, this.craftMatrix, this.craftResult, 0, 124, 35));
 		int var7;
-		for(var6 = 0; var6 < 3; ++var6) {
-			for(var7 = 0; var7 < 3; ++var7) {
+		int var6;
+
+		for (var6 = 0; var6 < 3; ++var6) {
+			for (var7 = 0; var7 < 3; ++var7) {
 				this.addSlotToContainer(new Slot(this.craftMatrix, var7 + var6 * 3, 30 + var7 * 18, 17 + var6 * 18));
 			}
 		}
 
-		for(var6 = 0; var6 < 3; ++var6) {
-			for(var7 = 0; var7 < 9; ++var7) {
-				this.addSlotToContainer(new Slot(var1, var7 + var6 * 9 + 9, 8 + var7 * 18, 84 + var6 * 18));
+		for (var6 = 0; var6 < 3; ++var6) {
+			for (var7 = 0; var7 < 9; ++var7) {
+				this.addSlotToContainer(new Slot(par1InventoryPlayer, var7 + var6 * 9 + 9, 8 + var7 * 18, 84 + var6 * 18));
 			}
 		}
 
-		for(var6 = 0; var6 < 9; ++var6) {
-			this.addSlotToContainer(new Slot(var1, var6, 8 + var6 * 18, 142));
+		for (var6 = 0; var6 < 9; ++var6) {
+			this.addSlotToContainer(new Slot(par1InventoryPlayer, var6, 8 + var6 * 18, 142));
 		}
 
 		this.onCraftMatrixChanged(this.craftMatrix);
 	}
 
-	public void onCraftMatrixChanged(IInventory var1) {
+	// Spout Start
+	public IInventory getIInventory() {
+		return null;
+	}
+	// Spout End
+
+	/**
+	 * Callback for when the crafting matrix is changed.
+	 */
+	public void onCraftMatrixChanged(IInventory par1IInventory) {
 		this.craftResult.setInventorySlotContents(0, CraftingManager.getInstance().findMatchingRecipe(this.craftMatrix, this.worldObj));
 	}
 
-	public void onContainerClosed(EntityPlayer var1) {
-		super.onContainerClosed(var1);
-		if(!this.worldObj.isRemote) {
-			for(int var2 = 0; var2 < 9; ++var2) {
+	/**
+	 * Called when the container is closed.
+	 */
+	public void onContainerClosed(EntityPlayer par1EntityPlayer) {
+		super.onContainerClosed(par1EntityPlayer);
+
+		if (!this.worldObj.isRemote) {
+			for (int var2 = 0; var2 < 9; ++var2) {
 				ItemStack var3 = this.craftMatrix.getStackInSlotOnClosing(var2);
-				if(var3 != null) {
-					var1.dropPlayerItem(var3);
+
+				if (var3 != null) {
+					par1EntityPlayer.dropPlayerItem(var3);
 				}
 			}
-
 		}
 	}
 
-	public boolean canInteractWith(EntityPlayer var1) {
-		return this.worldObj.getBlockId(this.posX, this.posY, this.posZ) != Block.workbench.blockID ? false : var1.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
+	public boolean canInteractWith(EntityPlayer par1EntityPlayer) {
+		return this.worldObj.getBlockId(this.posX, this.posY, this.posZ) != Block.workbench.blockID ? false : par1EntityPlayer.getDistanceSq((double)this.posX + 0.5D, (double)this.posY + 0.5D, (double)this.posZ + 0.5D) <= 64.0D;
 	}
 
-	public ItemStack transferStackInSlot(EntityPlayer var1, int var2) {
+	/**
+	 * Called when a player shift-clicks on a slot. You must override this or you will crash when someone does that.
+	 */
+	public ItemStack transferStackInSlot(EntityPlayer par1EntityPlayer, int par2) {
 		ItemStack var3 = null;
-		Slot var4 = (Slot)this.c.get(var2);
-		if(var4 != null && var4.getHasStack()) {
+		Slot var4 = (Slot)this.inventorySlots.get(par2);
+
+		if (var4 != null && var4.getHasStack()) {
 			ItemStack var5 = var4.getStack();
 			var3 = var5.copy();
-			if(var2 == 0) {
-				if(!this.mergeItemStack(var5, 10, 46, true)) {
+
+			if (par2 == 0) {
+				if (!this.mergeItemStack(var5, 10, 46, true)) {
 					return null;
 				}
 
 				var4.onSlotChange(var5, var3);
-			} else if(var2 >= 10 && var2 < 37) {
-				if(!this.mergeItemStack(var5, 37, 46, false)) {
-					return null;
-				}
-			} else if(var2 >= 37 && var2 < 46) {
-				if(!this.mergeItemStack(var5, 10, 37, false)) {
-					return null;
-				}
-			} else if(!this.mergeItemStack(var5, 10, 46, false)) {
+			} else if (par2 >= 10 && par2 < 37) {
+				if (!this.mergeItemStack(var5, 37, 46, false)) {
+					return null;
+				}
+			} else if (par2 >= 37 && par2 < 46) {
+				if (!this.mergeItemStack(var5, 10, 37, false)) {
+					return null;
+				}
+			} else if (!this.mergeItemStack(var5, 10, 46, false)) {
 				return null;
 			}
 
-			if(var5.stackSize == 0) {
+			if (var5.stackSize == 0) {
 				var4.putStack((ItemStack)null);
 			} else {
 				var4.onSlotChanged();
 			}
 
-			if(var5.stackSize == var3.stackSize) {
+			if (var5.stackSize == var3.stackSize) {
 				return null;
 			}
 
-			var4.onPickupFromSlot(var1, var5);
+			var4.onPickupFromSlot(par1EntityPlayer, var5);
 		}
 
 		return var3;
 	}
 
-	public boolean func_94530_a(ItemStack var1, Slot var2) {
-		return var2.inventory != this.craftResult && super.func_94530_a(var1, var2);
+	public boolean func_94530_a(ItemStack par1ItemStack, Slot par2Slot) {
+		return par2Slot.inventory != this.craftResult && super.func_94530_a(par1ItemStack, par2Slot);
 	}
 }
