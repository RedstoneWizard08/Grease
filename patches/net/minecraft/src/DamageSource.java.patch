--- net/minecraft/src/DamageSource.java
+++ net/minecraft/src/DamageSource.java
@@ -15,52 +15,80 @@
 	public static DamageSource wither = (new DamageSource("wither")).setDamageBypassesArmor();
 	public static DamageSource anvil = new DamageSource("anvil");
 	public static DamageSource fallingBlock = new DamageSource("fallingBlock");
+
+	/** This kind of damage can be blocked or not. */
 	private boolean isUnblockable;
 	private boolean isDamageAllowedInCreativeMode;
 	private float hungerDamage = 0.3F;
+
+	/** This kind of damage is based on fire or not. */
 	private boolean fireDamage;
+
+	/** This kind of damage is based on a projectile or not. */
 	private boolean projectile;
+
+	/**
+	 * Whether this damage source will have its damage amount scaled based on the current difficulty.
+	 */
 	private boolean difficultyScaled;
 	private boolean magicDamage;
 	private boolean explosion;
-	public String o;
-
-	public static DamageSource causeMobDamage(EntityLivingBase var0) {
-		return new EntityDamageSource("mob", var0);
-	}
-
-	public static DamageSource causePlayerDamage(EntityPlayer var0) {
-		return new EntityDamageSource("player", var0);
-	}
-
-	public static DamageSource causeArrowDamage(EntityArrow var0, Entity var1) {
-		return (new EntityDamageSourceIndirect("arrow", var0, var1)).setProjectile();
-	}
-
-	public static DamageSource causeFireballDamage(EntityFireball var0, Entity var1) {
-		return var1 == null ? (new EntityDamageSourceIndirect("onFire", var0, var0)).setFireDamage().setProjectile() : (new EntityDamageSourceIndirect("fireball", var0, var1)).setFireDamage().setProjectile();
-	}
-
-	public static DamageSource causeThrownDamage(Entity var0, Entity var1) {
-		return (new EntityDamageSourceIndirect("thrown", var0, var1)).setProjectile();
-	}
-
-	public static DamageSource causeIndirectMagicDamage(Entity var0, Entity var1) {
-		return (new EntityDamageSourceIndirect("indirectMagic", var0, var1)).setDamageBypassesArmor().setMagicDamage();
-	}
-
-	public static DamageSource causeThornsDamage(Entity var0) {
-		return (new EntityDamageSource("thorns", var0)).setMagicDamage();
-	}
-
-	public static DamageSource setExplosionSource(Explosion var0) {
-		return var0 != null && var0.getExplosivePlacedBy() != null ? (new EntityDamageSource("explosion.player", var0.getExplosivePlacedBy())).setDifficultyScaled().setExplosion() : (new DamageSource("explosion")).setDifficultyScaled().setExplosion();
-	}
-
+	public String damageType;
+
+	public static DamageSource causeMobDamage(EntityLivingBase par0EntityLivingBase) {
+		return new EntityDamageSource("mob", par0EntityLivingBase);
+	}
+
+	/**
+	 * returns an EntityDamageSource of type player
+	 */
+	public static DamageSource causePlayerDamage(EntityPlayer par0EntityPlayer) {
+		return new EntityDamageSource("player", par0EntityPlayer);
+	}
+
+	/**
+	 * returns EntityDamageSourceIndirect of an arrow
+	 */
+	public static DamageSource causeArrowDamage(EntityArrow par0EntityArrow, Entity par1Entity) {
+		return (new EntityDamageSourceIndirect("arrow", par0EntityArrow, par1Entity)).setProjectile();
+	}
+
+	/**
+	 * returns EntityDamageSourceIndirect of a fireball
+	 */
+	public static DamageSource causeFireballDamage(EntityFireball par0EntityFireball, Entity par1Entity) {
+		return par1Entity == null ? (new EntityDamageSourceIndirect("onFire", par0EntityFireball, par0EntityFireball)).setFireDamage().setProjectile() : (new EntityDamageSourceIndirect("fireball", par0EntityFireball, par1Entity)).setFireDamage().setProjectile();
+	}
+
+	public static DamageSource causeThrownDamage(Entity par0Entity, Entity par1Entity) {
+		return (new EntityDamageSourceIndirect("thrown", par0Entity, par1Entity)).setProjectile();
+	}
+
+	public static DamageSource causeIndirectMagicDamage(Entity par0Entity, Entity par1Entity) {
+		return (new EntityDamageSourceIndirect("indirectMagic", par0Entity, par1Entity)).setDamageBypassesArmor().setMagicDamage();
+	}
+
+	/**
+	 * Returns the EntityDamageSource of the Thorns enchantment
+	 */
+	public static DamageSource causeThornsDamage(Entity par0Entity) {
+		return (new EntityDamageSource("thorns", par0Entity)).setMagicDamage();
+	}
+
+	public static DamageSource setExplosionSource(Explosion par0Explosion) {
+		return par0Explosion != null && par0Explosion.getExplosivePlacedBy() != null ? (new EntityDamageSource("explosion.player", par0Explosion.getExplosivePlacedBy())).setDifficultyScaled().setExplosion() : (new DamageSource("explosion")).setDifficultyScaled().setExplosion();
+	}
+
+	/**
+	 * Returns true if the damage is projectile based.
+	 */
 	public boolean isProjectile() {
 		return this.projectile;
 	}
 
+	/**
+	 * Define the damage type as projectile based.
+	 */
 	public DamageSource setProjectile() {
 		this.projectile = true;
 		return this;
@@ -79,6 +107,9 @@
 		return this.isUnblockable;
 	}
 
+	/**
+	 * How much satiate(food) is consumed by this DamageSource
+	 */
 	public float getHungerDamage() {
 		return this.hungerDamage;
 	}
@@ -87,8 +118,8 @@
 		return this.isDamageAllowedInCreativeMode;
 	}
 
-	protected DamageSource(String var1) {
-		this.o = var1;
+	protected DamageSource(String par1Str) {
+		this.damageType = par1Str;
 	}
 
 	public Entity getSourceOfDamage() {
@@ -110,39 +141,63 @@
 		return this;
 	}
 
+	/**
+	 * Define the damage type as fire based.
+	 */
 	protected DamageSource setFireDamage() {
 		this.fireDamage = true;
 		return this;
 	}
 
-	public ChatMessageComponent getDeathMessage(EntityLivingBase var1) {
-		EntityLivingBase var2 = var1.func_94060_bK();
-		String var3 = "death.attack." + this.o;
+	/**
+	 * Returns the message to be displayed on player death.
+	 */
+	public ChatMessageComponent getDeathMessage(EntityLivingBase par1EntityLivingBase) {
+		EntityLivingBase var2 = par1EntityLivingBase.func_94060_bK();
+		String var3 = "death.attack." + this.damageType;
 		String var4 = var3 + ".player";
-		return var2 != null && StatCollector.func_94522_b(var4) ? ChatMessageComponent.createFromTranslationWithSubstitutions(var4, new Object[]{var1.getTranslatedEntityName(), var2.getTranslatedEntityName()}) : ChatMessageComponent.createFromTranslationWithSubstitutions(var3, new Object[]{var1.getTranslatedEntityName()});
+		return var2 != null && StatCollector.func_94522_b(var4) ? ChatMessageComponent.createFromTranslationWithSubstitutions(var4, new Object[] {par1EntityLivingBase.getTranslatedEntityName(), var2.getTranslatedEntityName()}): ChatMessageComponent.createFromTranslationWithSubstitutions(var3, new Object[] {par1EntityLivingBase.getTranslatedEntityName()});
 	}
 
+	/**
+	 * Returns true if the damage is fire based.
+	 */
 	public boolean isFireDamage() {
 		return this.fireDamage;
 	}
 
+	/**
+	 * Return the name of damage type.
+	 */
 	public String getDamageType() {
-		return this.o;
+		return this.damageType;
 	}
 
+	/**
+	 * Set whether this damage source will have its damage amount scaled based on the current difficulty.
+	 */
 	public DamageSource setDifficultyScaled() {
 		this.difficultyScaled = true;
 		return this;
 	}
 
+	/**
+	 * Return whether this damage source will have its damage amount scaled based on the current difficulty.
+	 */
 	public boolean isDifficultyScaled() {
 		return this.difficultyScaled;
 	}
 
+	/**
+	 * Returns true if the damage is magic based.
+	 */
 	public boolean isMagicDamage() {
 		return this.magicDamage;
 	}
 
+	/**
+	 * Define the damage type as magic based.
+	 */
 	public DamageSource setMagicDamage() {
 		this.magicDamage = true;
 		return this;
