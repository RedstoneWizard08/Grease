--- net/minecraft/src/EnchantmentUntouching.java
+++ net/minecraft/src/EnchantmentUntouching.java
@@ -1,28 +1,40 @@
 package net.minecraft.src;
 
 public class EnchantmentUntouching extends Enchantment {
-	protected EnchantmentUntouching(int var1, int var2) {
-		super(var1, var2, EnumEnchantmentType.digger);
+	protected EnchantmentUntouching(int par1, int par2) {
+		super(par1, par2, EnumEnchantmentType.digger);
 		this.setName("untouching");
 	}
 
-	public int getMinEnchantability(int var1) {
+	/**
+	 * Returns the minimal value of enchantability needed on the enchantment level passed.
+	 */
+	public int getMinEnchantability(int par1) {
 		return 15;
 	}
 
-	public int getMaxEnchantability(int var1) {
-		return super.getMinEnchantability(var1) + 50;
+	/**
+	 * Returns the maximum value of enchantability nedded on the enchantment level passed.
+	 */
+	public int getMaxEnchantability(int par1) {
+		return super.getMinEnchantability(par1) + 50;
 	}
 
+	/**
+	 * Returns the maximum level that the enchantment can have.
+	 */
 	public int getMaxLevel() {
 		return 1;
 	}
 
-	public boolean canApplyTogether(Enchantment var1) {
-		return super.canApplyTogether(var1) && var1.effectId != fortune.effectId;
+	/**
+	 * Determines if the enchantment passed can be applyied together with this enchantment.
+	 */
+	public boolean canApplyTogether(Enchantment par1Enchantment) {
+		return super.canApplyTogether(par1Enchantment) && par1Enchantment.effectId != fortune.effectId;
 	}
 
-	public boolean canApply(ItemStack var1) {
-		return var1.getItem().itemID == Item.shears.itemID ? true : super.canApply(var1);
+	public boolean canApply(ItemStack par1ItemStack) {
+		return par1ItemStack.getItem().itemID == Item.shears.itemID ? true : super.canApply(par1ItemStack);
 	}
 }
