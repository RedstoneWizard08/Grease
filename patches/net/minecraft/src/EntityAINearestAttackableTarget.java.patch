--- net/minecraft/src/EntityAINearestAttackableTarget.java
+++ net/minecraft/src/EntityAINearestAttackableTarget.java
@@ -4,37 +4,47 @@
 import java.util.List;
 
 public class EntityAINearestAttackableTarget extends EntityAITarget {
-	private final Class a;
+	private final Class targetClass;
 	private final int targetChance;
+
+	/** Instance of EntityAINearestAttackableTargetSorter. */
 	private final EntityAINearestAttackableTargetSorter theNearestAttackableTargetSorter;
+
+	/**
+	 * This filter is applied to the Entity search.  Only matching entities will be targetted.  (null -> no restrictions)
+	 */
 	private final IEntitySelector targetEntitySelector;
 	private EntityLivingBase targetEntity;
 
-	public EntityAINearestAttackableTarget(EntityCreature var1, Class var2, int var3, boolean var4) {
-		this(var1, var2, var3, var4, false);
-	}
-
-	public EntityAINearestAttackableTarget(EntityCreature var1, Class var2, int var3, boolean var4, boolean var5) {
-		this(var1, var2, var3, var4, var5, (IEntitySelector)null);
-	}
-
-	public EntityAINearestAttackableTarget(EntityCreature var1, Class var2, int var3, boolean var4, boolean var5, IEntitySelector var6) {
-		super(var1, var4, var5);
-		this.a = var2;
-		this.targetChance = var3;
-		this.theNearestAttackableTargetSorter = new EntityAINearestAttackableTargetSorter(var1);
+	public EntityAINearestAttackableTarget(EntityCreature par1EntityCreature, Class par2Class, int par3, boolean par4) {
+		this(par1EntityCreature, par2Class, par3, par4, false);
+	}
+
+	public EntityAINearestAttackableTarget(EntityCreature par1EntityCreature, Class par2Class, int par3, boolean par4, boolean par5) {
+		this(par1EntityCreature, par2Class, par3, par4, par5, (IEntitySelector)null);
+	}
+
+	public EntityAINearestAttackableTarget(EntityCreature par1EntityCreature, Class par2Class, int par3, boolean par4, boolean par5, IEntitySelector par6IEntitySelector) {
+		super(par1EntityCreature, par4, par5);
+		this.targetClass = par2Class;
+		this.targetChance = par3;
+		this.theNearestAttackableTargetSorter = new EntityAINearestAttackableTargetSorter(par1EntityCreature);
 		this.setMutexBits(1);
-		this.targetEntitySelector = new EntityAINearestAttackableTargetSelector(this, var6);
+		this.targetEntitySelector = new EntityAINearestAttackableTargetSelector(this, par6IEntitySelector);
 	}
 
+	/**
+	 * Returns whether the EntityAIBase should begin execution.
+	 */
 	public boolean shouldExecute() {
-		if(this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
+		if (this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
 			return false;
 		} else {
 			double var1 = this.getTargetDistance();
-			List var3 = this.taskOwner.worldObj.selectEntitiesWithinAABB(this.a, this.taskOwner.boundingBox.expand(var1, 4.0D, var1), this.targetEntitySelector);
+			List var3 = this.taskOwner.worldObj.selectEntitiesWithinAABB(this.targetClass, this.taskOwner.boundingBox.expand(var1, 4.0D, var1), this.targetEntitySelector);
 			Collections.sort(var3, this.theNearestAttackableTargetSorter);
-			if(var3.isEmpty()) {
+
+			if (var3.isEmpty()) {
 				return false;
 			} else {
 				this.targetEntity = (EntityLivingBase)var3.get(0);
@@ -43,6 +53,9 @@
 		}
 	}
 
+	/**
+	 * Execute a one shot task or start executing a continuous task
+	 */
 	public void startExecuting() {
 		this.taskOwner.setAttackTarget(this.targetEntity);
 		super.startExecuting();
