--- net/minecraft/src/EntityAIPanic.java
+++ net/minecraft/src/EntityAIPanic.java
@@ -7,18 +7,22 @@
 	private double randPosY;
 	private double randPosZ;
 
-	public EntityAIPanic(EntityCreature var1, double var2) {
-		this.theEntityCreature = var1;
-		this.speed = var2;
+	public EntityAIPanic(EntityCreature par1EntityCreature, double par2) {
+		this.theEntityCreature = par1EntityCreature;
+		this.speed = par2;
 		this.setMutexBits(1);
 	}
 
+	/**
+	 * Returns whether the EntityAIBase should begin execution.
+	 */
 	public boolean shouldExecute() {
-		if(this.theEntityCreature.getAITarget() == null && !this.theEntityCreature.isBurning()) {
+		if (this.theEntityCreature.getAITarget() == null && !this.theEntityCreature.isBurning()) {
 			return false;
 		} else {
 			Vec3 var1 = RandomPositionGenerator.findRandomTarget(this.theEntityCreature, 5, 4);
-			if(var1 == null) {
+
+			if (var1 == null) {
 				return false;
 			} else {
 				this.randPosX = var1.xCoord;
@@ -29,10 +33,16 @@
 		}
 	}
 
+	/**
+	 * Execute a one shot task or start executing a continuous task
+	 */
 	public void startExecuting() {
 		this.theEntityCreature.getNavigator().tryMoveToXYZ(this.randPosX, this.randPosY, this.randPosZ, this.speed);
 	}
 
+	/**
+	 * Returns whether an in-progress EntityAIBase should continue executing
+	 */
 	public boolean continueExecuting() {
 		return !this.theEntityCreature.getNavigator().noPath();
 	}
