--- net/minecraft/src/EntityAIVillagerMate.java
+++ net/minecraft/src/EntityAIVillagerMate.java
@@ -7,26 +7,31 @@
 	private int matingTimeout;
 	Village villageObj;
 
-	public EntityAIVillagerMate(EntityVillager var1) {
-		this.villagerObj = var1;
-		this.worldObj = var1.worldObj;
+	public EntityAIVillagerMate(EntityVillager par1EntityVillager) {
+		this.villagerObj = par1EntityVillager;
+		this.worldObj = par1EntityVillager.worldObj;
 		this.setMutexBits(3);
 	}
 
+	/**
+	 * Returns whether the EntityAIBase should begin execution.
+	 */
 	public boolean shouldExecute() {
-		if(this.villagerObj.getGrowingAge() != 0) {
+		if (this.villagerObj.getGrowingAge() != 0) {
 			return false;
-		} else if(this.villagerObj.getRNG().nextInt(500) != 0) {
+		} else if (this.villagerObj.getRNG().nextInt(500) != 0) {
 			return false;
 		} else {
 			this.villageObj = this.worldObj.villageCollectionObj.findNearestVillage(MathHelper.floor_double(this.villagerObj.posX), MathHelper.floor_double(this.villagerObj.posY), MathHelper.floor_double(this.villagerObj.posZ), 0);
-			if(this.villageObj == null) {
+
+			if (this.villageObj == null) {
 				return false;
-			} else if(!this.checkSufficientDoorsPresentForNewVillager()) {
+			} else if (!this.checkSufficientDoorsPresentForNewVillager()) {
 				return false;
 			} else {
 				Entity var1 = this.worldObj.findNearestEntityWithinAABB(EntityVillager.class, this.villagerObj.boundingBox.expand(8.0D, 3.0D, 8.0D), this.villagerObj);
-				if(var1 == null) {
+
+				if (var1 == null) {
 					return false;
 				} else {
 					this.mate = (EntityVillager)var1;
@@ -36,38 +41,50 @@
 		}
 	}
 
+	/**
+	 * Execute a one shot task or start executing a continuous task
+	 */
 	public void startExecuting() {
 		this.matingTimeout = 300;
 		this.villagerObj.setMating(true);
 	}
 
+	/**
+	 * Resets the task
+	 */
 	public void resetTask() {
 		this.villageObj = null;
 		this.mate = null;
 		this.villagerObj.setMating(false);
 	}
 
+	/**
+	 * Returns whether an in-progress EntityAIBase should continue executing
+	 */
 	public boolean continueExecuting() {
 		return this.matingTimeout >= 0 && this.checkSufficientDoorsPresentForNewVillager() && this.villagerObj.getGrowingAge() == 0;
 	}
 
+	/**
+	 * Updates the task
+	 */
 	public void updateTask() {
 		--this.matingTimeout;
 		this.villagerObj.getLookHelper().setLookPositionWithEntity(this.mate, 10.0F, 30.0F);
-		if(this.villagerObj.getDistanceSqToEntity(this.mate) > 2.25D) {
+
+		if (this.villagerObj.getDistanceSqToEntity(this.mate) > 2.25D) {
 			this.villagerObj.getNavigator().tryMoveToEntityLiving(this.mate, 0.25D);
-		} else if(this.matingTimeout == 0 && this.mate.isMating()) {
+		} else if (this.matingTimeout == 0 && this.mate.isMating()) {
 			this.giveBirth();
 		}
 
-		if(this.villagerObj.getRNG().nextInt(35) == 0) {
+		if (this.villagerObj.getRNG().nextInt(35) == 0) {
 			this.worldObj.setEntityState(this.villagerObj, (byte)12);
 		}
-
 	}
 
 	private boolean checkSufficientDoorsPresentForNewVillager() {
-		if(!this.villageObj.isMatingSeason()) {
+		if (!this.villageObj.isMatingSeason()) {
 			return false;
 		} else {
 			int var1 = (int)((double)((float)this.villageObj.getNumVillageDoors()) * 0.35D);
