--- net/minecraft/src/EntityBat.java
+++ net/minecraft/src/EntityBat.java
@@ -3,10 +3,15 @@
 import java.util.Calendar;
 
 public class EntityBat extends EntityAmbientCreature {
-	private ChunkCoordinates spawnPosition;
-
-	public EntityBat(World var1) {
-		super(var1);
+
+	/**
+	 * randomly selected ChunkCoordinates in a 7x6x7 box around the bat (y offset -2 to 4) towards which it will fly. upon
+	 * getting close a new target will be selected
+	 */
+	private ChunkCoordinates currentFlightTarget;
+
+	public EntityBat(World par1World) {
+		super(par1World);
 		this.setSize(0.5F, 0.9F);
 		this.setIsBatHanging(true);
 	}
@@ -16,35 +21,51 @@
 		this.dataWatcher.addObject(16, new Byte((byte)0));
 	}
 
+	/**
+	 * Returns the volume for the sounds this mob makes.
+	 */
 	protected float getSoundVolume() {
 		return 0.1F;
 	}
 
+	/**
+	 * Gets the pitch of living sounds in living entities.
+	 */
 	protected float getSoundPitch() {
 		return super.getSoundPitch() * 0.95F;
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
-		return this.getIsBatHanging() && this.ab.nextInt(4) != 0 ? null : "mob.bat.idle";
+		return this.getIsBatHanging() && this.rand.nextInt(4) != 0 ? null : "mob.bat.idle";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.bat.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.bat.death";
 	}
 
+	/**
+	 * Returns true if this entity should push and be pushed by other entities when colliding.
+	 */
 	public boolean canBePushed() {
 		return false;
 	}
 
-	protected void collideWithEntity(Entity var1) {
-	}
+	protected void collideWithEntity(Entity par1Entity) {}
 
-	protected void collideWithNearbyEntities() {
-	}
+	protected void collideWithNearbyEntities() {}
 
 	protected void applyEntityAttributes() {
 		super.applyEntityAttributes();
@@ -55,112 +76,144 @@
 		return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
 	}
 
-	public void setIsBatHanging(boolean var1) {
+	public void setIsBatHanging(boolean par1) {
 		byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-		if(var1) {
+
+		if (par1) {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 1)));
 		} else {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -2)));
 		}
-
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	protected boolean isAIEnabled() {
 		return true;
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		super.onUpdate();
-		if(this.getIsBatHanging()) {
+
+		if (this.getIsBatHanging()) {
 			this.motionX = this.motionY = this.motionZ = 0.0D;
 			this.posY = (double)MathHelper.floor_double(this.posY) + 1.0D - (double)this.height;
 		} else {
-			this.motionY *= (double)0.6F;
+			this.motionY *= 0.6000000238418579D;
 		}
-
 	}
 
 	protected void updateAITasks() {
 		super.updateAITasks();
-		if(this.getIsBatHanging()) {
-			if(!this.worldObj.isBlockNormalCube(MathHelper.floor_double(this.posX), (int)this.posY + 1, MathHelper.floor_double(this.posZ))) {
+
+		if (this.getIsBatHanging()) {
+			if (!this.worldObj.isBlockNormalCube(MathHelper.floor_double(this.posX), (int)this.posY + 1, MathHelper.floor_double(this.posZ))) {
 				this.setIsBatHanging(false);
 				this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1015, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
 			} else {
-				if(this.ab.nextInt(200) == 0) {
-					this.rotationYawHead = (float)this.ab.nextInt(360);
+				if (this.rand.nextInt(200) == 0) {
+					this.rotationYawHead = (float)this.rand.nextInt(360);
 				}
 
-				if(this.worldObj.getClosestPlayerToEntity(this, 4.0D) != null) {
+				if (this.worldObj.getClosestPlayerToEntity(this, 4.0D) != null) {
 					this.setIsBatHanging(false);
 					this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1015, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
 				}
 			}
 		} else {
-			if(this.spawnPosition != null && (!this.worldObj.isAirBlock(this.spawnPosition.posX, this.spawnPosition.posY, this.spawnPosition.posZ) || this.spawnPosition.posY < 1)) {
-				this.spawnPosition = null;
-			}
-
-			if(this.spawnPosition == null || this.ab.nextInt(30) == 0 || this.spawnPosition.getDistanceSquared((int)this.posX, (int)this.posY, (int)this.posZ) < 4.0F) {
-				this.spawnPosition = new ChunkCoordinates((int)this.posX + this.ab.nextInt(7) - this.ab.nextInt(7), (int)this.posY + this.ab.nextInt(6) - 2, (int)this.posZ + this.ab.nextInt(7) - this.ab.nextInt(7));
-			}
-
-			double var1 = (double)this.spawnPosition.posX + 0.5D - this.posX;
-			double var3 = (double)this.spawnPosition.posY + 0.1D - this.posY;
-			double var5 = (double)this.spawnPosition.posZ + 0.5D - this.posZ;
-			this.motionX += (Math.signum(var1) * 0.5D - this.motionX) * (double)0.1F;
-			this.motionY += (Math.signum(var3) * (double)0.7F - this.motionY) * (double)0.1F;
-			this.motionZ += (Math.signum(var5) * 0.5D - this.motionZ) * (double)0.1F;
-			float var7 = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / (double)((float)Math.PI)) - 90.0F;
+			if (this.currentFlightTarget != null && (!this.worldObj.isAirBlock(this.currentFlightTarget.posX, this.currentFlightTarget.posY, this.currentFlightTarget.posZ) || this.currentFlightTarget.posY < 1)) {
+				this.currentFlightTarget = null;
+			}
+
+			if (this.currentFlightTarget == null || this.rand.nextInt(30) == 0 || this.currentFlightTarget.getDistanceSquared((int)this.posX, (int)this.posY, (int)this.posZ) < 4.0F) {
+				this.currentFlightTarget = new ChunkCoordinates((int)this.posX + this.rand.nextInt(7) - this.rand.nextInt(7), (int)this.posY + this.rand.nextInt(6) - 2, (int)this.posZ + this.rand.nextInt(7) - this.rand.nextInt(7));
+			}
+
+			double var1 = (double)this.currentFlightTarget.posX + 0.5D - this.posX;
+			double var3 = (double)this.currentFlightTarget.posY + 0.1D - this.posY;
+			double var5 = (double)this.currentFlightTarget.posZ + 0.5D - this.posZ;
+			this.motionX += (Math.signum(var1) * 0.5D - this.motionX) * 0.10000000149011612D;
+			this.motionY += (Math.signum(var3) * 0.699999988079071D - this.motionY) * 0.10000000149011612D;
+			this.motionZ += (Math.signum(var5) * 0.5D - this.motionZ) * 0.10000000149011612D;
+			float var7 = (float)(Math.atan2(this.motionZ, this.motionX) * 180.0D / Math.PI) - 90.0F;
 			float var8 = MathHelper.wrapAngleTo180_float(var7 - this.rotationYaw);
 			this.moveForward = 0.5F;
 			this.rotationYaw += var8;
-			if(this.ab.nextInt(100) == 0 && this.worldObj.isBlockNormalCube(MathHelper.floor_double(this.posX), (int)this.posY + 1, MathHelper.floor_double(this.posZ))) {
+
+			if (this.rand.nextInt(100) == 0 && this.worldObj.isBlockNormalCube(MathHelper.floor_double(this.posX), (int)this.posY + 1, MathHelper.floor_double(this.posZ))) {
 				this.setIsBatHanging(true);
 			}
 		}
-
 	}
 
+	/**
+	 * returns if this entity triggers Block.onEntityWalking on the blocks they walk on. used for spiders and wolves to
+	 * prevent them from trampling crops
+	 */
 	protected boolean canTriggerWalking() {
 		return false;
 	}
 
-	protected void fall(float var1) {
-	}
-
-	protected void updateFallState(double var1, boolean var3) {
-	}
-
+	/**
+	 * Called when the mob is falling. Calculates and applies fall damage.
+	 */
+	protected void fall(float par1) {}
+
+	/**
+	 * Takes in the distance the entity has fallen this tick and whether its on the ground to update the fall distance and
+	 * deal fall damage if landing on the ground.  Args: distanceFallenThisTick, onGround
+	 */
+	protected void updateFallState(double par1, boolean par3) {}
+
+	/**
+	 * Return whether this entity should NOT trigger a pressure plate or a tripwire.
+	 */
 	public boolean doesEntityNotTriggerPressurePlate() {
 		return true;
 	}
 
-	public boolean attackEntityFrom(DamageSource var1, float var2) {
-		if(this.isEntityInvulnerable()) {
+	/**
+	 * Called when the entity is attacked.
+	 */
+	public boolean attackEntityFrom(DamageSource par1DamageSource, float par2) {
+		if (this.isEntityInvulnerable()) {
 			return false;
 		} else {
-			if(!this.worldObj.isRemote && this.getIsBatHanging()) {
+			if (!this.worldObj.isRemote && this.getIsBatHanging()) {
 				this.setIsBatHanging(false);
 			}
 
-			return super.attackEntityFrom(var1, var2);
+			return super.attackEntityFrom(par1DamageSource, par2);
 		}
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.dataWatcher.updateObject(16, Byte.valueOf(var1.getByte("BatFlags")));
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setByte("BatFlags", this.dataWatcher.getWatchableObjectByte(16));
-	}
-
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.dataWatcher.updateObject(16, Byte.valueOf(par1NBTTagCompound.getByte("BatFlags")));
+	}
+
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setByte("BatFlags", this.dataWatcher.getWatchableObjectByte(16));
+	}
+
+	/**
+	 * Checks if the entity's current position is a valid location to spawn this entity.
+	 */
 	public boolean getCanSpawnHere() {
 		int var1 = MathHelper.floor_double(this.boundingBox.minY);
-		if(var1 >= 63) {
+
+		if (var1 >= 63) {
 			return false;
 		} else {
 			int var2 = MathHelper.floor_double(this.posX);
@@ -168,15 +221,16 @@
 			int var4 = this.worldObj.getBlockLightValue(var2, var1, var3);
 			byte var5 = 4;
 			Calendar var6 = this.worldObj.getCurrentDate();
-			if((var6.get(2) + 1 != 10 || var6.get(5) < 20) && (var6.get(2) + 1 != 11 || var6.get(5) > 3)) {
-				if(this.ab.nextBoolean()) {
+
+			if ((var6.get(2) + 1 != 10 || var6.get(5) < 20) && (var6.get(2) + 1 != 11 || var6.get(5) > 3)) {
+				if (this.rand.nextBoolean()) {
 					return false;
 				}
 			} else {
 				var5 = 7;
 			}
 
-			return var4 > this.ab.nextInt(var5) ? false : super.getCanSpawnHere();
+			return var4 > this.rand.nextInt(var5) ? false : super.getCanSpawnHere();
 		}
 	}
 }
