--- net/minecraft/src/EntityChicken.java
+++ net/minecraft/src/EntityChicken.java
@@ -6,12 +6,14 @@
 	public float field_70884_g;
 	public float field_70888_h;
 	public float field_70889_i = 1.0F;
+
+	/** The time until the next egg is spawned. */
 	public int timeUntilNextEgg;
 
-	public EntityChicken(World var1) {
-		super(var1);
+	public EntityChicken(World par1World) {
+		super(par1World);
 		this.setSize(0.3F, 0.7F);
-		this.timeUntilNextEgg = this.ab.nextInt(6000) + 6000;
+		this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
 		this.tasks.addTask(0, new EntityAISwimming(this));
 		this.tasks.addTask(1, new EntityAIPanic(this, 1.4D));
 		this.tasks.addTask(2, new EntityAIMate(this, 1.0D));
@@ -22,6 +24,9 @@
 		this.tasks.addTask(7, new EntityAILookIdle(this));
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
@@ -32,84 +37,117 @@
 		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.25D);
 	}
 
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
 		super.onLivingUpdate();
 		this.field_70888_h = this.field_70886_e;
 		this.field_70884_g = this.destPos;
 		this.destPos = (float)((double)this.destPos + (double)(this.onGround ? -1 : 4) * 0.3D);
-		if(this.destPos < 0.0F) {
+
+		if (this.destPos < 0.0F) {
 			this.destPos = 0.0F;
 		}
 
-		if(this.destPos > 1.0F) {
+		if (this.destPos > 1.0F) {
 			this.destPos = 1.0F;
 		}
 
-		if(!this.onGround && this.field_70889_i < 1.0F) {
+		if (!this.onGround && this.field_70889_i < 1.0F) {
 			this.field_70889_i = 1.0F;
 		}
 
 		this.field_70889_i = (float)((double)this.field_70889_i * 0.9D);
-		if(!this.onGround && this.motionY < 0.0D) {
+
+		if (!this.onGround && this.motionY < 0.0D) {
 			this.motionY *= 0.6D;
 		}
 
 		this.field_70886_e += this.field_70889_i * 2.0F;
-		if(!this.isChild() && !this.worldObj.isRemote && --this.timeUntilNextEgg <= 0) {
-			this.playSound("mob.chicken.plop", 1.0F, (this.ab.nextFloat() - this.ab.nextFloat()) * 0.2F + 1.0F);
+
+		if (!this.isChild() && !this.worldObj.isRemote && --this.timeUntilNextEgg <= 0) {
+			this.playSound("mob.chicken.plop", 1.0F, (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			this.dropItem(Item.egg.itemID, 1);
-			this.timeUntilNextEgg = this.ab.nextInt(6000) + 6000;
+			this.timeUntilNextEgg = this.rand.nextInt(6000) + 6000;
 		}
-
-	}
-
-	protected void fall(float var1) {
-	}
-
+	}
+
+	/**
+	 * Called when the mob is falling. Calculates and applies fall damage.
+	 */
+	protected void fall(float par1) {}
+
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.chicken.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.chicken.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.chicken.hurt";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.chicken.step", 0.15F, 1.0F);
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.feather.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(3) + this.ab.nextInt(1 + var2);
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + par2);
 
-		for(int var4 = 0; var4 < var3; ++var4) {
+		for (int var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Item.feather.itemID, 1);
 		}
 
-		if(this.isBurning()) {
+		if (this.isBurning()) {
 			this.dropItem(Item.chickenCooked.itemID, 1);
 		} else {
 			this.dropItem(Item.chickenRaw.itemID, 1);
 		}
-
 	}
 
-	public EntityChicken spawnBabyAnimal(EntityAgeable var1) {
+	/**
+	 * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
+	 */
+	public EntityChicken spawnBabyAnimal(EntityAgeable par1EntityAgeable) {
 		return new EntityChicken(this.worldObj);
 	}
 
-	public boolean isBreedingItem(ItemStack var1) {
-		return var1 != null && var1.getItem() instanceof ItemSeeds;
+	/**
+	 * Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on
+	 * the animal type)
+	 */
+	public boolean isBreedingItem(ItemStack par1ItemStack) {
+		return par1ItemStack != null && par1ItemStack.getItem() instanceof ItemSeeds;
 	}
 
-	public EntityAgeable createChild(EntityAgeable var1) {
-		return this.spawnBabyAnimal(var1);
+	public EntityAgeable createChild(EntityAgeable par1EntityAgeable) {
+		return this.spawnBabyAnimal(par1EntityAgeable);
 	}
 }
