--- net/minecraft/src/EntityCow.java
+++ net/minecraft/src/EntityCow.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntityCow extends EntityAnimal {
-	public EntityCow(World var1) {
-		super(var1);
+	public EntityCow(World par1World) {
+		super(par1World);
 		this.setSize(0.9F, 1.3F);
 		this.getNavigator().setAvoidsWater(true);
 		this.tasks.addTask(0, new EntityAISwimming(this));
@@ -15,6 +15,9 @@
 		this.tasks.addTask(7, new EntityAILookIdle(this));
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
@@ -22,73 +25,101 @@
 	protected void applyEntityAttributes() {
 		super.applyEntityAttributes();
 		this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(10.0D);
-		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute((double)0.2F);
+		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.20000000298023224D);
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.cow.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.cow.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.cow.hurt";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.cow.step", 0.15F, 1.0F);
 	}
 
+	/**
+	 * Returns the volume for the sounds this mob makes.
+	 */
 	protected float getSoundVolume() {
 		return 0.4F;
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.leather.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(3) + this.ab.nextInt(1 + var2);
-
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + par2);
 		int var4;
-		for(var4 = 0; var4 < var3; ++var4) {
+
+		for (var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Item.leather.itemID, 1);
 		}
 
-		var3 = this.ab.nextInt(3) + 1 + this.ab.nextInt(1 + var2);
+		var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + par2);
 
-		for(var4 = 0; var4 < var3; ++var4) {
-			if(this.isBurning()) {
+		for (var4 = 0; var4 < var3; ++var4) {
+			if (this.isBurning()) {
 				this.dropItem(Item.beefCooked.itemID, 1);
 			} else {
 				this.dropItem(Item.beefRaw.itemID, 1);
 			}
 		}
-
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		if(var2 != null && var2.itemID == Item.bucketEmpty.itemID && !var1.capabilities.isCreativeMode) {
-			if(var2.stackSize-- == 1) {
-				var1.inventory.setInventorySlotContents(var1.inventory.currentItem, new ItemStack(Item.bucketMilk));
-			} else if(!var1.inventory.addItemStackToInventory(new ItemStack(Item.bucketMilk))) {
-				var1.dropPlayerItem(new ItemStack(Item.bucketMilk.itemID, 1, 0));
+	/**
+	 * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+	 */
+	public boolean interact(EntityPlayer par1EntityPlayer) {
+		ItemStack var2 = par1EntityPlayer.inventory.getCurrentItem();
+
+		if (var2 != null && var2.itemID == Item.bucketEmpty.itemID && !par1EntityPlayer.capabilities.isCreativeMode) {
+			if (var2.stackSize-- == 1) {
+				par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, new ItemStack(Item.bucketMilk));
+			} else if (!par1EntityPlayer.inventory.addItemStackToInventory(new ItemStack(Item.bucketMilk))) {
+				par1EntityPlayer.dropPlayerItem(new ItemStack(Item.bucketMilk.itemID, 1, 0));
 			}
 
 			return true;
 		} else {
-			return super.interact(var1);
+			return super.interact(par1EntityPlayer);
 		}
 	}
 
-	public EntityCow spawnBabyAnimal(EntityAgeable var1) {
+	/**
+	 * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
+	 */
+	public EntityCow spawnBabyAnimal(EntityAgeable par1EntityAgeable) {
 		return new EntityCow(this.worldObj);
 	}
 
-	public EntityAgeable createChild(EntityAgeable var1) {
-		return this.spawnBabyAnimal(var1);
+	public EntityAgeable createChild(EntityAgeable par1EntityAgeable) {
+		return this.spawnBabyAnimal(par1EntityAgeable);
 	}
 }
