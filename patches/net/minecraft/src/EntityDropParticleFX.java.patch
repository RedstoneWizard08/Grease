--- net/minecraft/src/EntityDropParticleFX.java
+++ net/minecraft/src/EntityDropParticleFX.java
@@ -1,16 +1,35 @@
 package net.minecraft.src;
 
+// MCPatcher Start
+import com.prupe.mcpatcher.cc.ColorizeBlock;
+import com.prupe.mcpatcher.cc.ColorizeEntity;
+import com.prupe.mcpatcher.cc.Colorizer;
+// MCPatcher End
+
 public class EntityDropParticleFX extends EntityFX {
+
+	/** the material type for dropped items/blocks */
 	private Material materialType;
+
+	/** The height of the current bob */
 	private int bobTimer;
 
-	public EntityDropParticleFX(World var1, double var2, double var4, double var6, Material var8) {
-		super(var1, var2, var4, var6, 0.0D, 0.0D, 0.0D);
+	public EntityDropParticleFX(World par1World, double par2, double par4, double par6, Material par8Material) {
+		super(par1World, par2, par4, par6, 0.0D, 0.0D, 0.0D);
 		this.motionX = this.motionY = this.motionZ = 0.0D;
-		if(var8 == Material.water) {
-			this.particleRed = 0.0F;
-			this.particleGreen = 0.0F;
-			this.particleBlue = 1.0F;
+
+		if (par8Material == Material.water) {
+			// MCPatcher Start
+			if (ColorizeBlock.computeWaterColor(this.posX, this.posY, this.posZ)) {
+				this.particleRed = ColorizeBlock.waterColor[0];
+				this.particleGreen = ColorizeBlock.waterColor[1];
+				this.particleBlue = ColorizeBlock.waterColor[2];
+			} else {
+				this.particleRed = 0.2F;
+				this.particleGreen = 0.3F;
+				this.particleBlue = 1.0F;
+			}
+			// MCPatcher End
 		} else {
 			this.particleRed = 1.0F;
 			this.particleGreen = 0.0F;
@@ -20,36 +39,48 @@
 		this.setParticleTextureIndex(113);
 		this.setSize(0.01F, 0.01F);
 		this.particleGravity = 0.06F;
-		this.materialType = var8;
+		this.materialType = par8Material;
 		this.bobTimer = 40;
 		this.particleMaxAge = (int)(64.0D / (Math.random() * 0.8D + 0.2D));
 		this.motionX = this.motionY = this.motionZ = 0.0D;
 	}
 
-	public int getBrightnessForRender(float var1) {
-		return this.materialType == Material.water ? super.getBrightnessForRender(var1) : 257;
-	}
-
-	public float getBrightness(float var1) {
-		return this.materialType == Material.water ? super.getBrightness(var1) : 1.0F;
-	}
-
+	public int getBrightnessForRender(float par1) {
+		return this.materialType == Material.water ? super.getBrightnessForRender(par1) : 257;
+	}
+
+	/**
+	 * Gets how bright this entity is.
+	 */
+	public float getBrightness(float par1) {
+		return this.materialType == Material.water ? super.getBrightness(par1) : 1.0F;
+	}
+
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		this.prevPosX = this.posX;
 		this.prevPosY = this.posY;
 		this.prevPosZ = this.posZ;
-		if(this.materialType == Material.water) {
-			this.particleRed = 0.2F;
-			this.particleGreen = 0.3F;
-			this.particleBlue = 1.0F;
-		} else {
-			this.particleRed = 1.0F;
-			this.particleGreen = 16.0F / (float)(40 - this.bobTimer + 16);
-			this.particleBlue = 4.0F / (float)(40 - this.bobTimer + 8);
+
+		// MCPatcher Start
+		if (this.materialType != Material.water) {
+			if (ColorizeEntity.computeLavaDropColor(40 - this.bobTimer)) {
+				this.particleRed = Colorizer.setColor[0];
+				this.particleGreen = Colorizer.setColor[1];
+				this.particleBlue = Colorizer.setColor[2];
+			} else {
+				this.particleRed = 1.0F;
+				this.particleGreen = 16.0F / (float)(40 - this.bobTimer + 16);
+				this.particleBlue = 4.0F / (float)(40 - this.bobTimer + 8);
+			}
+		// MCPatcher End
 		}
 
 		this.motionY -= (double)this.particleGravity;
-		if(this.bobTimer-- > 0) {
+
+		if (this.bobTimer-- > 0) {
 			this.motionX *= 0.02D;
 			this.motionY *= 0.02D;
 			this.motionZ *= 0.02D;
@@ -59,32 +90,34 @@
 		}
 
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
-		this.motionX *= (double)0.98F;
-		this.motionY *= (double)0.98F;
-		this.motionZ *= (double)0.98F;
-		if(this.particleMaxAge-- <= 0) {
+		this.motionX *= 0.9800000190734863D;
+		this.motionY *= 0.9800000190734863D;
+		this.motionZ *= 0.9800000190734863D;
+
+		if (this.particleMaxAge-- <= 0) {
 			this.setDead();
 		}
 
-		if(this.onGround) {
-			if(this.materialType == Material.water) {
+		if (this.onGround) {
+			if (this.materialType == Material.water) {
 				this.setDead();
 				this.worldObj.spawnParticle("splash", this.posX, this.posY, this.posZ, 0.0D, 0.0D, 0.0D);
 			} else {
 				this.setParticleTextureIndex(114);
 			}
 
-			this.motionX *= (double)0.7F;
-			this.motionZ *= (double)0.7F;
+			this.motionX *= 0.699999988079071D;
+			this.motionZ *= 0.699999988079071D;
 		}
 
 		Material var1 = this.worldObj.getBlockMaterial(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ));
-		if(var1.isLiquid() || var1.isSolid()) {
+
+		if (var1.isLiquid() || var1.isSolid()) {
 			double var2 = (double)((float)(MathHelper.floor_double(this.posY) + 1) - BlockFluid.getFluidHeightPercent(this.worldObj.getBlockMetadata(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))));
-			if(this.posY < var2) {
+
+			if (this.posY < var2) {
 				this.setDead();
 			}
 		}
-
 	}
 }
