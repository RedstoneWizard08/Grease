--- net/minecraft/src/EntityFallingSand.java
+++ net/minecraft/src/EntityFallingSand.java
@@ -6,74 +6,91 @@
 public class EntityFallingSand extends Entity {
 	public int blockID;
 	public int metadata;
+
+	/** How long the block has been falling for. */
 	public int fallTime;
 	public boolean shouldDropItem;
 	private boolean isBreakingAnvil;
 	private boolean isAnvil;
+
+	/** Maximum amount of damage dealt to entities hit by falling block */
 	private int fallHurtMax;
+
+	/** Actual damage dealt to entities hit by falling block */
 	private float fallHurtAmount;
 	public NBTTagCompound fallingBlockTileEntityData;
 
-	public EntityFallingSand(World var1) {
-		super(var1);
-		this.shouldDropItem = true;
-		this.fallHurtMax = 40;
-		this.fallHurtAmount = 2.0F;
-	}
-
-	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8) {
-		this(var1, var2, var4, var6, var8, 0);
-	}
-
-	public EntityFallingSand(World var1, double var2, double var4, double var6, int var8, int var9) {
-		super(var1);
-		this.shouldDropItem = true;
-		this.fallHurtMax = 40;
-		this.fallHurtAmount = 2.0F;
-		this.blockID = var8;
-		this.metadata = var9;
+	public EntityFallingSand(World par1World) {
+		super(par1World);
+		this.shouldDropItem = true;
+		this.fallHurtMax = 40;
+		this.fallHurtAmount = 2.0F;
+	}
+
+	public EntityFallingSand(World par1World, double par2, double par4, double par6, int par8) {
+		this(par1World, par2, par4, par6, par8, 0);
+	}
+
+	public EntityFallingSand(World par1World, double par2, double par4, double par6, int par8, int par9) {
+		super(par1World);
+		this.shouldDropItem = true;
+		this.fallHurtMax = 40;
+		this.fallHurtAmount = 2.0F;
+		this.blockID = par8;
+		this.metadata = par9;
 		this.preventEntitySpawning = true;
 		this.setSize(0.98F, 0.98F);
 		this.yOffset = this.height / 2.0F;
-		this.setPosition(var2, var4, var6);
+		this.setPosition(par2, par4, par6);
 		this.motionX = 0.0D;
 		this.motionY = 0.0D;
 		this.motionZ = 0.0D;
-		this.prevPosX = var2;
-		this.prevPosY = var4;
-		this.prevPosZ = var6;
+		this.prevPosX = par2;
+		this.prevPosY = par4;
+		this.prevPosZ = par6;
 	}
 
+	/**
+	 * returns if this entity triggers Block.onEntityWalking on the blocks they walk on. used for spiders and wolves to
+	 * prevent them from trampling crops
+	 */
 	protected boolean canTriggerWalking() {
 		return false;
 	}
 
-	protected void entityInit() {
-	}
+	protected void entityInit() {}
 
+	/**
+	 * Returns true if other Entities should be prevented from moving through this Entity.
+	 */
 	public boolean canBeCollidedWith() {
 		return !this.isDead;
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
-		if(this.blockID == 0) {
+		if (this.blockID == 0) {
 			this.setDead();
 		} else {
 			this.prevPosX = this.posX;
 			this.prevPosY = this.posY;
 			this.prevPosZ = this.posZ;
 			++this.fallTime;
-			this.motionY -= (double)0.04F;
+			this.motionY -= 0.03999999910593033D;
 			this.moveEntity(this.motionX, this.motionY, this.motionZ);
-			this.motionX *= (double)0.98F;
-			this.motionY *= (double)0.98F;
-			this.motionZ *= (double)0.98F;
-			if(!this.worldObj.isRemote) {
+			this.motionX *= 0.9800000190734863D;
+			this.motionY *= 0.9800000190734863D;
+			this.motionZ *= 0.9800000190734863D;
+
+			if (!this.worldObj.isRemote) {
 				int var1 = MathHelper.floor_double(this.posX);
 				int var2 = MathHelper.floor_double(this.posY);
 				int var3 = MathHelper.floor_double(this.posZ);
-				if(this.fallTime == 1) {
-					if(this.worldObj.getBlockId(var1, var2, var3) != this.blockID) {
+
+				if (this.fallTime == 1) {
+					if (this.worldObj.getBlockId(var1, var2, var3) != this.blockID) {
 						this.setDead();
 						return;
 					}
@@ -81,27 +98,31 @@
 					this.worldObj.setBlockToAir(var1, var2, var3);
 				}
 
-				if(this.onGround) {
-					this.motionX *= (double)0.7F;
-					this.motionZ *= (double)0.7F;
+				if (this.onGround) {
+					this.motionX *= 0.699999988079071D;
+					this.motionZ *= 0.699999988079071D;
 					this.motionY *= -0.5D;
-					if(this.worldObj.getBlockId(var1, var2, var3) != Block.pistonMoving.blockID) {
+
+					if (this.worldObj.getBlockId(var1, var2, var3) != Block.pistonMoving.blockID) {
 						this.setDead();
-						if(!this.isBreakingAnvil && this.worldObj.canPlaceEntityOnSide(this.blockID, var1, var2, var3, true, 1, (Entity)null, (ItemStack)null) && !BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) && this.worldObj.setBlock(var1, var2, var3, this.blockID, this.metadata, 3)) {
-							if(Block.blocksList[this.blockID] instanceof BlockSand) {
+
+						if (!this.isBreakingAnvil && this.worldObj.canPlaceEntityOnSide(this.blockID, var1, var2, var3, true, 1, (Entity)null, (ItemStack)null) && !BlockSand.canFallBelow(this.worldObj, var1, var2 - 1, var3) && this.worldObj.setBlock(var1, var2, var3, this.blockID, this.metadata, 3)) {
+							if (Block.blocksList[this.blockID] instanceof BlockSand) {
 								((BlockSand)Block.blocksList[this.blockID]).onFinishFalling(this.worldObj, var1, var2, var3, this.metadata);
 							}
 
-							if(this.fallingBlockTileEntityData != null && Block.blocksList[this.blockID] instanceof ITileEntityProvider) {
+							if (this.fallingBlockTileEntityData != null && Block.blocksList[this.blockID] instanceof ITileEntityProvider) {
 								TileEntity var4 = this.worldObj.getBlockTileEntity(var1, var2, var3);
-								if(var4 != null) {
+
+								if (var4 != null) {
 									NBTTagCompound var5 = new NBTTagCompound();
 									var4.writeToNBT(var5);
 									Iterator var6 = this.fallingBlockTileEntityData.getTags().iterator();
 
-									while(var6.hasNext()) {
+									while (var6.hasNext()) {
 										NBTBase var7 = (NBTBase)var6.next();
-										if(!var7.getName().equals("x") && !var7.getName().equals("y") && !var7.getName().equals("z")) {
+
+										if (!var7.getName().equals("x") && !var7.getName().equals("y") && !var7.getName().equals("z")) {
 											var5.setTag(var7.getName(), var7.copy());
 										}
 									}
@@ -110,40 +131,44 @@
 									var4.onInventoryChanged();
 								}
 							}
-						} else if(this.shouldDropItem && !this.isBreakingAnvil) {
+						} else if (this.shouldDropItem && !this.isBreakingAnvil) {
 							this.entityDropItem(new ItemStack(this.blockID, 1, Block.blocksList[this.blockID].damageDropped(this.metadata)), 0.0F);
 						}
 					}
-				} else if(this.fallTime > 100 && !this.worldObj.isRemote && (var2 < 1 || var2 > 256) || this.fallTime > 600) {
-					if(this.shouldDropItem) {
+				} else if (this.fallTime > 100 && !this.worldObj.isRemote && (var2 < 1 || var2 > 256) || this.fallTime > 600) {
+					if (this.shouldDropItem) {
 						this.entityDropItem(new ItemStack(this.blockID, 1, Block.blocksList[this.blockID].damageDropped(this.metadata)), 0.0F);
 					}
 
 					this.setDead();
 				}
 			}
-
 		}
 	}
 
-	protected void fall(float var1) {
-		if(this.isAnvil) {
-			int var2 = MathHelper.ceiling_float_int(var1 - 1.0F);
-			if(var2 > 0) {
+	/**
+	 * Called when the mob is falling. Calculates and applies fall damage.
+	 */
+	protected void fall(float par1) {
+		if (this.isAnvil) {
+			int var2 = MathHelper.ceiling_float_int(par1 - 1.0F);
+
+			if (var2 > 0) {
 				ArrayList var3 = new ArrayList(this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox));
 				DamageSource var4 = this.blockID == Block.anvil.blockID ? DamageSource.anvil : DamageSource.fallingBlock;
 				Iterator var5 = var3.iterator();
 
-				while(var5.hasNext()) {
+				while (var5.hasNext()) {
 					Entity var6 = (Entity)var5.next();
 					var6.attackEntityFrom(var4, (float)Math.min(MathHelper.floor_float((float)var2 * this.fallHurtAmount), this.fallHurtMax));
 				}
 
-				if(this.blockID == Block.anvil.blockID && (double)this.ab.nextFloat() < (double)0.05F + (double)var2 * 0.05D) {
+				if (this.blockID == Block.anvil.blockID && (double)this.rand.nextFloat() < 0.05000000074505806D + (double)var2 * 0.05D) {
 					int var7 = this.metadata >> 2;
 					int var8 = this.metadata & 3;
 					++var7;
-					if(var7 > 2) {
+
+					if (var7 > 2) {
 						this.isBreakingAnvil = true;
 					} else {
 						this.metadata = var8 | var7 << 2;
@@ -151,53 +176,58 @@
 				}
 			}
 		}
-
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Tile", (byte)this.blockID);
-		var1.setInteger("TileID", this.blockID);
-		var1.setByte("Data", (byte)this.metadata);
-		var1.setByte("Time", (byte)this.fallTime);
-		var1.setBoolean("DropItem", this.shouldDropItem);
-		var1.setBoolean("HurtEntities", this.isAnvil);
-		var1.setFloat("FallHurtAmount", this.fallHurtAmount);
-		var1.setInteger("FallHurtMax", this.fallHurtMax);
-		if(this.fallingBlockTileEntityData != null) {
-			var1.setCompoundTag("TileEntityData", this.fallingBlockTileEntityData);
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	protected void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setByte("Tile", (byte)this.blockID);
+		par1NBTTagCompound.setInteger("TileID", this.blockID);
+		par1NBTTagCompound.setByte("Data", (byte)this.metadata);
+		par1NBTTagCompound.setByte("Time", (byte)this.fallTime);
+		par1NBTTagCompound.setBoolean("DropItem", this.shouldDropItem);
+		par1NBTTagCompound.setBoolean("HurtEntities", this.isAnvil);
+		par1NBTTagCompound.setFloat("FallHurtAmount", this.fallHurtAmount);
+		par1NBTTagCompound.setInteger("FallHurtMax", this.fallHurtMax);
+
+		if (this.fallingBlockTileEntityData != null) {
+			par1NBTTagCompound.setCompoundTag("TileEntityData", this.fallingBlockTileEntityData);
 		}
-
 	}
 
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		if(var1.hasKey("TileID")) {
-			this.blockID = var1.getInteger("TileID");
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	protected void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		if (par1NBTTagCompound.hasKey("TileID")) {
+			this.blockID = par1NBTTagCompound.getInteger("TileID");
 		} else {
-			this.blockID = var1.getByte("Tile") & 255;
+			this.blockID = par1NBTTagCompound.getByte("Tile") & 255;
 		}
 
-		this.metadata = var1.getByte("Data") & 255;
-		this.fallTime = var1.getByte("Time") & 255;
-		if(var1.hasKey("HurtEntities")) {
-			this.isAnvil = var1.getBoolean("HurtEntities");
-			this.fallHurtAmount = var1.getFloat("FallHurtAmount");
-			this.fallHurtMax = var1.getInteger("FallHurtMax");
-		} else if(this.blockID == Block.anvil.blockID) {
+		this.metadata = par1NBTTagCompound.getByte("Data") & 255;
+		this.fallTime = par1NBTTagCompound.getByte("Time") & 255;
+
+		if (par1NBTTagCompound.hasKey("HurtEntities")) {
+			this.isAnvil = par1NBTTagCompound.getBoolean("HurtEntities");
+			this.fallHurtAmount = par1NBTTagCompound.getFloat("FallHurtAmount");
+			this.fallHurtMax = par1NBTTagCompound.getInteger("FallHurtMax");
+		} else if (this.blockID == Block.anvil.blockID) {
 			this.isAnvil = true;
 		}
 
-		if(var1.hasKey("DropItem")) {
-			this.shouldDropItem = var1.getBoolean("DropItem");
-		}
-
-		if(var1.hasKey("TileEntityData")) {
-			this.fallingBlockTileEntityData = var1.getCompoundTag("TileEntityData");
-		}
-
-		if(this.blockID == 0) {
+		if (par1NBTTagCompound.hasKey("DropItem")) {
+			this.shouldDropItem = par1NBTTagCompound.getBoolean("DropItem");
+		}
+
+		if (par1NBTTagCompound.hasKey("TileEntityData")) {
+			this.fallingBlockTileEntityData = par1NBTTagCompound.getCompoundTag("TileEntityData");
+		}
+
+		if (this.blockID == 0) {
 			this.blockID = Block.sand.blockID;
 		}
-
 	}
 
 	public float getShadowSize() {
@@ -208,17 +238,20 @@
 		return this.worldObj;
 	}
 
-	public void setIsAnvil(boolean var1) {
-		this.isAnvil = var1;
+	public void setIsAnvil(boolean par1) {
+		this.isAnvil = par1;
 	}
 
+	/**
+	 * Return whether this entity should be rendered as on fire.
+	 */
 	public boolean canRenderOnFire() {
 		return false;
 	}
 
-	public void addEntityCrashInfo(CrashReportCategory var1) {
-		super.addEntityCrashInfo(var1);
-		var1.addCrashSection("Immitating block ID", Integer.valueOf(this.blockID));
-		var1.addCrashSection("Immitating block data", Integer.valueOf(this.metadata));
+	public void addEntityCrashInfo(CrashReportCategory par1CrashReportCategory) {
+		super.addEntityCrashInfo(par1CrashReportCategory);
+		par1CrashReportCategory.addCrashSection("Immitating block ID", Integer.valueOf(this.blockID));
+		par1CrashReportCategory.addCrashSection("Immitating block data", Integer.valueOf(this.metadata));
 	}
 }
