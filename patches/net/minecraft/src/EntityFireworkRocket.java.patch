--- net/minecraft/src/EntityFireworkRocket.java
+++ net/minecraft/src/EntityFireworkRocket.java
@@ -1,11 +1,17 @@
 package net.minecraft.src;
 
 public class EntityFireworkRocket extends Entity {
+
+	/** The age of the firework in ticks. */
 	private int fireworkAge;
+
+	/**
+	 * The lifetime of the firework in ticks. When the age reaches the lifetime the firework explodes.
+	 */
 	private int lifetime;
 
-	public EntityFireworkRocket(World var1) {
-		super(var1);
+	public EntityFireworkRocket(World par1World) {
+		super(par1World);
 		this.setSize(0.25F, 0.25F);
 	}
 
@@ -13,44 +19,56 @@
 		this.dataWatcher.addObjectByDataType(8, 5);
 	}
 
-	public boolean isInRangeToRenderDist(double var1) {
-		return var1 < 4096.0D;
+	/**
+	 * Checks if the entity is in range to render by using the past in distance and comparing it to its average edge length
+	 * * 64 * renderDistanceWeight Args: distance
+	 */
+	public boolean isInRangeToRenderDist(double par1) {
+		return par1 < 4096.0D;
 	}
 
-	public EntityFireworkRocket(World var1, double var2, double var4, double var6, ItemStack var8) {
-		super(var1);
+	public EntityFireworkRocket(World par1World, double par2, double par4, double par6, ItemStack par8ItemStack) {
+		super(par1World);
 		this.fireworkAge = 0;
 		this.setSize(0.25F, 0.25F);
-		this.setPosition(var2, var4, var6);
+		this.setPosition(par2, par4, par6);
 		this.yOffset = 0.0F;
 		int var9 = 1;
-		if(var8 != null && var8.hasTagCompound()) {
-			this.dataWatcher.updateObject(8, var8);
-			NBTTagCompound var10 = var8.getTagCompound();
+
+		if (par8ItemStack != null && par8ItemStack.hasTagCompound()) {
+			this.dataWatcher.updateObject(8, par8ItemStack);
+			NBTTagCompound var10 = par8ItemStack.getTagCompound();
 			NBTTagCompound var11 = var10.getCompoundTag("Fireworks");
-			if(var11 != null) {
+
+			if (var11 != null) {
 				var9 += var11.getByte("Flight");
 			}
 		}
 
-		this.motionX = this.ab.nextGaussian() * 0.001D;
-		this.motionZ = this.ab.nextGaussian() * 0.001D;
+		this.motionX = this.rand.nextGaussian() * 0.001D;
+		this.motionZ = this.rand.nextGaussian() * 0.001D;
 		this.motionY = 0.05D;
-		this.lifetime = 10 * var9 + this.ab.nextInt(6) + this.ab.nextInt(7);
+		this.lifetime = 10 * var9 + this.rand.nextInt(6) + this.rand.nextInt(7);
 	}
 
-	public void setVelocity(double var1, double var3, double var5) {
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		if(this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
-			float var7 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-			this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-			this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var7) * 180.0D / (double)((float)Math.PI));
+	/**
+	 * Sets the velocity to the args. Args: x, y, z
+	 */
+	public void setVelocity(double par1, double par3, double par5) {
+		this.motionX = par1;
+		this.motionY = par3;
+		this.motionZ = par5;
+
+		if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
+			float var7 = MathHelper.sqrt_double(par1 * par1 + par5 * par5);
+			this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(par1, par5) * 180.0D / Math.PI);
+			this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(par3, (double)var7) * 180.0D / Math.PI);
 		}
-
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		this.lastTickPosX = this.posX;
 		this.lastTickPosY = this.posY;
@@ -61,92 +79,108 @@
 		this.motionY += 0.04D;
 		this.moveEntity(this.motionX, this.motionY, this.motionZ);
 		float var1 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var1) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for (this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var1) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+			;
 		}
 
-		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+		while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
 			this.prevRotationPitch += 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
 			this.prevRotationYaw -= 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
 			this.prevRotationYaw += 360.0F;
 		}
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		if(this.fireworkAge == 0) {
+
+		if (this.fireworkAge == 0) {
 			this.worldObj.playSoundAtEntity(this, "fireworks.launch", 3.0F, 1.0F);
 		}
 
 		++this.fireworkAge;
-		if(this.worldObj.isRemote && this.fireworkAge % 2 < 2) {
-			this.worldObj.spawnParticle("fireworksSpark", this.posX, this.posY - 0.3D, this.posZ, this.ab.nextGaussian() * 0.05D, -this.motionY * 0.5D, this.ab.nextGaussian() * 0.05D);
+
+		if (this.worldObj.isRemote && this.fireworkAge % 2 < 2) {
+			this.worldObj.spawnParticle("fireworksSpark", this.posX, this.posY - 0.3D, this.posZ, this.rand.nextGaussian() * 0.05D, -this.motionY * 0.5D, this.rand.nextGaussian() * 0.05D);
 		}
 
-		if(!this.worldObj.isRemote && this.fireworkAge > this.lifetime) {
+		if (!this.worldObj.isRemote && this.fireworkAge > this.lifetime) {
 			this.worldObj.setEntityState(this, (byte)17);
 			this.setDead();
 		}
-
 	}
 
-	public void handleHealthUpdate(byte var1) {
-		if(var1 == 17 && this.worldObj.isRemote) {
+	public void handleHealthUpdate(byte par1) {
+		if (par1 == 17 && this.worldObj.isRemote) {
 			ItemStack var2 = this.dataWatcher.getWatchableObjectItemStack(8);
 			NBTTagCompound var3 = null;
-			if(var2 != null && var2.hasTagCompound()) {
+
+			if (var2 != null && var2.hasTagCompound()) {
 				var3 = var2.getTagCompound().getCompoundTag("Fireworks");
 			}
 
 			this.worldObj.func_92088_a(this.posX, this.posY, this.posZ, this.motionX, this.motionY, this.motionZ, var3);
 		}
 
-		super.handleHealthUpdate(var1);
+		super.handleHealthUpdate(par1);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setInteger("Life", this.fireworkAge);
-		var1.setInteger("LifeTime", this.lifetime);
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setInteger("Life", this.fireworkAge);
+		par1NBTTagCompound.setInteger("LifeTime", this.lifetime);
 		ItemStack var2 = this.dataWatcher.getWatchableObjectItemStack(8);
-		if(var2 != null) {
+
+		if (var2 != null) {
 			NBTTagCompound var3 = new NBTTagCompound();
 			var2.writeToNBT(var3);
-			var1.setCompoundTag("FireworksItem", var3);
+			par1NBTTagCompound.setCompoundTag("FireworksItem", var3);
 		}
-
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.fireworkAge = var1.getInteger("Life");
-		this.lifetime = var1.getInteger("LifeTime");
-		NBTTagCompound var2 = var1.getCompoundTag("FireworksItem");
-		if(var2 != null) {
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		this.fireworkAge = par1NBTTagCompound.getInteger("Life");
+		this.lifetime = par1NBTTagCompound.getInteger("LifeTime");
+		NBTTagCompound var2 = par1NBTTagCompound.getCompoundTag("FireworksItem");
+
+		if (var2 != null) {
 			ItemStack var3 = ItemStack.loadItemStackFromNBT(var2);
-			if(var3 != null) {
+
+			if (var3 != null) {
 				this.dataWatcher.updateObject(8, var3);
 			}
 		}
-
 	}
 
 	public float getShadowSize() {
 		return 0.0F;
 	}
 
-	public float getBrightness(float var1) {
-		return super.getBrightness(var1);
-	}
-
-	public int getBrightnessForRender(float var1) {
-		return super.getBrightnessForRender(var1);
-	}
-
+	/**
+	 * Gets how bright this entity is.
+	 */
+	public float getBrightness(float par1) {
+		return super.getBrightness(par1);
+	}
+
+	public int getBrightnessForRender(float par1) {
+		return super.getBrightnessForRender(par1);
+	}
+
+	/**
+	 * If returns false, the item will not inflict any damage against entities.
+	 */
 	public boolean canAttackWithItem() {
 		return false;
 	}
