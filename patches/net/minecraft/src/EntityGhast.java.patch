--- net/minecraft/src/EntityGhast.java
+++ net/minecraft/src/EntityGhast.java
@@ -1,18 +1,26 @@
 package net.minecraft.src;
 
+//Spout Start
+import org.spoutcraft.api.entity.EntitySkinType;
+//Spout End
+
 public class EntityGhast extends EntityFlying implements IMob {
 	public int courseChangeCooldown;
 	public double waypointX;
 	public double waypointY;
 	public double waypointZ;
 	private Entity targetedEntity;
+
+	/** Cooldown time between target loss and new target aquirement. */
 	private int aggroCooldown;
 	public int prevAttackCounter;
 	public int attackCounter;
+
+	/** The explosion radius of spawned fireballs. */
 	private int explosionStrength = 1;
 
-	public EntityGhast(World var1) {
-		super(var1);
+	public EntityGhast(World par1World) {
+		super(par1World);	
 		this.setSize(4.0F, 4.0F);
 		this.isImmuneToFire = true;
 		this.experienceValue = 5;
@@ -21,16 +29,19 @@
 	public boolean func_110182_bF() {
 		return this.dataWatcher.getWatchableObjectByte(16) != 0;
 	}
-
-	public boolean attackEntityFrom(DamageSource var1, float var2) {
-		if(this.isEntityInvulnerable()) {
+	
+	/**
+	 * Called when the entity is attacked.
+	 */
+	public boolean attackEntityFrom(DamageSource par1DamageSource, float par2) {
+		if (this.isEntityInvulnerable()) {
 			return false;
-		} else if("fireball".equals(var1.getDamageType()) && var1.getEntity() instanceof EntityPlayer) {
-			super.attackEntityFrom(var1, 1000.0F);
-			((EntityPlayer)var1.getEntity()).triggerAchievement(AchievementList.ghast);
+		} else if ("fireball".equals(par1DamageSource.getDamageType()) && par1DamageSource.getEntity() instanceof EntityPlayer) {
+			super.attackEntityFrom(par1DamageSource, 1000.0F);
+			((EntityPlayer)par1DamageSource.getEntity()).triggerAchievement(AchievementList.ghast);
 			return true;
 		} else {
-			return super.attackEntityFrom(var1, var2);
+			return super.attackEntityFrom(par1DamageSource, par2);
 		}
 	}
 
@@ -44,8 +55,21 @@
 		this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(10.0D);
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
+	
+	public void onUpdate() {
+		super.onUpdate();
+		byte var1 = this.dataWatcher.getWatchableObjectByte(16);
+		this.texture = var1 == 1 ? "/mob/ghast_fire.png" : "/mob/ghast.png";
+		// Spout Start
+		setTextureToRender((byte) (var1 == 1 ? EntitySkinType.GHAST_MOUTH.getId() : 0));
+		// Spout End
+	}
+
 	protected void updateEntityActionState() {
-		if(!this.worldObj.isRemote && this.worldObj.difficultySetting == 0) {
+		if (!this.worldObj.isRemote && this.worldObj.difficultySetting == 0) {
 			this.setDead();
 		}
 
@@ -55,16 +79,18 @@
 		double var3 = this.waypointY - this.posY;
 		double var5 = this.waypointZ - this.posZ;
 		double var7 = var1 * var1 + var3 * var3 + var5 * var5;
-		if(var7 < 1.0D || var7 > 3600.0D) {
-			this.waypointX = this.posX + (double)((this.ab.nextFloat() * 2.0F - 1.0F) * 16.0F);
-			this.waypointY = this.posY + (double)((this.ab.nextFloat() * 2.0F - 1.0F) * 16.0F);
-			this.waypointZ = this.posZ + (double)((this.ab.nextFloat() * 2.0F - 1.0F) * 16.0F);
+
+		if (var7 < 1.0D || var7 > 3600.0D) {
+			this.waypointX = this.posX + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
+			this.waypointY = this.posY + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
+			this.waypointZ = this.posZ + (double)((this.rand.nextFloat() * 2.0F - 1.0F) * 16.0F);
 		}
 
-		if(this.courseChangeCooldown-- <= 0) {
-			this.courseChangeCooldown += this.ab.nextInt(5) + 2;
+		if (this.courseChangeCooldown-- <= 0) {
+			this.courseChangeCooldown += this.rand.nextInt(5) + 2;
 			var7 = (double)MathHelper.sqrt_double(var7);
-			if(this.isCourseTraversable(this.waypointX, this.waypointY, this.waypointZ, var7)) {
+
+			if (this.isCourseTraversable(this.waypointX, this.waypointY, this.waypointZ, var7)) {
 				this.motionX += var1 / var7 * 0.1D;
 				this.motionY += var3 / var7 * 0.1D;
 				this.motionZ += var5 / var7 * 0.1D;
@@ -75,30 +101,34 @@
 			}
 		}
 
-		if(this.targetedEntity != null && this.targetedEntity.isDead) {
+		if (this.targetedEntity != null && this.targetedEntity.isDead) {
 			this.targetedEntity = null;
 		}
 
-		if(this.targetedEntity == null || this.aggroCooldown-- <= 0) {
+		if (this.targetedEntity == null || this.aggroCooldown-- <= 0) {
 			this.targetedEntity = this.worldObj.getClosestVulnerablePlayerToEntity(this, 100.0D);
-			if(this.targetedEntity != null) {
+
+			if (this.targetedEntity != null) {
 				this.aggroCooldown = 20;
 			}
 		}
 
 		double var9 = 64.0D;
-		if(this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < var9 * var9) {
+
+		if (this.targetedEntity != null && this.targetedEntity.getDistanceSqToEntity(this) < var9 * var9) {
 			double var11 = this.targetedEntity.posX - this.posX;
 			double var13 = this.targetedEntity.boundingBox.minY + (double)(this.targetedEntity.height / 2.0F) - (this.posY + (double)(this.height / 2.0F));
 			double var15 = this.targetedEntity.posZ - this.posZ;
 			this.renderYawOffset = this.rotationYaw = -((float)Math.atan2(var11, var15)) * 180.0F / (float)Math.PI;
-			if(this.canEntityBeSeen(this.targetedEntity)) {
-				if(this.attackCounter == 10) {
+
+			if (this.canEntityBeSeen(this.targetedEntity)) {
+				if (this.attackCounter == 10) {
 					this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1007, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
 				}
 
 				++this.attackCounter;
-				if(this.attackCounter == 20) {
+
+				if (this.attackCounter == 20) {
 					this.worldObj.playAuxSFXAtEntity((EntityPlayer)null, 1008, (int)this.posX, (int)this.posY, (int)this.posZ, 0);
 					EntityLargeFireball var17 = new EntityLargeFireball(this.worldObj, this, var11, var13, var15);
 					var17.field_92057_e = this.explosionStrength;
@@ -110,35 +140,40 @@
 					this.worldObj.spawnEntityInWorld(var17);
 					this.attackCounter = -40;
 				}
-			} else if(this.attackCounter > 0) {
+			} else if (this.attackCounter > 0) {
 				--this.attackCounter;
 			}
 		} else {
 			this.renderYawOffset = this.rotationYaw = -((float)Math.atan2(this.motionX, this.motionZ)) * 180.0F / (float)Math.PI;
-			if(this.attackCounter > 0) {
+
+			if (this.attackCounter > 0) {
 				--this.attackCounter;
 			}
 		}
 
-		if(!this.worldObj.isRemote) {
+		if (!this.worldObj.isRemote) {
 			byte var21 = this.dataWatcher.getWatchableObjectByte(16);
 			byte var12 = (byte)(this.attackCounter > 10 ? 1 : 0);
-			if(var21 != var12) {
+
+			if (var21 != var12) {
 				this.dataWatcher.updateObject(16, Byte.valueOf(var12));
 			}
 		}
-
 	}
 
-	private boolean isCourseTraversable(double var1, double var3, double var5, double var7) {
-		double var9 = (this.waypointX - this.posX) / var7;
-		double var11 = (this.waypointY - this.posY) / var7;
-		double var13 = (this.waypointZ - this.posZ) / var7;
+	/**
+	 * True if the ghast has an unobstructed line of travel to the waypoint.
+	 */
+	private boolean isCourseTraversable(double par1, double par3, double par5, double par7) {
+		double var9 = (this.waypointX - this.posX) / par7;
+		double var11 = (this.waypointY - this.posY) / par7;
+		double var13 = (this.waypointZ - this.posZ) / par7;
 		AxisAlignedBB var15 = this.boundingBox.copy();
 
-		for(int var16 = 1; (double)var16 < var7; ++var16) {
+		for (int var16 = 1; (double)var16 < par7; ++var16) {
 			var15.offset(var9, var11, var13);
-			if(!this.worldObj.getCollidingBoundingBoxes(this, var15).isEmpty()) {
+
+			if (!this.worldObj.getCollidingBoundingBoxes(this, var15).isEmpty()) {
 				return false;
 			}
 		}
@@ -146,60 +181,90 @@
 		return true;
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.ghast.moan";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.ghast.scream";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.ghast.death";
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.gunpowder.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(2) + this.ab.nextInt(1 + var2);
-
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(2) + this.rand.nextInt(1 + par2);
 		int var4;
-		for(var4 = 0; var4 < var3; ++var4) {
+
+		for (var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Item.ghastTear.itemID, 1);
 		}
 
-		var3 = this.ab.nextInt(3) + this.ab.nextInt(1 + var2);
+		var3 = this.rand.nextInt(3) + this.rand.nextInt(1 + par2);
 
-		for(var4 = 0; var4 < var3; ++var4) {
+		for (var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Item.gunpowder.itemID, 1);
 		}
-
 	}
 
+	/**
+	 * Returns the volume for the sounds this mob makes.
+	 */
 	protected float getSoundVolume() {
 		return 10.0F;
 	}
 
+	/**
+	 * Checks if the entity's current position is a valid location to spawn this entity.
+	 */
 	public boolean getCanSpawnHere() {
-		return this.ab.nextInt(20) == 0 && super.getCanSpawnHere() && this.worldObj.difficultySetting > 0;
+		return this.rand.nextInt(20) == 0 && super.getCanSpawnHere() && this.worldObj.difficultySetting > 0;
 	}
 
+	/**
+	 * Will return how many at most can spawn in a chunk at once.
+	 */
 	public int getMaxSpawnedInChunk() {
 		return 1;
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("ExplosionPower", this.explosionStrength);
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setInteger("ExplosionPower", this.explosionStrength);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		if(var1.hasKey("ExplosionPower")) {
-			this.explosionStrength = var1.getInteger("ExplosionPower");
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+
+		if (par1NBTTagCompound.hasKey("ExplosionPower")) {
+			this.explosionStrength = par1NBTTagCompound.getInteger("ExplosionPower");
 		}
-
 	}
 }
