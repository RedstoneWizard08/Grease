--- net/minecraft/src/EntityHanging.java
+++ net/minecraft/src/EntityHanging.java
@@ -10,33 +10,33 @@
 	public int yPosition;
 	public int zPosition;
 
-	public EntityHanging(World var1) {
-		super(var1);
+	public EntityHanging(World par1World) {
+		super(par1World);
 		this.yOffset = 0.0F;
 		this.setSize(0.5F, 0.5F);
 	}
 
-	public EntityHanging(World var1, int var2, int var3, int var4, int var5) {
-		this(var1);
-		this.xPosition = var2;
-		this.yPosition = var3;
-		this.zPosition = var4;
-	}
-
-	protected void entityInit() {
-	}
-
-	public void setDirection(int var1) {
-		this.hangingDirection = var1;
-		this.prevRotationYaw = this.rotationYaw = (float)(var1 * 90);
+	public EntityHanging(World par1World, int par2, int par3, int par4, int par5) {
+		this(par1World);
+		this.xPosition = par2;
+		this.yPosition = par3;
+		this.zPosition = par4;
+	}
+
+	protected void entityInit() {}
+
+	public void setDirection(int par1) {
+		this.hangingDirection = par1;
+		this.prevRotationYaw = this.rotationYaw = (float)(par1 * 90);
 		float var2 = (float)this.getWidthPixels();
 		float var3 = (float)this.getHeightPixels();
 		float var4 = (float)this.getWidthPixels();
-		if(var1 != 2 && var1 != 0) {
+
+		if (par1 != 2 && par1 != 0) {
 			var2 = 0.5F;
 		} else {
 			var4 = 0.5F;
-			this.rotationYaw = this.prevRotationYaw = (float)(Direction.rotateOpposite[var1] * 90);
+			this.rotationYaw = this.prevRotationYaw = (float)(Direction.rotateOpposite[par1] * 90);
 		}
 
 		var2 /= 32.0F;
@@ -45,36 +45,37 @@
 		float var5 = (float)this.xPosition + 0.5F;
 		float var6 = (float)this.yPosition + 0.5F;
 		float var7 = (float)this.zPosition + 0.5F;
-		float var8 = 9.0F / 16.0F;
-		if(var1 == 2) {
+		float var8 = 0.5625F;
+
+		if (par1 == 2) {
 			var7 -= var8;
 		}
 
-		if(var1 == 1) {
+		if (par1 == 1) {
 			var5 -= var8;
 		}
 
-		if(var1 == 0) {
+		if (par1 == 0) {
 			var7 += var8;
 		}
 
-		if(var1 == 3) {
+		if (par1 == 3) {
 			var5 += var8;
 		}
 
-		if(var1 == 2) {
+		if (par1 == 2) {
 			var5 -= this.func_70517_b(this.getWidthPixels());
 		}
 
-		if(var1 == 1) {
+		if (par1 == 1) {
 			var7 += this.func_70517_b(this.getWidthPixels());
 		}
 
-		if(var1 == 0) {
+		if (par1 == 0) {
 			var5 += this.func_70517_b(this.getWidthPixels());
 		}
 
-		if(var1 == 3) {
+		if (par1 == 3) {
 			var7 -= this.func_70517_b(this.getWidthPixels());
 		}
 
@@ -84,26 +85,33 @@
 		this.boundingBox.setBounds((double)(var5 - var2 - var9), (double)(var6 - var3 - var9), (double)(var7 - var4 - var9), (double)(var5 + var2 + var9), (double)(var6 + var3 + var9), (double)(var7 + var4 + var9));
 	}
 
-	private float func_70517_b(int var1) {
-		return var1 == 32 ? 0.5F : (var1 == 64 ? 0.5F : 0.0F);
+	private float func_70517_b(int par1) {
+		return par1 == 32 ? 0.5F : (par1 == 64 ? 0.5F : 0.0F);
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		this.prevPosX = this.posX;
 		this.prevPosY = this.posY;
 		this.prevPosZ = this.posZ;
-		if(this.tickCounter1++ == 100 && !this.worldObj.isRemote) {
+
+		if (this.tickCounter1++ == 100 && !this.worldObj.isRemote) {
 			this.tickCounter1 = 0;
-			if(!this.isDead && !this.onValidSurface()) {
+
+			if (!this.isDead && !this.onValidSurface()) {
 				this.setDead();
 				this.onBroken((Entity)null);
 			}
 		}
-
 	}
 
+	/**
+	 * checks to make sure painting can be placed there
+	 */
 	public boolean onValidSurface() {
-		if(!this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty()) {
+		if (!this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty()) {
 			return false;
 		} else {
 			int var1 = Math.max(1, this.getWidthPixels() / 16);
@@ -111,34 +119,36 @@
 			int var3 = this.xPosition;
 			int var4 = this.yPosition;
 			int var5 = this.zPosition;
-			if(this.hangingDirection == 2) {
+
+			if (this.hangingDirection == 2) {
 				var3 = MathHelper.floor_double(this.posX - (double)((float)this.getWidthPixels() / 32.0F));
 			}
 
-			if(this.hangingDirection == 1) {
+			if (this.hangingDirection == 1) {
 				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.getWidthPixels() / 32.0F));
 			}
 
-			if(this.hangingDirection == 0) {
+			if (this.hangingDirection == 0) {
 				var3 = MathHelper.floor_double(this.posX - (double)((float)this.getWidthPixels() / 32.0F));
 			}
 
-			if(this.hangingDirection == 3) {
+			if (this.hangingDirection == 3) {
 				var5 = MathHelper.floor_double(this.posZ - (double)((float)this.getWidthPixels() / 32.0F));
 			}
 
 			var4 = MathHelper.floor_double(this.posY - (double)((float)this.getHeightPixels() / 32.0F));
 
-			for(int var6 = 0; var6 < var1; ++var6) {
-				for(int var7 = 0; var7 < var2; ++var7) {
+			for (int var6 = 0; var6 < var1; ++var6) {
+				for (int var7 = 0; var7 < var2; ++var7) {
 					Material var8;
-					if(this.hangingDirection != 2 && this.hangingDirection != 0) {
+
+					if (this.hangingDirection != 2 && this.hangingDirection != 0) {
 						var8 = this.worldObj.getBlockMaterial(this.xPosition, var4 + var7, var5 + var6);
 					} else {
 						var8 = this.worldObj.getBlockMaterial(var3 + var6, var4 + var7, this.zPosition);
 					}
 
-					if(!var8.isSolid()) {
+					if (!var8.isSolid()) {
 						return false;
 					}
 				}
@@ -146,101 +156,126 @@
 
 			List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox);
 			Iterator var10 = var9.iterator();
-
 			Entity var11;
+
 			do {
-				if(!var10.hasNext()) {
+				if (!var10.hasNext()) {
 					return true;
 				}
 
 				var11 = (Entity)var10.next();
-			} while(!(var11 instanceof EntityHanging));
+			} while (!(var11 instanceof EntityHanging));
 
 			return false;
 		}
 	}
 
+	/**
+	 * Returns true if other Entities should be prevented from moving through this Entity.
+	 */
 	public boolean canBeCollidedWith() {
 		return true;
 	}
 
-	public boolean hitByEntity(Entity var1) {
-		return var1 instanceof EntityPlayer ? this.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)var1), 0.0F) : false;
+	/**
+	 * Called when a player attacks an entity. If this returns true the attack will not happen.
+	 */
+	public boolean hitByEntity(Entity par1Entity) {
+		return par1Entity instanceof EntityPlayer ? this.attackEntityFrom(DamageSource.causePlayerDamage((EntityPlayer)par1Entity), 0.0F) : false;
 	}
 
-	public boolean attackEntityFrom(DamageSource var1, float var2) {
-		if(this.isEntityInvulnerable()) {
+	/**
+	 * Called when the entity is attacked.
+	 */
+	public boolean attackEntityFrom(DamageSource par1DamageSource, float par2) {
+		if (this.isEntityInvulnerable()) {
 			return false;
 		} else {
-			if(!this.isDead && !this.worldObj.isRemote) {
+			if (!this.isDead && !this.worldObj.isRemote) {
 				this.setDead();
 				this.setBeenAttacked();
-				this.onBroken(var1.getEntity());
+				this.onBroken(par1DamageSource.getEntity());
 			}
 
 			return true;
 		}
 	}
 
-	public void moveEntity(double var1, double var3, double var5) {
-		if(!this.worldObj.isRemote && !this.isDead && var1 * var1 + var3 * var3 + var5 * var5 > 0.0D) {
-			this.setDead();
-			this.onBroken((Entity)null);
-		}
-
-	}
-
-	public void addVelocity(double var1, double var3, double var5) {
-		if(!this.worldObj.isRemote && !this.isDead && var1 * var1 + var3 * var3 + var5 * var5 > 0.0D) {
-			this.setDead();
-			this.onBroken((Entity)null);
-		}
-
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setByte("Direction", (byte)this.hangingDirection);
-		var1.setInteger("TileX", this.xPosition);
-		var1.setInteger("TileY", this.yPosition);
-		var1.setInteger("TileZ", this.zPosition);
-		switch(this.hangingDirection) {
-		case 0:
-			var1.setByte("Dir", (byte)2);
-			break;
-		case 1:
-			var1.setByte("Dir", (byte)1);
-			break;
-		case 2:
-			var1.setByte("Dir", (byte)0);
-			break;
-		case 3:
-			var1.setByte("Dir", (byte)3);
-		}
-
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		if(var1.hasKey("Direction")) {
-			this.hangingDirection = var1.getByte("Direction");
-		} else {
-			switch(var1.getByte("Dir")) {
+	/**
+	 * Tries to moves the entity by the passed in displacement. Args: x, y, z
+	 */
+	public void moveEntity(double par1, double par3, double par5) {
+		if (!this.worldObj.isRemote && !this.isDead && par1 * par1 + par3 * par3 + par5 * par5 > 0.0D) {
+			this.setDead();
+			this.onBroken((Entity)null);
+		}
+	}
+
+	/**
+	 * Adds to the current velocity of the entity. Args: x, y, z
+	 */
+	public void addVelocity(double par1, double par3, double par5) {
+		if (!this.worldObj.isRemote && !this.isDead && par1 * par1 + par3 * par3 + par5 * par5 > 0.0D) {
+			this.setDead();
+			this.onBroken((Entity)null);
+		}
+	}
+
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setByte("Direction", (byte)this.hangingDirection);
+		par1NBTTagCompound.setInteger("TileX", this.xPosition);
+		par1NBTTagCompound.setInteger("TileY", this.yPosition);
+		par1NBTTagCompound.setInteger("TileZ", this.zPosition);
+
+		switch (this.hangingDirection) {
 			case 0:
-				this.hangingDirection = 2;
+				par1NBTTagCompound.setByte("Dir", (byte)2);
 				break;
+
 			case 1:
-				this.hangingDirection = 1;
+				par1NBTTagCompound.setByte("Dir", (byte)1);
 				break;
+
 			case 2:
-				this.hangingDirection = 0;
+				par1NBTTagCompound.setByte("Dir", (byte)0);
 				break;
+
 			case 3:
-				this.hangingDirection = 3;
+				par1NBTTagCompound.setByte("Dir", (byte)3);
+		}
+	}
+
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		if (par1NBTTagCompound.hasKey("Direction")) {
+			this.hangingDirection = par1NBTTagCompound.getByte("Direction");
+		} else {
+			switch (par1NBTTagCompound.getByte("Dir")) {
+				case 0:
+					this.hangingDirection = 2;
+					break;
+
+				case 1:
+					this.hangingDirection = 1;
+					break;
+
+				case 2:
+					this.hangingDirection = 0;
+					break;
+
+				case 3:
+					this.hangingDirection = 3;
 			}
 		}
 
-		this.xPosition = var1.getInteger("TileX");
-		this.yPosition = var1.getInteger("TileY");
-		this.zPosition = var1.getInteger("TileZ");
+		this.xPosition = par1NBTTagCompound.getInteger("TileX");
+		this.yPosition = par1NBTTagCompound.getInteger("TileY");
+		this.zPosition = par1NBTTagCompound.getInteger("TileZ");
 		this.setDirection(this.hangingDirection);
 	}
 
@@ -248,6 +283,9 @@
 
 	public abstract int getHeightPixels();
 
+	/**
+	 * Called when this entity is broken. Entity parameter may be null.
+	 */
 	public abstract void onBroken(Entity var1);
 
 	protected boolean shouldSetPosAfterLoading() {
