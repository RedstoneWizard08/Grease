--- net/minecraft/src/EntityIronGolem.java
+++ net/minecraft/src/EntityIronGolem.java
@@ -1,13 +1,15 @@
 package net.minecraft.src;
 
 public class EntityIronGolem extends EntityGolem {
+
+	/** deincrements, and a distance-to-home check is done at 0 */
 	private int homeCheckTimer;
 	Village villageObj;
 	private int attackTimer;
 	private int holdRoseTick;
 
-	public EntityIronGolem(World var1) {
-		super(var1);
+	public EntityIronGolem(World par1World) {
+		super(par1World);
 		this.setSize(1.4F, 2.9F);
 		this.getNavigator().setAvoidsWater(true);
 		this.tasks.addTask(1, new EntityAIAttackOnCollide(this, 1.0D, true));
@@ -28,15 +30,22 @@
 		this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
 
+	/**
+	 * main AI tick function, replaces updateEntityActionState
+	 */
 	protected void updateAITick() {
-		if(--this.homeCheckTimer <= 0) {
-			this.homeCheckTimer = 70 + this.ab.nextInt(50);
+		if (--this.homeCheckTimer <= 0) {
+			this.homeCheckTimer = 70 + this.rand.nextInt(50);
 			this.villageObj = this.worldObj.villageCollectionObj.findNearestVillage(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ), 32);
-			if(this.villageObj == null) {
+
+			if (this.villageObj == null) {
 				this.detachHome();
 			} else {
 				ChunkCoordinates var1 = this.villageObj.getCenter();
@@ -53,76 +62,93 @@
 		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.25D);
 	}
 
-	protected int decreaseAirSupply(int var1) {
-		return var1;
+	/**
+	 * Decrements the entity's air supply when underwater
+	 */
+	protected int decreaseAirSupply(int par1) {
+		return par1;
 	}
 
-	protected void collideWithEntity(Entity var1) {
-		if(var1 instanceof IMob && this.getRNG().nextInt(20) == 0) {
-			this.setAttackTarget((EntityLivingBase)var1);
+	protected void collideWithEntity(Entity par1Entity) {
+		if (par1Entity instanceof IMob && this.getRNG().nextInt(20) == 0) {
+			this.setAttackTarget((EntityLivingBase)par1Entity);
 		}
 
-		super.collideWithEntity(var1);
+		super.collideWithEntity(par1Entity);
 	}
 
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
 		super.onLivingUpdate();
-		if(this.attackTimer > 0) {
+
+		if (this.attackTimer > 0) {
 			--this.attackTimer;
 		}
 
-		if(this.holdRoseTick > 0) {
+		if (this.holdRoseTick > 0) {
 			--this.holdRoseTick;
 		}
 
-		if(this.motionX * this.motionX + this.motionZ * this.motionZ > (double)2.5000003E-7F && this.ab.nextInt(5) == 0) {
+		if (this.motionX * this.motionX + this.motionZ * this.motionZ > 2.500000277905201E-7D && this.rand.nextInt(5) == 0) {
 			int var1 = MathHelper.floor_double(this.posX);
-			int var2 = MathHelper.floor_double(this.posY - (double)0.2F - (double)this.yOffset);
+			int var2 = MathHelper.floor_double(this.posY - 0.20000000298023224D - (double)this.yOffset);
 			int var3 = MathHelper.floor_double(this.posZ);
 			int var4 = this.worldObj.getBlockId(var1, var2, var3);
-			if(var4 > 0) {
-				this.worldObj.spawnParticle("tilecrack_" + var4 + "_" + this.worldObj.getBlockMetadata(var1, var2, var3), this.posX + ((double)this.ab.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.ab.nextFloat() - 0.5D) * (double)this.width, 4.0D * ((double)this.ab.nextFloat() - 0.5D), 0.5D, ((double)this.ab.nextFloat() - 0.5D) * 4.0D);
+
+			if (var4 > 0) {
+				this.worldObj.spawnParticle("tilecrack_" + var4 + "_" + this.worldObj.getBlockMetadata(var1, var2, var3), this.posX + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, this.boundingBox.minY + 0.1D, this.posZ + ((double)this.rand.nextFloat() - 0.5D) * (double)this.width, 4.0D * ((double)this.rand.nextFloat() - 0.5D), 0.5D, ((double)this.rand.nextFloat() - 0.5D) * 4.0D);
 			}
 		}
-
-	}
-
-	public boolean canAttackClass(Class var1) {
-		return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(var1) ? false : super.canAttackClass(var1);
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("PlayerCreated", this.isPlayerCreated());
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.setPlayerCreated(var1.getBoolean("PlayerCreated"));
-	}
-
-	public boolean attackEntityAsMob(Entity var1) {
+	}
+
+	/**
+	 * Returns true if this entity can attack entities of the specified class.
+	 */
+	public boolean canAttackClass(Class par1Class) {
+		return this.isPlayerCreated() && EntityPlayer.class.isAssignableFrom(par1Class) ? false : super.canAttackClass(par1Class);
+	}
+
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("PlayerCreated", this.isPlayerCreated());
+	}
+
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.setPlayerCreated(par1NBTTagCompound.getBoolean("PlayerCreated"));
+	}
+
+	public boolean attackEntityAsMob(Entity par1Entity) {
 		this.attackTimer = 10;
 		this.worldObj.setEntityState(this, (byte)4);
-		boolean var2 = var1.attackEntityFrom(DamageSource.causeMobDamage(this), (float)(7 + this.ab.nextInt(15)));
-		if(var2) {
-			var1.motionY += (double)0.4F;
+		boolean var2 = par1Entity.attackEntityFrom(DamageSource.causeMobDamage(this), (float)(7 + this.rand.nextInt(15)));
+
+		if (var2) {
+			par1Entity.motionY += 0.4000000059604645D;
 		}
 
 		this.playSound("mob.irongolem.throw", 1.0F, 1.0F);
 		return var2;
 	}
 
-	public void handleHealthUpdate(byte var1) {
-		if(var1 == 4) {
+	public void handleHealthUpdate(byte par1) {
+		if (par1 == 4) {
 			this.attackTimer = 10;
 			this.playSound("mob.irongolem.throw", 1.0F, 1.0F);
-		} else if(var1 == 11) {
+		} else if (par1 == 11) {
 			this.holdRoseTick = 400;
 		} else {
-			super.handleHealthUpdate(var1);
+			super.handleHealthUpdate(par1);
 		}
-
 	}
 
 	public Village getVillage() {
@@ -133,41 +159,56 @@
 		return this.attackTimer;
 	}
 
-	public void setHoldingRose(boolean var1) {
-		this.holdRoseTick = var1 ? 400 : 0;
+	public void setHoldingRose(boolean par1) {
+		this.holdRoseTick = par1 ? 400 : 0;
 		this.worldObj.setEntityState(this, (byte)11);
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "none";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.irongolem.hit";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.irongolem.death";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.irongolem.walk", 1.0F, 1.0F);
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(3);
-
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(3);
 		int var4;
-		for(var4 = 0; var4 < var3; ++var4) {
+
+		for (var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Block.plantRed.blockID, 1);
 		}
 
-		var4 = 3 + this.ab.nextInt(3);
+		var4 = 3 + this.rand.nextInt(3);
 
-		for(int var5 = 0; var5 < var4; ++var5) {
+		for (int var5 = 0; var5 < var4; ++var5) {
 			this.dropItem(Item.ingotIron.itemID, 1);
 		}
-
 	}
 
 	public int getHoldRoseTick() {
@@ -178,21 +219,24 @@
 		return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
 	}
 
-	public void setPlayerCreated(boolean var1) {
+	public void setPlayerCreated(boolean par1) {
 		byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-		if(var1) {
+
+		if (par1) {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 1)));
 		} else {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -2)));
 		}
-
 	}
 
-	public void onDeath(DamageSource var1) {
-		if(!this.isPlayerCreated() && this.attackingPlayer != null && this.villageObj != null) {
+	/**
+	 * Called when the mob's health reaches 0.
+	 */
+	public void onDeath(DamageSource par1DamageSource) {
+		if (!this.isPlayerCreated() && this.attackingPlayer != null && this.villageObj != null) {
 			this.villageObj.setReputationForPlayer(this.attackingPlayer.getCommandSenderName(), -5);
 		}
 
-		super.onDeath(var1);
+		super.onDeath(par1DamageSource);
 	}
 }
