--- net/minecraft/src/EntityItemFrame.java
+++ net/minecraft/src/EntityItemFrame.java
@@ -1,15 +1,17 @@
 package net.minecraft.src;
 
 public class EntityItemFrame extends EntityHanging {
+
+	/** Chance for this item frame's item to drop from the frame. */
 	private float itemDropChance = 1.0F;
 
-	public EntityItemFrame(World var1) {
-		super(var1);
+	public EntityItemFrame(World par1World) {
+		super(par1World);
 	}
 
-	public EntityItemFrame(World var1, int var2, int var3, int var4, int var5) {
-		super(var1, var2, var3, var4, var5);
-		this.setDirection(var5);
+	public EntityItemFrame(World par1World, int par2, int par3, int par4, int par5) {
+		super(par1World, par2, par3, par4, par5);
+		this.setDirection(par5);
 	}
 
 	protected void entityInit() {
@@ -25,39 +27,51 @@
 		return 9;
 	}
 
-	public boolean isInRangeToRenderDist(double var1) {
+	/**
+	 * Checks if the entity is in range to render by using the past in distance and comparing it to its average edge length
+	 * * 64 * renderDistanceWeight Args: distance
+	 */
+	public boolean isInRangeToRenderDist(double par1) {
 		double var3 = 16.0D;
 		var3 *= 64.0D * this.renderDistanceWeight;
-		return var1 < var3 * var3;
+		return par1 < var3 * var3;
 	}
 
-	public void onBroken(Entity var1) {
+	/**
+	 * Called when this entity is broken. Entity parameter may be null.
+	 */
+	public void onBroken(Entity par1Entity) {
 		ItemStack var2 = this.getDisplayedItem();
-		if(var1 instanceof EntityPlayer) {
-			EntityPlayer var3 = (EntityPlayer)var1;
-			if(var3.capabilities.isCreativeMode) {
+
+		if (par1Entity instanceof EntityPlayer) {
+			EntityPlayer var3 = (EntityPlayer)par1Entity;
+
+			if (var3.capabilities.isCreativeMode) {
 				this.removeFrameFromMap(var2);
 				return;
 			}
 		}
 
 		this.entityDropItem(new ItemStack(Item.itemFrame), 0.0F);
-		if(var2 != null && this.ab.nextFloat() < this.itemDropChance) {
+
+		if (var2 != null && this.rand.nextFloat() < this.itemDropChance) {
 			var2 = var2.copy();
 			this.removeFrameFromMap(var2);
 			this.entityDropItem(var2, 0.0F);
 		}
-
 	}
 
-	private void removeFrameFromMap(ItemStack var1) {
-		if(var1 != null) {
-			if(var1.itemID == Item.map.itemID) {
-				MapData var2 = ((ItemMap)var1.getItem()).getMapData(var1, this.worldObj);
-				var2.g.remove("frame-" + this.entityId);
+	/**
+	 * Removes the dot representing this frame's position from the map when the item frame is broken.
+	 */
+	private void removeFrameFromMap(ItemStack par1ItemStack) {
+		if (par1ItemStack != null) {
+			if (par1ItemStack.itemID == Item.map.itemID) {
+				MapData var2 = ((ItemMap)par1ItemStack.getItem()).getMapData(par1ItemStack, this.worldObj);
+				var2.playersVisibleOnMap.remove("frame-" + this.entityId);
 			}
 
-			var1.setItemFrame((EntityItemFrame)null);
+			par1ItemStack.setItemFrame((EntityItemFrame)null);
 		}
 	}
 
@@ -65,55 +79,71 @@
 		return this.getDataWatcher().getWatchableObjectItemStack(2);
 	}
 
-	public void setDisplayedItem(ItemStack var1) {
-		var1 = var1.copy();
-		var1.stackSize = 1;
-		var1.setItemFrame(this);
-		this.getDataWatcher().updateObject(2, var1);
+	public void setDisplayedItem(ItemStack par1ItemStack) {
+		par1ItemStack = par1ItemStack.copy();
+		par1ItemStack.stackSize = 1;
+		par1ItemStack.setItemFrame(this);
+		this.getDataWatcher().updateObject(2, par1ItemStack);
 		this.getDataWatcher().setObjectWatched(2);
 	}
 
+	/**
+	 * Return the rotation of the item currently on this frame.
+	 */
 	public int getRotation() {
 		return this.getDataWatcher().getWatchableObjectByte(3);
 	}
 
-	public void setItemRotation(int var1) {
-		this.getDataWatcher().updateObject(3, Byte.valueOf((byte)(var1 % 4)));
+	public void setItemRotation(int par1) {
+		this.getDataWatcher().updateObject(3, Byte.valueOf((byte)(par1 % 4)));
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		if(this.getDisplayedItem() != null) {
-			var1.setCompoundTag("Item", this.getDisplayedItem().writeToNBT(new NBTTagCompound()));
-			var1.setByte("ItemRotation", (byte)this.getRotation());
-			var1.setFloat("ItemDropChance", this.itemDropChance);
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		if (this.getDisplayedItem() != null) {
+			par1NBTTagCompound.setCompoundTag("Item", this.getDisplayedItem().writeToNBT(new NBTTagCompound()));
+			par1NBTTagCompound.setByte("ItemRotation", (byte)this.getRotation());
+			par1NBTTagCompound.setFloat("ItemDropChance", this.itemDropChance);
 		}
 
-		super.writeEntityToNBT(var1);
+		super.writeEntityToNBT(par1NBTTagCompound);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		NBTTagCompound var2 = var1.getCompoundTag("Item");
-		if(var2 != null && !var2.hasNoTags()) {
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		NBTTagCompound var2 = par1NBTTagCompound.getCompoundTag("Item");
+
+		if (var2 != null && !var2.hasNoTags()) {
 			this.setDisplayedItem(ItemStack.loadItemStackFromNBT(var2));
-			this.setItemRotation(var1.getByte("ItemRotation"));
-			if(var1.hasKey("ItemDropChance")) {
-				this.itemDropChance = var1.getFloat("ItemDropChance");
+			this.setItemRotation(par1NBTTagCompound.getByte("ItemRotation"));
+
+			if (par1NBTTagCompound.hasKey("ItemDropChance")) {
+				this.itemDropChance = par1NBTTagCompound.getFloat("ItemDropChance");
 			}
 		}
 
-		super.readEntityFromNBT(var1);
+		super.readEntityFromNBT(par1NBTTagCompound);
 	}
 
-	public boolean interactFirst(EntityPlayer var1) {
-		if(this.getDisplayedItem() == null) {
-			ItemStack var2 = var1.getHeldItem();
-			if(var2 != null && !this.worldObj.isRemote) {
+	/**
+	 * First layer of player interaction
+	 */
+	public boolean interactFirst(EntityPlayer par1EntityPlayer) {
+		if (this.getDisplayedItem() == null) {
+			ItemStack var2 = par1EntityPlayer.getHeldItem();
+
+			if (var2 != null && !this.worldObj.isRemote) {
 				this.setDisplayedItem(var2);
-				if(!var1.capabilities.isCreativeMode && --var2.stackSize <= 0) {
-					var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+
+				if (!par1EntityPlayer.capabilities.isCreativeMode && --var2.stackSize <= 0) {
+					par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, (ItemStack)null);
 				}
 			}
-		} else if(!this.worldObj.isRemote) {
+		} else if (!this.worldObj.isRemote) {
 			this.setItemRotation(this.getRotation() + 1);
 		}
 
