--- net/minecraft/src/EntityLiving.java
+++ net/minecraft/src/EntityLiving.java
@@ -5,43 +5,63 @@
 import java.util.UUID;
 
 public abstract class EntityLiving extends EntityLivingBase {
+
+	/** Number of ticks since this EntityLiving last produced its sound */
 	public int livingSoundTime;
+
+	/** The experience points the Entity gives. */
 	protected int experienceValue;
 	private EntityLookHelper lookHelper;
 	private EntityMoveHelper moveHelper;
+
+	/** Entity jumping helper */
 	private EntityJumpHelper jumpHelper;
 	private EntityBodyHelper bodyHelper;
 	private PathNavigate navigator;
 	protected final EntityAITasks tasks;
 	protected final EntityAITasks targetTasks;
+
+	/** The active target the Task system uses for tracking */
+	//Spout Start	
 	private EntityLivingBase attackTarget;
 	private EntitySenses senses;
+
+	/** Equipment (armor and held item) for this entity. */
 	private ItemStack[] equipment = new ItemStack[5];
+
+	/** Chances for each equipment piece from dropping when this entity dies. */
 	protected float[] equipmentDropChances = new float[5];
+
+	/** Whether this entity can pick up items from the ground. */
 	private boolean canPickUpLoot;
+
+	/** Whether this entity should NOT despawn. */
 	private boolean persistenceRequired;
 	protected float defaultPitch;
+
+	/** This entity's current target. */
 	private Entity currentTarget;
+
+	/** How long to keep a specific target entity */
 	protected int numTicksToChaseTarget;
 	private boolean isLeashed;
 	private Entity leashedToEntity;
 	private NBTTagCompound field_110170_bx;
 
-	public EntityLiving(World var1) {
-		super(var1);
-		this.tasks = new EntityAITasks(var1 != null && var1.theProfiler != null ? var1.theProfiler : null);
-		this.targetTasks = new EntityAITasks(var1 != null && var1.theProfiler != null ? var1.theProfiler : null);
+	public EntityLiving(World par1World) {
+		super(par1World);
+		this.tasks = new EntityAITasks(par1World != null && par1World.theProfiler != null ? par1World.theProfiler : null);
+		this.targetTasks = new EntityAITasks(par1World != null && par1World.theProfiler != null ? par1World.theProfiler : null);
 		this.lookHelper = new EntityLookHelper(this);
 		this.moveHelper = new EntityMoveHelper(this);
 		this.jumpHelper = new EntityJumpHelper(this);
 		this.bodyHelper = new EntityBodyHelper(this);
-		this.navigator = new PathNavigate(this, var1);
+		this.navigator = new PathNavigate(this, par1World);
 		this.senses = new EntitySenses(this);
 
-		for(int var2 = 0; var2 < this.equipmentDropChances.length; ++var2) {
+		for (int var2 = 0; var2 < this.equipmentDropChances.length; ++var2) {
 			this.equipmentDropChances[var2] = 0.085F;
 		}
-
 	}
 
 	protected void applyEntityAttributes() {
@@ -65,24 +85,39 @@
 		return this.navigator;
 	}
 
+	/**
+	 * returns the EntitySenses Object for the EntityLiving
+	 */
 	public EntitySenses getEntitySenses() {
 		return this.senses;
 	}
 
+	/**
+	 * Gets the active target the Task system uses for tracking
+	 */
 	public EntityLivingBase getAttackTarget() {
 		return this.attackTarget;
 	}
 
-	public void setAttackTarget(EntityLivingBase var1) {
-		this.attackTarget = var1;
-	}
-
-	public boolean canAttackClass(Class var1) {
-		return EntityCreeper.class != var1 && EntityGhast.class != var1;
-	}
-
-	public void eatGrassBonus() {
-	}
+	/**
+	 * Sets the active target the Task system uses for tracking
+	 */
+	public void setAttackTarget(EntityLivingBase par1EntityLivingBase) {
+		this.attackTarget = par1EntityLivingBase;
+	}
+
+	/**
+	 * Returns true if this entity can attack entities of the specified class.
+	 */
+	public boolean canAttackClass(Class par1Class) {
+		return EntityCreeper.class != par1Class && EntityGhast.class != par1Class;
+	}
+
+	/**
+	 * This function applies the benefits of growing back wool and faster growing up to the acting entity. (This function
+	 * is used in the AIEatGrass)
+	 */
+	public void eatGrassBonus() {}
 
 	protected void entityInit() {
 		super.entityInit();
@@ -90,22 +125,32 @@
 		this.dataWatcher.addObject(10, "");
 	}
 
+	/**
+	 * Get number of ticks, at least during which the living entity will be silent.
+	 */
 	public int getTalkInterval() {
 		return 80;
 	}
 
+	/**
+	 * Plays living's sound at its position
+	 */
 	public void playLivingSound() {
 		String var1 = this.getLivingSound();
-		if(var1 != null) {
+
+		if (var1 != null) {
 			this.playSound(var1, this.getSoundVolume(), this.getSoundPitch());
 		}
-
 	}
 
+	/**
+	 * Gets called every tick from main Entity class
+	 */
 	public void onEntityUpdate() {
 		super.onEntityUpdate();
 		this.worldObj.theProfiler.startSection("mobBaseTick");
-		if(this.isEntityAlive() && this.ab.nextInt(1000) < this.livingSoundTime++) {
+
+		if (this.isEntityAlive() && this.rand.nextInt(1000) < this.livingSoundTime++) {
 			this.livingSoundTime = -this.getTalkInterval();
 			this.playLivingSound();
 		}
@@ -113,14 +158,17 @@
 		this.worldObj.theProfiler.endSection();
 	}
 
-	protected int getExperiencePoints(EntityPlayer var1) {
-		if(this.experienceValue > 0) {
+	/**
+	 * Get the experience points the entity currently has.
+	 */
+	protected int getExperiencePoints(EntityPlayer par1EntityPlayer) {
+		if (this.experienceValue > 0) {
 			int var2 = this.experienceValue;
-			ItemStack[] var3 = this.getInventory();
+			ItemStack[] var3 = this.getLastActiveItems();
 
-			for(int var4 = 0; var4 < var3.length; ++var4) {
-				if(var3[var4] != null && this.equipmentDropChances[var4] <= 1.0F) {
-					var2 += 1 + this.ab.nextInt(3);
+			for (int var4 = 0; var4 < var3.length; ++var4) {
+				if (var3[var4] != null && this.equipmentDropChances[var4] <= 1.0F) {
+					var2 += 1 + this.rand.nextInt(3);
 				}
 			}
 
@@ -130,213 +178,241 @@
 		}
 	}
 
+	/**
+	 * Spawns an explosion particle around the Entity's location
+	 */
 	public void spawnExplosionParticle() {
-		for(int var1 = 0; var1 < 20; ++var1) {
-			double var2 = this.ab.nextGaussian() * 0.02D;
-			double var4 = this.ab.nextGaussian() * 0.02D;
-			double var6 = this.ab.nextGaussian() * 0.02D;
+		for (int var1 = 0; var1 < 20; ++var1) {
+			double var2 = this.rand.nextGaussian() * 0.02D;
+			double var4 = this.rand.nextGaussian() * 0.02D;
+			double var6 = this.rand.nextGaussian() * 0.02D;
 			double var8 = 10.0D;
-			this.worldObj.spawnParticle("explode", this.posX + (double)(this.ab.nextFloat() * this.width * 2.0F) - (double)this.width - var2 * var8, this.posY + (double)(this.ab.nextFloat() * this.height) - var4 * var8, this.posZ + (double)(this.ab.nextFloat() * this.width * 2.0F) - (double)this.width - var6 * var8, var2, var4, var6);
+			this.worldObj.spawnParticle("explode", this.posX + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var2 * var8, this.posY + (double)(this.rand.nextFloat() * this.height) - var4 * var8, this.posZ + (double)(this.rand.nextFloat() * this.width * 2.0F) - (double)this.width - var6 * var8, var2, var4, var6);
 		}
-
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		super.onUpdate();
-		if(!this.worldObj.isRemote) {
+
+		if (!this.worldObj.isRemote) {
 			this.func_110159_bB();
 		}
-
 	}
 
-	protected float func_110146_f(float var1, float var2) {
-		if(this.isAIEnabled()) {
+	protected float func_110146_f(float par1, float par2) {
+		if (this.isAIEnabled()) {
 			this.bodyHelper.func_75664_a();
-			return var2;
+			return par2;
 		} else {
-			return super.func_110146_f(var1, var2);
+			return super.func_110146_f(par1, par2);
 		}
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return null;
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return 0;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
 		int var3 = this.getDropItemId();
-		if(var3 > 0) {
-			int var4 = this.ab.nextInt(3);
-			if(var2 > 0) {
-				var4 += this.ab.nextInt(var2 + 1);
+
+		if (var3 > 0) {
+			int var4 = this.rand.nextInt(3);
+
+			if (par2 > 0) {
+				var4 += this.rand.nextInt(par2 + 1);
 			}
 
-			for(int var5 = 0; var5 < var4; ++var5) {
+			for (int var5 = 0; var5 < var4; ++var5) {
 				this.dropItem(var3, 1);
 			}
 		}
-
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("CanPickUpLoot", this.canPickUpLoot());
-		var1.setBoolean("PersistenceRequired", this.persistenceRequired);
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("CanPickUpLoot", this.canPickUpLoot());
+		par1NBTTagCompound.setBoolean("PersistenceRequired", this.persistenceRequired);
 		NBTTagList var2 = new NBTTagList();
-
 		NBTTagCompound var4;
-		for(int var3 = 0; var3 < this.equipment.length; ++var3) {
+
+		for (int var3 = 0; var3 < this.equipment.length; ++var3) {
 			var4 = new NBTTagCompound();
-			if(this.equipment[var3] != null) {
+
+			if (this.equipment[var3] != null) {
 				this.equipment[var3].writeToNBT(var4);
 			}
 
 			var2.appendTag(var4);
 		}
 
-		var1.setTag("Equipment", var2);
+		par1NBTTagCompound.setTag("Equipment", var2);
 		NBTTagList var6 = new NBTTagList();
 
-		for(int var7 = 0; var7 < this.equipmentDropChances.length; ++var7) {
+		for (int var7 = 0; var7 < this.equipmentDropChances.length; ++var7) {
 			var6.appendTag(new NBTTagFloat(var7 + "", this.equipmentDropChances[var7]));
 		}
 
-		var1.setTag("DropChances", var6);
-		var1.setString("CustomName", this.getCustomNameTag());
-		var1.setBoolean("CustomNameVisible", this.getAlwaysRenderNameTag());
-		var1.setBoolean("Leashed", this.isLeashed);
-		if(this.leashedToEntity != null) {
+		par1NBTTagCompound.setTag("DropChances", var6);
+		par1NBTTagCompound.setString("CustomName", this.getCustomNameTag());
+		par1NBTTagCompound.setBoolean("CustomNameVisible", this.getAlwaysRenderNameTag());
+		par1NBTTagCompound.setBoolean("Leashed", this.isLeashed);
+
+		if (this.leashedToEntity != null) {
 			var4 = new NBTTagCompound("Leash");
-			if(this.leashedToEntity instanceof EntityLivingBase) {
+
+			if (this.leashedToEntity instanceof EntityLivingBase) {
 				var4.setLong("UUIDMost", this.leashedToEntity.getUniqueID().getMostSignificantBits());
 				var4.setLong("UUIDLeast", this.leashedToEntity.getUniqueID().getLeastSignificantBits());
-			} else if(this.leashedToEntity instanceof EntityHanging) {
+			} else if (this.leashedToEntity instanceof EntityHanging) {
 				EntityHanging var5 = (EntityHanging)this.leashedToEntity;
 				var4.setInteger("X", var5.xPosition);
 				var4.setInteger("Y", var5.yPosition);
 				var4.setInteger("Z", var5.zPosition);
 			}
 
-			var1.setTag("Leash", var4);
+			par1NBTTagCompound.setTag("Leash", var4);
 		}
-
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.setCanPickUpLoot(var1.getBoolean("CanPickUpLoot"));
-		this.persistenceRequired = var1.getBoolean("PersistenceRequired");
-		if(var1.hasKey("CustomName") && var1.getString("CustomName").length() > 0) {
-			this.setCustomNameTag(var1.getString("CustomName"));
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.setCanPickUpLoot(par1NBTTagCompound.getBoolean("CanPickUpLoot"));
+		this.persistenceRequired = par1NBTTagCompound.getBoolean("PersistenceRequired");
+
+		if (par1NBTTagCompound.hasKey("CustomName") && par1NBTTagCompound.getString("CustomName").length() > 0) {
+			this.setCustomNameTag(par1NBTTagCompound.getString("CustomName"));
 		}
 
-		this.setAlwaysRenderNameTag(var1.getBoolean("CustomNameVisible"));
+		this.setAlwaysRenderNameTag(par1NBTTagCompound.getBoolean("CustomNameVisible"));
 		NBTTagList var2;
 		int var3;
-		if(var1.hasKey("Equipment")) {
-			var2 = var1.getTagList("Equipment");
-
-			for(var3 = 0; var3 < this.equipment.length; ++var3) {
+
+		if (par1NBTTagCompound.hasKey("Equipment")) {
+			var2 = par1NBTTagCompound.getTagList("Equipment");
+
+			for (var3 = 0; var3 < this.equipment.length; ++var3) {
 				this.equipment[var3] = ItemStack.loadItemStackFromNBT((NBTTagCompound)var2.tagAt(var3));
 			}
 		}
 
-		if(var1.hasKey("DropChances")) {
-			var2 = var1.getTagList("DropChances");
+		if (par1NBTTagCompound.hasKey("DropChances")) {
+			var2 = par1NBTTagCompound.getTagList("DropChances");
 
-			for(var3 = 0; var3 < var2.tagCount(); ++var3) {
+			for (var3 = 0; var3 < var2.tagCount(); ++var3) {
 				this.equipmentDropChances[var3] = ((NBTTagFloat)var2.tagAt(var3)).data;
 			}
 		}
 
-		this.isLeashed = var1.getBoolean("Leashed");
-		if(this.isLeashed && var1.hasKey("Leash")) {
-			this.field_110170_bx = var1.getCompoundTag("Leash");
+		this.isLeashed = par1NBTTagCompound.getBoolean("Leashed");
+
+		if (this.isLeashed && par1NBTTagCompound.hasKey("Leash")) {
+			this.field_110170_bx = par1NBTTagCompound.getCompoundTag("Leash");
 		}
-
-	}
-
-	public void setMoveForward(float var1) {
-		this.moveForward = var1;
-	}
-
-	public void setAIMoveSpeed(float var1) {
-		super.setAIMoveSpeed(var1);
-		this.setMoveForward(var1);
-	}
-
+	}
+
+	public void setMoveForward(float par1) {
+		this.moveForward = par1;
+	}
+
+	/**
+	 * set the movespeed used for the new AI system
+	 */
+	public void setAIMoveSpeed(float par1) {
+		super.setAIMoveSpeed(par1);
+		this.setMoveForward(par1);
+	}
+
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
 		super.onLivingUpdate();
 		this.worldObj.theProfiler.startSection("looting");
-		if(!this.worldObj.isRemote && this.canPickUpLoot() && !this.dead && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
+
+		if (!this.worldObj.isRemote && this.canPickUpLoot() && !this.dead && this.worldObj.getGameRules().getGameRuleBooleanValue("mobGriefing")) {
 			List var1 = this.worldObj.getEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(1.0D, 0.0D, 1.0D));
 			Iterator var2 = var1.iterator();
 
-			label122:
-			while(true) {
-				EntityItem var3;
-				ItemStack var4;
-				int var5;
-				do {
-					do {
-						do {
-							if(!var2.hasNext()) {
-								break label122;
-							}
-
-							var3 = (EntityItem)var2.next();
-						} while(var3.isDead);
-					} while(var3.getEntityItem() == null);
-
-					var4 = var3.getEntityItem();
-					var5 = getArmorPosition(var4);
-				} while(var5 <= -1);
-
-				boolean var6 = true;
-				ItemStack var7 = this.getEquipmentInSlot(var5);
-				if(var7 != null) {
-					if(var5 == 0) {
-						if(var4.getItem() instanceof ItemSword && !(var7.getItem() instanceof ItemSword)) {
-							var6 = true;
-						} else if(var4.getItem() instanceof ItemSword && var7.getItem() instanceof ItemSword) {
-							ItemSword var10 = (ItemSword)var4.getItem();
-							ItemSword var11 = (ItemSword)var7.getItem();
-							if(var10.func_82803_g() != var11.func_82803_g()) {
-								var6 = var10.func_82803_g() > var11.func_82803_g();
+			while (var2.hasNext()) {
+				EntityItem var3 = (EntityItem)var2.next();
+
+				if (!var3.isDead && var3.getEntityItem() != null) {
+					ItemStack var4 = var3.getEntityItem();
+					int var5 = getArmorPosition(var4);
+
+					if (var5 > -1) {
+						boolean var6 = true;
+						ItemStack var7 = this.getCurrentItemOrArmor(var5);
+
+						if (var7 != null) {
+							if (var5 == 0) {
+								if (var4.getItem() instanceof ItemSword && !(var7.getItem() instanceof ItemSword)) {
+									var6 = true;
+								} else if (var4.getItem() instanceof ItemSword && var7.getItem() instanceof ItemSword) {
+									ItemSword var8 = (ItemSword)var4.getItem();
+									ItemSword var9 = (ItemSword)var7.getItem();
+
+									if (var8.func_82803_g() == var9.func_82803_g()) {
+										var6 = var4.getItemDamage() > var7.getItemDamage() || var4.hasTagCompound() && !var7.hasTagCompound();
+									} else {
+										var6 = var8.func_82803_g() > var9.func_82803_g();
+									}
+								} else {
+									var6 = false;
+								}
+							} else if (var4.getItem() instanceof ItemArmor && !(var7.getItem() instanceof ItemArmor)) {
+								var6 = true;
+							} else if (var4.getItem() instanceof ItemArmor && var7.getItem() instanceof ItemArmor) {
+								ItemArmor var10 = (ItemArmor)var4.getItem();
+								ItemArmor var11 = (ItemArmor)var7.getItem();
+
+								if (var10.damageReduceAmount == var11.damageReduceAmount) {
+									var6 = var4.getItemDamage() > var7.getItemDamage() || var4.hasTagCompound() && !var7.hasTagCompound();
+								} else {
+									var6 = var10.damageReduceAmount > var11.damageReduceAmount;
+								}
 							} else {
-								var6 = var4.getItemDamage() > var7.getItemDamage() || var4.hasTagCompound() && !var7.hasTagCompound();
-							}
-						} else {
-							var6 = false;
-						}
-					} else if(var4.getItem() instanceof ItemArmor && !(var7.getItem() instanceof ItemArmor)) {
-						var6 = true;
-					} else if(var4.getItem() instanceof ItemArmor && var7.getItem() instanceof ItemArmor) {
-						ItemArmor var8 = (ItemArmor)var4.getItem();
-						ItemArmor var9 = (ItemArmor)var7.getItem();
-						if(var8.damageReduceAmount != var9.damageReduceAmount) {
-							var6 = var8.damageReduceAmount > var9.damageReduceAmount;
-						} else {
-							var6 = var4.getItemDamage() > var7.getItemDamage() || var4.hasTagCompound() && !var7.hasTagCompound();
-						}
-					} else {
-						var6 = false;
-					}
-				}
-
-				if(var6) {
-					if(var7 != null && this.ab.nextFloat() - 0.1F < this.equipmentDropChances[var5]) {
-						this.entityDropItem(var7, 0.0F);
-					}
-
-					this.setCurrentItemOrArmor(var5, var4);
-					this.equipmentDropChances[var5] = 2.0F;
-					this.persistenceRequired = true;
-					this.onItemPickup(var3, 1);
-					var3.setDead();
+								var6 = false;
+							}
+						}
+
+						if (var6) {
+							if (var7 != null && this.rand.nextFloat() - 0.1F < this.equipmentDropChances[var5]) {
+								this.entityDropItem(var7, 0.0F);
+							}
+
+							this.setCurrentItemOrArmor(var5, var4);
+							this.equipmentDropChances[var5] = 2.0F;
+							this.persistenceRequired = true;
+							this.onItemPickup(var3, 1);
+							var3.setDead();
+						}
+					}
 				}
 			}
 		}
@@ -344,35 +420,45 @@
 		this.worldObj.theProfiler.endSection();
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	protected boolean isAIEnabled() {
 		return false;
 	}
 
+	/**
+	 * Determines if an entity can be despawned, used on idle far away entities
+	 */
 	protected boolean canDespawn() {
 		return true;
 	}
 
+	/**
+	 * Makes the entity despawn if requirements are reached
+	 */
 	protected void despawnEntity() {
-		if(this.persistenceRequired) {
+		if (this.persistenceRequired) {
 			this.entityAge = 0;
 		} else {
 			EntityPlayer var1 = this.worldObj.getClosestPlayerToEntity(this, -1.0D);
-			if(var1 != null) {
+
+			if (var1 != null) {
 				double var2 = var1.posX - this.posX;
 				double var4 = var1.posY - this.posY;
 				double var6 = var1.posZ - this.posZ;
 				double var8 = var2 * var2 + var4 * var4 + var6 * var6;
-				if(this.canDespawn() && var8 > 16384.0D) {
+
+				if (this.canDespawn() && var8 > 16384.0D) {
 					this.setDead();
 				}
 
-				if(this.entityAge > 600 && this.ab.nextInt(800) == 0 && var8 > 1024.0D && this.canDespawn()) {
+				if (this.entityAge > 600 && this.rand.nextInt(800) == 0 && var8 > 1024.0D && this.canDespawn()) {
 					this.setDead();
-				} else if(var8 < 1024.0D) {
+				} else if (var8 < 1024.0D) {
 					this.entityAge = 0;
 				}
 			}
-
 		}
 	}
 
@@ -413,24 +499,27 @@
 		this.moveForward = 0.0F;
 		this.despawnEntity();
 		float var1 = 8.0F;
-		if(this.ab.nextFloat() < 0.02F) {
+
+		if (this.rand.nextFloat() < 0.02F) {
 			EntityPlayer var2 = this.worldObj.getClosestPlayerToEntity(this, (double)var1);
-			if(var2 != null) {
+
+			if (var2 != null) {
 				this.currentTarget = var2;
-				this.numTicksToChaseTarget = 10 + this.ab.nextInt(20);
+				this.numTicksToChaseTarget = 10 + this.rand.nextInt(20);
 			} else {
-				this.randomYawVelocity = (this.ab.nextFloat() - 0.5F) * 20.0F;
+				this.randomYawVelocity = (this.rand.nextFloat() - 0.5F) * 20.0F;
 			}
 		}
 
-		if(this.currentTarget != null) {
+		if (this.currentTarget != null) {
 			this.faceEntity(this.currentTarget, 10.0F, (float)this.getVerticalFaceSpeed());
-			if(this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(var1 * var1)) {
+
+			if (this.numTicksToChaseTarget-- <= 0 || this.currentTarget.isDead || this.currentTarget.getDistanceSqToEntity(this) > (double)(var1 * var1)) {
 				this.currentTarget = null;
 			}
 		} else {
-			if(this.ab.nextFloat() < 0.05F) {
-				this.randomYawVelocity = (this.ab.nextFloat() - 0.5F) * 20.0F;
+			if (this.rand.nextFloat() < 0.05F) {
+				this.randomYawVelocity = (this.rand.nextFloat() - 0.5F) * 20.0F;
 			}
 
 			this.rotationYaw += this.randomYawVelocity;
@@ -439,66 +528,91 @@
 
 		boolean var4 = this.isInWater();
 		boolean var3 = this.handleLavaMovement();
-		if(var4 || var3) {
-			this.isJumping = this.ab.nextFloat() < 0.8F;
+
+		if (var4 || var3) {
+			this.isJumping = this.rand.nextFloat() < 0.8F;
 		}
-
 	}
 
+	/**
+	 * The speed it takes to move the entityliving's rotationPitch through the faceEntity method. This is only currently
+	 * use in wolves.
+	 */
 	public int getVerticalFaceSpeed() {
 		return 40;
 	}
 
-	public void faceEntity(Entity var1, float var2, float var3) {
-		double var4 = var1.posX - this.posX;
-		double var8 = var1.posZ - this.posZ;
+	/**
+	 * Changes pitch and yaw so that the entity calling the function is facing the entity provided as an argument.
+	 */
+	public void faceEntity(Entity par1Entity, float par2, float par3) {
+		double var4 = par1Entity.posX - this.posX;
+		double var8 = par1Entity.posZ - this.posZ;
 		double var6;
-		if(var1 instanceof EntityLivingBase) {
-			EntityLivingBase var10 = (EntityLivingBase)var1;
+
+		if (par1Entity instanceof EntityLivingBase) {
+			EntityLivingBase var10 = (EntityLivingBase)par1Entity;
 			var6 = var10.posY + (double)var10.getEyeHeight() - (this.posY + (double)this.getEyeHeight());
 		} else {
-			var6 = (var1.boundingBox.minY + var1.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
+			var6 = (par1Entity.boundingBox.minY + par1Entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());
 		}
 
 		double var14 = (double)MathHelper.sqrt_double(var4 * var4 + var8 * var8);
-		float var12 = (float)(Math.atan2(var8, var4) * 180.0D / (double)((float)Math.PI)) - 90.0F;
-		float var13 = (float)(-(Math.atan2(var6, var14) * 180.0D / (double)((float)Math.PI)));
-		this.rotationPitch = this.updateRotation(this.rotationPitch, var13, var3);
-		this.rotationYaw = this.updateRotation(this.rotationYaw, var12, var2);
-	}
-
-	private float updateRotation(float var1, float var2, float var3) {
-		float var4 = MathHelper.wrapAngleTo180_float(var2 - var1);
-		if(var4 > var3) {
-			var4 = var3;
-		}
-
-		if(var4 < -var3) {
-			var4 = -var3;
-		}
-
-		return var1 + var4;
-	}
-
+		float var12 = (float)(Math.atan2(var8, var4) * 180.0D / Math.PI) - 90.0F;
+		float var13 = (float)(-(Math.atan2(var6, var14) * 180.0D / Math.PI));
+		this.rotationPitch = this.updateRotation(this.rotationPitch, var13, par3);
+		this.rotationYaw = this.updateRotation(this.rotationYaw, var12, par2);
+	}
+
+	/**
+	 * Arguments: current rotation, intended rotation, max increment.
+	 */
+	private float updateRotation(float par1, float par2, float par3) {
+		float var4 = MathHelper.wrapAngleTo180_float(par2 - par1);
+
+		if (var4 > par3) {
+			var4 = par3;
+		}
+
+		if (var4 < -par3) {
+			var4 = -par3;
+		}
+
+		return par1 + var4;
+	}
+
+	/**
+	 * Checks if the entity's current position is a valid location to spawn this entity.
+	 */
 	public boolean getCanSpawnHere() {
 		return this.worldObj.checkNoEntityCollision(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox);
 	}
 
+	/**
+	 * Returns render size modifier
+	 */
 	public float getRenderSizeModifier() {
 		return 1.0F;
 	}
 
+	/**
+	 * Will return how many at most can spawn in a chunk at once.
+	 */
 	public int getMaxSpawnedInChunk() {
 		return 4;
 	}
 
+	/**
+	 * The number of iterations PathFinder.getSafePoint will execute before giving up.
+	 */
 	public int getMaxSafePointTries() {
-		if(this.getAttackTarget() == null) {
+		if (this.getAttackTarget() == null) {
 			return 3;
 		} else {
 			int var1 = (int)(this.getHealth() - this.getMaxHealth() * 0.33F);
 			var1 -= (3 - this.worldObj.difficultySetting) * 4;
-			if(var1 < 0) {
+
+			if (var1 < 0) {
 				var1 = 0;
 			}
 
@@ -506,39 +620,53 @@
 		}
 	}
 
+	/**
+	 * Returns the item that this EntityLiving is holding, if any.
+	 */
 	public ItemStack getHeldItem() {
 		return this.equipment[0];
 	}
 
-	public ItemStack getEquipmentInSlot(int var1) {
-		return this.equipment[var1];
-	}
-
-	public ItemStack func_130225_q(int var1) {
-		return this.equipment[var1 + 1];
-	}
-
-	public void setCurrentItemOrArmor(int var1, ItemStack var2) {
-		this.equipment[var1] = var2;
-	}
-
-	public ItemStack[] getInventory() {
+	/**
+	 * 0 = item, 1-n is armor
+	 */
+	public ItemStack getCurrentItemOrArmor(int par1) {
+		return this.equipment[par1];
+	}
+
+	public ItemStack func_130225_q(int par1) {
+		return this.equipment[par1 + 1];
+	}
+
+	/**
+	 * Sets the held item, or an armor slot. Slot 0 is held item. Slot 1-4 is armor. Params: Item, slot
+	 */
+	public void setCurrentItemOrArmor(int par1, ItemStack par2ItemStack) {
+		this.equipment[par1] = par2ItemStack;
+	}
+
+	public ItemStack[] getLastActiveItems() {
 		return this.equipment;
 	}
 
-	protected void dropEquipment(boolean var1, int var2) {
-		for(int var3 = 0; var3 < this.getInventory().length; ++var3) {
-			ItemStack var4 = this.getEquipmentInSlot(var3);
+	/**
+	 * Drop the equipment for this entity.
+	 */
+	protected void dropEquipment(boolean par1, int par2) {
+		for (int var3 = 0; var3 < this.getLastActiveItems().length; ++var3) {
+			ItemStack var4 = this.getCurrentItemOrArmor(var3);
 			boolean var5 = this.equipmentDropChances[var3] > 1.0F;
-			if(var4 != null && (var1 || var5) && this.ab.nextFloat() - (float)var2 * 0.01F < this.equipmentDropChances[var3]) {
-				if(!var5 && var4.isItemStackDamageable()) {
+
+			if (var4 != null && (par1 || var5) && this.rand.nextFloat() - (float)par2 * 0.01F < this.equipmentDropChances[var3]) {
+				if (!var5 && var4.isItemStackDamageable()) {
 					int var6 = Math.max(var4.getMaxDamage() - 25, 1);
-					int var7 = var4.getMaxDamage() - this.ab.nextInt(this.ab.nextInt(var6) + 1);
-					if(var7 > var6) {
+					int var7 = var4.getMaxDamage() - this.rand.nextInt(this.rand.nextInt(var6) + 1);
+
+					if (var7 > var6) {
 						var7 = var6;
 					}
 
-					if(var7 < 1) {
+					if (var7 < 1) {
 						var7 = 1;
 					}
 
@@ -548,54 +676,61 @@
 				this.entityDropItem(var4, 0.0F);
 			}
 		}
-
 	}
 
+	/**
+	 * Makes entity wear random armor based on difficulty
+	 */
 	protected void addRandomArmor() {
-		if(this.ab.nextFloat() < 0.15F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ)) {
-			int var1 = this.ab.nextInt(2);
+		if (this.rand.nextFloat() < 0.15F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ)) {
+			int var1 = this.rand.nextInt(2);
 			float var2 = this.worldObj.difficultySetting == 3 ? 0.1F : 0.25F;
-			if(this.ab.nextFloat() < 0.095F) {
-				++var1;
-			}
-
-			if(this.ab.nextFloat() < 0.095F) {
-				++var1;
-			}
-
-			if(this.ab.nextFloat() < 0.095F) {
-				++var1;
-			}
-
-			for(int var3 = 3; var3 >= 0; --var3) {
+
+			if (this.rand.nextFloat() < 0.095F) {
+				++var1;
+			}
+
+			if (this.rand.nextFloat() < 0.095F) {
+				++var1;
+			}
+
+			if (this.rand.nextFloat() < 0.095F) {
+				++var1;
+			}
+
+			for (int var3 = 3; var3 >= 0; --var3) {
 				ItemStack var4 = this.func_130225_q(var3);
-				if(var3 < 3 && this.ab.nextFloat() < var2) {
+
+				if (var3 < 3 && this.rand.nextFloat() < var2) {
 					break;
 				}
 
-				if(var4 == null) {
+				if (var4 == null) {
 					Item var5 = getArmorItemForSlot(var3 + 1, var1);
-					if(var5 != null) {
+
+					if (var5 != null) {
 						this.setCurrentItemOrArmor(var3 + 1, new ItemStack(var5));
 					}
 				}
 			}
 		}
-
 	}
 
-	public static int getArmorPosition(ItemStack var0) {
-		if(var0.itemID != Block.pumpkin.blockID && var0.itemID != Item.skull.itemID) {
-			if(var0.getItem() instanceof ItemArmor) {
-				switch(((ItemArmor)var0.getItem()).armorType) {
-				case 0:
-					return 4;
-				case 1:
-					return 3;
-				case 2:
-					return 2;
-				case 3:
-					return 1;
+	public static int getArmorPosition(ItemStack par0ItemStack) {
+		if (par0ItemStack.itemID != Block.pumpkin.blockID && par0ItemStack.itemID != Item.skull.itemID) {
+			if (par0ItemStack.getItem() instanceof ItemArmor) {
+				switch (((ItemArmor)par0ItemStack.getItem()).armorType) {
+					case 0:
+						return 4;
+
+					case 1:
+						return 3;
+
+					case 2:
+						return 2;
+
+					case 3:
+						return 1;
 				}
 			}
 
@@ -605,85 +740,103 @@
 		}
 	}
 
-	public static Item getArmorItemForSlot(int var0, int var1) {
-		switch(var0) {
-		case 4:
-			if(var1 == 0) {
-				return Item.helmetLeather;
-			} else if(var1 == 1) {
-				return Item.helmetGold;
-			} else if(var1 == 2) {
-				return Item.helmetChain;
-			} else if(var1 == 3) {
-				return Item.helmetIron;
-			} else if(var1 == 4) {
-				return Item.helmetDiamond;
-			}
-		case 3:
-			if(var1 == 0) {
-				return Item.plateLeather;
-			} else if(var1 == 1) {
-				return Item.plateGold;
-			} else if(var1 == 2) {
-				return Item.plateChain;
-			} else if(var1 == 3) {
-				return Item.plateIron;
-			} else if(var1 == 4) {
-				return Item.plateDiamond;
-			}
-		case 2:
-			if(var1 == 0) {
-				return Item.legsLeather;
-			} else if(var1 == 1) {
-				return Item.legsGold;
-			} else if(var1 == 2) {
-				return Item.legsChain;
-			} else if(var1 == 3) {
-				return Item.legsIron;
-			} else if(var1 == 4) {
-				return Item.legsDiamond;
-			}
-		case 1:
-			if(var1 == 0) {
-				return Item.bootsLeather;
-			} else if(var1 == 1) {
-				return Item.bootsGold;
-			} else if(var1 == 2) {
-				return Item.bootsChain;
-			} else if(var1 == 3) {
-				return Item.bootsIron;
-			} else if(var1 == 4) {
-				return Item.bootsDiamond;
-			}
-		default:
-			return null;
+	/**
+	 * Params: Armor slot, Item tier
+	 */
+	public static Item getArmorItemForSlot(int par0, int par1) {
+		switch (par0) {
+			case 4:
+				if (par1 == 0) {
+					return Item.helmetLeather;
+				} else if (par1 == 1) {
+					return Item.helmetGold;
+				} else if (par1 == 2) {
+					return Item.helmetChain;
+				} else if (par1 == 3) {
+					return Item.helmetIron;
+				} else if (par1 == 4) {
+					return Item.helmetDiamond;
+				}
+
+			case 3:
+				if (par1 == 0) {
+					return Item.plateLeather;
+				} else if (par1 == 1) {
+					return Item.plateGold;
+				} else if (par1 == 2) {
+					return Item.plateChain;
+				} else if (par1 == 3) {
+					return Item.plateIron;
+				} else if (par1 == 4) {
+					return Item.plateDiamond;
+				}
+
+			case 2:
+				if (par1 == 0) {
+					return Item.legsLeather;
+				} else if (par1 == 1) {
+					return Item.legsGold;
+				} else if (par1 == 2) {
+					return Item.legsChain;
+				} else if (par1 == 3) {
+					return Item.legsIron;
+				} else if (par1 == 4) {
+					return Item.legsDiamond;
+				}
+
+			case 1:
+				if (par1 == 0) {
+					return Item.bootsLeather;
+				} else if (par1 == 1) {
+					return Item.bootsGold;
+				} else if (par1 == 2) {
+					return Item.bootsChain;
+				} else if (par1 == 3) {
+					return Item.bootsIron;
+				} else if (par1 == 4) {
+					return Item.bootsDiamond;
+				}
+
+			default:
+				return null;
 		}
 	}
 
+	/**
+	 * Enchants the entity's armor and held item based on difficulty
+	 */
 	protected void enchantEquipment() {
 		float var1 = this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ);
-		if(this.getHeldItem() != null && this.ab.nextFloat() < 0.25F * var1) {
-			EnchantmentHelper.addRandomEnchantment(this.ab, this.getHeldItem(), (int)(5.0F + var1 * (float)this.ab.nextInt(18)));
+
+		if (this.getHeldItem() != null && this.rand.nextFloat() < 0.25F * var1) {
+			EnchantmentHelper.addRandomEnchantment(this.rand, this.getHeldItem(), (int)(5.0F + var1 * (float)this.rand.nextInt(18)));
 		}
 
-		for(int var2 = 0; var2 < 4; ++var2) {
+		for (int var2 = 0; var2 < 4; ++var2) {
 			ItemStack var3 = this.func_130225_q(var2);
-			if(var3 != null && this.ab.nextFloat() < 0.5F * var1) {
-				EnchantmentHelper.addRandomEnchantment(this.ab, var3, (int)(5.0F + var1 * (float)this.ab.nextInt(18)));
+
+			if (var3 != null && this.rand.nextFloat() < 0.5F * var1) {
+				EnchantmentHelper.addRandomEnchantment(this.rand, var3, (int)(5.0F + var1 * (float)this.rand.nextInt(18)));
 			}
 		}
-
-	}
-
-	public EntityLivingData onSpawnWithEgg(EntityLivingData var1) {
-		this.getEntityAttribute(SharedMonsterAttributes.followRange).applyModifier(new AttributeModifier("Random spawn bonus", this.ab.nextGaussian() * 0.05D, 1));
-		return var1;
-	}
-
+	}
+
+	public EntityLivingData onSpawnWithEgg(EntityLivingData par1EntityLivingData) {
+		this.getEntityAttribute(SharedMonsterAttributes.followRange).applyModifier(new AttributeModifier("Random spawn bonus", this.rand.nextGaussian() * 0.05D, 1));
+		return par1EntityLivingData;
+	}
+
+	/**
+	 * returns true if all the conditions for steering the entity are met. For pigs, this is true if it is being ridden by
+	 * a player and the player is holding a carrot-on-a-stick
+	 */
 	public boolean canBeSteered() {
 		return false;
 	}
 
+	/**
+	 * Gets the username of the entity.
+	 */
 	public String getEntityName() {
 		return this.hasCustomNameTag() ? this.getCustomNameTag() : super.getEntityName();
 	}
@@ -692,8 +845,8 @@
 		this.persistenceRequired = true;
 	}
 
-	public void setCustomNameTag(String var1) {
-		this.dataWatcher.updateObject(10, var1);
+	public void setCustomNameTag(String par1Str) {
+		this.dataWatcher.updateObject(10, par1Str);
 	}
 
 	public String getCustomNameTag() {
@@ -704,8 +857,8 @@
 		return this.dataWatcher.getWatchableObjectString(10).length() > 0;
 	}
 
-	public void setAlwaysRenderNameTag(boolean var1) {
-		this.dataWatcher.updateObject(11, Byte.valueOf((byte)(var1 ? 1 : 0)));
+	public void setAlwaysRenderNameTag(boolean par1) {
+		this.dataWatcher.updateObject(11, Byte.valueOf((byte)(par1 ? 1 : 0)));
 	}
 
 	public boolean getAlwaysRenderNameTag() {
@@ -716,79 +869,85 @@
 		return this.getAlwaysRenderNameTag();
 	}
 
-	public void setEquipmentDropChance(int var1, float var2) {
-		this.equipmentDropChances[var1] = var2;
+	public void setEquipmentDropChance(int par1, float par2) {
+		this.equipmentDropChances[par1] = par2;
 	}
 
 	public boolean canPickUpLoot() {
 		return this.canPickUpLoot;
 	}
 
-	public void setCanPickUpLoot(boolean var1) {
-		this.canPickUpLoot = var1;
+	public void setCanPickUpLoot(boolean par1) {
+		this.canPickUpLoot = par1;
 	}
 
 	public boolean isNoDespawnRequired() {
 		return this.persistenceRequired;
 	}
 
-	public final boolean interactFirst(EntityPlayer var1) {
-		if(this.getLeashed() && this.getLeashedToEntity() == var1) {
-			this.clearLeashed(true, !var1.capabilities.isCreativeMode);
+	/**
+	 * First layer of player interaction
+	 */
+	public final boolean interactFirst(EntityPlayer par1EntityPlayer) {
+		if (this.getLeashed() && this.getLeashedToEntity() == par1EntityPlayer) {
+			this.clearLeashed(true, !par1EntityPlayer.capabilities.isCreativeMode);
 			return true;
 		} else {
-			ItemStack var2 = var1.inventory.getCurrentItem();
-			if(var2 != null && var2.itemID == Item.leash.itemID && this.allowLeashing()) {
-				if(!(this instanceof EntityTameable) || !((EntityTameable)this).isTamed()) {
-					this.setLeashedToEntity(var1, true);
-					--var2.stackSize;
-					return true;
-				}
-
-				if(var1.getCommandSenderName().equalsIgnoreCase(((EntityTameable)this).getOwnerName())) {
-					this.setLeashedToEntity(var1, true);
-					--var2.stackSize;
-					return true;
-				}
-			}
-
-			if(this.interact(var1)) {
-				return true;
-			} else {
-				return super.interactFirst(var1);
-			}
+			ItemStack var2 = par1EntityPlayer.inventory.getCurrentItem();
+
+			if (var2 != null && var2.itemID == Item.leash.itemID && this.allowLeashing()) {
+				if (!(this instanceof EntityTameable) || !((EntityTameable)this).isTamed()) {
+					this.setLeashedToEntity(par1EntityPlayer, true);
+					--var2.stackSize;
+					return true;
+				}
+
+				if (par1EntityPlayer.getCommandSenderName().equalsIgnoreCase(((EntityTameable)this).getOwnerName())) {
+					this.setLeashedToEntity(par1EntityPlayer, true);
+					--var2.stackSize;
+					return true;
+				}
+			}
+
+			return this.interact(par1EntityPlayer) ? true : super.interactFirst(par1EntityPlayer);
 		}
 	}
 
-	protected boolean interact(EntityPlayer var1) {
+	/**
+	 * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+	 */
+	protected boolean interact(EntityPlayer par1EntityPlayer) {
 		return false;
 	}
 
 	protected void func_110159_bB() {
-		if(this.field_110170_bx != null) {
+		if (this.field_110170_bx != null) {
 			this.recreateLeash();
 		}
 
-		if(this.isLeashed) {
-			if(this.leashedToEntity == null || this.leashedToEntity.isDead) {
+		if (this.isLeashed) {
+			if (this.leashedToEntity == null || this.leashedToEntity.isDead) {
 				this.clearLeashed(true, true);
 			}
 		}
 	}
 
-	public void clearLeashed(boolean var1, boolean var2) {
-		if(this.isLeashed) {
+	/**
+	 * Removes the leash from this entity. Second parameter tells whether to send a packet to surrounding players.
+	 */
+	public void clearLeashed(boolean par1, boolean par2) {
+		if (this.isLeashed) {
 			this.isLeashed = false;
 			this.leashedToEntity = null;
-			if(!this.worldObj.isRemote && var2) {
+
+			if (!this.worldObj.isRemote && par2) {
 				this.dropItem(Item.leash.itemID, 1);
 			}
 
-			if(!this.worldObj.isRemote && var1 && this.worldObj instanceof WorldServer) {
-				((WorldServer)this.worldObj).getEntityTracker().sendPacketToTrackedPlayers(this, new Packet39AttachEntity(1, this, (Entity)null));
+			if (!this.worldObj.isRemote && par1 && this.worldObj instanceof WorldServer) {
+				((WorldServer)this.worldObj).getEntityTracker().sendPacketToAllPlayersTrackingEntity(this, new Packet39AttachEntity(1, this, (Entity)null));
 			}
 		}
-
 	}
 
 	public boolean allowLeashing() {
@@ -803,35 +962,41 @@
 		return this.leashedToEntity;
 	}
 
-	public void setLeashedToEntity(Entity var1, boolean var2) {
+	/**
+	 * Sets the entity to be leashed to.\nArgs:\n@param par1Entity: The entity to be tethered to.\n@param par2: Whether to
+	 * send an attaching notification packet to surrounding players.
+	 */
+	public void setLeashedToEntity(Entity par1Entity, boolean par2) {
 		this.isLeashed = true;
-		this.leashedToEntity = var1;
-		if(!this.worldObj.isRemote && var2 && this.worldObj instanceof WorldServer) {
-			((WorldServer)this.worldObj).getEntityTracker().sendPacketToTrackedPlayers(this, new Packet39AttachEntity(1, this, this.leashedToEntity));
-		}
+		this.leashedToEntity = par1Entity;
 
+		if (!this.worldObj.isRemote && par2 && this.worldObj instanceof WorldServer) {
+			((WorldServer)this.worldObj).getEntityTracker().sendPacketToAllPlayersTrackingEntity(this, new Packet39AttachEntity(1, this, this.leashedToEntity));
+		}
 	}
 
 	private void recreateLeash() {
-		if(this.isLeashed && this.field_110170_bx != null) {
-			if(this.field_110170_bx.hasKey("UUIDMost") && this.field_110170_bx.hasKey("UUIDLeast")) {
+		if (this.isLeashed && this.field_110170_bx != null) {
+			if (this.field_110170_bx.hasKey("UUIDMost") && this.field_110170_bx.hasKey("UUIDLeast")) {
 				UUID var5 = new UUID(this.field_110170_bx.getLong("UUIDMost"), this.field_110170_bx.getLong("UUIDLeast"));
 				List var6 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, this.boundingBox.expand(10.0D, 10.0D, 10.0D));
 				Iterator var7 = var6.iterator();
 
-				while(var7.hasNext()) {
+				while (var7.hasNext()) {
 					EntityLivingBase var8 = (EntityLivingBase)var7.next();
-					if(var8.getUniqueID().equals(var5)) {
+
+					if (var8.getUniqueID().equals(var5)) {
 						this.leashedToEntity = var8;
 						break;
 					}
 				}
-			} else if(this.field_110170_bx.hasKey("X") && this.field_110170_bx.hasKey("Y") && this.field_110170_bx.hasKey("Z")) {
+			} else if (this.field_110170_bx.hasKey("X") && this.field_110170_bx.hasKey("Y") && this.field_110170_bx.hasKey("Z")) {
 				int var1 = this.field_110170_bx.getInteger("X");
 				int var2 = this.field_110170_bx.getInteger("Y");
 				int var3 = this.field_110170_bx.getInteger("Z");
 				EntityLeashKnot var4 = EntityLeashKnot.getKnotForBlock(this.worldObj, var1, var2, var3);
-				if(var4 == null) {
+
+				if (var4 == null) {
 					var4 = EntityLeashKnot.func_110129_a(this.worldObj, var1, var2, var3);
 				}
 
@@ -842,5 +1007,5 @@
 		}
 
 		this.field_110170_bx = null;
-	}
+	}	
 }
