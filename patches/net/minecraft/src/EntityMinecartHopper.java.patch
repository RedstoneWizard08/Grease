--- net/minecraft/src/EntityMinecartHopper.java
+++ net/minecraft/src/EntityMinecartHopper.java
@@ -3,15 +3,17 @@
 import java.util.List;
 
 public class EntityMinecartHopper extends EntityMinecartContainer implements Hopper {
+
+	/** Whether this hopper minecart is being blocked by an activator rail. */
 	private boolean isBlocked = true;
 	private int transferTicker = -1;
 
-	public EntityMinecartHopper(World var1) {
-		super(var1);
+	public EntityMinecartHopper(World par1World) {
+		super(par1World);
 	}
 
-	public EntityMinecartHopper(World var1, double var2, double var4, double var6) {
-		super(var1, var2, var4, var6);
+	public EntityMinecartHopper(World par1World, double par2, double par4, double par6) {
+		super(par1World, par2, par4, par6);
 	}
 
 	public int getMinecartType() {
@@ -26,71 +28,104 @@
 		return 1;
 	}
 
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return 5;
 	}
 
-	public boolean interactFirst(EntityPlayer var1) {
-		if(!this.worldObj.isRemote) {
-			var1.displayGUIHopperMinecart(this);
+	/**
+	 * First layer of player interaction
+	 */
+	public boolean interactFirst(EntityPlayer par1EntityPlayer) {
+		if (!this.worldObj.isRemote) {
+			par1EntityPlayer.displayGUIHopperMinecart(this);
 		}
 
 		return true;
 	}
 
-	public void onActivatorRailPass(int var1, int var2, int var3, boolean var4) {
-		boolean var5 = !var4;
-		if(var5 != this.getBlocked()) {
+	/**
+	 * Called every tick the minecart is on an activator rail.
+	 */
+	public void onActivatorRailPass(int par1, int par2, int par3, boolean par4) {
+		boolean var5 = !par4;
+
+		if (var5 != this.getBlocked()) {
 			this.setBlocked(var5);
 		}
-
 	}
 
+	/**
+	 * Get whether this hopper minecart is being blocked by an activator rail.
+	 */
 	public boolean getBlocked() {
 		return this.isBlocked;
 	}
 
-	public void setBlocked(boolean var1) {
-		this.isBlocked = var1;
+	/**
+	 * Set whether this hopper minecart is being blocked by an activator rail.
+	 */
+	public void setBlocked(boolean par1) {
+		this.isBlocked = par1;
 	}
 
+	/**
+	 * Returns the worldObj for this tileEntity.
+	 */
 	public World getWorldObj() {
 		return this.worldObj;
 	}
 
+	/**
+	 * Gets the world X position for this hopper entity.
+	 */
 	public double getXPos() {
 		return this.posX;
 	}
 
+	/**
+	 * Gets the world Y position for this hopper entity.
+	 */
 	public double getYPos() {
 		return this.posY;
 	}
 
+	/**
+	 * Gets the world Z position for this hopper entity.
+	 */
 	public double getZPos() {
 		return this.posZ;
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		super.onUpdate();
-		if(!this.worldObj.isRemote && this.isEntityAlive() && this.getBlocked()) {
+
+		if (!this.worldObj.isRemote && this.isEntityAlive() && this.getBlocked()) {
 			--this.transferTicker;
-			if(!this.canTransfer()) {
+
+			if (!this.canTransfer()) {
 				this.setTransferTicker(0);
-				if(this.func_96112_aD()) {
+
+				if (this.func_96112_aD()) {
 					this.setTransferTicker(4);
 					this.onInventoryChanged();
 				}
 			}
 		}
-
 	}
 
 	public boolean func_96112_aD() {
-		if(TileEntityHopper.suckItemsIntoHopper(this)) {
+		if (TileEntityHopper.suckItemsIntoHopper(this)) {
 			return true;
 		} else {
 			List var1 = this.worldObj.selectEntitiesWithinAABB(EntityItem.class, this.boundingBox.expand(0.25D, 0.0D, 0.25D), IEntitySelector.selectAnything);
-			if(var1.size() > 0) {
+
+			if (var1.size() > 0) {
 				TileEntityHopper.insertStackFromEntity(this, (EntityItem)var1.get(0));
 			}
 
@@ -98,25 +133,37 @@
 		}
 	}
 
-	public void killMinecart(DamageSource var1) {
-		super.killMinecart(var1);
+	public void killMinecart(DamageSource par1DamageSource) {
+		super.killMinecart(par1DamageSource);
 		this.dropItemWithOffset(Block.hopperBlock.blockID, 1, 0.0F);
 	}
 
-	protected void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("TransferCooldown", this.transferTicker);
-	}
-
-	protected void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.transferTicker = var1.getInteger("TransferCooldown");
-	}
-
-	public void setTransferTicker(int var1) {
-		this.transferTicker = var1;
-	}
-
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	protected void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setInteger("TransferCooldown", this.transferTicker);
+	}
+
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	protected void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.transferTicker = par1NBTTagCompound.getInteger("TransferCooldown");
+	}
+
+	/**
+	 * Sets the transfer ticker, used to determine the delay between transfers.
+	 */
+	public void setTransferTicker(int par1) {
+		this.transferTicker = par1;
+	}
+
+	/**
+	 * Returns whether the hopper cart can currently transfer an item.
+	 */
 	public boolean canTransfer() {
 		return this.transferTicker > 0;
 	}
