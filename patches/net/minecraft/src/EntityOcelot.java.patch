--- net/minecraft/src/EntityOcelot.java
+++ net/minecraft/src/EntityOcelot.java
@@ -1,10 +1,14 @@
 package net.minecraft.src;
 
 public class EntityOcelot extends EntityTameable {
+
+	/**
+	 * The tempt AI task for this mob, used to prevent taming while it is fleeing.
+	 */
 	private EntityAITempt aiTempt;
 
-	public EntityOcelot(World var1) {
-		super(var1);
+	public EntityOcelot(World par1World) {
+		super(par1World);
 		this.setSize(0.6F, 0.8F);
 		this.getNavigator().setAvoidsWater(true);
 		this.tasks.addTask(1, new EntityAISwimming(this));
@@ -26,13 +30,17 @@
 		this.dataWatcher.addObject(18, Byte.valueOf((byte)0));
 	}
 
+	/**
+	 * main AI tick function, replaces updateEntityActionState
+	 */
 	public void updateAITick() {
-		if(this.getMoveHelper().isUpdating()) {
+		if (this.getMoveHelper().isUpdating()) {
 			double var1 = this.getMoveHelper().getSpeed();
-			if(var1 == 0.6D) {
+
+			if (var1 == 0.6D) {
 				this.setSneaking(true);
 				this.setSprinting(false);
-			} else if(var1 == 1.33D) {
+			} else if (var1 == 1.33D) {
 				this.setSneaking(false);
 				this.setSprinting(true);
 			} else {
@@ -43,13 +51,18 @@
 			this.setSneaking(false);
 			this.setSprinting(false);
 		}
-
 	}
 
+	/**
+	 * Determines if an entity can be despawned, used on idle far away entities
+	 */
 	protected boolean canDespawn() {
 		return !this.isTamed() && this.ticksExisted > 2400;
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
@@ -57,78 +70,111 @@
 	protected void applyEntityAttributes() {
 		super.applyEntityAttributes();
 		this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(10.0D);
-		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute((double)0.3F);
-	}
-
-	protected void fall(float var1) {
-	}
-
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setInteger("CatType", this.getTameSkin());
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.setTameSkin(var1.getInteger("CatType"));
-	}
-
+		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.30000001192092896D);
+	}
+
+	/**
+	 * Called when the mob is falling. Calculates and applies fall damage.
+	 */
+	protected void fall(float par1) {}
+
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setInteger("CatType", this.getTameSkin());
+	}
+
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.setTameSkin(par1NBTTagCompound.getInteger("CatType"));
+	}
+
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
-		return this.isTamed() ? (this.isInLove() ? "mob.cat.purr" : (this.ab.nextInt(4) == 0 ? "mob.cat.purreow" : "mob.cat.meow")) : "";
+		return this.isTamed() ? (this.isInLove() ? "mob.cat.purr" : (this.rand.nextInt(4) == 0 ? "mob.cat.purreow" : "mob.cat.meow")) : "";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.cat.hitt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.cat.hitt";
 	}
 
+	/**
+	 * Returns the volume for the sounds this mob makes.
+	 */
 	protected float getSoundVolume() {
 		return 0.4F;
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.leather.itemID;
 	}
 
-	public boolean attackEntityAsMob(Entity var1) {
-		return var1.attackEntityFrom(DamageSource.causeMobDamage(this), 3.0F);
+	public boolean attackEntityAsMob(Entity par1Entity) {
+		return par1Entity.attackEntityFrom(DamageSource.causeMobDamage(this), 3.0F);
 	}
 
-	public boolean attackEntityFrom(DamageSource var1, float var2) {
-		if(this.isEntityInvulnerable()) {
+	/**
+	 * Called when the entity is attacked.
+	 */
+	public boolean attackEntityFrom(DamageSource par1DamageSource, float par2) {
+		if (this.isEntityInvulnerable()) {
 			return false;
 		} else {
 			this.aiSit.setSitting(false);
-			return super.attackEntityFrom(var1, var2);
+			return super.attackEntityFrom(par1DamageSource, par2);
 		}
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-	}
-
-	public boolean interact(EntityPlayer var1) {
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		if(this.isTamed()) {
-			if(var1.getCommandSenderName().equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {}
+
+	/**
+	 * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+	 */
+	public boolean interact(EntityPlayer par1EntityPlayer) {
+		ItemStack var2 = par1EntityPlayer.inventory.getCurrentItem();
+
+		if (this.isTamed()) {
+			if (par1EntityPlayer.getCommandSenderName().equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
 				this.aiSit.setSitting(!this.isSitting());
 			}
-		} else if(this.aiTempt.isRunning() && var2 != null && var2.itemID == Item.fishRaw.itemID && var1.getDistanceSqToEntity(this) < 9.0D) {
-			if(!var1.capabilities.isCreativeMode) {
+		} else if (this.aiTempt.isRunning() && var2 != null && var2.itemID == Item.fishRaw.itemID && par1EntityPlayer.getDistanceSqToEntity(this) < 9.0D) {
+			if (!par1EntityPlayer.capabilities.isCreativeMode) {
 				--var2.stackSize;
 			}
 
-			if(var2.stackSize <= 0) {
-				var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+			if (var2.stackSize <= 0) {
+				par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, (ItemStack)null);
 			}
 
-			if(!this.worldObj.isRemote) {
-				if(this.ab.nextInt(3) == 0) {
+			if (!this.worldObj.isRemote) {
+				if (this.rand.nextInt(3) == 0) {
 					this.setTamed(true);
-					this.setTameSkin(1 + this.worldObj.s.nextInt(3));
-					this.setOwner(var1.getCommandSenderName());
+					this.setTameSkin(1 + this.worldObj.rand.nextInt(3));
+					this.setOwner(par1EntityPlayer.getCommandSenderName());
 					this.playTameEffect(true);
 					this.aiSit.setSitting(true);
 					this.worldObj.setEntityState(this, (byte)7);
@@ -141,12 +187,16 @@
 			return true;
 		}
 
-		return super.interact(var1);
+		return super.interact(par1EntityPlayer);
 	}
 
-	public EntityOcelot spawnBabyAnimal(EntityAgeable var1) {
+	/**
+	 * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
+	 */
+	public EntityOcelot spawnBabyAnimal(EntityAgeable par1EntityAgeable) {
 		EntityOcelot var2 = new EntityOcelot(this.worldObj);
-		if(this.isTamed()) {
+
+		if (this.isTamed()) {
 			var2.setOwner(this.getOwnerName());
 			var2.setTamed(true);
 			var2.setTameSkin(this.getTameSkin());
@@ -155,19 +205,26 @@
 		return var2;
 	}
 
-	public boolean isBreedingItem(ItemStack var1) {
-		return var1 != null && var1.itemID == Item.fishRaw.itemID;
+	/**
+	 * Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on
+	 * the animal type)
+	 */
+	public boolean isBreedingItem(ItemStack par1ItemStack) {
+		return par1ItemStack != null && par1ItemStack.itemID == Item.fishRaw.itemID;
 	}
 
-	public boolean canMateWith(EntityAnimal var1) {
-		if(var1 == this) {
-			return false;
-		} else if(!this.isTamed()) {
-			return false;
-		} else if(!(var1 instanceof EntityOcelot)) {
+	/**
+	 * Returns true if the mob is currently able to mate with the specified mob.
+	 */
+	public boolean canMateWith(EntityAnimal par1EntityAnimal) {
+		if (par1EntityAnimal == this) {
+			return false;
+		} else if (!this.isTamed()) {
+			return false;
+		} else if (!(par1EntityAnimal instanceof EntityOcelot)) {
 			return false;
 		} else {
-			EntityOcelot var2 = (EntityOcelot)var1;
+			EntityOcelot var2 = (EntityOcelot)par1EntityAnimal;
 			return !var2.isTamed() ? false : this.isInLove() && var2.isInLove();
 		}
 	}
@@ -176,24 +233,29 @@
 		return this.dataWatcher.getWatchableObjectByte(18);
 	}
 
-	public void setTameSkin(int var1) {
-		this.dataWatcher.updateObject(18, Byte.valueOf((byte)var1));
+	public void setTameSkin(int par1) {
+		this.dataWatcher.updateObject(18, Byte.valueOf((byte)par1));
 	}
 
+	/**
+	 * Checks if the entity's current position is a valid location to spawn this entity.
+	 */
 	public boolean getCanSpawnHere() {
-		if(this.worldObj.s.nextInt(3) == 0) {
+		if (this.worldObj.rand.nextInt(3) == 0) {
 			return false;
 		} else {
-			if(this.worldObj.checkNoEntityCollision(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox)) {
+			if (this.worldObj.checkNoEntityCollision(this.boundingBox) && this.worldObj.getCollidingBoundingBoxes(this, this.boundingBox).isEmpty() && !this.worldObj.isAnyLiquid(this.boundingBox)) {
 				int var1 = MathHelper.floor_double(this.posX);
 				int var2 = MathHelper.floor_double(this.boundingBox.minY);
 				int var3 = MathHelper.floor_double(this.posZ);
-				if(var2 < 63) {
+
+				if (var2 < 63) {
 					return false;
 				}
 
 				int var4 = this.worldObj.getBlockId(var1, var2 - 1, var3);
-				if(var4 == Block.grass.blockID || var4 == Block.leaves.blockID) {
+
+				if (var4 == Block.grass.blockID || var4 == Block.leaves.blockID) {
 					return true;
 				}
 			}
@@ -202,14 +264,18 @@
 		}
 	}
 
+	/**
+	 * Gets the username of the entity.
+	 */
 	public String getEntityName() {
 		return this.hasCustomNameTag() ? this.getCustomNameTag() : (this.isTamed() ? "entity.Cat.name" : super.getEntityName());
 	}
 
-	public EntityLivingData onSpawnWithEgg(EntityLivingData var1) {
-		var1 = super.onSpawnWithEgg(var1);
-		if(this.worldObj.s.nextInt(7) == 0) {
-			for(int var2 = 0; var2 < 2; ++var2) {
+	public EntityLivingData onSpawnWithEgg(EntityLivingData par1EntityLivingData) {
+		par1EntityLivingData = super.onSpawnWithEgg(par1EntityLivingData);
+
+		if (this.worldObj.rand.nextInt(7) == 0) {
+			for (int var2 = 0; var2 < 2; ++var2) {
 				EntityOcelot var3 = new EntityOcelot(this.worldObj);
 				var3.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
 				var3.setGrowingAge(-24000);
@@ -217,10 +283,10 @@
 			}
 		}
 
-		return var1;
+		return par1EntityLivingData;
 	}
 
-	public EntityAgeable createChild(EntityAgeable var1) {
-		return this.spawnBabyAnimal(var1);
+	public EntityAgeable createChild(EntityAgeable par1EntityAgeable) {
+		return this.spawnBabyAnimal(par1EntityAgeable);
 	}
 }
