--- net/minecraft/src/EntityPig.java
+++ net/minecraft/src/EntityPig.java
@@ -1,10 +1,12 @@
 package net.minecraft.src;
 
 public class EntityPig extends EntityAnimal {
+
+	/** AI task for player control. */
 	private final EntityAIControlledByPlayer aiControlledByPlayer;
 
-	public EntityPig(World var1) {
-		super(var1);
+	public EntityPig(World par1World) {
+		super(par1World);
 		this.setSize(0.9F, 0.9F);
 		this.getNavigator().setAvoidsWater(true);
 		this.tasks.addTask(0, new EntityAISwimming(this));
@@ -19,6 +21,9 @@
 		this.tasks.addTask(8, new EntityAILookIdle(this));
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
@@ -33,6 +38,10 @@
 		super.updateAITasks();
 	}
 
+	/**
+	 * returns true if all the conditions for steering the entity are met. For pigs, this is true if it is being ridden by
+	 * a player and the player is holding a carrot-on-a-stick
+	 */
 	public boolean canBeSteered() {
 		ItemStack var1 = ((EntityPlayer)this.riddenByEntity).getHeldItem();
 		return var1 != null && var1.itemID == Item.carrotOnAStick.itemID;
@@ -43,79 +52,114 @@
 		this.dataWatcher.addObject(16, Byte.valueOf((byte)0));
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Saddle", this.getSaddled());
-	}
-
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.setSaddled(var1.getBoolean("Saddle"));
-	}
-
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("Saddle", this.getSaddled());
+	}
+
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.setSaddled(par1NBTTagCompound.getBoolean("Saddle"));
+	}
+
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.pig.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.pig.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.pig.death";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.pig.step", 0.15F, 1.0F);
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		if(super.interact(var1)) {
-			return true;
-		} else if(!this.getSaddled() || this.worldObj.isRemote || this.riddenByEntity != null && this.riddenByEntity != var1) {
+	/**
+	 * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+	 */
+	public boolean interact(EntityPlayer par1EntityPlayer) {
+		if (super.interact(par1EntityPlayer)) {
+			return true;
+		} else if (this.getSaddled() && !this.worldObj.isRemote && (this.riddenByEntity == null || this.riddenByEntity == par1EntityPlayer)) {
+			par1EntityPlayer.mountEntity(this);
+			return true;
+		} else {
 			return false;
-		} else {
-			var1.mountEntity(this);
-			return true;
 		}
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return this.isBurning() ? Item.porkCooked.itemID : Item.porkRaw.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(3) + 1 + this.ab.nextInt(1 + var2);
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(3) + 1 + this.rand.nextInt(1 + par2);
 
-		for(int var4 = 0; var4 < var3; ++var4) {
-			if(this.isBurning()) {
+		for (int var4 = 0; var4 < var3; ++var4) {
+			if (this.isBurning()) {
 				this.dropItem(Item.porkCooked.itemID, 1);
 			} else {
 				this.dropItem(Item.porkRaw.itemID, 1);
 			}
 		}
 
-		if(this.getSaddled()) {
+		if (this.getSaddled()) {
 			this.dropItem(Item.saddle.itemID, 1);
 		}
-
 	}
 
+	/**
+	 * Returns true if the pig is saddled.
+	 */
 	public boolean getSaddled() {
 		return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
 	}
 
-	public void setSaddled(boolean var1) {
-		if(var1) {
+	/**
+	 * Set or remove the saddle of the pig.
+	 */
+	public void setSaddled(boolean par1) {
+		if (par1) {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)1));
 		} else {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)0));
 		}
-
 	}
 
-	public void onStruckByLightning(EntityLightningBolt var1) {
-		if(!this.worldObj.isRemote) {
+	/**
+	 * Called when a lightning bolt hits the entity.
+	 */
+	public void onStruckByLightning(EntityLightningBolt par1EntityLightningBolt) {
+		if (!this.worldObj.isRemote) {
 			EntityPigZombie var2 = new EntityPigZombie(this.worldObj);
 			var2.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
 			this.worldObj.spawnEntityInWorld(var2);
@@ -123,27 +167,40 @@
 		}
 	}
 
-	protected void fall(float var1) {
-		super.fall(var1);
-		if(var1 > 5.0F && this.riddenByEntity instanceof EntityPlayer) {
+	/**
+	 * Called when the mob is falling. Calculates and applies fall damage.
+	 */
+	protected void fall(float par1) {
+		super.fall(par1);
+
+		if (par1 > 5.0F && this.riddenByEntity instanceof EntityPlayer) {
 			((EntityPlayer)this.riddenByEntity).triggerAchievement(AchievementList.flyPig);
 		}
-
 	}
 
-	public EntityPig spawnBabyAnimal(EntityAgeable var1) {
+	/**
+	 * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
+	 */
+	public EntityPig spawnBabyAnimal(EntityAgeable par1EntityAgeable) {
 		return new EntityPig(this.worldObj);
 	}
 
-	public boolean isBreedingItem(ItemStack var1) {
-		return var1 != null && var1.itemID == Item.carrot.itemID;
+	/**
+	 * Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on
+	 * the animal type)
+	 */
+	public boolean isBreedingItem(ItemStack par1ItemStack) {
+		return par1ItemStack != null && par1ItemStack.itemID == Item.carrot.itemID;
 	}
 
+	/**
+	 * Return the AI task for player control.
+	 */
 	public EntityAIControlledByPlayer getAIControlledByPlayer() {
 		return this.aiControlledByPlayer;
 	}
 
-	public EntityAgeable createChild(EntityAgeable var1) {
-		return this.spawnBabyAnimal(var1);
+	public EntityAgeable createChild(EntityAgeable par1EntityAgeable) {
+		return this.spawnBabyAnimal(par1EntityAgeable);
 	}
 }
