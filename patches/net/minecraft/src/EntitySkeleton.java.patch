--- net/minecraft/src/EntitySkeleton.java
+++ net/minecraft/src/EntitySkeleton.java
@@ -6,8 +6,8 @@
 	private EntityAIArrowAttack aiArrowAttack = new EntityAIArrowAttack(this, 1.0D, 20, 60, 15.0F);
 	private EntityAIAttackOnCollide aiAttackOnCollide = new EntityAIAttackOnCollide(this, EntityPlayer.class, 1.2D, false);
 
-	public EntitySkeleton(World var1) {
-		super(var1);
+	public EntitySkeleton(World par1World) {
+		super(par1World);
 		this.tasks.addTask(1, new EntityAISwimming(this));
 		this.tasks.addTask(2, new EntityAIRestrictSun(this));
 		this.tasks.addTask(3, new EntityAIFleeSun(this, 1.0D));
@@ -16,10 +16,10 @@
 		this.tasks.addTask(6, new EntityAILookIdle(this));
 		this.targetTasks.addTask(1, new EntityAIHurtByTarget(this, false));
 		this.targetTasks.addTask(2, new EntityAINearestAttackableTarget(this, EntityPlayer.class, 0, true));
-		if(var1 != null && !var1.isRemote) {
+
+		if (par1World != null && !par1World.isRemote) {
 			this.setCombatTask();
 		}
-
 	}
 
 	protected void applyEntityAttributes() {
@@ -32,30 +32,45 @@
 		this.dataWatcher.addObject(13, new Byte((byte)0));
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.skeleton.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.skeleton.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.skeleton.death";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.skeleton.step", 0.15F, 1.0F);
 	}
 
-	public boolean attackEntityAsMob(Entity var1) {
-		if(super.attackEntityAsMob(var1)) {
-			if(this.getSkeletonType() == 1 && var1 instanceof EntityLivingBase) {
-				((EntityLivingBase)var1).addPotionEffect(new PotionEffect(Potion.wither.id, 200));
+	public boolean attackEntityAsMob(Entity par1Entity) {
+		if (super.attackEntityAsMob(par1Entity)) {
+			if (this.getSkeletonType() == 1 && par1Entity instanceof EntityLivingBase) {
+				((EntityLivingBase)par1Entity).addPotionEffect(new PotionEffect(Potion.wither.id, 200));
 			}
 
 			return true;
@@ -64,20 +79,30 @@
 		}
 	}
 
+	/**
+	 * Get this Entity's EnumCreatureAttribute
+	 */
 	public EnumCreatureAttribute getCreatureAttribute() {
 		return EnumCreatureAttribute.UNDEAD;
 	}
 
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
-		if(this.worldObj.isDaytime() && !this.worldObj.isRemote) {
+		if (this.worldObj.isDaytime() && !this.worldObj.isRemote) {
 			float var1 = this.getBrightness(1.0F);
-			if(var1 > 0.5F && this.ab.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
+
+			if (var1 > 0.5F && this.rand.nextFloat() * 30.0F < (var1 - 0.4F) * 2.0F && this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.posX), MathHelper.floor_double(this.posY), MathHelper.floor_double(this.posZ))) {
 				boolean var2 = true;
-				ItemStack var3 = this.getEquipmentInSlot(4);
-				if(var3 != null) {
-					if(var3.isItemStackDamageable()) {
-						var3.setItemDamage(var3.getItemDamageForDisplay() + this.ab.nextInt(2));
-						if(var3.getItemDamageForDisplay() >= var3.getMaxDamage()) {
+				ItemStack var3 = this.getCurrentItemOrArmor(4);
+
+				if (var3 != null) {
+					if (var3.isItemStackDamageable()) {
+						var3.setItemDamage(var3.getItemDamageForDisplay() + this.rand.nextInt(2));
+
+						if (var3.getItemDamageForDisplay() >= var3.getMaxDamage()) {
 							this.renderBrokenItemStack(var3);
 							this.setCurrentItemOrArmor(4, (ItemStack)null);
 						}
@@ -86,85 +111,102 @@
 					var2 = false;
 				}
 
-				if(var2) {
+				if (var2) {
 					this.setFire(8);
 				}
 			}
 		}
 
-		if(this.worldObj.isRemote && this.getSkeletonType() == 1) {
+		if (this.worldObj.isRemote && this.getSkeletonType() == 1) {
 			this.setSize(0.72F, 2.34F);
 		}
 
 		super.onLivingUpdate();
 	}
 
+	/**
+	 * Handles updating while being ridden by an entity
+	 */
 	public void updateRidden() {
 		super.updateRidden();
-		if(this.ridingEntity instanceof EntityCreature) {
+
+		if (this.ridingEntity instanceof EntityCreature) {
 			EntityCreature var1 = (EntityCreature)this.ridingEntity;
 			this.renderYawOffset = var1.renderYawOffset;
 		}
-
 	}
 
-	public void onDeath(DamageSource var1) {
-		super.onDeath(var1);
-		if(var1.getSourceOfDamage() instanceof EntityArrow && var1.getEntity() instanceof EntityPlayer) {
-			EntityPlayer var2 = (EntityPlayer)var1.getEntity();
+	/**
+	 * Called when the mob's health reaches 0.
+	 */
+	public void onDeath(DamageSource par1DamageSource) {
+		super.onDeath(par1DamageSource);
+
+		if (par1DamageSource.getSourceOfDamage() instanceof EntityArrow && par1DamageSource.getEntity() instanceof EntityPlayer) {
+			EntityPlayer var2 = (EntityPlayer)par1DamageSource.getEntity();
 			double var3 = var2.posX - this.posX;
 			double var5 = var2.posZ - this.posZ;
-			if(var3 * var3 + var5 * var5 >= 2500.0D) {
+
+			if (var3 * var3 + var5 * var5 >= 2500.0D) {
 				var2.triggerAchievement(AchievementList.snipeSkeleton);
 			}
 		}
-
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.arrow.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
 		int var3;
 		int var4;
-		if(this.getSkeletonType() == 1) {
-			var3 = this.ab.nextInt(3 + var2) - 1;
-
-			for(var4 = 0; var4 < var3; ++var4) {
+
+		if (this.getSkeletonType() == 1) {
+			var3 = this.rand.nextInt(3 + par2) - 1;
+
+			for (var4 = 0; var4 < var3; ++var4) {
 				this.dropItem(Item.coal.itemID, 1);
 			}
 		} else {
-			var3 = this.ab.nextInt(3 + var2);
+			var3 = this.rand.nextInt(3 + par2);
 
-			for(var4 = 0; var4 < var3; ++var4) {
+			for (var4 = 0; var4 < var3; ++var4) {
 				this.dropItem(Item.arrow.itemID, 1);
 			}
 		}
 
-		var3 = this.ab.nextInt(3 + var2);
+		var3 = this.rand.nextInt(3 + par2);
 
-		for(var4 = 0; var4 < var3; ++var4) {
+		for (var4 = 0; var4 < var3; ++var4) {
 			this.dropItem(Item.bone.itemID, 1);
 		}
-
 	}
 
-	protected void dropRareDrop(int var1) {
-		if(this.getSkeletonType() == 1) {
+	protected void dropRareDrop(int par1) {
+		if (this.getSkeletonType() == 1) {
 			this.entityDropItem(new ItemStack(Item.skull.itemID, 1, 1), 0.0F);
 		}
-
 	}
 
+	/**
+	 * Makes entity wear random armor based on difficulty
+	 */
 	protected void addRandomArmor() {
 		super.addRandomArmor();
 		this.setCurrentItemOrArmor(0, new ItemStack(Item.bow));
 	}
 
-	public EntityLivingData onSpawnWithEgg(EntityLivingData var1) {
-		var1 = super.onSpawnWithEgg(var1);
-		if(this.worldObj.provider instanceof WorldProviderHell && this.getRNG().nextInt(5) > 0) {
+	public EntityLivingData onSpawnWithEgg(EntityLivingData par1EntityLivingData) {
+		par1EntityLivingData = super.onSpawnWithEgg(par1EntityLivingData);
+
+		if (this.worldObj.provider instanceof WorldProviderHell && this.getRNG().nextInt(5) > 0) {
 			this.tasks.addTask(4, this.aiAttackOnCollide);
 			this.setSkeletonType(1);
 			this.setCurrentItemOrArmor(0, new ItemStack(Item.swordStone));
@@ -175,44 +217,53 @@
 			this.enchantEquipment();
 		}
 
-		this.setCanPickUpLoot(this.ab.nextFloat() < 0.55F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ));
-		if(this.getEquipmentInSlot(4) == null) {
+		this.setCanPickUpLoot(this.rand.nextFloat() < 0.55F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ));
+
+		if (this.getCurrentItemOrArmor(4) == null) {
 			Calendar var2 = this.worldObj.getCurrentDate();
-			if(var2.get(2) + 1 == 10 && var2.get(5) == 31 && this.ab.nextFloat() < 0.25F) {
-				this.setCurrentItemOrArmor(4, new ItemStack(this.ab.nextFloat() < 0.1F ? Block.pumpkinLantern : Block.pumpkin));
+
+			if (var2.get(2) + 1 == 10 && var2.get(5) == 31 && this.rand.nextFloat() < 0.25F) {
+				this.setCurrentItemOrArmor(4, new ItemStack(this.rand.nextFloat() < 0.1F ? Block.pumpkinLantern : Block.pumpkin));
 				this.equipmentDropChances[4] = 0.0F;
 			}
 		}
 
-		return var1;
+		return par1EntityLivingData;
 	}
 
+	/**
+	 * sets this entity's combat AI.
+	 */
 	public void setCombatTask() {
 		this.tasks.removeTask(this.aiAttackOnCollide);
 		this.tasks.removeTask(this.aiArrowAttack);
 		ItemStack var1 = this.getHeldItem();
-		if(var1 != null && var1.itemID == Item.bow.itemID) {
+
+		if (var1 != null && var1.itemID == Item.bow.itemID) {
 			this.tasks.addTask(4, this.aiArrowAttack);
 		} else {
 			this.tasks.addTask(4, this.aiAttackOnCollide);
 		}
-
 	}
 
-	public void attackEntityWithRangedAttack(EntityLivingBase var1, float var2) {
-		EntityArrow var3 = new EntityArrow(this.worldObj, this, var1, 1.6F, (float)(14 - this.worldObj.difficultySetting * 4));
+	/**
+	 * Attack the specified entity using a ranged attack.
+	 */
+	public void attackEntityWithRangedAttack(EntityLivingBase par1EntityLivingBase, float par2) {
+		EntityArrow var3 = new EntityArrow(this.worldObj, this, par1EntityLivingBase, 1.6F, (float)(14 - this.worldObj.difficultySetting * 4));
 		int var4 = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, this.getHeldItem());
 		int var5 = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, this.getHeldItem());
-		var3.setDamage((double)(var2 * 2.0F) + this.ab.nextGaussian() * 0.25D + (double)((float)this.worldObj.difficultySetting * 0.11F));
-		if(var4 > 0) {
+		var3.setDamage((double)(par2 * 2.0F) + this.rand.nextGaussian() * 0.25D + (double)((float)this.worldObj.difficultySetting * 0.11F));
+
+		if (var4 > 0) {
 			var3.setDamage(var3.getDamage() + (double)var4 * 0.5D + 0.5D);
 		}
 
-		if(var5 > 0) {
+		if (var5 > 0) {
 			var3.setKnockbackStrength(var5);
 		}
 
-		if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, this.getHeldItem()) > 0 || this.getSkeletonType() == 1) {
+		if (EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, this.getHeldItem()) > 0 || this.getSkeletonType() == 1) {
 			var3.setFire(100);
 		}
 
@@ -220,44 +271,63 @@
 		this.worldObj.spawnEntityInWorld(var3);
 	}
 
+	/**
+	 * Return this skeleton's type.
+	 */
 	public int getSkeletonType() {
 		return this.dataWatcher.getWatchableObjectByte(13);
 	}
 
-	public void setSkeletonType(int var1) {
-		this.dataWatcher.updateObject(13, Byte.valueOf((byte)var1));
-		this.isImmuneToFire = var1 == 1;
-		if(var1 == 1) {
+	/**
+	 * Set this skeleton's type.
+	 */
+	public void setSkeletonType(int par1) {
+		this.dataWatcher.updateObject(13, Byte.valueOf((byte)par1));
+		this.isImmuneToFire = par1 == 1;
+
+		if (par1 == 1) {
 			this.setSize(0.72F, 2.34F);
 		} else {
 			this.setSize(0.6F, 1.8F);
 		}
-
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		if(var1.hasKey("SkeletonType")) {
-			byte var2 = var1.getByte("SkeletonType");
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+
+		if (par1NBTTagCompound.hasKey("SkeletonType")) {
+			byte var2 = par1NBTTagCompound.getByte("SkeletonType");
 			this.setSkeletonType(var2);
 		}
 
 		this.setCombatTask();
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setByte("SkeletonType", (byte)this.getSkeletonType());
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setByte("SkeletonType", (byte)this.getSkeletonType());
 	}
 
-	public void setCurrentItemOrArmor(int var1, ItemStack var2) {
-		super.setCurrentItemOrArmor(var1, var2);
-		if(!this.worldObj.isRemote && var1 == 0) {
+	/**
+	 * Sets the held item, or an armor slot. Slot 0 is held item. Slot 1-4 is armor. Params: Item, slot
+	 */
+	public void setCurrentItemOrArmor(int par1, ItemStack par2ItemStack) {
+		super.setCurrentItemOrArmor(par1, par2ItemStack);
+
+		if (!this.worldObj.isRemote && par1 == 0) {
 			this.setCombatTask();
 		}
-
 	}
 
+	/**
+	 * Returns the Y Offset of this entity.
+	 */
 	public double getYOffset() {
 		return super.getYOffset() - 0.5D;
 	}
