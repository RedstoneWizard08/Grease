--- net/minecraft/src/EntitySpider.java
+++ net/minecraft/src/EntitySpider.java
@@ -1,8 +1,8 @@
 package net.minecraft.src;
 
 public class EntitySpider extends EntityMob {
-	public EntitySpider(World var1) {
-		super(var1);
+	public EntitySpider(World par1World) {
+		super(par1World);
 		this.setSize(1.4F, 0.9F);
 	}
 
@@ -11,23 +11,31 @@
 		this.dataWatcher.addObject(16, new Byte((byte)0));
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		super.onUpdate();
-		if(!this.worldObj.isRemote) {
+
+		if (!this.worldObj.isRemote) {
 			this.setBesideClimbableBlock(this.isCollidedHorizontally);
 		}
-
 	}
 
 	protected void applyEntityAttributes() {
 		super.applyEntityAttributes();
 		this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(16.0D);
-		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute((double)0.8F);
+		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.800000011920929D);
 	}
 
+	/**
+	 * Finds the closest player within 16 blocks to attack, or null if this Entity isn't interested in attacking (Animals,
+	 * Spiders at day, peaceful PigZombies).
+	 */
 	protected Entity findPlayerToAttack() {
 		float var1 = this.getBrightness(1.0F);
-		if(var1 < 0.5F) {
+
+		if (var1 < 0.5F) {
 			double var2 = 16.0D;
 			return this.worldObj.getClosestVulnerablePlayerToEntity(this, var2);
 		} else {
@@ -35,77 +43,116 @@
 		}
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.spider.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.spider.say";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.spider.death";
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.spider.step", 0.15F, 1.0F);
 	}
 
-	protected void attackEntity(Entity var1, float var2) {
+	/**
+	 * Basic mob attack. Default to touch of death in EntityCreature. Overridden by each mob to define their attack.
+	 */
+	protected void attackEntity(Entity par1Entity, float par2) {
 		float var3 = this.getBrightness(1.0F);
-		if(var3 > 0.5F && this.ab.nextInt(100) == 0) {
+
+		if (var3 > 0.5F && this.rand.nextInt(100) == 0) {
 			this.entityToAttack = null;
 		} else {
-			if(var2 > 2.0F && var2 < 6.0F && this.ab.nextInt(10) == 0) {
-				if(this.onGround) {
-					double var4 = var1.posX - this.posX;
-					double var6 = var1.posZ - this.posZ;
+			if (par2 > 2.0F && par2 < 6.0F && this.rand.nextInt(10) == 0) {
+				if (this.onGround) {
+					double var4 = par1Entity.posX - this.posX;
+					double var6 = par1Entity.posZ - this.posZ;
 					float var8 = MathHelper.sqrt_double(var4 * var4 + var6 * var6);
-					this.motionX = var4 / (double)var8 * 0.5D * (double)0.8F + this.motionX * (double)0.2F;
-					this.motionZ = var6 / (double)var8 * 0.5D * (double)0.8F + this.motionZ * (double)0.2F;
-					this.motionY = (double)0.4F;
+					this.motionX = var4 / (double)var8 * 0.5D * 0.800000011920929D + this.motionX * 0.20000000298023224D;
+					this.motionZ = var6 / (double)var8 * 0.5D * 0.800000011920929D + this.motionZ * 0.20000000298023224D;
+					this.motionY = 0.4000000059604645D;
 				}
 			} else {
-				super.attackEntity(var1, var2);
+				super.attackEntity(par1Entity, par2);
 			}
-
 		}
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return Item.silk.itemID;
 	}
 
-	protected void dropFewItems(boolean var1, int var2) {
-		super.dropFewItems(var1, var2);
-		if(var1 && (this.ab.nextInt(3) == 0 || this.ab.nextInt(1 + var2) > 0)) {
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		super.dropFewItems(par1, par2);
+
+		if (par1 && (this.rand.nextInt(3) == 0 || this.rand.nextInt(1 + par2) > 0)) {
 			this.dropItem(Item.spiderEye.itemID, 1);
 		}
-
 	}
 
+	/**
+	 * returns true if this entity is by a ladder, false otherwise
+	 */
 	public boolean isOnLadder() {
 		return this.isBesideClimbableBlock();
 	}
 
-	public void setInWeb() {
-	}
+	/**
+	 * Sets the Entity inside a web block.
+	 */
+	public void setInWeb() {}
 
+	/**
+	 * Get this Entity's EnumCreatureAttribute
+	 */
 	public EnumCreatureAttribute getCreatureAttribute() {
 		return EnumCreatureAttribute.ARTHROPOD;
 	}
 
-	public boolean isPotionApplicable(PotionEffect var1) {
-		return var1.getPotionID() == Potion.poison.id ? false : super.isPotionApplicable(var1);
+	public boolean isPotionApplicable(PotionEffect par1PotionEffect) {
+		return par1PotionEffect.getPotionID() == Potion.poison.id ? false : super.isPotionApplicable(par1PotionEffect);
 	}
 
+	/**
+	 * Returns true if the WatchableObject (Byte) is 0x01 otherwise returns false. The WatchableObject is updated using
+	 * setBesideClimableBlock.
+	 */
 	public boolean isBesideClimbableBlock() {
 		return (this.dataWatcher.getWatchableObjectByte(16) & 1) != 0;
 	}
 
-	public void setBesideClimbableBlock(boolean var1) {
+	/**
+	 * Updates the WatchableObject (Byte) created in entityInit(), setting it to 0x01 if par1 is true or 0x00 if it is
+	 * false.
+	 */
+	public void setBesideClimbableBlock(boolean par1) {
 		byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-		if(var1) {
+
+		if (par1) {
 			var2 = (byte)(var2 | 1);
 		} else {
 			var2 &= -2;
@@ -114,9 +161,10 @@
 		this.dataWatcher.updateObject(16, Byte.valueOf(var2));
 	}
 
-	public EntityLivingData onSpawnWithEgg(EntityLivingData var1) {
-		Object var3 = super.onSpawnWithEgg(var1);
-		if(this.worldObj.s.nextInt(100) == 0) {
+	public EntityLivingData onSpawnWithEgg(EntityLivingData par1EntityLivingData) {
+		Object par1EntityLivingData1 = super.onSpawnWithEgg(par1EntityLivingData);
+
+		if (this.worldObj.rand.nextInt(100) == 0) {
 			EntitySkeleton var2 = new EntitySkeleton(this.worldObj);
 			var2.setLocationAndAngles(this.posX, this.posY, this.posZ, this.rotationYaw, 0.0F);
 			var2.onSpawnWithEgg((EntityLivingData)null);
@@ -124,20 +172,22 @@
 			var2.mountEntity(this);
 		}
 
-		if(var3 == null) {
-			var3 = new SpiderEffectsGroupData();
-			if(this.worldObj.difficultySetting > 2 && this.worldObj.s.nextFloat() < 0.1F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ)) {
-				((SpiderEffectsGroupData)var3).func_111104_a(this.worldObj.s);
+		if (par1EntityLivingData1 == null) {
+			par1EntityLivingData1 = new SpiderEffectsGroupData();
+
+			if (this.worldObj.difficultySetting > 2 && this.worldObj.rand.nextFloat() < 0.1F * this.worldObj.getLocationTensionFactor(this.posX, this.posY, this.posZ)) {
+				((SpiderEffectsGroupData)par1EntityLivingData1).func_111104_a(this.worldObj.rand);
 			}
 		}
 
-		if(var3 instanceof SpiderEffectsGroupData) {
-			int var4 = ((SpiderEffectsGroupData)var3).field_111105_a;
-			if(var4 > 0 && Potion.potionTypes[var4] != null) {
+		if (par1EntityLivingData1 instanceof SpiderEffectsGroupData) {
+			int var4 = ((SpiderEffectsGroupData)par1EntityLivingData1).field_111105_a;
+
+			if (var4 > 0 && Potion.potionTypes[var4] != null) {
 				this.addPotionEffect(new PotionEffect(var4, Integer.MAX_VALUE));
 			}
 		}
 
-		return (EntityLivingData)var3;
+		return (EntityLivingData)par1EntityLivingData1;
 	}
 }
