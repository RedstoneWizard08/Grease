--- net/minecraft/src/EntityThrowable.java
+++ net/minecraft/src/EntityThrowable.java
@@ -9,32 +9,41 @@
 	private int inTile;
 	protected boolean inGround;
 	public int throwableShake;
-	private EntityLivingBase thrower;
-	private String h;
+
+	/**
+	 * Is the entity that throws this 'thing' (snowball, ender pearl, eye of ender or potion)
+	 */
+	// Spout Start - private to public
+	public EntityLivingBase thrower;
+	// Spout End
+	private String throwerName;
 	private int ticksInGround;
 	private int ticksInAir;
 
-	public EntityThrowable(World var1) {
-		super(var1);
+	public EntityThrowable(World par1World) {
+		super(par1World);
 		this.setSize(0.25F, 0.25F);
 	}
 
-	protected void entityInit() {
-	}
+	protected void entityInit() {}
 
-	public boolean isInRangeToRenderDist(double var1) {
+	/**
+	 * Checks if the entity is in range to render by using the past in distance and comparing it to its average edge length
+	 * * 64 * renderDistanceWeight Args: distance
+	 */
+	public boolean isInRangeToRenderDist(double par1) {
 		double var3 = this.boundingBox.getAverageEdgeLength() * 4.0D;
 		var3 *= 64.0D;
-		return var1 < var3 * var3;
+		return par1 < var3 * var3;
 	}
 
-	public EntityThrowable(World var1, EntityLivingBase var2) {
-		super(var1);
-		this.thrower = var2;
+	public EntityThrowable(World par1World, EntityLivingBase par2EntityLivingBase) {
+		super(par1World);
+		this.thrower = par2EntityLivingBase;
 		this.setSize(0.25F, 0.25F);
-		this.setLocationAndAngles(var2.posX, var2.posY + (double)var2.getEyeHeight(), var2.posZ, var2.rotationYaw, var2.rotationPitch);
+		this.setLocationAndAngles(par2EntityLivingBase.posX, par2EntityLivingBase.posY + (double)par2EntityLivingBase.getEyeHeight(), par2EntityLivingBase.posZ, par2EntityLivingBase.rotationYaw, par2EntityLivingBase.rotationPitch);
 		this.posX -= (double)(MathHelper.cos(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
-		this.posY -= (double)0.1F;
+		this.posY -= 0.10000000149011612D;
 		this.posZ -= (double)(MathHelper.sin(this.rotationYaw / 180.0F * (float)Math.PI) * 0.16F);
 		this.setPosition(this.posX, this.posY, this.posZ);
 		this.yOffset = 0.0F;
@@ -45,11 +54,11 @@
 		this.setThrowableHeading(this.motionX, this.motionY, this.motionZ, this.func_70182_d(), 1.0F);
 	}
 
-	public EntityThrowable(World var1, double var2, double var4, double var6) {
-		super(var1);
+	public EntityThrowable(World par1World, double par2, double par4, double par6) {
+		super(par1World);
 		this.ticksInGround = 0;
 		this.setSize(0.25F, 0.25F);
-		this.setPosition(var2, var4, var6);
+		this.setPosition(par2, par4, par6);
 		this.yOffset = 0.0F;
 	}
 
@@ -61,52 +70,64 @@
 		return 0.0F;
 	}
 
-	public void setThrowableHeading(double var1, double var3, double var5, float var7, float var8) {
-		float var9 = MathHelper.sqrt_double(var1 * var1 + var3 * var3 + var5 * var5);
-		var1 /= (double)var9;
-		var3 /= (double)var9;
-		var5 /= (double)var9;
-		var1 += this.ab.nextGaussian() * (double)0.0075F * (double)var8;
-		var3 += this.ab.nextGaussian() * (double)0.0075F * (double)var8;
-		var5 += this.ab.nextGaussian() * (double)0.0075F * (double)var8;
-		var1 *= (double)var7;
-		var3 *= (double)var7;
-		var5 *= (double)var7;
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		float var10 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var10) * 180.0D / (double)((float)Math.PI));
+	/**
+	 * Similar to setArrowHeading, it's point the throwable entity to a x, y, z direction.
+	 */
+	public void setThrowableHeading(double par1, double par3, double par5, float par7, float par8) {
+		float var9 = MathHelper.sqrt_double(par1 * par1 + par3 * par3 + par5 * par5);
+		par1 /= (double)var9;
+		par3 /= (double)var9;
+		par5 /= (double)var9;
+		par1 += this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
+		par3 += this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
+		par5 += this.rand.nextGaussian() * 0.007499999832361937D * (double)par8;
+		par1 *= (double)par7;
+		par3 *= (double)par7;
+		par5 *= (double)par7;
+		this.motionX = par1;
+		this.motionY = par3;
+		this.motionZ = par5;
+		float var10 = MathHelper.sqrt_double(par1 * par1 + par5 * par5);
+		this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(par1, par5) * 180.0D / Math.PI);
+		this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(par3, (double)var10) * 180.0D / Math.PI);
 		this.ticksInGround = 0;
 	}
 
-	public void setVelocity(double var1, double var3, double var5) {
-		this.motionX = var1;
-		this.motionY = var3;
-		this.motionZ = var5;
-		if(this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
-			float var7 = MathHelper.sqrt_double(var1 * var1 + var5 * var5);
-			this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(var1, var5) * 180.0D / (double)((float)Math.PI));
-			this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(var3, (double)var7) * 180.0D / (double)((float)Math.PI));
+	/**
+	 * Sets the velocity to the args. Args: x, y, z
+	 */
+	public void setVelocity(double par1, double par3, double par5) {
+		this.motionX = par1;
+		this.motionY = par3;
+		this.motionZ = par5;
+
+		if (this.prevRotationPitch == 0.0F && this.prevRotationYaw == 0.0F) {
+			float var7 = MathHelper.sqrt_double(par1 * par1 + par5 * par5);
+			this.prevRotationYaw = this.rotationYaw = (float)(Math.atan2(par1, par5) * 180.0D / Math.PI);
+			this.prevRotationPitch = this.rotationPitch = (float)(Math.atan2(par3, (double)var7) * 180.0D / Math.PI);
 		}
-
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		this.lastTickPosX = this.posX;
 		this.lastTickPosY = this.posY;
 		this.lastTickPosZ = this.posZ;
 		super.onUpdate();
-		if(this.throwableShake > 0) {
+
+		if (this.throwableShake > 0) {
 			--this.throwableShake;
 		}
 
-		if(this.inGround) {
+		if (this.inGround) {
 			int var1 = this.worldObj.getBlockId(this.xTile, this.yTile, this.zTile);
-			if(var1 == this.inTile) {
+
+			if (var1 == this.inTile) {
 				++this.ticksInGround;
-				if(this.ticksInGround == 1200) {
+
+				if (this.ticksInGround == 1200) {
 					this.setDead();
 				}
 
@@ -114,39 +135,43 @@
 			}
 
 			this.inGround = false;
-			this.motionX *= (double)(this.ab.nextFloat() * 0.2F);
-			this.motionY *= (double)(this.ab.nextFloat() * 0.2F);
-			this.motionZ *= (double)(this.ab.nextFloat() * 0.2F);
+			this.motionX *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionY *= (double)(this.rand.nextFloat() * 0.2F);
+			this.motionZ *= (double)(this.rand.nextFloat() * 0.2F);
 			this.ticksInGround = 0;
 			this.ticksInAir = 0;
 		} else {
 			++this.ticksInAir;
 		}
 
-		Vec3 var16 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
+		Vec3 var17 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
 		Vec3 var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		MovingObjectPosition var3 = this.worldObj.rayTraceBlocks(var16, var2);
-		var16 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
+		MovingObjectPosition var3 = this.worldObj.clip(var17, var2);
+		var17 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX, this.posY, this.posZ);
 		var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.posX + this.motionX, this.posY + this.motionY, this.posZ + this.motionZ);
-		if(var3 != null) {
+
+		if (var3 != null) {
 			var2 = this.worldObj.getWorldVec3Pool().getVecFromPool(var3.hitVec.xCoord, var3.hitVec.yCoord, var3.hitVec.zCoord);
 		}
 
-		if(!this.worldObj.isRemote) {
+		if (!this.worldObj.isRemote) {
 			Entity var4 = null;
 			List var5 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.boundingBox.addCoord(this.motionX, this.motionY, this.motionZ).expand(1.0D, 1.0D, 1.0D));
 			double var6 = 0.0D;
 			EntityLivingBase var8 = this.getThrower();
 
-			for(int var9 = 0; var9 < var5.size(); ++var9) {
+			for (int var9 = 0; var9 < var5.size(); ++var9) {
 				Entity var10 = (Entity)var5.get(var9);
-				if(var10.canBeCollidedWith() && (var10 != var8 || this.ticksInAir >= 5)) {
+
+				if (var10.canBeCollidedWith() && (var10 != var8 || this.ticksInAir >= 5)) {
 					float var11 = 0.3F;
 					AxisAlignedBB var12 = var10.boundingBox.expand((double)var11, (double)var11, (double)var11);
-					MovingObjectPosition var13 = var12.calculateIntercept(var16, var2);
-					if(var13 != null) {
-						double var14 = var16.distanceTo(var13.hitVec);
-						if(var14 < var6 || var6 == 0.0D) {
+					MovingObjectPosition var13 = var12.calculateIntercept(var17, var2);
+
+					if (var13 != null) {
+						double var14 = var17.distanceTo(var13.hitVec);
+
+						if (var14 < var6 || var6 == 0.0D) {
 							var4 = var10;
 							var6 = var14;
 						}
@@ -154,13 +179,13 @@
 				}
 			}
 
-			if(var4 != null) {
+			if (var4 != null) {
 				var3 = new MovingObjectPosition(var4);
 			}
 		}
 
-		if(var3 != null) {
-			if(var3.typeOfHit == EnumMovingObjectType.TILE && this.worldObj.getBlockId(var3.blockX, var3.blockY, var3.blockZ) == Block.portal.blockID) {
+		if (var3 != null) {
+			if (var3.typeOfHit == EnumMovingObjectType.TILE && this.worldObj.getBlockId(var3.blockX, var3.blockY, var3.blockZ) == Block.portal.blockID) {
 				this.setInPortal();
 			} else {
 				this.onImpact(var3);
@@ -170,76 +195,91 @@
 		this.posX += this.motionX;
 		this.posY += this.motionY;
 		this.posZ += this.motionZ;
-		float var17 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
-		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / (double)((float)Math.PI));
+		float var16 = MathHelper.sqrt_double(this.motionX * this.motionX + this.motionZ * this.motionZ);
+		this.rotationYaw = (float)(Math.atan2(this.motionX, this.motionZ) * 180.0D / Math.PI);
 
-		for(this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var17) * 180.0D / (double)((float)Math.PI)); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+		for (this.rotationPitch = (float)(Math.atan2(this.motionY, (double)var16) * 180.0D / Math.PI); this.rotationPitch - this.prevRotationPitch < -180.0F; this.prevRotationPitch -= 360.0F) {
+			;
 		}
 
-		while(this.rotationPitch - this.prevRotationPitch >= 180.0F) {
+		while (this.rotationPitch - this.prevRotationPitch >= 180.0F) {
 			this.prevRotationPitch += 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw < -180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw < -180.0F) {
 			this.prevRotationYaw -= 360.0F;
 		}
 
-		while(this.rotationYaw - this.prevRotationYaw >= 180.0F) {
+		while (this.rotationYaw - this.prevRotationYaw >= 180.0F) {
 			this.prevRotationYaw += 360.0F;
 		}
 
 		this.rotationPitch = this.prevRotationPitch + (this.rotationPitch - this.prevRotationPitch) * 0.2F;
 		this.rotationYaw = this.prevRotationYaw + (this.rotationYaw - this.prevRotationYaw) * 0.2F;
-		float var18 = 0.99F;
-		float var19 = this.getGravityVelocity();
-		if(this.isInWater()) {
-			for(int var7 = 0; var7 < 4; ++var7) {
-				float var20 = 0.25F;
-				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var20, this.posY - this.motionY * (double)var20, this.posZ - this.motionZ * (double)var20, this.motionX, this.motionY, this.motionZ);
+		float var19 = 0.99F;
+		float var20 = this.getGravityVelocity();
+
+		if (this.isInWater()) {
+			for (int var7 = 0; var7 < 4; ++var7) {
+				float var18 = 0.25F;
+				this.worldObj.spawnParticle("bubble", this.posX - this.motionX * (double)var18, this.posY - this.motionY * (double)var18, this.posZ - this.motionZ * (double)var18, this.motionX, this.motionY, this.motionZ);
 			}
 
-			var18 = 0.8F;
+			var19 = 0.8F;
 		}
 
-		this.motionX *= (double)var18;
-		this.motionY *= (double)var18;
-		this.motionZ *= (double)var18;
-		this.motionY -= (double)var19;
+		this.motionX *= (double)var19;
+		this.motionY *= (double)var19;
+		this.motionZ *= (double)var19;
+		this.motionY -= (double)var20;
 		this.setPosition(this.posX, this.posY, this.posZ);
 	}
 
+	/**
+	 * Gets the amount of gravity to apply to the thrown entity with each tick.
+	 */
 	protected float getGravityVelocity() {
 		return 0.03F;
 	}
 
+	/**
+	 * Called when this EntityThrowable hits a block or entity.
+	 */
 	protected abstract void onImpact(MovingObjectPosition var1);
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		var1.setShort("xTile", (short)this.xTile);
-		var1.setShort("yTile", (short)this.yTile);
-		var1.setShort("zTile", (short)this.zTile);
-		var1.setByte("inTile", (byte)this.inTile);
-		var1.setByte("shake", (byte)this.throwableShake);
-		var1.setByte("inGround", (byte)(this.inGround ? 1 : 0));
-		if((this.h == null || this.h.length() == 0) && this.thrower != null && this.thrower instanceof EntityPlayer) {
-			this.h = this.thrower.getEntityName();
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setShort("xTile", (short)this.xTile);
+		par1NBTTagCompound.setShort("yTile", (short)this.yTile);
+		par1NBTTagCompound.setShort("zTile", (short)this.zTile);
+		par1NBTTagCompound.setByte("inTile", (byte)this.inTile);
+		par1NBTTagCompound.setByte("shake", (byte)this.throwableShake);
+		par1NBTTagCompound.setByte("inGround", (byte)(this.inGround ? 1 : 0));
+
+		if ((this.throwerName == null || this.throwerName.length() == 0) && this.thrower != null && this.thrower instanceof EntityPlayer) {
+			this.throwerName = this.thrower.getEntityName();
 		}
 
-		var1.setString("ownerName", this.h == null ? "" : this.h);
+		par1NBTTagCompound.setString("ownerName", this.throwerName == null ? "" : this.throwerName);
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		this.xTile = var1.getShort("xTile");
-		this.yTile = var1.getShort("yTile");
-		this.zTile = var1.getShort("zTile");
-		this.inTile = var1.getByte("inTile") & 255;
-		this.throwableShake = var1.getByte("shake") & 255;
-		this.inGround = var1.getByte("inGround") == 1;
-		this.h = var1.getString("ownerName");
-		if(this.h != null && this.h.length() == 0) {
-			this.h = null;
-		}
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		this.xTile = par1NBTTagCompound.getShort("xTile");
+		this.yTile = par1NBTTagCompound.getShort("yTile");
+		this.zTile = par1NBTTagCompound.getShort("zTile");
+		this.inTile = par1NBTTagCompound.getByte("inTile") & 255;
+		this.throwableShake = par1NBTTagCompound.getByte("shake") & 255;
+		this.inGround = par1NBTTagCompound.getByte("inGround") == 1;
+		this.throwerName = par1NBTTagCompound.getString("ownerName");
 
+		if (this.throwerName != null && this.throwerName.length() == 0) {
+			this.throwerName = null;
+		}
 	}
 
 	public float getShadowSize() {
@@ -247,8 +287,8 @@
 	}
 
 	public EntityLivingBase getThrower() {
-		if(this.thrower == null && this.h != null && this.h.length() > 0) {
-			this.thrower = this.worldObj.getPlayerEntityByName(this.h);
+		if (this.thrower == null && this.throwerName != null && this.throwerName.length() > 0) {
+			this.thrower = this.worldObj.getPlayerEntityByName(this.throwerName);
 		}
 
 		return this.thrower;
