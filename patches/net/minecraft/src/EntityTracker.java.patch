--- net/minecraft/src/EntityTracker.java
+++ net/minecraft/src/EntityTracker.java
@@ -7,105 +7,113 @@
 
 public class EntityTracker {
 	private final WorldServer theWorld;
-	private Set b = new HashSet();
-	private IntHashMap trackedEntityHashTable = new IntHashMap();
-	private int maxTrackingDistanceThreshold;
-
-	public EntityTracker(WorldServer var1) {
-		this.theWorld = var1;
-		this.maxTrackingDistanceThreshold = var1.getMinecraftServer().getConfigurationManager().getEntityViewDistance();
+
+	/**
+	 * List of tracked entities, used for iteration operations on tracked entities.
+	 */
+	private Set trackedEntities = new HashSet();
+	private IntHashMap trackedEntityIDs = new IntHashMap();
+	private int entityViewDistance;
+
+	public EntityTracker(WorldServer par1WorldServer) {
+		this.theWorld = par1WorldServer;
+		this.entityViewDistance = par1WorldServer.getMinecraftServer().getConfigurationManager().getEntityViewDistance();
 	}
 
-	public void trackEntity(Entity var1) {
-		if(var1 instanceof EntityPlayerMP) {
-			this.trackEntity(var1, 512, 2);
-			EntityPlayerMP var2 = (EntityPlayerMP)var1;
-			Iterator var3 = this.b.iterator();
+	/**
+	 * if entity is a player sends all tracked events to the player, otherwise, adds with a visibility and update arate
+	 * based on the class type
+	 */
+	public void addEntityToTracker(Entity par1Entity) {
+		if (par1Entity instanceof EntityPlayerMP) {
+			this.addEntityToTracker(par1Entity, 512, 2);
+			EntityPlayerMP var2 = (EntityPlayerMP)par1Entity;
+			Iterator var3 = this.trackedEntities.iterator();
 
-			while(var3.hasNext()) {
+			while (var3.hasNext()) {
 				EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-				if(var4.trackedEntity != var2) {
-					var4.updatePlayerEntity(var2);
+
+				if (var4.myEntity != var2) {
+					var4.tryStartWachingThis(var2);
 				}
 			}
-		} else if(var1 instanceof EntityFishHook) {
-			this.trackEntity(var1, 64, 5, true);
-		} else if(var1 instanceof EntityArrow) {
-			this.trackEntity(var1, 64, 20, false);
-		} else if(var1 instanceof EntitySmallFireball) {
-			this.trackEntity(var1, 64, 10, false);
-		} else if(var1 instanceof EntityFireball) {
-			this.trackEntity(var1, 64, 10, false);
-		} else if(var1 instanceof EntitySnowball) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityEnderPearl) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityEnderEye) {
-			this.trackEntity(var1, 64, 4, true);
-		} else if(var1 instanceof EntityEgg) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityPotion) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityExpBottle) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityFireworkRocket) {
-			this.trackEntity(var1, 64, 10, true);
-		} else if(var1 instanceof EntityItem) {
-			this.trackEntity(var1, 64, 20, true);
-		} else if(var1 instanceof EntityMinecart) {
-			this.trackEntity(var1, 80, 3, true);
-		} else if(var1 instanceof EntityBoat) {
-			this.trackEntity(var1, 80, 3, true);
-		} else if(var1 instanceof EntitySquid) {
-			this.trackEntity(var1, 64, 3, true);
-		} else if(var1 instanceof EntityWither) {
-			this.trackEntity(var1, 80, 3, false);
-		} else if(var1 instanceof EntityBat) {
-			this.trackEntity(var1, 80, 3, false);
-		} else if(var1 instanceof IAnimals) {
-			this.trackEntity(var1, 80, 3, true);
-		} else if(var1 instanceof EntityDragon) {
-			this.trackEntity(var1, 160, 3, true);
-		} else if(var1 instanceof EntityTNTPrimed) {
-			this.trackEntity(var1, 160, 10, true);
-		} else if(var1 instanceof EntityFallingSand) {
-			this.trackEntity(var1, 160, 20, true);
-		} else if(var1 instanceof EntityHanging) {
-			this.trackEntity(var1, 160, Integer.MAX_VALUE, false);
-		} else if(var1 instanceof EntityXPOrb) {
-			this.trackEntity(var1, 160, 20, true);
-		} else if(var1 instanceof EntityEnderCrystal) {
-			this.trackEntity(var1, 256, Integer.MAX_VALUE, false);
+		} else if (par1Entity instanceof EntityFishHook) {
+			this.addEntityToTracker(par1Entity, 64, 5, true);
+		} else if (par1Entity instanceof EntityArrow) {
+			this.addEntityToTracker(par1Entity, 64, 20, false);
+		} else if (par1Entity instanceof EntitySmallFireball) {
+			this.addEntityToTracker(par1Entity, 64, 10, false);
+		} else if (par1Entity instanceof EntityFireball) {
+			this.addEntityToTracker(par1Entity, 64, 10, false);
+		} else if (par1Entity instanceof EntitySnowball) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityEnderPearl) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityEnderEye) {
+			this.addEntityToTracker(par1Entity, 64, 4, true);
+		} else if (par1Entity instanceof EntityEgg) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityPotion) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityExpBottle) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityFireworkRocket) {
+			this.addEntityToTracker(par1Entity, 64, 10, true);
+		} else if (par1Entity instanceof EntityItem) {
+			this.addEntityToTracker(par1Entity, 64, 20, true);
+		} else if (par1Entity instanceof EntityMinecart) {
+			this.addEntityToTracker(par1Entity, 80, 3, true);
+		} else if (par1Entity instanceof EntityBoat) {
+			this.addEntityToTracker(par1Entity, 80, 3, true);
+		} else if (par1Entity instanceof EntitySquid) {
+			this.addEntityToTracker(par1Entity, 64, 3, true);
+		} else if (par1Entity instanceof EntityWither) {
+			this.addEntityToTracker(par1Entity, 80, 3, false);
+		} else if (par1Entity instanceof EntityBat) {
+			this.addEntityToTracker(par1Entity, 80, 3, false);
+		} else if (par1Entity instanceof IAnimals) {
+			this.addEntityToTracker(par1Entity, 80, 3, true);
+		} else if (par1Entity instanceof EntityDragon) {
+			this.addEntityToTracker(par1Entity, 160, 3, true);
+		} else if (par1Entity instanceof EntityTNTPrimed) {
+			this.addEntityToTracker(par1Entity, 160, 10, true);
+		} else if (par1Entity instanceof EntityFallingSand) {
+			this.addEntityToTracker(par1Entity, 160, 20, true);
+		} else if (par1Entity instanceof EntityHanging) {
+			this.addEntityToTracker(par1Entity, 160, Integer.MAX_VALUE, false);
+		} else if (par1Entity instanceof EntityXPOrb) {
+			this.addEntityToTracker(par1Entity, 160, 20, true);
+		} else if (par1Entity instanceof EntityEnderCrystal) {
+			this.addEntityToTracker(par1Entity, 256, Integer.MAX_VALUE, false);
 		}
-
-	}
-
-	public void trackEntity(Entity var1, int var2, int var3) {
-		this.trackEntity(var1, var2, var3, false);
-	}
-
-	public void trackEntity(Entity var1, int var2, int var3, boolean var4) {
-		if(var2 > this.maxTrackingDistanceThreshold) {
-			var2 = this.maxTrackingDistanceThreshold;
+	}
+
+	public void addEntityToTracker(Entity par1Entity, int par2, int par3) {
+		this.addEntityToTracker(par1Entity, par2, par3, false);
+	}
+
+	public void addEntityToTracker(Entity par1Entity, int par2, int par3, boolean par4) {
+		if (par2 > this.entityViewDistance) {
+			par2 = this.entityViewDistance;
 		}
 
 		try {
-			if(this.trackedEntityHashTable.containsItem(var1.entityId)) {
+			if (this.trackedEntityIDs.containsItem(par1Entity.entityId)) {
 				throw new IllegalStateException("Entity is already tracked!");
 			}
 
-			EntityTrackerEntry var5 = new EntityTrackerEntry(var1, var2, var3, var4);
-			this.b.add(var5);
-			this.trackedEntityHashTable.addKey(var1.entityId, var5);
-			var5.updatePlayerEntities(this.theWorld.h);
+			EntityTrackerEntry var5 = new EntityTrackerEntry(par1Entity, par2, par3, par4);
+			this.trackedEntities.add(var5);
+			this.trackedEntityIDs.addKey(par1Entity.entityId, var5);
+			var5.sendEventsToPlayers(this.theWorld.playerEntities);
 		} catch (Throwable var11) {
 			CrashReport var6 = CrashReport.makeCrashReport(var11, "Adding entity to track");
 			CrashReportCategory var7 = var6.makeCategory("Entity To Track");
-			var7.addCrashSection("Tracking range", var2 + " blocks");
-			var7.addCrashSectionCallable("Update interval", new CallableEntityTracker(this, var3));
-			var1.addEntityCrashInfo(var7);
+			var7.addCrashSection("Tracking range", par2 + " blocks");
+			var7.addCrashSectionCallable("Update interval", new CallableEntityTracker(this, par3));
+			par1Entity.addEntityCrashInfo(var7);
 			CrashReportCategory var8 = var6.makeCategory("Entity That Is Already Tracked");
-			((EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityId)).trackedEntity.addEntityCrashInfo(var8);
+			((EntityTrackerEntry)this.trackedEntityIDs.lookup(par1Entity.entityId)).myEntity.addEntityCrashInfo(var8);
 
 			try {
 				throw new ReportedException(var6);
@@ -114,89 +122,94 @@
 				var10.printStackTrace();
 			}
 		}
-
 	}
 
-	public void untrackEntity(Entity var1) {
-		if(var1 instanceof EntityPlayerMP) {
-			EntityPlayerMP var2 = (EntityPlayerMP)var1;
-			Iterator var3 = this.b.iterator();
+	public void removeEntityFromAllTrackingPlayers(Entity par1Entity) {
+		if (par1Entity instanceof EntityPlayerMP) {
+			EntityPlayerMP var2 = (EntityPlayerMP)par1Entity;
+			Iterator var3 = this.trackedEntities.iterator();
 
-			while(var3.hasNext()) {
+			while (var3.hasNext()) {
 				EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-				var4.removeFromTrackedPlayers(var2);
+				var4.removeFromWatchingList(var2);
 			}
 		}
 
-		EntityTrackerEntry var5 = (EntityTrackerEntry)this.trackedEntityHashTable.removeObject(var1.entityId);
-		if(var5 != null) {
-			this.b.remove(var5);
-			var5.sendDestroyEntityPacketToTrackedPlayers();
-		}
+		EntityTrackerEntry var5 = (EntityTrackerEntry)this.trackedEntityIDs.removeObject(par1Entity.entityId);
 
+		if (var5 != null) {
+			this.trackedEntities.remove(var5);
+			var5.informAllAssociatedPlayersOfItemDestruction();
+		}
 	}
 
 	public void updateTrackedEntities() {
 		ArrayList var1 = new ArrayList();
-		Iterator var2 = this.b.iterator();
+		Iterator var2 = this.trackedEntities.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-			var3.updatePlayerList(this.theWorld.h);
-			if(var3.playerEntitiesUpdated && var3.trackedEntity instanceof EntityPlayerMP) {
-				var1.add((EntityPlayerMP)var3.trackedEntity);
+			var3.sendLocationToAllClients(this.theWorld.playerEntities);
+
+			if (var3.playerEntitiesUpdated && var3.myEntity instanceof EntityPlayerMP) {
+				var1.add((EntityPlayerMP)var3.myEntity);
 			}
 		}
 
-		for(int var6 = 0; var6 < var1.size(); ++var6) {
+		for (int var6 = 0; var6 < var1.size(); ++var6) {
 			EntityPlayerMP var7 = (EntityPlayerMP)var1.get(var6);
-			Iterator var4 = this.b.iterator();
+			Iterator var4 = this.trackedEntities.iterator();
 
-			while(var4.hasNext()) {
+			while (var4.hasNext()) {
 				EntityTrackerEntry var5 = (EntityTrackerEntry)var4.next();
-				if(var5.trackedEntity != var7) {
-					var5.updatePlayerEntity(var7);
+
+				if (var5.myEntity != var7) {
+					var5.tryStartWachingThis(var7);
 				}
 			}
 		}
-
-	}
-
-	public void sendPacketToTrackedPlayers(Entity var1, Packet var2) {
-		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityId);
-		if(var3 != null) {
-			var3.sendPacketToTrackedPlayers(var2);
-		}
-
-	}
-
-	public void sendPacketToTrackedPlayersAndTrackedEntity(Entity var1, Packet var2) {
-		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityHashTable.lookup(var1.entityId);
-		if(var3 != null) {
-			var3.sendPacketToTrackedPlayersAndTrackedEntity(var2);
-		}
-
-	}
-
-	public void removePlayerFromTrackers(EntityPlayerMP var1) {
-		Iterator var2 = this.b.iterator();
-
-		while(var2.hasNext()) {
+	}
+
+	/**
+	 * does not send the packet to the entity if the entity is a player
+	 */
+	public void sendPacketToAllPlayersTrackingEntity(Entity par1Entity, Packet par2Packet) {
+		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityIDs.lookup(par1Entity.entityId);
+
+		if (var3 != null) {
+			var3.sendPacketToAllTrackingPlayers(par2Packet);
+		}
+	}
+
+	/**
+	 * sends to the entity if the entity is a player
+	 */
+	public void sendPacketToAllAssociatedPlayers(Entity par1Entity, Packet par2Packet) {
+		EntityTrackerEntry var3 = (EntityTrackerEntry)this.trackedEntityIDs.lookup(par1Entity.entityId);
+
+		if (var3 != null) {
+			var3.sendPacketToAllAssociatedPlayers(par2Packet);
+		}
+	}
+
+	public void removePlayerFromTrackers(EntityPlayerMP par1EntityPlayerMP) {
+		Iterator var2 = this.trackedEntities.iterator();
+
+		while (var2.hasNext()) {
 			EntityTrackerEntry var3 = (EntityTrackerEntry)var2.next();
-			var3.removeTrackedPlayerSymmetric(var1);
+			var3.removePlayerFromTracker(par1EntityPlayerMP);
 		}
-
 	}
 
-	public void func_85172_a(EntityPlayerMP var1, Chunk var2) {
-		Iterator var3 = this.b.iterator();
+	public void func_85172_a(EntityPlayerMP par1EntityPlayerMP, Chunk par2Chunk) {
+		Iterator var3 = this.trackedEntities.iterator();
 
-		while(var3.hasNext()) {
+		while (var3.hasNext()) {
 			EntityTrackerEntry var4 = (EntityTrackerEntry)var3.next();
-			if(var4.trackedEntity != var1 && var4.trackedEntity.chunkCoordX == var2.xPosition && var4.trackedEntity.chunkCoordZ == var2.zPosition) {
-				var4.updatePlayerEntity(var1);
+
+			if (var4.myEntity != par1EntityPlayerMP && var4.myEntity.chunkCoordX == par2Chunk.xPosition && var4.myEntity.chunkCoordZ == par2Chunk.zPosition) {
+				var4.tryStartWachingThis(par1EntityPlayerMP);
 			}
 		}
-
 	}
 }
