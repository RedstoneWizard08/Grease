--- net/minecraft/src/EntityWitch.java
+++ net/minecraft/src/EntityWitch.java
@@ -5,13 +5,20 @@
 import java.util.UUID;
 
 public class EntityWitch extends EntityMob implements IRangedAttackMob {
-	private static final UUID bp = UUID.fromString("5CD17E52-A79A-43D3-A529-90FDE04B181E");
-	private static final AttributeModifier field_110185_bq = (new AttributeModifier(bp, "Drinking speed penalty", -0.25D, 0)).setSaved(false);
-	private static final int[] witchDrops = new int[]{Item.glowstone.itemID, Item.sugar.itemID, Item.redstone.itemID, Item.spiderEye.itemID, Item.glassBottle.itemID, Item.gunpowder.itemID, Item.stick.itemID, Item.stick.itemID};
+	private static final UUID field_110184_bp = UUID.fromString("5CD17E52-A79A-43D3-A529-90FDE04B181E");
+	private static final AttributeModifier field_110185_bq = (new AttributeModifier(field_110184_bp, "Drinking speed penalty", -0.25D, 0)).setSaved(false);
+
+	/** List of items a witch should drop on death. */
+	private static final int[] witchDrops = new int[] {Item.glowstone.itemID, Item.sugar.itemID, Item.redstone.itemID, Item.spiderEye.itemID, Item.glassBottle.itemID, Item.gunpowder.itemID, Item.stick.itemID, Item.stick.itemID};
+
+	/**
+	 * Timer used as interval for a witch's attack, decremented every tick if aggressive and when reaches zero the witch
+	 * will throw a potion at the target entity.
+	 */
 	private int witchAttackTimer;
 
-	public EntityWitch(World var1) {
-		super(var1);
+	public EntityWitch(World par1World) {
+		super(par1World);
 		this.tasks.addTask(1, new EntityAISwimming(this));
 		this.tasks.addTask(2, new EntityAIArrowAttack(this, 1.0D, 60, 10.0F));
 		this.tasks.addTask(2, new EntityAIWander(this, 1.0D));
@@ -26,22 +33,37 @@
 		this.getDataWatcher().addObject(21, Byte.valueOf((byte)0));
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
 		return "mob.witch.idle";
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.witch.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.witch.death";
 	}
 
-	public void setAggressive(boolean var1) {
-		this.getDataWatcher().updateObject(21, Byte.valueOf((byte)(var1 ? 1 : 0)));
+	/**
+	 * Set whether this witch is aggressive at an entity.
+	 */
+	public void setAggressive(boolean par1) {
+		this.getDataWatcher().updateObject(21, Byte.valueOf((byte)(par1 ? 1 : 0)));
 	}
 
+	/**
+	 * Return whether this witch is aggressive at an entity.
+	 */
 	public boolean getAggressive() {
 		return this.getDataWatcher().getWatchableObjectByte(21) == 1;
 	}
@@ -52,23 +74,32 @@
 		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.25D);
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
 
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
-		if(!this.worldObj.isRemote) {
-			if(this.getAggressive()) {
-				if(this.witchAttackTimer-- <= 0) {
+		if (!this.worldObj.isRemote) {
+			if (this.getAggressive()) {
+				if (this.witchAttackTimer-- <= 0) {
 					this.setAggressive(false);
-					ItemStack var6 = this.getHeldItem();
+					ItemStack var1 = this.getHeldItem();
 					this.setCurrentItemOrArmor(0, (ItemStack)null);
-					if(var6 != null && var6.itemID == Item.potion.itemID) {
-						List var5 = Item.potion.getEffects(var6);
-						if(var5 != null) {
-							Iterator var3 = var5.iterator();
-
-							while(var3.hasNext()) {
+
+					if (var1 != null && var1.itemID == Item.potion.itemID) {
+						List var2 = Item.potion.getEffects(var1);
+
+						if (var2 != null) {
+							Iterator var3 = var2.iterator();
+
+							while (var3.hasNext()) {
 								PotionEffect var4 = (PotionEffect)var3.next();
 								this.addPotionEffect(new PotionEffect(var4));
 							}
@@ -78,28 +109,29 @@
 					this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).removeModifier(field_110185_bq);
 				}
 			} else {
-				short var1 = -1;
-				if(this.ab.nextFloat() < 0.15F && this.isBurning() && !this.isPotionActive(Potion.fireResistance)) {
-					var1 = 16307;
-				} else if(this.ab.nextFloat() < 0.05F && this.getHealth() < this.getMaxHealth()) {
-					var1 = 16341;
-				} else if(this.ab.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D) {
-					var1 = 16274;
-				} else if(this.ab.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D) {
-					var1 = 16274;
+				short var5 = -1;
+
+				if (this.rand.nextFloat() < 0.15F && this.isBurning() && !this.isPotionActive(Potion.fireResistance)) {
+					var5 = 16307;
+				} else if (this.rand.nextFloat() < 0.05F && this.getHealth() < this.getMaxHealth()) {
+					var5 = 16341;
+				} else if (this.rand.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D) {
+					var5 = 16274;
+				} else if (this.rand.nextFloat() < 0.25F && this.getAttackTarget() != null && !this.isPotionActive(Potion.moveSpeed) && this.getAttackTarget().getDistanceSqToEntity(this) > 121.0D) {
+					var5 = 16274;
 				}
 
-				if(var1 > -1) {
-					this.setCurrentItemOrArmor(0, new ItemStack(Item.potion, 1, var1));
+				if (var5 > -1) {
+					this.setCurrentItemOrArmor(0, new ItemStack(Item.potion, 1, var5));
 					this.witchAttackTimer = this.getHeldItem().getMaxItemUseDuration();
 					this.setAggressive(true);
-					AttributeInstance var2 = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
-					var2.removeModifier(field_110185_bq);
-					var2.applyModifier(field_110185_bq);
+					AttributeInstance var6 = this.getEntityAttribute(SharedMonsterAttributes.movementSpeed);
+					var6.removeModifier(field_110185_bq);
+					var6.applyModifier(field_110185_bq);
 				}
 			}
 
-			if(this.ab.nextFloat() < 7.5E-4F) {
+			if (this.rand.nextFloat() < 7.5E-4F) {
 				this.worldObj.setEntityState(this, (byte)15);
 			}
 		}
@@ -107,64 +139,75 @@
 		super.onLivingUpdate();
 	}
 
-	public void handleHealthUpdate(byte var1) {
-		if(var1 == 15) {
-			for(int var2 = 0; var2 < this.ab.nextInt(35) + 10; ++var2) {
-				this.worldObj.spawnParticle("witchMagic", this.posX + this.ab.nextGaussian() * (double)0.13F, this.boundingBox.maxY + 0.5D + this.ab.nextGaussian() * (double)0.13F, this.posZ + this.ab.nextGaussian() * (double)0.13F, 0.0D, 0.0D, 0.0D);
+	public void handleHealthUpdate(byte par1) {
+		if (par1 == 15) {
+			for (int var2 = 0; var2 < this.rand.nextInt(35) + 10; ++var2) {
+				this.worldObj.spawnParticle("witchMagic", this.posX + this.rand.nextGaussian() * 0.12999999523162842D, this.boundingBox.maxY + 0.5D + this.rand.nextGaussian() * 0.12999999523162842D, this.posZ + this.rand.nextGaussian() * 0.12999999523162842D, 0.0D, 0.0D, 0.0D);
 			}
 		} else {
-			super.handleHealthUpdate(var1);
-		}
-
-	}
-
-	protected float applyPotionDamageCalculations(DamageSource var1, float var2) {
-		var2 = super.applyPotionDamageCalculations(var1, var2);
-		if(var1.getEntity() == this) {
-			var2 = 0.0F;
-		}
-
-		if(var1.isMagicDamage()) {
-			var2 = (float)((double)var2 * 0.15D);
-		}
-
-		return var2;
-	}
-
-	protected void dropFewItems(boolean var1, int var2) {
-		int var3 = this.ab.nextInt(3) + 1;
-
-		for(int var4 = 0; var4 < var3; ++var4) {
-			int var5 = this.ab.nextInt(3);
-			int var6 = witchDrops[this.ab.nextInt(witchDrops.length)];
-			if(var2 > 0) {
-				var5 += this.ab.nextInt(var2 + 1);
+			super.handleHealthUpdate(par1);
+		}
+	}
+
+	/**
+	 * Reduces damage, depending on potions
+	 */
+	protected float applyPotionDamageCalculations(DamageSource par1DamageSource, float par2) {
+		par2 = super.applyPotionDamageCalculations(par1DamageSource, par2);
+
+		if (par1DamageSource.getEntity() == this) {
+			par2 = 0.0F;
+		}
+
+		if (par1DamageSource.isMagicDamage()) {
+			par2 = (float)((double)par2 * 0.15D);
+		}
+
+		return par2;
+	}
+
+	/**
+	 * Drop 0-2 items of this living's type. @param par1 - Whether this entity has recently been hit by a player. @param
+	 * par2 - Level of Looting used to kill this mob.
+	 */
+	protected void dropFewItems(boolean par1, int par2) {
+		int var3 = this.rand.nextInt(3) + 1;
+
+		for (int var4 = 0; var4 < var3; ++var4) {
+			int var5 = this.rand.nextInt(3);
+			int var6 = witchDrops[this.rand.nextInt(witchDrops.length)];
+
+			if (par2 > 0) {
+				var5 += this.rand.nextInt(par2 + 1);
 			}
 
-			for(int var7 = 0; var7 < var5; ++var7) {
+			for (int var7 = 0; var7 < var5; ++var7) {
 				this.dropItem(var6, 1);
 			}
 		}
-
 	}
 
-	public void attackEntityWithRangedAttack(EntityLivingBase var1, float var2) {
-		if(!this.getAggressive()) {
+	/**
+	 * Attack the specified entity using a ranged attack.
+	 */
+	public void attackEntityWithRangedAttack(EntityLivingBase par1EntityLivingBase, float par2) {
+		if (!this.getAggressive()) {
 			EntityPotion var3 = new EntityPotion(this.worldObj, this, 32732);
 			var3.rotationPitch -= -20.0F;
-			double var4 = var1.posX + var1.motionX - this.posX;
-			double var6 = var1.posY + (double)var1.getEyeHeight() - (double)1.1F - this.posY;
-			double var8 = var1.posZ + var1.motionZ - this.posZ;
+			double var4 = par1EntityLivingBase.posX + par1EntityLivingBase.motionX - this.posX;
+			double var6 = par1EntityLivingBase.posY + (double)par1EntityLivingBase.getEyeHeight() - 1.100000023841858D - this.posY;
+			double var8 = par1EntityLivingBase.posZ + par1EntityLivingBase.motionZ - this.posZ;
 			float var10 = MathHelper.sqrt_double(var4 * var4 + var8 * var8);
-			if(var10 >= 8.0F && !var1.isPotionActive(Potion.moveSlowdown)) {
+
+			if (var10 >= 8.0F && !par1EntityLivingBase.isPotionActive(Potion.moveSlowdown)) {
 				var3.setPotionDamage(32698);
-			} else if(var1.getHealth() >= 8.0F && !var1.isPotionActive(Potion.poison)) {
+			} else if (par1EntityLivingBase.getHealth() >= 8.0F && !par1EntityLivingBase.isPotionActive(Potion.poison)) {
 				var3.setPotionDamage(32660);
-			} else if(var10 <= 3.0F && !var1.isPotionActive(Potion.weakness) && this.ab.nextFloat() < 0.25F) {
+			} else if (var10 <= 3.0F && !par1EntityLivingBase.isPotionActive(Potion.weakness) && this.rand.nextFloat() < 0.25F) {
 				var3.setPotionDamage(32696);
 			}
 
-			var3.setThrowableHeading(var4, var6 + (double)(var10 * 0.2F), var8, 12.0F / 16.0F, 8.0F);
+			var3.setThrowableHeading(var4, var6 + (double)(var10 * 0.2F), var8, 0.75F, 8.0F);
 			this.worldObj.spawnEntityInWorld(var3);
 		}
 	}
