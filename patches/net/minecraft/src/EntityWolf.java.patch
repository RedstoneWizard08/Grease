--- net/minecraft/src/EntityWolf.java
+++ net/minecraft/src/EntityWolf.java
@@ -1,15 +1,22 @@
 package net.minecraft.src;
 
 public class EntityWolf extends EntityTameable {
+	// ToDO: Need Spoutcraft API Texture Override abilities.
 	private float field_70926_e;
 	private float field_70924_f;
+
+	/** true is the wolf is wet else false */
 	private boolean isShaking;
 	private boolean field_70928_h;
+
+	/**
+	 * This time increases while wolf is shaking and emitting water particles.
+	 */
 	private float timeWolfIsShaking;
 	private float prevTimeWolfIsShaking;
 
-	public EntityWolf(World var1) {
-		super(var1);
+	public EntityWolf(World par1World) {
+		super(par1World);
 		this.setSize(0.6F, 0.8F);
 		this.getNavigator().setAvoidsWater(true);
 		this.tasks.addTask(1, new EntityAISwimming(this));
@@ -31,29 +38,38 @@
 
 	protected void applyEntityAttributes() {
 		super.applyEntityAttributes();
-		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute((double)0.3F);
-		if(this.isTamed()) {
+		this.getEntityAttribute(SharedMonsterAttributes.movementSpeed).setAttribute(0.30000001192092896D);
+
+		if (this.isTamed()) {
 			this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(20.0D);
 		} else {
 			this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(8.0D);
 		}
-
 	}
 
+	/**
+	 * Returns true if the newer Entity AI code should be run
+	 */
 	public boolean isAIEnabled() {
 		return true;
 	}
 
-	public void setAttackTarget(EntityLivingBase var1) {
-		super.setAttackTarget(var1);
-		if(var1 == null) {
+	/**
+	 * Sets the active target the Task system uses for tracking
+	 */
+	public void setAttackTarget(EntityLivingBase par1EntityLivingBase) {
+		super.setAttackTarget(par1EntityLivingBase);
+
+		if (par1EntityLivingBase == null) {
 			this.setAngry(false);
-		} else if(!this.isTamed()) {
+		} else if (!this.isTamed()) {
 			this.setAngry(true);
 		}
-
 	}
 
+	/**
+	 * main AI tick function, replaces updateEntityActionState
+	 */
 	protected void updateAITick() {
 		this.dataWatcher.updateObject(18, Float.valueOf(this.getHealth()));
 	}
@@ -65,186 +81,238 @@
 		this.dataWatcher.addObject(20, new Byte((byte)BlockColored.getBlockFromDye(1)));
 	}
 
-	protected void playStepSound(int var1, int var2, int var3, int var4) {
+	/**
+	 * Plays step sound at given x, y, z for the entity
+	 */
+	protected void playStepSound(int par1, int par2, int par3, int par4) {
 		this.playSound("mob.wolf.step", 0.15F, 1.0F);
 	}
 
-	public void writeEntityToNBT(NBTTagCompound var1) {
-		super.writeEntityToNBT(var1);
-		var1.setBoolean("Angry", this.isAngry());
-		var1.setByte("CollarColor", (byte)this.getCollarColor());
+	/**
+	 * (abstract) Protected helper method to write subclass entity data to NBT.
+	 */
+	public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeEntityToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setBoolean("Angry", this.isAngry());
+		par1NBTTagCompound.setByte("CollarColor", (byte)this.getCollarColor());
 	}
 
-	public void readEntityFromNBT(NBTTagCompound var1) {
-		super.readEntityFromNBT(var1);
-		this.setAngry(var1.getBoolean("Angry"));
-		if(var1.hasKey("CollarColor")) {
-			this.setCollarColor(var1.getByte("CollarColor"));
+	/**
+	 * (abstract) Protected helper method to read subclass entity data from NBT.
+	 */
+	public void readEntityFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readEntityFromNBT(par1NBTTagCompound);
+		this.setAngry(par1NBTTagCompound.getBoolean("Angry"));
+
+		if (par1NBTTagCompound.hasKey("CollarColor")) {
+			this.setCollarColor(par1NBTTagCompound.getByte("CollarColor"));
 		}
-
 	}
 
+	/**
+	 * Returns the sound this mob makes while it's alive.
+	 */
 	protected String getLivingSound() {
-		return this.isAngry() ? "mob.wolf.growl" : (this.ab.nextInt(3) == 0 ? (this.isTamed() && this.dataWatcher.getWatchableObjectFloat(18) < 10.0F ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
+		return this.isAngry() ? "mob.wolf.growl" : (this.rand.nextInt(3) == 0 ? (this.isTamed() && this.dataWatcher.getWatchableObjectFloat(18) < 10.0F ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark");
 	}
 
+	/**
+	 * Returns the sound this mob makes when it is hurt.
+	 */
 	protected String getHurtSound() {
 		return "mob.wolf.hurt";
 	}
 
+	/**
+	 * Returns the sound this mob makes on death.
+	 */
 	protected String getDeathSound() {
 		return "mob.wolf.death";
 	}
 
+	/**
+	 * Returns the volume for the sounds this mob makes.
+	 */
 	protected float getSoundVolume() {
 		return 0.4F;
 	}
 
+	/**
+	 * Returns the item ID for the item the mob drops on death.
+	 */
 	protected int getDropItemId() {
 		return -1;
 	}
 
+	/**
+	 * Called frequently so the entity can update its state every tick as required. For example, zombies and skeletons use
+	 * this to react to sunlight and start to burn.
+	 */
 	public void onLivingUpdate() {
 		super.onLivingUpdate();
-		if(!this.worldObj.isRemote && this.isShaking && !this.field_70928_h && !this.hasPath() && this.onGround) {
+
+		if (!this.worldObj.isRemote && this.isShaking && !this.field_70928_h && !this.hasPath() && this.onGround) {
 			this.field_70928_h = true;
 			this.timeWolfIsShaking = 0.0F;
 			this.prevTimeWolfIsShaking = 0.0F;
 			this.worldObj.setEntityState(this, (byte)8);
 		}
-
 	}
 
+	/**
+	 * Called to update the entity's position/logic.
+	 */
 	public void onUpdate() {
 		super.onUpdate();
 		this.field_70924_f = this.field_70926_e;
-		if(this.func_70922_bv()) {
+
+		if (this.func_70922_bv()) {
 			this.field_70926_e += (1.0F - this.field_70926_e) * 0.4F;
 		} else {
 			this.field_70926_e += (0.0F - this.field_70926_e) * 0.4F;
 		}
 
-		if(this.func_70922_bv()) {
+		if (this.func_70922_bv()) {
 			this.numTicksToChaseTarget = 10;
 		}
 
-		if(this.isWet()) {
+		if (this.isWet()) {
 			this.isShaking = true;
 			this.field_70928_h = false;
 			this.timeWolfIsShaking = 0.0F;
 			this.prevTimeWolfIsShaking = 0.0F;
-		} else if((this.isShaking || this.field_70928_h) && this.field_70928_h) {
-			if(this.timeWolfIsShaking == 0.0F) {
-				this.playSound("mob.wolf.shake", this.getSoundVolume(), (this.ab.nextFloat() - this.ab.nextFloat()) * 0.2F + 1.0F);
+		} else if ((this.isShaking || this.field_70928_h) && this.field_70928_h) {
+			if (this.timeWolfIsShaking == 0.0F) {
+				this.playSound("mob.wolf.shake", this.getSoundVolume(), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
 			}
 
 			this.prevTimeWolfIsShaking = this.timeWolfIsShaking;
 			this.timeWolfIsShaking += 0.05F;
-			if(this.prevTimeWolfIsShaking >= 2.0F) {
+
+			if (this.prevTimeWolfIsShaking >= 2.0F) {
 				this.isShaking = false;
 				this.field_70928_h = false;
 				this.prevTimeWolfIsShaking = 0.0F;
 				this.timeWolfIsShaking = 0.0F;
 			}
 
-			if(this.timeWolfIsShaking > 0.4F) {
+			if (this.timeWolfIsShaking > 0.4F) {
 				float var1 = (float)this.boundingBox.minY;
 				int var2 = (int)(MathHelper.sin((this.timeWolfIsShaking - 0.4F) * (float)Math.PI) * 7.0F);
 
-				for(int var3 = 0; var3 < var2; ++var3) {
-					float var4 = (this.ab.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
-					float var5 = (this.ab.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+				for (int var3 = 0; var3 < var2; ++var3) {
+					float var4 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
+					float var5 = (this.rand.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
 					this.worldObj.spawnParticle("splash", this.posX + (double)var4, (double)(var1 + 0.8F), this.posZ + (double)var5, this.motionX, this.motionY, this.motionZ);
 				}
 			}
 		}
-
 	}
 
 	public boolean getWolfShaking() {
 		return this.isShaking;
 	}
 
-	public float getShadingWhileShaking(float var1) {
-		return 12.0F / 16.0F + (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * var1) / 2.0F * 0.25F;
+	/**
+	 * Used when calculating the amount of shading to apply while the wolf is shaking.
+	 */
+	public float getShadingWhileShaking(float par1) {
+		return 0.75F + (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * par1) / 2.0F * 0.25F;
 	}
 
-	public float getShakeAngle(float var1, float var2) {
-		float var3 = (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * var1 + var2) / 1.8F;
-		if(var3 < 0.0F) {
+	public float getShakeAngle(float par1, float par2) {
+		float var3 = (this.prevTimeWolfIsShaking + (this.timeWolfIsShaking - this.prevTimeWolfIsShaking) * par1 + par2) / 1.8F;
+
+		if (var3 < 0.0F) {
 			var3 = 0.0F;
-		} else if(var3 > 1.0F) {
+		} else if (var3 > 1.0F) {
 			var3 = 1.0F;
 		}
 
 		return MathHelper.sin(var3 * (float)Math.PI) * MathHelper.sin(var3 * (float)Math.PI * 11.0F) * 0.15F * (float)Math.PI;
 	}
 
-	public float getInterestedAngle(float var1) {
-		return (this.field_70924_f + (this.field_70926_e - this.field_70924_f) * var1) * 0.15F * (float)Math.PI;
+	public float getInterestedAngle(float par1) {
+		return (this.field_70924_f + (this.field_70926_e - this.field_70924_f) * par1) * 0.15F * (float)Math.PI;
 	}
 
 	public float getEyeHeight() {
 		return this.height * 0.8F;
 	}
 
+	/**
+	 * The speed it takes to move the entityliving's rotationPitch through the faceEntity method. This is only currently
+	 * use in wolves.
+	 */
 	public int getVerticalFaceSpeed() {
 		return this.isSitting() ? 20 : super.getVerticalFaceSpeed();
 	}
 
-	public boolean attackEntityFrom(DamageSource var1, float var2) {
-		if(this.isEntityInvulnerable()) {
+	/**
+	 * Called when the entity is attacked.
+	 */
+	public boolean attackEntityFrom(DamageSource par1DamageSource, float par2) {
+		if (this.isEntityInvulnerable()) {
 			return false;
 		} else {
-			Entity var3 = var1.getEntity();
+			Entity var3 = par1DamageSource.getEntity();
 			this.aiSit.setSitting(false);
-			if(var3 != null && !(var3 instanceof EntityPlayer) && !(var3 instanceof EntityArrow)) {
-				var2 = (var2 + 1.0F) / 2.0F;
+
+			if (var3 != null && !(var3 instanceof EntityPlayer) && !(var3 instanceof EntityArrow)) {
+				par2 = (par2 + 1.0F) / 2.0F;
 			}
 
-			return super.attackEntityFrom(var1, var2);
+			return super.attackEntityFrom(par1DamageSource, par2);
 		}
 	}
 
-	public boolean attackEntityAsMob(Entity var1) {
+	public boolean attackEntityAsMob(Entity par1Entity) {
 		int var2 = this.isTamed() ? 4 : 2;
-		return var1.attackEntityFrom(DamageSource.causeMobDamage(this), (float)var2);
+		return par1Entity.attackEntityFrom(DamageSource.causeMobDamage(this), (float)var2);
 	}
 
-	public void setTamed(boolean var1) {
-		super.setTamed(var1);
-		if(var1) {
+	public void setTamed(boolean par1) {
+		super.setTamed(par1);
+
+		if (par1) {
 			this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(20.0D);
 		} else {
 			this.getEntityAttribute(SharedMonsterAttributes.maxHealth).setAttribute(8.0D);
 		}
-
 	}
 
-	public boolean interact(EntityPlayer var1) {
-		ItemStack var2 = var1.inventory.getCurrentItem();
-		if(this.isTamed()) {
-			if(var2 != null) {
-				if(Item.itemsList[var2.itemID] instanceof ItemFood) {
+	/**
+	 * Called when a player interacts with a mob. e.g. gets milk from a cow, gets into the saddle on a pig.
+	 */
+	public boolean interact(EntityPlayer par1EntityPlayer) {
+		ItemStack var2 = par1EntityPlayer.inventory.getCurrentItem();
+
+		if (this.isTamed()) {
+			if (var2 != null) {
+				if (Item.itemsList[var2.itemID] instanceof ItemFood) {
 					ItemFood var3 = (ItemFood)Item.itemsList[var2.itemID];
-					if(var3.isWolfsFavoriteMeat() && this.dataWatcher.getWatchableObjectFloat(18) < 20.0F) {
-						if(!var1.capabilities.isCreativeMode) {
+
+					if (var3.isWolfsFavoriteMeat() && this.dataWatcher.getWatchableObjectFloat(18) < 20.0F) {
+						if (!par1EntityPlayer.capabilities.isCreativeMode) {
 							--var2.stackSize;
 						}
 
 						this.heal((float)var3.getHealAmount());
-						if(var2.stackSize <= 0) {
-							var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+
+						if (var2.stackSize <= 0) {
+							par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, (ItemStack)null);
 						}
 
 						return true;
 					}
-				} else if(var2.itemID == Item.dyePowder.itemID) {
+				} else if (var2.itemID == Item.dyePowder.itemID) {
 					int var4 = BlockColored.getBlockFromDye(var2.getItemDamage());
-					if(var4 != this.getCollarColor()) {
+
+					if (var4 != this.getCollarColor()) {
 						this.setCollarColor(var4);
-						if(!var1.capabilities.isCreativeMode && --var2.stackSize <= 0) {
-							var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+
+						if (!par1EntityPlayer.capabilities.isCreativeMode && --var2.stackSize <= 0) {
+							par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, (ItemStack)null);
 						}
 
 						return true;
@@ -252,30 +320,30 @@
 				}
 			}
 
-			if(var1.getCommandSenderName().equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
+			if (par1EntityPlayer.getCommandSenderName().equalsIgnoreCase(this.getOwnerName()) && !this.worldObj.isRemote && !this.isBreedingItem(var2)) {
 				this.aiSit.setSitting(!this.isSitting());
 				this.isJumping = false;
 				this.setPathToEntity((PathEntity)null);
 				this.setTarget((Entity)null);
 				this.setAttackTarget((EntityLivingBase)null);
 			}
-		} else if(var2 != null && var2.itemID == Item.bone.itemID && !this.isAngry()) {
-			if(!var1.capabilities.isCreativeMode) {
+		} else if (var2 != null && var2.itemID == Item.bone.itemID && !this.isAngry()) {
+			if (!par1EntityPlayer.capabilities.isCreativeMode) {
 				--var2.stackSize;
 			}
 
-			if(var2.stackSize <= 0) {
-				var1.inventory.setInventorySlotContents(var1.inventory.currentItem, (ItemStack)null);
+			if (var2.stackSize <= 0) {
+				par1EntityPlayer.inventory.setInventorySlotContents(par1EntityPlayer.inventory.currentItem, (ItemStack)null);
 			}
 
-			if(!this.worldObj.isRemote) {
-				if(this.ab.nextInt(3) == 0) {
+			if (!this.worldObj.isRemote) {
+				if (this.rand.nextInt(3) == 0) {
 					this.setTamed(true);
 					this.setPathToEntity((PathEntity)null);
 					this.setAttackTarget((EntityLivingBase)null);
 					this.aiSit.setSitting(true);
 					this.setHealth(20.0F);
-					this.setOwner(var1.getCommandSenderName());
+					this.setOwner(par1EntityPlayer.getCommandSenderName());
 					this.playTameEffect(true);
 					this.worldObj.setEntityState(this, (byte)7);
 				} else {
@@ -287,58 +355,80 @@
 			return true;
 		}
 
-		return super.interact(var1);
+		return super.interact(par1EntityPlayer);
 	}
 
-	public void handleHealthUpdate(byte var1) {
-		if(var1 == 8) {
+	public void handleHealthUpdate(byte par1) {
+		if (par1 == 8) {
 			this.field_70928_h = true;
 			this.timeWolfIsShaking = 0.0F;
 			this.prevTimeWolfIsShaking = 0.0F;
 		} else {
-			super.handleHealthUpdate(var1);
+			super.handleHealthUpdate(par1);
 		}
-
 	}
 
 	public float getTailRotation() {
-		return this.isAngry() ? (float)Math.PI * 0.49F : (this.isTamed() ? (0.55F - (20.0F - this.dataWatcher.getWatchableObjectFloat(18)) * 0.02F) * (float)Math.PI : (float)Math.PI * 0.2F);
-	}
-
-	public boolean isBreedingItem(ItemStack var1) {
-		return var1 == null ? false : (!(Item.itemsList[var1.itemID] instanceof ItemFood) ? false : ((ItemFood)Item.itemsList[var1.itemID]).isWolfsFavoriteMeat());
-	}
-
+		return this.isAngry() ? 1.5393804F : (this.isTamed() ? (0.55F - (20.0F - this.dataWatcher.getWatchableObjectFloat(18)) * 0.02F) * (float)Math.PI : ((float)Math.PI / 5F));
+	}
+
+	/**
+	 * Checks if the parameter is an item which this animal can be fed to breed it (wheat, carrots or seeds depending on
+	 * the animal type)
+	 */
+	public boolean isBreedingItem(ItemStack par1ItemStack) {
+		return par1ItemStack == null ? false : (!(Item.itemsList[par1ItemStack.itemID] instanceof ItemFood) ? false : ((ItemFood)Item.itemsList[par1ItemStack.itemID]).isWolfsFavoriteMeat());
+	}
+
+	/**
+	 * Will return how many at most can spawn in a chunk at once.
+	 */
 	public int getMaxSpawnedInChunk() {
 		return 8;
 	}
 
+	/**
+	 * Determines whether this wolf is angry or not.
+	 */
 	public boolean isAngry() {
 		return (this.dataWatcher.getWatchableObjectByte(16) & 2) != 0;
 	}
 
-	public void setAngry(boolean var1) {
+	/**
+	 * Sets whether this wolf is angry or not.
+	 */
+	public void setAngry(boolean par1) {
 		byte var2 = this.dataWatcher.getWatchableObjectByte(16);
-		if(var1) {
+
+		if (par1) {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 | 2)));
 		} else {
 			this.dataWatcher.updateObject(16, Byte.valueOf((byte)(var2 & -3)));
 		}
-
 	}
 
+	/**
+	 * Return this wolf's collar color.
+	 */
 	public int getCollarColor() {
 		return this.dataWatcher.getWatchableObjectByte(20) & 15;
 	}
 
-	public void setCollarColor(int var1) {
-		this.dataWatcher.updateObject(20, Byte.valueOf((byte)(var1 & 15)));
+	/**
+	 * Set this wolf's collar color.
+	 */
+	public void setCollarColor(int par1) {
+		this.dataWatcher.updateObject(20, Byte.valueOf((byte)(par1 & 15)));
 	}
 
-	public EntityWolf spawnBabyAnimal(EntityAgeable var1) {
+	/**
+	 * This function is used when two same-species animals in 'love mode' breed to generate the new baby animal.
+	 */
+	public EntityWolf spawnBabyAnimal(EntityAgeable par1EntityAgeable) {
 		EntityWolf var2 = new EntityWolf(this.worldObj);
 		String var3 = this.getOwnerName();
-		if(var3 != null && var3.trim().length() > 0) {
+
+		if (var3 != null && var3.trim().length() > 0) {
 			var2.setOwner(var3);
 			var2.setTamed(true);
 		}
@@ -346,24 +436,26 @@
 		return var2;
 	}
 
-	public void func_70918_i(boolean var1) {
-		if(var1) {
+	public void func_70918_i(boolean par1) {
+		if (par1) {
 			this.dataWatcher.updateObject(19, Byte.valueOf((byte)1));
 		} else {
 			this.dataWatcher.updateObject(19, Byte.valueOf((byte)0));
 		}
-
 	}
 
-	public boolean canMateWith(EntityAnimal var1) {
-		if(var1 == this) {
-			return false;
-		} else if(!this.isTamed()) {
-			return false;
-		} else if(!(var1 instanceof EntityWolf)) {
+	/**
+	 * Returns true if the mob is currently able to mate with the specified mob.
+	 */
+	public boolean canMateWith(EntityAnimal par1EntityAnimal) {
+		if (par1EntityAnimal == this) {
+			return false;
+		} else if (!this.isTamed()) {
+			return false;
+		} else if (!(par1EntityAnimal instanceof EntityWolf)) {
 			return false;
 		} else {
-			EntityWolf var2 = (EntityWolf)var1;
+			EntityWolf var2 = (EntityWolf)par1EntityAnimal;
 			return !var2.isTamed() ? false : (var2.isSitting() ? false : this.isInLove() && var2.isInLove());
 		}
 	}
@@ -372,26 +464,30 @@
 		return this.dataWatcher.getWatchableObjectByte(19) == 1;
 	}
 
+	/**
+	 * Determines if an entity can be despawned, used on idle far away entities
+	 */
 	protected boolean canDespawn() {
 		return !this.isTamed() && this.ticksExisted > 2400;
 	}
 
-	public boolean func_142018_a(EntityLivingBase var1, EntityLivingBase var2) {
-		if(!(var1 instanceof EntityCreeper) && !(var1 instanceof EntityGhast)) {
-			if(var1 instanceof EntityWolf) {
-				EntityWolf var3 = (EntityWolf)var1;
-				if(var3.isTamed() && var3.func_130012_q() == var2) {
+	public boolean func_142018_a(EntityLivingBase par1EntityLivingBase, EntityLivingBase par2EntityLivingBase) {
+		if (!(par1EntityLivingBase instanceof EntityCreeper) && !(par1EntityLivingBase instanceof EntityGhast)) {
+			if (par1EntityLivingBase instanceof EntityWolf) {
+				EntityWolf var3 = (EntityWolf)par1EntityLivingBase;
+
+				if (var3.isTamed() && var3.func_130012_q() == par2EntityLivingBase) {
 					return false;
 				}
 			}
 
-			return var1 instanceof EntityPlayer && var2 instanceof EntityPlayer && !((EntityPlayer)var2).canAttackPlayer((EntityPlayer)var1) ? false : !(var1 instanceof EntityHorse) || !((EntityHorse)var1).isTame();
+			return par1EntityLivingBase instanceof EntityPlayer && par2EntityLivingBase instanceof EntityPlayer && !((EntityPlayer)par2EntityLivingBase).canAttackPlayer((EntityPlayer)par1EntityLivingBase) ? false : !(par1EntityLivingBase instanceof EntityHorse) || !((EntityHorse)par1EntityLivingBase).isTame();
 		} else {
 			return false;
 		}
 	}
 
-	public EntityAgeable createChild(EntityAgeable var1) {
-		return this.spawnBabyAnimal(var1);
+	public EntityAgeable createChild(EntityAgeable par1EntityAgeable) {
+		return this.spawnBabyAnimal(par1EntityAgeable);
 	}
 }
