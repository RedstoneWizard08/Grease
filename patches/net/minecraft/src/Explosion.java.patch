--- net/minecraft/src/Explosion.java
+++ net/minecraft/src/Explosion.java
@@ -9,42 +9,51 @@
 import java.util.Random;
 
 public class Explosion {
+
+	/** whether or not the explosion sets fire to blocks around it */
 	public boolean isFlaming;
+
+	/** whether or not this explosion spawns smoke particles */
 	public boolean isSmoking = true;
 	private int field_77289_h = 16;
-	private Random j = new Random();
+	private Random explosionRNG = new Random();
 	private World worldObj;
 	public double explosionX;
 	public double explosionY;
 	public double explosionZ;
 	public Entity exploder;
 	public float explosionSize;
-	public List h = new ArrayList();
-	private Map l = new HashMap();
-
-	public Explosion(World var1, Entity var2, double var3, double var5, double var7, float var9) {
-		this.worldObj = var1;
-		this.exploder = var2;
-		this.explosionSize = var9;
-		this.explosionX = var3;
-		this.explosionY = var5;
-		this.explosionZ = var7;
+
+	/** A list of ChunkPositions of blocks affected by this explosion */
+	public List affectedBlockPositions = new ArrayList();
+	private Map field_77288_k = new HashMap();
+
+	public Explosion(World par1World, Entity par2Entity, double par3, double par5, double par7, float par9) {
+		this.worldObj = par1World;
+		this.exploder = par2Entity;
+		this.explosionSize = par9;
+		this.explosionX = par3;
+		this.explosionY = par5;
+		this.explosionZ = par7;
 	}
 
+	/**
+	 * Does the first part of the explosion (destroy blocks)
+	 */
 	public void doExplosionA() {
 		float var1 = this.explosionSize;
 		HashSet var2 = new HashSet();
-
 		int var3;
 		int var4;
 		int var5;
 		double var15;
 		double var17;
 		double var19;
-		for(var3 = 0; var3 < this.field_77289_h; ++var3) {
-			for(var4 = 0; var4 < this.field_77289_h; ++var4) {
-				for(var5 = 0; var5 < this.field_77289_h; ++var5) {
-					if(var3 == 0 || var3 == this.field_77289_h - 1 || var4 == 0 || var4 == this.field_77289_h - 1 || var5 == 0 || var5 == this.field_77289_h - 1) {
+
+		for (var3 = 0; var3 < this.field_77289_h; ++var3) {
+			for (var4 = 0; var4 < this.field_77289_h; ++var4) {
+				for (var5 = 0; var5 < this.field_77289_h; ++var5) {
+					if (var3 == 0 || var3 == this.field_77289_h - 1 || var4 == 0 || var4 == this.field_77289_h - 1 || var5 == 0 || var5 == this.field_77289_h - 1) {
 						double var6 = (double)((float)var3 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
 						double var8 = (double)((float)var4 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
 						double var10 = (double)((float)var5 / ((float)this.field_77289_h - 1.0F) * 2.0F - 1.0F);
@@ -52,23 +61,24 @@
 						var6 /= var12;
 						var8 /= var12;
 						var10 /= var12;
-						float var14 = this.explosionSize * (0.7F + this.worldObj.s.nextFloat() * 0.6F);
+						float var14 = this.explosionSize * (0.7F + this.worldObj.rand.nextFloat() * 0.6F);
 						var15 = this.explosionX;
 						var17 = this.explosionY;
 						var19 = this.explosionZ;
 
-						for(float var21 = 0.3F; var14 > 0.0F; var14 -= var21 * (12.0F / 16.0F)) {
+						for (float var21 = 0.3F; var14 > 0.0F; var14 -= var21 * 0.75F) {
 							int var22 = MathHelper.floor_double(var15);
 							int var23 = MathHelper.floor_double(var17);
 							int var24 = MathHelper.floor_double(var19);
 							int var25 = this.worldObj.getBlockId(var22, var23, var24);
-							if(var25 > 0) {
+
+							if (var25 > 0) {
 								Block var26 = Block.blocksList[var25];
 								float var27 = this.exploder != null ? this.exploder.getBlockExplosionResistance(this, this.worldObj, var22, var23, var24, var26) : var26.getExplosionResistance(this.exploder);
 								var14 -= (var27 + 0.3F) * var21;
 							}
 
-							if(var14 > 0.0F && (this.exploder == null || this.exploder.shouldExplodeBlock(this, this.worldObj, var22, var23, var24, var25, var14))) {
+							if (var14 > 0.0F && (this.exploder == null || this.exploder.shouldExplodeBlock(this, this.worldObj, var22, var23, var24, var25, var14))) {
 								var2.add(new ChunkPosition(var22, var23, var24));
 							}
 
@@ -81,7 +91,7 @@
 			}
 		}
 
-		this.h.addAll(var2);
+		this.affectedBlockPositions.addAll(var2);
 		this.explosionSize *= 2.0F;
 		var3 = MathHelper.floor_double(this.explosionX - (double)this.explosionSize - 1.0D);
 		var4 = MathHelper.floor_double(this.explosionX + (double)this.explosionSize + 1.0D);
@@ -92,15 +102,17 @@
 		List var9 = this.worldObj.getEntitiesWithinAABBExcludingEntity(this.exploder, AxisAlignedBB.getAABBPool().getAABB((double)var3, (double)var5, (double)var7, (double)var4, (double)var29, (double)var30));
 		Vec3 var31 = this.worldObj.getWorldVec3Pool().getVecFromPool(this.explosionX, this.explosionY, this.explosionZ);
 
-		for(int var11 = 0; var11 < var9.size(); ++var11) {
+		for (int var11 = 0; var11 < var9.size(); ++var11) {
 			Entity var32 = (Entity)var9.get(var11);
 			double var13 = var32.getDistance(this.explosionX, this.explosionY, this.explosionZ) / (double)this.explosionSize;
-			if(var13 <= 1.0D) {
+
+			if (var13 <= 1.0D) {
 				var15 = var32.posX - this.explosionX;
 				var17 = var32.posY + (double)var32.getEyeHeight() - this.explosionY;
 				var19 = var32.posZ - this.explosionZ;
 				double var33 = (double)MathHelper.sqrt_double(var15 * var15 + var17 * var17 + var19 * var19);
-				if(var33 != 0.0D) {
+
+				if (var33 != 0.0D) {
 					var15 /= var33;
 					var17 /= var33;
 					var19 /= var33;
@@ -111,8 +123,9 @@
 					var32.motionX += var15 * var36;
 					var32.motionY += var17 * var36;
 					var32.motionZ += var19 * var36;
-					if(var32 instanceof EntityPlayer) {
-						this.l.put((EntityPlayer)var32, this.worldObj.getWorldVec3Pool().getVecFromPool(var15 * var35, var17 * var35, var19 * var35));
+
+					if (var32 instanceof EntityPlayer) {
+						this.field_77288_k.put((EntityPlayer)var32, this.worldObj.getWorldVec3Pool().getVecFromPool(var15 * var35, var17 * var35, var19 * var35));
 					}
 				}
 			}
@@ -121,9 +134,13 @@
 		this.explosionSize = var1;
 	}
 
-	public void doExplosionB(boolean var1) {
-		this.worldObj.playSoundEffect(this.explosionX, this.explosionY, this.explosionZ, "random.explode", 4.0F, (1.0F + (this.worldObj.s.nextFloat() - this.worldObj.s.nextFloat()) * 0.2F) * 0.7F);
-		if(this.explosionSize >= 2.0F && this.isSmoking) {
+	/**
+	 * Does the second part of the explosion (sound, particles, drop spawn)
+	 */
+	public void doExplosionB(boolean par1) {
+		this.worldObj.playSoundEffect(this.explosionX, this.explosionY, this.explosionZ, "random.explode", 4.0F, (1.0F + (this.worldObj.rand.nextFloat() - this.worldObj.rand.nextFloat()) * 0.2F) * 0.7F);
+
+		if (this.explosionSize >= 2.0F && this.isSmoking) {
 			this.worldObj.spawnParticle("hugeexplosion", this.explosionX, this.explosionY, this.explosionZ, 1.0D, 0.0D, 0.0D);
 		} else {
 			this.worldObj.spawnParticle("largeexplode", this.explosionX, this.explosionY, this.explosionZ, 1.0D, 0.0D, 0.0D);
@@ -135,19 +152,21 @@
 		int var5;
 		int var6;
 		int var7;
-		if(this.isSmoking) {
-			var2 = this.h.iterator();
-
-			while(var2.hasNext()) {
+
+		if (this.isSmoking) {
+			var2 = this.affectedBlockPositions.iterator();
+
+			while (var2.hasNext()) {
 				var3 = (ChunkPosition)var2.next();
 				var4 = var3.x;
 				var5 = var3.y;
 				var6 = var3.z;
 				var7 = this.worldObj.getBlockId(var4, var5, var6);
-				if(var1) {
-					double var8 = (double)((float)var4 + this.worldObj.s.nextFloat());
-					double var10 = (double)((float)var5 + this.worldObj.s.nextFloat());
-					double var12 = (double)((float)var6 + this.worldObj.s.nextFloat());
+
+				if (par1) {
+					double var8 = (double)((float)var4 + this.worldObj.rand.nextFloat());
+					double var10 = (double)((float)var5 + this.worldObj.rand.nextFloat());
+					double var12 = (double)((float)var6 + this.worldObj.rand.nextFloat());
 					double var14 = var8 - this.explosionX;
 					double var16 = var10 - this.explosionY;
 					double var18 = var12 - this.explosionZ;
@@ -156,7 +175,7 @@
 					var16 /= var20;
 					var18 /= var20;
 					double var22 = 0.5D / (var20 / (double)this.explosionSize + 0.1D);
-					var22 *= (double)(this.worldObj.s.nextFloat() * this.worldObj.s.nextFloat() + 0.3F);
+					var22 *= (double)(this.worldObj.rand.nextFloat() * this.worldObj.rand.nextFloat() + 0.3F);
 					var14 *= var22;
 					var16 *= var22;
 					var18 *= var22;
@@ -164,9 +183,10 @@
 					this.worldObj.spawnParticle("smoke", var8, var10, var12, var14, var16, var18);
 				}
 
-				if(var7 > 0) {
+				if (var7 > 0) {
 					Block var24 = Block.blocksList[var7];
-					if(var24.canDropFromExplosion(this)) {
+
+					if (var24.canDropFromExplosion(this)) {
 						var24.dropBlockAsItemWithChance(this.worldObj, var4, var5, var6, this.worldObj.getBlockMetadata(var4, var5, var6), 1.0F / this.explosionSize, 0);
 					}
 
@@ -176,28 +196,31 @@
 			}
 		}
 
-		if(this.isFlaming) {
-			var2 = this.h.iterator();
+		if (this.isFlaming) {
+			var2 = this.affectedBlockPositions.iterator();
 
-			while(var2.hasNext()) {
+			while (var2.hasNext()) {
 				var3 = (ChunkPosition)var2.next();
 				var4 = var3.x;
 				var5 = var3.y;
 				var6 = var3.z;
 				var7 = this.worldObj.getBlockId(var4, var5, var6);
 				int var25 = this.worldObj.getBlockId(var4, var5 - 1, var6);
-				if(var7 == 0 && Block.opaqueCubeLookup[var25] && this.j.nextInt(3) == 0) {
+
+				if (var7 == 0 && Block.opaqueCubeLookup[var25] && this.explosionRNG.nextInt(3) == 0) {
 					this.worldObj.setBlock(var4, var5, var6, Block.fire.blockID);
 				}
 			}
 		}
-
 	}
 
 	public Map func_77277_b() {
-		return this.l;
+		return this.field_77288_k;
 	}
 
+	/**
+	 * Returns either the entity that placed the explosive block, the entity that caused the explosion or null.
+	 */
 	public EntityLivingBase getExplosivePlacedBy() {
 		return this.exploder == null ? null : (this.exploder instanceof EntityTNTPrimed ? ((EntityTNTPrimed)this.exploder).getTntPlacedBy() : (this.exploder instanceof EntityLivingBase ? (EntityLivingBase)this.exploder : null));
 	}
