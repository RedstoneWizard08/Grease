--- net/minecraft/src/FallbackResourceManager.java
+++ net/minecraft/src/FallbackResourceManager.java
@@ -10,65 +10,68 @@
 import java.util.Set;
 
 public class FallbackResourceManager implements ResourceManager {
-	protected final List a = new ArrayList();
+	public final List resourcePacks = new ArrayList();
 	private final MetadataSerializer frmMetadataSerializer;
 
-	public FallbackResourceManager(MetadataSerializer var1) {
-		this.frmMetadataSerializer = var1;
+	public FallbackResourceManager(MetadataSerializer par1MetadataSerializer) {
+		this.frmMetadataSerializer = par1MetadataSerializer;
 	}
 
-	public void addResourcePack(ResourcePack var1) {
-		this.a.add(var1);
+	public void addResourcePack(ResourcePack par1ResourcePack) {
+		this.resourcePacks.add(par1ResourcePack);
 	}
 
 	public Set getResourceDomains() {
 		return null;
 	}
 
-	public Resource getResource(ResourceLocation var1) throws IOException {
+	public Resource getResource(ResourceLocation par1ResourceLocation) throws IOException {
 		ResourcePack var2 = null;
-		ResourceLocation var3 = getLocationMcmeta(var1);
-
-		for(int var4 = this.a.size() - 1; var4 >= 0; --var4) {
-			ResourcePack var5 = (ResourcePack)this.a.get(var4);
-			if(var2 == null && var5.resourceExists(var3)) {
+		ResourceLocation var3 = getLocationMcmeta(par1ResourceLocation);
+
+		for (int var4 = this.resourcePacks.size() - 1; var4 >= 0; --var4) {
+			ResourcePack var5 = (ResourcePack)this.resourcePacks.get(var4);
+
+			if (var2 == null && var5.resourceExists(var3)) {
 				var2 = var5;
 			}
 
-			if(var5.resourceExists(var1)) {
+			if (var5.resourceExists(par1ResourceLocation)) {
 				InputStream var6 = null;
-				if(var2 != null) {
+
+				if (var2 != null) {
 					var6 = var2.getInputStream(var3);
 				}
 
-				return new SimpleResource(var1, var5.getInputStream(var1), var6, this.frmMetadataSerializer);
+				return new SimpleResource(par1ResourceLocation, var5.getInputStream(par1ResourceLocation), var6, this.frmMetadataSerializer);
 			}
 		}
 
-		throw new FileNotFoundException(var1.toString());
+		throw new FileNotFoundException(par1ResourceLocation.toString());
 	}
 
-	public List getAllResources(ResourceLocation var1) throws IOException {
+	public List getAllResources(ResourceLocation par1ResourceLocation) throws IOException {
 		ArrayList var2 = Lists.newArrayList();
-		ResourceLocation var3 = getLocationMcmeta(var1);
-		Iterator var4 = this.a.iterator();
+		ResourceLocation var3 = getLocationMcmeta(par1ResourceLocation);
+		Iterator var4 = this.resourcePacks.iterator();
 
-		while(var4.hasNext()) {
+		while (var4.hasNext()) {
 			ResourcePack var5 = (ResourcePack)var4.next();
-			if(var5.resourceExists(var1)) {
+
+			if (var5.resourceExists(par1ResourceLocation)) {
 				InputStream var6 = var5.resourceExists(var3) ? var5.getInputStream(var3) : null;
-				var2.add(new SimpleResource(var1, var5.getInputStream(var1), var6, this.frmMetadataSerializer));
+				var2.add(new SimpleResource(par1ResourceLocation, var5.getInputStream(par1ResourceLocation), var6, this.frmMetadataSerializer));
 			}
 		}
 
-		if(var2.isEmpty()) {
-			throw new FileNotFoundException(var1.toString());
+		if (var2.isEmpty()) {
+			throw new FileNotFoundException(par1ResourceLocation.toString());
 		} else {
 			return var2;
 		}
 	}
 
-	static ResourceLocation getLocationMcmeta(ResourceLocation var0) {
-		return new ResourceLocation(var0.getResourceDomain(), var0.getResourcePath() + ".mcmeta");
+	static ResourceLocation getLocationMcmeta(ResourceLocation par0ResourceLocation) {
+		return new ResourceLocation(par0ResourceLocation.getResourceDomain(), par0ResourceLocation.getResourcePath() + ".mcmeta");
 	}
 }
