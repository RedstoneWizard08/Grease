--- net/minecraft/src/FontRenderer.java
+++ net/minecraft/src/FontRenderer.java
@@ -9,48 +9,126 @@
 import java.util.List;
 import java.util.Random;
 import javax.imageio.ImageIO;
+
 import org.lwjgl.opengl.GL11;
 
+import com.prupe.mcpatcher.cc.ColorizeWorld;
+import com.prupe.mcpatcher.hd.FontUtils;
+
 public class FontRenderer implements ResourceManagerReloadListener {
 	private static final ResourceLocation[] unicodePageLocations = new ResourceLocation[256];
+
+	/** Array of width of all the characters in default.png */
 	private int[] charWidth = new int[256];
-	public int FONT_HEIGHT = 9;
-	public Random b = new Random();
+
+	/** the height in pixels of default text */
+	// Spout Start - Smaller text
+	public int FONT_HEIGHT = 8;
+	// Spout End
+	public Random fontRandom = new Random();
+
+	/**
+	 * Array of the start/end column (in upper/lower nibble) for every glyph in the /font directory.
+	 */
 	private byte[] glyphWidth = new byte[65536];
+
+	/**
+	 * Array of GL texture ids for loaded glyph_XX.png images. Indexed by Unicode block (group of 256 chars).
+	 */
+	// Spout Start - Removed final modifier
+	// TODO: Something?
+	private int[] glyphTextureName = new int[256];
+	// Spout End
+
+	/**
+	 * Array of RGB triplets defining the 16 standard chat colors followed by 16 darker version of the same colors for drop
+	 * shadows.
+	 */
 	private int[] colorCode = new int[32];
-	private final ResourceLocation locationFontTexture;
-	private final TextureManager renderEngine;
+	private ResourceLocation locationFontTexture;
+
+	/**
+	 * The currently bound GL texture ID. Avoids unnecessary glBindTexture() for the same texture if it's already bound.
+	 */
+	private int boundTextureName;
+
+	/** The RenderEngine used to load and setup glyph textures. */
+	// Spout start - Removed final modifier
+	private TextureManager renderEngine;
+	// Spout End
+
+	/** Current X coordinate at which to draw the next character. */
 	private float posX;
+
+	/** Current Y coordinate at which to draw the next character. */
 	private float posY;
-	private boolean unicodeFlag;
+
+	/**
+	 * If true, strings should be rendered with Unicode fonts instead of the default.png font
+	 */
+	public boolean unicodeFlag;
+
+	/**
+	 * If true, the Unicode Bidirectional Algorithm should be run before rendering any string.
+	 */
 	private boolean bidiFlag;
+
+	/** Used to specify new red value for the current color. */
 	private float red;
+
+	/** Used to specify new blue value for the current color. */
 	private float blue;
+
+	/** Used to specify new green value for the current color. */
 	private float green;
+
+	/** Used to speify new alpha value for the current color. */
 	private float alpha;
+
+	/** Text color of the currently rendering string. */
 	private int textColor;
+
+	/** Set if the "k" style (random) is active in currently rendering string */
 	private boolean randomStyle;
+
+	/** Set if the "l" style (bold) is active in currently rendering string */
 	private boolean boldStyle;
+
+	/** Set if the "o" style (italic) is active in currently rendering string */
 	private boolean italicStyle;
+
+	/**
+	 * Set if the "n" style (underlined) is active in currently rendering string
+	 */
 	private boolean underlineStyle;
+
+	/**
+	 * Set if the "m" style (strikethrough) is active in currently rendering string
+	 */
 	private boolean strikethroughStyle;
-
-	public FontRenderer(GameSettings var1, ResourceLocation var2, TextureManager var3, boolean var4) {
-		this.locationFontTexture = var2;
-		this.renderEngine = var3;
-		this.unicodeFlag = var4;
-		var3.bindTexture(this.locationFontTexture);
-
-		for(int var5 = 0; var5 < 32; ++var5) {
+	public float[] charWidthf;
+	public ResourceLocation defaultFont;
+	public ResourceLocation hdFont;
+	public boolean isHD;
+	public float fontAdj;
+
+	public FontRenderer(GameSettings par1GameSettings, ResourceLocation par2ResourceLocation, TextureManager par3TextureManager, boolean par4) {
+		this.locationFontTexture = par2ResourceLocation;
+		this.renderEngine = par3TextureManager;
+		this.unicodeFlag = par4;
+		par3TextureManager.bindTexture(this.locationFontTexture);
+
+		for (int var5 = 0; var5 < 32; ++var5) {
 			int var6 = (var5 >> 3 & 1) * 85;
 			int var7 = (var5 >> 2 & 1) * 170 + var6;
 			int var8 = (var5 >> 1 & 1) * 170 + var6;
 			int var9 = (var5 >> 0 & 1) * 170 + var6;
-			if(var5 == 6) {
+
+			if (var5 == 6) {
 				var7 += 85;
 			}
 
-			if(var1.anaglyph) {
+			if (par1GameSettings.anaglyph) {
 				int var10 = (var7 * 30 + var8 * 59 + var9 * 11) / 100;
 				int var11 = (var7 * 30 + var8 * 70) / 100;
 				int var12 = (var7 * 30 + var9 * 70) / 100;
@@ -59,7 +137,7 @@
 				var9 = var12;
 			}
 
-			if(var5 >= 16) {
+			if (var5 >= 16) {
 				var7 /= 4;
 				var8 /= 4;
 				var9 /= 4;
@@ -67,17 +145,18 @@
 
 			this.colorCode[var5] = (var7 & 255) << 16 | (var8 & 255) << 8 | var9 & 255;
 		}
-
 		this.readGlyphSizes();
 	}
 
-	public void onResourceManagerReload(ResourceManager var1) {
+	public void onResourceManagerReload(ResourceManager par1ResourceManager) {
 		this.readFontTexture();
 	}
 
-	private void readFontTexture() {
+	public void readFontTexture() {
 		BufferedImage var1;
+
 		try {
+			this.locationFontTexture = FontUtils.getFontName(this, this.locationFontTexture);
 			var1 = ImageIO.read(Minecraft.getMinecraft().getResourceManager().getResource(this.locationFontTexture).getInputStream());
 		} catch (IOException var17) {
 			throw new RuntimeException(var17);
@@ -91,35 +170,45 @@
 		int var6 = var2 / 16;
 		byte var7 = 1;
 		float var8 = 8.0F / (float)var6;
+		int var9 = 0;
 
-		for(int var9 = 0; var9 < 256; ++var9) {
+		while (var9 < 256) {
 			int var10 = var9 % 16;
 			int var11 = var9 / 16;
-			if(var9 == 32) {
+
+			if (var9 == 32) {
 				this.charWidth[var9] = 3 + var7;
 			}
 
-			int var12;
-			for(var12 = var6 - 1; var12 >= 0; --var12) {
-				int var13 = var10 * var6 + var12;
-				boolean var14 = true;
-
-				for(int var15 = 0; var15 < var5 && var14; ++var15) {
-					int var16 = (var11 * var6 + var15) * var2;
-					if((var4[var13 + var16] >> 24 & 255) != 0) {
-						var14 = false;
-					}
-				}
-
-				if(!var14) {
-					break;
-				}
+			int var12 = var6 - 1;
+
+			while (true) {
+				if (var12 >= 0) {
+					int var13 = var10 * var6 + var12;
+					boolean var14 = true;
+
+					for (int var15 = 0; var15 < var5 && var14; ++var15) {
+						int var16 = (var11 * var6 + var15) * var2;
+
+						if ((var4[var13 + var16] >> 24 & 255) != 0) {
+							var14 = false;
+						}
+					}
+
+					if (var14) {
+						--var12;
+						continue;
+					}
+				}
+
+				++var12;
+				this.charWidth[var9] = (int)(0.5D + (double)((float)var12 * var8)) + var7;
+				++var9;
+				break;
 			}
-
-			++var12;
-			this.charWidth[var9] = (int)(0.5D + (double)((float)var12 * var8)) + var7;
 		}
 
+		this.charWidthf = FontUtils.computeCharWidthsf(this, this.locationFontTexture, var1, var4, this.charWidth, 1.0F);
 	}
 
 	private void readGlyphSizes() {
@@ -131,55 +220,67 @@
 		}
 	}
 
-	private float renderCharAtPos(int var1, char var2, boolean var3) {
-		return var2 == 32 ? 4.0F : (var1 > 0 && !this.unicodeFlag ? this.renderDefaultChar(var1 + 32, var3) : this.renderUnicodeChar(var2, var3));
+	/**
+	 * Pick how to render a single character and return the width used.
+	 */
+	private float renderCharAtPos(int par1, char par2, boolean par3) {
+		return par2 == 32 ? this.charWidthf[32] : (par1 > 0 && !this.unicodeFlag ? this.renderDefaultChar(par1 + 32, par3) : this.renderUnicodeChar(par2, par3));
 	}
 
-	private float renderDefaultChar(int var1, boolean var2) {
-		float var3 = (float)(var1 % 16 * 8);
-		float var4 = (float)(var1 / 16 * 8);
-		float var5 = var2 ? 1.0F : 0.0F;
+	/**
+	 * Render a single character with the default.png font at current (posX,posY) location...
+	 */
+	private float renderDefaultChar(int par1, boolean par2) {
+		float var3 = (float)(par1 % 16 * 8);
+		float var4 = (float)(par1 / 16 * 8);
+		float var5 = par2 ? 1.0F : 0.0F;
 		this.renderEngine.bindTexture(this.locationFontTexture);
-		float var6 = (float)this.charWidth[var1] - 0.01F;
+		float var6 = (float)this.charWidth[par1] - 0.01F;
 		GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
 		GL11.glTexCoord2f(var3 / 128.0F, var4 / 128.0F);
 		GL11.glVertex3f(this.posX + var5, this.posY, 0.0F);
 		GL11.glTexCoord2f(var3 / 128.0F, (var4 + 7.99F) / 128.0F);
 		GL11.glVertex3f(this.posX - var5, this.posY + 7.99F, 0.0F);
-		GL11.glTexCoord2f((var3 + var6 - 1.0F) / 128.0F, var4 / 128.0F);
-		GL11.glVertex3f(this.posX + var6 - 1.0F + var5, this.posY, 0.0F);
-		GL11.glTexCoord2f((var3 + var6 - 1.0F) / 128.0F, (var4 + 7.99F) / 128.0F);
-		GL11.glVertex3f(this.posX + var6 - 1.0F - var5, this.posY + 7.99F, 0.0F);
+		GL11.glTexCoord2f((var3 + var6 - this.fontAdj) / 128.0F, var4 / 128.0F);
+		GL11.glVertex3f(this.posX + var6 - this.fontAdj + var5, this.posY, 0.0F);
+		GL11.glTexCoord2f((var3 + var6 - this.fontAdj) / 128.0F, (var4 + 7.99F) / 128.0F);
+		GL11.glVertex3f(this.posX + var6 - this.fontAdj - var5, this.posY + 7.99F, 0.0F);
 		GL11.glEnd();
-		return (float)this.charWidth[var1];
+		return FontUtils.getCharWidthf(this, this.charWidth, par1);
 	}
 
-	private ResourceLocation getUnicodePageLocation(int var1) {
-		if(unicodePageLocations[var1] == null) {
-			unicodePageLocations[var1] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", new Object[]{Integer.valueOf(var1)}));
+	private ResourceLocation getUnicodePageLocation(int par1) {
+		if (unicodePageLocations[par1] == null) {
+			unicodePageLocations[par1] = new ResourceLocation(String.format("textures/font/unicode_page_%02x.png", new Object[] {Integer.valueOf(par1)}));
 		}
 
-		return unicodePageLocations[var1];
-	}
-
-	private void loadGlyphTexture(int var1) {
-		this.renderEngine.bindTexture(this.getUnicodePageLocation(var1));
-	}
-
-	private float renderUnicodeChar(char var1, boolean var2) {
-		if(this.glyphWidth[var1] == 0) {
+		return FontUtils.getUnicodePage(unicodePageLocations[par1]);
+	}
+
+	/**
+	 * Load one of the /font/glyph_XX.png into a new GL texture and store the texture ID in glyphTextureName array.
+	 */
+	private void loadGlyphTexture(int par1) {
+		this.renderEngine.bindTexture(this.getUnicodePageLocation(par1));
+	}
+
+	/**
+	 * Render a single Unicode character at current (posX,posY) location using one of the /font/glyph_XX.png files...
+	 */
+	private float renderUnicodeChar(char par1, boolean par2) {
+		if (this.glyphWidth[par1] == 0) {
 			return 0.0F;
 		} else {
-			int var3 = var1 / 256;
+			int var3 = par1 / 256;
 			this.loadGlyphTexture(var3);
-			int var4 = this.glyphWidth[var1] >>> 4;
-			int var5 = this.glyphWidth[var1] & 15;
+			int var4 = this.glyphWidth[par1] >>> 4;
+			int var5 = this.glyphWidth[par1] & 15;
 			float var6 = (float)var4;
 			float var7 = (float)(var5 + 1);
-			float var8 = (float)(var1 % 16 * 16) + var6;
-			float var9 = (float)((var1 & 255) / 16 * 16);
+			float var8 = (float)(par1 % 16 * 16) + var6;
+			float var9 = (float)((par1 & 255) / 16 * 16);
 			float var10 = var7 - var6 - 0.02F;
-			float var11 = var2 ? 1.0F : 0.0F;
+			float var11 = par2 ? 1.0F : 0.0F;
 			GL11.glBegin(GL11.GL_TRIANGLE_STRIP);
 			GL11.glTexCoord2f(var8 / 256.0F, var9 / 256.0F);
 			GL11.glVertex3f(this.posX + var11, this.posY, 0.0F);
@@ -194,43 +295,57 @@
 		}
 	}
 
-	public int drawStringWithShadow(String var1, int var2, int var3, int var4) {
-		return this.drawString(var1, var2, var3, var4, true);
-	}
-
-	public int drawString(String var1, int var2, int var3, int var4) {
-		return this.drawString(var1, var2, var3, var4, false);
-	}
-
-	public int drawString(String var1, int var2, int var3, int var4, boolean var5) {
+	/**
+	 * Draws the specified string with a shadow.
+	 */
+	public int drawStringWithShadow(String par1Str, int par2, int par3, int par4) {
+		return this.drawString(par1Str, par2, par3, par4, true);
+	}
+
+	/**
+	 * Draws the specified string.
+	 */
+	public int drawString(String par1Str, int par2, int par3, int par4) {
+		return this.drawString(par1Str, par2, par3, par4, false);
+	}
+
+	/**
+	 * Draws the specified string. Args: string, x, y, color, dropShadow
+	 */
+	public int drawString(String par1Str, int par2, int par3, int par4, boolean par5) {
 		this.resetStyles();
-		if(this.bidiFlag) {
-			var1 = this.bidiReorder(var1);
+
+		if (this.bidiFlag) {
+			par1Str = this.bidiReorder(par1Str);
 		}
 
 		int var6;
-		if(var5) {
-			var6 = this.renderString(var1, var2 + 1, var3 + 1, var4, true);
-			var6 = Math.max(var6, this.renderString(var1, var2, var3, var4, false));
+
+		if (par5) {
+			var6 = this.renderString(par1Str, par2 + 1, par3 + 1, par4, true);
+			var6 = Math.max(var6, this.renderString(par1Str, par2, par3, par4, false));
 		} else {
-			var6 = this.renderString(var1, var2, var3, var4, false);
+			var6 = this.renderString(par1Str, par2, par3, par4, false);
 		}
 
 		return var6;
 	}
 
-	private String bidiReorder(String var1) {
-		if(var1 != null && Bidi.requiresBidi(var1.toCharArray(), 0, var1.length())) {
-			Bidi var2 = new Bidi(var1, -2);
+	/**
+	 * Apply Unicode Bidirectional Algorithm to string and return a new possibly reordered string for visual rendering.
+	 */
+	private String bidiReorder(String par1Str) {
+		if (par1Str != null && Bidi.requiresBidi(par1Str.toCharArray(), 0, par1Str.length())) {
+			Bidi var2 = new Bidi(par1Str, -2);
 			byte[] var3 = new byte[var2.getRunCount()];
 			String[] var4 = new String[var3.length];
-
 			int var7;
-			for(int var5 = 0; var5 < var3.length; ++var5) {
+
+			for (int var5 = 0; var5 < var3.length; ++var5) {
 				int var6 = var2.getRunStart(var5);
 				var7 = var2.getRunLimit(var5);
 				int var8 = var2.getRunLevel(var5);
-				String var9 = var1.substring(var6, var7);
+				String var9 = par1Str.substring(var6, var7);
 				var3[var5] = (byte)var8;
 				var4[var5] = var9;
 			}
@@ -238,40 +353,52 @@
 			String[] var11 = (String[])var4.clone();
 			Bidi.reorderVisually(var3, 0, var4, 0, var3.length);
 			StringBuilder var12 = new StringBuilder();
+			var7 = 0;
 
-			for(var7 = 0; var7 < var4.length; ++var7) {
+			while (var7 < var4.length) {
 				byte var13 = var3[var7];
-
-				int var14;
-				for(var14 = 0; var14 < var11.length; ++var14) {
-					if(var11[var14].equals(var4[var7])) {
+				int var14 = 0;
+
+				while (true) {
+					if (var14 < var11.length) {
+						if (!var11[var14].equals(var4[var7])) {
+							++var14;
+							continue;
+						}
+
 						var13 = var3[var14];
-						break;
 					}
-				}
-
-				if((var13 & 1) == 0) {
-					var12.append(var4[var7]);
-				} else {
-					for(var14 = var4[var7].length() - 1; var14 >= 0; --var14) {
-						char var10 = var4[var7].charAt(var14);
-						if(var10 == 40) {
-							var10 = 41;
-						} else if(var10 == 41) {
-							var10 = 40;
+
+					if ((var13 & 1) == 0) {
+						var12.append(var4[var7]);
+					} else {
+						for (var14 = var4[var7].length() - 1; var14 >= 0; --var14) {
+							char var10 = var4[var7].charAt(var14);
+
+							if (var10 == 40) {
+								var10 = 41;
+							} else if (var10 == 41) {
+								var10 = 40;
+							}
+
+							var12.append(var10);
 						}
-
-						var12.append(var10);
 					}
+
+					++var7;
+					break;
 				}
 			}
 
 			return var12.toString();
 		} else {
-			return var1;
+			return par1Str;
 		}
 	}
 
+	/**
+	 * Reset all style flag fields in the class to false; called at the start of string rendering
+	 */
 	private void resetStyles() {
 		this.randomStyle = false;
 		this.boldStyle = false;
@@ -280,41 +407,47 @@
 		this.strikethroughStyle = false;
 	}
 
-	private void renderStringAtPos(String var1, boolean var2) {
-		for(int var3 = 0; var3 < var1.length(); ++var3) {
-			char var4 = var1.charAt(var3);
+	/**
+	 * Render a single line string at the current (posX,posY) and update posX
+	 */
+	private void renderStringAtPos(String par1Str, boolean par2) {
+		for (int var3 = 0; var3 < par1Str.length(); ++var3) {
+			char var4 = par1Str.charAt(var3);
 			int var5;
 			int var6;
-			if(var4 == 167 && var3 + 1 < var1.length()) {
-				var5 = "0123456789abcdefklmnor".indexOf(var1.toLowerCase().charAt(var3 + 1));
-				if(var5 < 16) {
+
+			if (var4 == 167 && var3 + 1 < par1Str.length()) {
+				var5 = "0123456789abcdefklmnor".indexOf(par1Str.toLowerCase().charAt(var3 + 1));
+
+				if (var5 < 16) {
 					this.randomStyle = false;
 					this.boldStyle = false;
 					this.strikethroughStyle = false;
 					this.underlineStyle = false;
 					this.italicStyle = false;
-					if(var5 < 0 || var5 > 15) {
+
+					if (var5 < 0 || var5 > 15) {
 						var5 = 15;
 					}
 
-					if(var2) {
+					if (par2) {
 						var5 += 16;
 					}
 
-					var6 = this.colorCode[var5];
+					var6 = ColorizeWorld.colorizeText(this.colorCode[var5], var5);
 					this.textColor = var6;
 					GL11.glColor4f((float)(var6 >> 16) / 255.0F, (float)(var6 >> 8 & 255) / 255.0F, (float)(var6 & 255) / 255.0F, this.alpha);
-				} else if(var5 == 16) {
+				} else if (var5 == 16) {
 					this.randomStyle = true;
-				} else if(var5 == 17) {
+				} else if (var5 == 17) {
 					this.boldStyle = true;
-				} else if(var5 == 18) {
+				} else if (var5 == 18) {
 					this.strikethroughStyle = true;
-				} else if(var5 == 19) {
+				} else if (var5 == 19) {
 					this.underlineStyle = true;
-				} else if(var5 == 20) {
+				} else if (var5 == 20) {
 					this.italicStyle = true;
-				} else if(var5 == 21) {
+				} else if (var5 == 21) {
 					this.randomStyle = false;
 					this.boldStyle = false;
 					this.strikethroughStyle = false;
@@ -325,38 +458,43 @@
 
 				++var3;
 			} else {
-				var5 = ChatAllowedCharacters.a.indexOf(var4);
-				if(this.randomStyle && var5 > 0) {
+				var5 = ChatAllowedCharacters.allowedCharacters.indexOf(var4);
+
+				if (this.randomStyle && var5 > 0) {
 					do {
-						var6 = this.b.nextInt(ChatAllowedCharacters.a.length());
-					} while(this.charWidth[var5 + 32] != this.charWidth[var6 + 32]);
+						var6 = this.fontRandom.nextInt(ChatAllowedCharacters.allowedCharacters.length());
+					} while (this.charWidth[var5 + 32] != this.charWidth[var6 + 32]);
 
 					var5 = var6;
 				}
 
 				float var11 = this.unicodeFlag ? 0.5F : 1.0F;
-				boolean var7 = (var5 <= 0 || this.unicodeFlag) && var2;
-				if(var7) {
+				boolean var7 = (var5 <= 0 || this.unicodeFlag) && par2;
+
+				if (var7) {
 					this.posX -= var11;
 					this.posY -= var11;
 				}
 
 				float var8 = this.renderCharAtPos(var5, var4, this.italicStyle);
-				if(var7) {
+
+				if (var7) {
 					this.posX += var11;
 					this.posY += var11;
 				}
 
-				if(this.boldStyle) {
+				if (this.boldStyle) {
 					this.posX += var11;
-					if(var7) {
+
+					if (var7) {
 						this.posX -= var11;
 						this.posY -= var11;
 					}
 
 					this.renderCharAtPos(var5, var4, this.italicStyle);
 					this.posX -= var11;
-					if(var7) {
+
+					if (var7) {
 						this.posX += var11;
 						this.posY += var11;
 					}
@@ -365,7 +503,8 @@
 				}
 
 				Tessellator var9;
-				if(this.strikethroughStyle) {
+
+				if (this.strikethroughStyle) {
 					var9 = Tessellator.instance;
 					GL11.glDisable(GL11.GL_TEXTURE_2D);
 					var9.startDrawingQuads();
@@ -377,7 +516,7 @@
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
 				}
 
-				if(this.underlineStyle) {
+				if (this.underlineStyle) {
 					var9 = Tessellator.instance;
 					GL11.glDisable(GL11.GL_TEXTURE_2D);
 					var9.startDrawingQuads();
@@ -393,58 +532,73 @@
 				this.posX += (float)((int)var8);
 			}
 		}
-
 	}
 
-	private int renderStringAligned(String var1, int var2, int var3, int var4, int var5, boolean var6) {
-		if(this.bidiFlag) {
-			var1 = this.bidiReorder(var1);
-			int var7 = this.getStringWidth(var1);
-			var2 = var2 + var4 - var7;
+	/**
+	 * Render string either left or right aligned depending on bidiFlag
+	 */
+	private int renderStringAligned(String par1Str, int par2, int par3, int par4, int par5, boolean par6) {
+		if (this.bidiFlag) {
+			par1Str = this.bidiReorder(par1Str);
+			int var7 = this.getStringWidth(par1Str);
+			par2 = par2 + par4 - var7;
 		}
 
-		return this.renderString(var1, var2, var3, var5, var6);
+		return this.renderString(par1Str, par2, par3, par5, par6);
 	}
 
-	private int renderString(String var1, int var2, int var3, int var4, boolean var5) {
-		if(var1 == null) {
+	/**
+	 * Render single line string by setting GL color, current (posX,posY), and calling renderStringAtPos()
+	 */
+	private int renderString(String par1Str, int par2, int par3, int par4, boolean par5) {
+		if (par1Str == null) {
 			return 0;
 		} else {
-			if((var4 & -67108864) == 0) {
-				var4 |= -16777216;
-			}
-
-			if(var5) {
-				var4 = (var4 & 16579836) >> 2 | var4 & -16777216;
-			}
-
-			this.red = (float)(var4 >> 16 & 255) / 255.0F;
-			this.blue = (float)(var4 >> 8 & 255) / 255.0F;
-			this.green = (float)(var4 & 255) / 255.0F;
-			this.alpha = (float)(var4 >> 24 & 255) / 255.0F;
+			this.boundTextureName = 0;
+			par4 = ColorizeWorld.colorizeText(par4);
+
+			if ((par4 & -67108864) == 0) {
+				par4 |= -16777216;
+			}
+
+			if (par5) {
+				par4 = (par4 & 16579836) >> 2 | par4 & -16777216;
+			}
+
+			this.red = (float)(par4 >> 16 & 255) / 255.0F;
+			this.blue = (float)(par4 >> 8 & 255) / 255.0F;
+			this.green = (float)(par4 & 255) / 255.0F;
+			this.alpha = (float)(par4 >> 24 & 255) / 255.0F;
 			GL11.glColor4f(this.red, this.blue, this.green, this.alpha);
-			this.posX = (float)var2;
-			this.posY = (float)var3;
-			this.renderStringAtPos(var1, var5);
+			this.posX = (float)par2;
+			this.posY = (float)par3;
+			this.renderStringAtPos(par1Str, par5);
 			return (int)this.posX;
 		}
 	}
 
-	public int getStringWidth(String var1) {
-		if(var1 == null) {
+	/**
+	 * Returns the width of this string. Equivalent of FontMetrics.stringWidth(String s).
+	 */
+	public int getStringWidth(String par1Str) {
+		if (this.isHD) {
+			return (int)FontUtils.getStringWidthf(this, par1Str);
+		} else if (par1Str == null) {
 			return 0;
 		} else {
 			int var2 = 0;
 			boolean var3 = false;
 
-			for(int var4 = 0; var4 < var1.length(); ++var4) {
-				char var5 = var1.charAt(var4);
+			for (int var4 = 0; var4 < par1Str.length(); ++var4) {
+				char var5 = par1Str.charAt(var4);
 				int var6 = this.getCharWidth(var5);
-				if(var6 < 0 && var4 < var1.length() - 1) {
+
+				if (var6 < 0 && var4 < par1Str.length() - 1) {
 					++var4;
-					var5 = var1.charAt(var4);
-					if(var5 != 108 && var5 != 76) {
-						if(var5 == 114 || var5 == 82) {
+					var5 = par1Str.charAt(var4);
+
+					if (var5 != 108 && var5 != 76) {
+						if (var5 == 114 || var5 == 82) {
 							var3 = false;
 						}
 					} else {
@@ -455,7 +609,8 @@
 				}
 
 				var2 += var6;
-				if(var3) {
+
+				if (var3) {
 					++var2;
 				}
 			}
@@ -464,19 +619,24 @@
 		}
 	}
 
-	public int getCharWidth(char var1) {
-		if(var1 == 167) {
+	/**
+	 * Returns the width of this character as rendered.
+	 */
+	public int getCharWidth(char par1) {
+		if (par1 == 167) {
 			return -1;
-		} else if(var1 == 32) {
+		} else if (par1 == 32) {
 			return 4;
 		} else {
-			int var2 = ChatAllowedCharacters.a.indexOf(var1);
-			if(var2 >= 0 && !this.unicodeFlag) {
+			int var2 = ChatAllowedCharacters.allowedCharacters.indexOf(par1);
+
+			if (var2 >= 0 && !this.unicodeFlag) {
 				return this.charWidth[var2 + 32];
-			} else if(this.glyphWidth[var1] != 0) {
-				int var3 = this.glyphWidth[var1] >>> 4;
-				int var4 = this.glyphWidth[var1] & 15;
-				if(var4 > 7) {
+			} else if (this.glyphWidth[par1] != 0) {
+				int var3 = this.glyphWidth[par1] >>> 4;
+				int var4 = this.glyphWidth[par1] & 15;
+
+				if (var4 > 7) {
 					var4 = 15;
 					var3 = 0;
 				}
@@ -489,44 +649,53 @@
 		}
 	}
 
-	public String trimStringToWidth(String var1, int var2) {
-		return this.trimStringToWidth(var1, var2, false);
+	/**
+	 * Trims a string to fit a specified Width.
+	 */
+	public String trimStringToWidth(String par1Str, int par2) {
+		return this.trimStringToWidth(par1Str, par2, false);
 	}
 
-	public String trimStringToWidth(String var1, int var2, boolean var3) {
+	/**
+	 * Trims a string to a specified width, and will reverse it if par3 is set.
+	 */
+	public String trimStringToWidth(String par1Str, int par2, boolean par3) {
 		StringBuilder var4 = new StringBuilder();
 		int var5 = 0;
-		int var6 = var3 ? var1.length() - 1 : 0;
-		int var7 = var3 ? -1 : 1;
+		int var6 = par3 ? par1Str.length() - 1 : 0;
+		int var7 = par3 ? -1 : 1;
 		boolean var8 = false;
 		boolean var9 = false;
 
-		for(int var10 = var6; var10 >= 0 && var10 < var1.length() && var5 < var2; var10 += var7) {
-			char var11 = var1.charAt(var10);
+		for (int var10 = var6; var10 >= 0 && var10 < par1Str.length() && var5 < par2; var10 += var7) {
+			char var11 = par1Str.charAt(var10);
 			int var12 = this.getCharWidth(var11);
-			if(var8) {
+
+			if (var8) {
 				var8 = false;
-				if(var11 != 108 && var11 != 76) {
-					if(var11 == 114 || var11 == 82) {
+
+				if (var11 != 108 && var11 != 76) {
+					if (var11 == 114 || var11 == 82) {
 						var9 = false;
 					}
 				} else {
 					var9 = true;
 				}
-			} else if(var12 < 0) {
+			} else if (var12 < 0) {
 				var8 = true;
 			} else {
 				var5 += var12;
-				if(var9) {
+
+				if (var9) {
 					++var5;
 				}
 			}
 
-			if(var5 > var2) {
+			if (var5 > par2) {
 				break;
 			}
 
-			if(var3) {
+			if (par3) {
 				var4.insert(0, var11);
 			} else {
 				var4.append(var11);
@@ -536,105 +705,142 @@
 		return var4.toString();
 	}
 
-	private String trimStringNewline(String var1) {
-		while(var1 != null && var1.endsWith("\n")) {
-			var1 = var1.substring(0, var1.length() - 1);
+	/**
+	 * Remove all newline characters from the end of the string
+	 */
+	private String trimStringNewline(String par1Str) {
+		while (par1Str != null && par1Str.endsWith("\n")) {
+			par1Str = par1Str.substring(0, par1Str.length() - 1);
 		}
 
-		return var1;
+		return par1Str;
 	}
 
-	public void drawSplitString(String var1, int var2, int var3, int var4, int var5) {
+	/**
+	 * Splits and draws a String with wordwrap (maximum length is parameter k)
+	 */
+	public void drawSplitString(String par1Str, int par2, int par3, int par4, int par5) {
 		this.resetStyles();
-		this.textColor = var5;
-		var1 = this.trimStringNewline(var1);
-		this.renderSplitString(var1, var2, var3, var4, false);
+		this.textColor = par5;
+		par1Str = this.trimStringNewline(par1Str);
+		this.renderSplitString(par1Str, par2, par3, par4, false);
 	}
 
-	private void renderSplitString(String var1, int var2, int var3, int var4, boolean var5) {
-		List var6 = this.listFormattedStringToWidth(var1, var4);
+	/**
+	 * Perform actual work of rendering a multi-line string with wordwrap and with darker drop shadow color if flag is set
+	 */
+	private void renderSplitString(String par1Str, int par2, int par3, int par4, boolean par5) {
+		List var6 = this.listFormattedStringToWidth(par1Str, par4);
 
-		for(Iterator var7 = var6.iterator(); var7.hasNext(); var3 += this.FONT_HEIGHT) {
+		for (Iterator var7 = var6.iterator(); var7.hasNext(); par3 += this.FONT_HEIGHT) {
 			String var8 = (String)var7.next();
-			this.renderStringAligned(var8, var2, var3, var4, this.textColor, var5);
+			this.renderStringAligned(var8, par2, par3, par4, this.textColor, par5);
 		}
-
-	}
-
-	public int splitStringWidth(String var1, int var2) {
-		return this.FONT_HEIGHT * this.listFormattedStringToWidth(var1, var2).size();
-	}
-
-	public void setUnicodeFlag(boolean var1) {
-		this.unicodeFlag = var1;
-	}
-
+	}
+
+	/**
+	 * Returns the width of the wordwrapped String (maximum length is parameter k)
+	 */
+	public int splitStringWidth(String par1Str, int par2) {
+		return this.FONT_HEIGHT * this.listFormattedStringToWidth(par1Str, par2).size();
+	}
+
+	/**
+	 * Set unicodeFlag controlling whether strings should be rendered with Unicode fonts instead of the default.png font.
+	 */
+	public void setUnicodeFlag(boolean par1) {
+		this.unicodeFlag = par1;
+	}
+
+	/**
+	 * Get unicodeFlag controlling whether strings should be rendered with Unicode fonts instead of the default.png font.
+	 */
 	public boolean getUnicodeFlag() {
 		return this.unicodeFlag;
 	}
 
-	public void setBidiFlag(boolean var1) {
-		this.bidiFlag = var1;
-	}
-
-	public List listFormattedStringToWidth(String var1, int var2) {
-		return Arrays.asList(this.wrapFormattedStringToWidth(var1, var2).split("\n"));
-	}
-
-	String wrapFormattedStringToWidth(String var1, int var2) {
-		int var3 = this.sizeStringToWidth(var1, var2);
-		if(var1.length() <= var3) {
-			return var1;
+	/**
+	 * Set bidiFlag to control if the Unicode Bidirectional Algorithm should be run before rendering any string.
+	 */
+	public void setBidiFlag(boolean par1) {
+		this.bidiFlag = par1;
+	}
+
+	/**
+	 * Breaks a string into a list of pieces that will fit a specified width.
+	 */
+	public List listFormattedStringToWidth(String par1Str, int par2) {
+		return Arrays.asList(this.wrapFormattedStringToWidth(par1Str, par2).split("\n"));
+	}
+
+	/**
+	 * Inserts newline and formatting into a string to wrap it within the specified width.
+	 */
+	String wrapFormattedStringToWidth(String par1Str, int par2) {
+		int var3 = this.sizeStringToWidth(par1Str, par2);
+
+		if (par1Str.length() <= var3) {
+			return par1Str;
 		} else {
-			String var4 = var1.substring(0, var3);
-			char var5 = var1.charAt(var3);
+			String var4 = par1Str.substring(0, var3);
+			char var5 = par1Str.charAt(var3);
 			boolean var6 = var5 == 32 || var5 == 10;
-			String var7 = getFormatFromString(var4) + var1.substring(var3 + (var6 ? 1 : 0));
-			return var4 + "\n" + this.wrapFormattedStringToWidth(var7, var2);
+			String var7 = getFormatFromString(var4) + par1Str.substring(var3 + (var6 ? 1 : 0));
+			return var4 + "\n" + this.wrapFormattedStringToWidth(var7, par2);
 		}
 	}
 
-	private int sizeStringToWidth(String var1, int var2) {
-		int var3 = var1.length();
+	/**
+	 * Determines how many characters from the string will fit into the specified width.
+	 */
+	private int sizeStringToWidth(String par1Str, int par2) {
+		int var3 = par1Str.length();
 		int var4 = 0;
 		int var5 = 0;
 		int var6 = -1;
 
-		for(boolean var7 = false; var5 < var3; ++var5) {
-			char var8 = var1.charAt(var5);
-			switch(var8) {
-			case '\n':
-				--var5;
-				break;
-			case ' ':
-				var6 = var5;
-			default:
-				var4 += this.getCharWidth(var8);
-				if(var7) {
-					++var4;
-				}
-				break;
-			case '\u00a7':
-				if(var5 < var3 - 1) {
-					++var5;
-					char var9 = var1.charAt(var5);
-					if(var9 != 108 && var9 != 76) {
-						if(var9 == 114 || var9 == 82 || isFormatColor(var9)) {
-							var7 = false;
+		for (boolean var7 = false; var5 < var3; ++var5) {
+			char var8 = par1Str.charAt(var5);
+
+			switch (var8) {
+				case 10:
+					--var5;
+					break;
+
+				case 167:
+					if (var5 < var3 - 1) {
+						++var5;
+						char var9 = par1Str.charAt(var5);
+
+						if (var9 != 108 && var9 != 76) {
+							if (var9 == 114 || var9 == 82 || isFormatColor(var9)) {
+								var7 = false;
+							}
+						} else {
+							var7 = true;
 						}
-					} else {
-						var7 = true;
-					}
-				}
+					}
+
+					break;
+
+				case 32:
+					var6 = var5;
+
+				default:
+					var4 += this.getCharWidth(var8);
+
+					if (var7) {
+						++var4;
+					}
 			}
 
-			if(var8 == 10) {
+			if (var8 == 10) {
 				++var5;
 				var6 = var5;
 				break;
 			}
 
-			if(var4 > var2) {
+			if (var4 > par2) {
 				break;
 			}
 		}
@@ -642,36 +848,46 @@
 		return var5 != var3 && var6 != -1 && var6 < var5 ? var6 : var5;
 	}
 
-	private static boolean isFormatColor(char var0) {
-		return var0 >= 48 && var0 <= 57 || var0 >= 97 && var0 <= 102 || var0 >= 65 && var0 <= 70;
-	}
-
-	private static boolean isFormatSpecial(char var0) {
-		return var0 >= 107 && var0 <= 111 || var0 >= 75 && var0 <= 79 || var0 == 114 || var0 == 82;
-	}
-
-	private static String getFormatFromString(String var0) {
+	/**
+	 * Checks if the char code is a hexadecimal character, used to set colour.
+	 */
+	private static boolean isFormatColor(char par0) {
+		return par0 >= 48 && par0 <= 57 || par0 >= 97 && par0 <= 102 || par0 >= 65 && par0 <= 70;
+	}
+
+	/**
+	 * Checks if the char code is O-K...lLrRk-o... used to set special formatting.
+	 */
+	private static boolean isFormatSpecial(char par0) {
+		return par0 >= 107 && par0 <= 111 || par0 >= 75 && par0 <= 79 || par0 == 114 || par0 == 82;
+	}
+
+	/**
+	 * Digests a string for nonprinting formatting characters then returns a string containing only that formatting.
+	 */
+	private static String getFormatFromString(String par0Str) {
 		String var1 = "";
 		int var2 = -1;
-		int var3 = var0.length();
-
-		while(true) {
-			var2 = var0.indexOf(167, var2 + 1);
-			if(var2 == -1) {
-				return var1;
-			}
-
-			if(var2 < var3 - 1) {
-				char var4 = var0.charAt(var2 + 1);
-				if(isFormatColor(var4)) {
+		int var3 = par0Str.length();
+
+		while ((var2 = par0Str.indexOf(167, var2 + 1)) != -1) {
+			if (var2 < var3 - 1) {
+				char var4 = par0Str.charAt(var2 + 1);
+
+				if (isFormatColor(var4)) {
 					var1 = "\u00a7" + var4;
-				} else if(isFormatSpecial(var4)) {
+				} else if (isFormatSpecial(var4)) {
 					var1 = var1 + "\u00a7" + var4;
 				}
 			}
 		}
+
+		return var1;
 	}
 
+	/**
+	 * Get bidiFlag that controls if the Unicode Bidirectional Algorithm should be run before rendering any string
+	 */
 	public boolean getBidiFlag() {
 		return this.bidiFlag;
 	}
