--- net/minecraft/src/FoodStats.java
+++ net/minecraft/src/FoodStats.java
@@ -1,45 +1,66 @@
 package net.minecraft.src;
 
 public class FoodStats {
+
+	/** The player's food level. */
 	private int foodLevel = 20;
+
+	/** The player's food saturation. */
 	private float foodSaturationLevel = 5.0F;
+
+	/** The player's food exhaustion. */
 	private float foodExhaustionLevel;
+
+	/** The player's food timer value. */
 	private int foodTimer;
 	private int prevFoodLevel = 20;
 
-	public void addStats(int var1, float var2) {
-		this.foodLevel = Math.min(var1 + this.foodLevel, 20);
-		this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)var1 * var2 * 2.0F, (float)this.foodLevel);
-	}
-
-	public void addStats(ItemFood var1) {
-		this.addStats(var1.getHealAmount(), var1.getSaturationModifier());
-	}
-
-	public void onUpdate(EntityPlayer var1) {
-		int var2 = var1.worldObj.difficultySetting;
+	/**
+	 * Args: int foodLevel, float foodSaturationModifier
+	 */
+	public void addStats(int par1, float par2) {
+		this.foodLevel = Math.min(par1 + this.foodLevel, 20);
+		this.foodSaturationLevel = Math.min(this.foodSaturationLevel + (float)par1 * par2 * 2.0F, (float)this.foodLevel);
+	}
+
+	/**
+	 * Eat some food.
+	 */
+	public void addStats(ItemFood par1ItemFood) {
+		this.addStats(par1ItemFood.getHealAmount(), par1ItemFood.getSaturationModifier());
+	}
+
+	/**
+	 * Handles the food game logic.
+	 */
+	public void onUpdate(EntityPlayer par1EntityPlayer) {
+		int var2 = par1EntityPlayer.worldObj.difficultySetting;
 		this.prevFoodLevel = this.foodLevel;
-		if(this.foodExhaustionLevel > 4.0F) {
+
+		if (this.foodExhaustionLevel > 4.0F) {
 			this.foodExhaustionLevel -= 4.0F;
-			if(this.foodSaturationLevel > 0.0F) {
+
+			if (this.foodSaturationLevel > 0.0F) {
 				this.foodSaturationLevel = Math.max(this.foodSaturationLevel - 1.0F, 0.0F);
-			} else if(var2 > 0) {
+			} else if (var2 > 0) {
 				this.foodLevel = Math.max(this.foodLevel - 1, 0);
 			}
 		}
 
-		if(var1.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.foodLevel >= 18 && var1.shouldHeal()) {
+		if (par1EntityPlayer.worldObj.getGameRules().getGameRuleBooleanValue("naturalRegeneration") && this.foodLevel >= 18 && par1EntityPlayer.shouldHeal()) {
 			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				var1.heal(1.0F);
+
+			if (this.foodTimer >= 80) {
+				par1EntityPlayer.heal(1.0F);
 				this.addExhaustion(3.0F);
 				this.foodTimer = 0;
 			}
-		} else if(this.foodLevel <= 0) {
+		} else if (this.foodLevel <= 0) {
 			++this.foodTimer;
-			if(this.foodTimer >= 80) {
-				if(var1.getHealth() > 10.0F || var2 >= 3 || var1.getHealth() > 1.0F && var2 >= 2) {
-					var1.attackEntityFrom(DamageSource.starve, 1.0F);
+
+			if (this.foodTimer >= 80) {
+				if (par1EntityPlayer.getHealth() > 10.0F || var2 >= 3 || par1EntityPlayer.getHealth() > 1.0F && var2 >= 2) {
+					par1EntityPlayer.attackEntityFrom(DamageSource.starve, 1.0F);
 				}
 
 				this.foodTimer = 0;
@@ -47,26 +68,33 @@
 		} else {
 			this.foodTimer = 0;
 		}
-
 	}
 
-	public void readNBT(NBTTagCompound var1) {
-		if(var1.hasKey("foodLevel")) {
-			this.foodLevel = var1.getInteger("foodLevel");
-			this.foodTimer = var1.getInteger("foodTickTimer");
-			this.foodSaturationLevel = var1.getFloat("foodSaturationLevel");
-			this.foodExhaustionLevel = var1.getFloat("foodExhaustionLevel");
+	/**
+	 * Reads food stats from an NBT object.
+	 */
+	public void readNBT(NBTTagCompound par1NBTTagCompound) {
+		if (par1NBTTagCompound.hasKey("foodLevel")) {
+			this.foodLevel = par1NBTTagCompound.getInteger("foodLevel");
+			this.foodTimer = par1NBTTagCompound.getInteger("foodTickTimer");
+			this.foodSaturationLevel = par1NBTTagCompound.getFloat("foodSaturationLevel");
+			this.foodExhaustionLevel = par1NBTTagCompound.getFloat("foodExhaustionLevel");
 		}
-
-	}
-
-	public void writeNBT(NBTTagCompound var1) {
-		var1.setInteger("foodLevel", this.foodLevel);
-		var1.setInteger("foodTickTimer", this.foodTimer);
-		var1.setFloat("foodSaturationLevel", this.foodSaturationLevel);
-		var1.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
-	}
-
+	}
+
+	/**
+	 * Writes food stats to an NBT object.
+	 */
+	public void writeNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setInteger("foodLevel", this.foodLevel);
+		par1NBTTagCompound.setInteger("foodTickTimer", this.foodTimer);
+		par1NBTTagCompound.setFloat("foodSaturationLevel", this.foodSaturationLevel);
+		par1NBTTagCompound.setFloat("foodExhaustionLevel", this.foodExhaustionLevel);
+	}
+
+	/**
+	 * Get the player's food level.
+	 */
 	public int getFoodLevel() {
 		return this.foodLevel;
 	}
@@ -75,23 +103,32 @@
 		return this.prevFoodLevel;
 	}
 
+	/**
+	 * If foodLevel is not max.
+	 */
 	public boolean needFood() {
 		return this.foodLevel < 20;
 	}
 
-	public void addExhaustion(float var1) {
-		this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + var1, 40.0F);
+	/**
+	 * adds input to foodExhaustionLevel to a max of 40
+	 */
+	public void addExhaustion(float par1) {
+		this.foodExhaustionLevel = Math.min(this.foodExhaustionLevel + par1, 40.0F);
 	}
 
+	/**
+	 * Get the player's food saturation level.
+	 */
 	public float getSaturationLevel() {
 		return this.foodSaturationLevel;
 	}
 
-	public void setFoodLevel(int var1) {
-		this.foodLevel = var1;
+	public void setFoodLevel(int par1) {
+		this.foodLevel = par1;
 	}
 
-	public void setFoodSaturationLevel(float var1) {
-		this.foodSaturationLevel = var1;
+	public void setFoodSaturationLevel(float par1) {
+		this.foodSaturationLevel = par1;
 	}
 }
