--- net/minecraft/src/FurnaceRecipes.java
+++ net/minecraft/src/FurnaceRecipes.java
@@ -5,9 +5,14 @@
 
 public class FurnaceRecipes {
 	private static final FurnaceRecipes smeltingBase = new FurnaceRecipes();
-	private Map b = new HashMap();
-	private Map c = new HashMap();
-
+
+	/** The list of smelting results. */
+	private Map smeltingList = new HashMap();
+	private Map experienceList = new HashMap();
+
+	/**
+	 * Used to call methods addSmelting and getSmeltingResult.
+	 */
 	public static final FurnaceRecipes smelting() {
 		return smeltingBase;
 	}
@@ -35,20 +40,26 @@
 		this.addSmelting(Block.oreNetherQuartz.blockID, new ItemStack(Item.netherQuartz), 0.2F);
 	}
 
-	public void addSmelting(int var1, ItemStack var2, float var3) {
-		this.b.put(Integer.valueOf(var1), var2);
-		this.c.put(Integer.valueOf(var2.itemID), Float.valueOf(var3));
+	/**
+	 * Adds a smelting recipe.
+	 */
+	public void addSmelting(int par1, ItemStack par2ItemStack, float par3) {
+		this.smeltingList.put(Integer.valueOf(par1), par2ItemStack);
+		this.experienceList.put(Integer.valueOf(par2ItemStack.itemID), Float.valueOf(par3));
 	}
 
-	public ItemStack getSmeltingResult(int var1) {
-		return (ItemStack)this.b.get(Integer.valueOf(var1));
+	/**
+	 * Returns the smelting result of an item.
+	 */
+	public ItemStack getSmeltingResult(int par1) {
+		return (ItemStack)this.smeltingList.get(Integer.valueOf(par1));
 	}
 
 	public Map getSmeltingList() {
-		return this.b;
+		return this.smeltingList;
 	}
 
-	public float getExperience(int var1) {
-		return this.c.containsKey(Integer.valueOf(var1)) ? ((Float)this.c.get(Integer.valueOf(var1))).floatValue() : 0.0F;
+	public float getExperience(int par1) {
+		return this.experienceList.containsKey(Integer.valueOf(par1)) ? ((Float)this.experienceList.get(Integer.valueOf(par1))).floatValue() : 0.0F;
 	}
 }
