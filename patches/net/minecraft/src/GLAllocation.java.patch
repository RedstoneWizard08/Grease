--- net/minecraft/src/GLAllocation.java
+++ net/minecraft/src/GLAllocation.java
@@ -13,48 +13,63 @@
 import org.lwjgl.opengl.GL11;
 
 public class GLAllocation {
-	private static final Map a = new HashMap();
-	private static final List b = new ArrayList();
+	private static final Map field_74531_a = new HashMap();
+	private static final List field_74530_b = new ArrayList();
 
-	public static synchronized int generateDisplayLists(int var0) {
-		int var1 = GL11.glGenLists(var0);
-		a.put(Integer.valueOf(var1), Integer.valueOf(var0));
+	/**
+	 * Generates the specified number of display lists and returns the first index.
+	 */
+	public static synchronized int generateDisplayLists(int par0) {
+		int var1 = GL11.glGenLists(par0);
+		field_74531_a.put(Integer.valueOf(var1), Integer.valueOf(par0));
 		return var1;
 	}
 
-	public static synchronized void deleteDisplayLists(int var0) {
-		GL11.glDeleteLists(var0, ((Integer)a.remove(Integer.valueOf(var0))).intValue());
+	public static synchronized void deleteDisplayLists(int par0) {
+		GL11.glDeleteLists(par0, ((Integer)field_74531_a.remove(Integer.valueOf(par0))).intValue());
 	}
 
 	public static synchronized void func_98302_b() {
-		for(int var0 = 0; var0 < b.size(); ++var0) {
-			GL11.glDeleteTextures(((Integer)b.get(var0)).intValue());
+		for (int var0 = 0; var0 < field_74530_b.size(); ++var0) {
+			GL11.glDeleteTextures(((Integer)field_74530_b.get(var0)).intValue());
 		}
 
-		b.clear();
+		field_74530_b.clear();
 	}
 
+	/**
+	 * Deletes all textures and display lists. Called when Minecraft is shutdown to free up resources.
+	 */
 	public static synchronized void deleteTexturesAndDisplayLists() {
-		Iterator var0 = a.entrySet().iterator();
+		Iterator var0 = field_74531_a.entrySet().iterator();
 
-		while(var0.hasNext()) {
+		while (var0.hasNext()) {
 			Entry var1 = (Entry)var0.next();
 			GL11.glDeleteLists(((Integer)var1.getKey()).intValue(), ((Integer)var1.getValue()).intValue());
 		}
 
-		a.clear();
+		field_74531_a.clear();
 		func_98302_b();
 	}
 
-	public static synchronized ByteBuffer createDirectByteBuffer(int var0) {
-		return ByteBuffer.allocateDirect(var0).order(ByteOrder.nativeOrder());
-	}
-
-	public static IntBuffer createDirectIntBuffer(int var0) {
-		return createDirectByteBuffer(var0 << 2).asIntBuffer();
-	}
-
-	public static FloatBuffer createDirectFloatBuffer(int var0) {
-		return createDirectByteBuffer(var0 << 2).asFloatBuffer();
+	/**
+	 * Creates and returns a direct byte buffer with the specified capacity. Applies native ordering to speed up access.
+	 */
+	public static synchronized ByteBuffer createDirectByteBuffer(int par0) {
+		return ByteBuffer.allocateDirect(par0).order(ByteOrder.nativeOrder());
+	}
+
+	/**
+	 * Creates and returns a direct int buffer with the specified capacity. Applies native ordering to speed up access.
+	 */
+	public static IntBuffer createDirectIntBuffer(int par0) {
+		return createDirectByteBuffer(par0 << 2).asIntBuffer();
+	}
+
+	/**
+	 * Creates and returns a direct float buffer with the specified capacity. Applies native ordering to speed up access.
+	 */
+	public static FloatBuffer createDirectFloatBuffer(int par0) {
+		return createDirectByteBuffer(par0 << 2).asFloatBuffer();
 	}
 }
