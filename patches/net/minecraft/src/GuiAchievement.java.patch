--- net/minecraft/src/GuiAchievement.java
+++ net/minecraft/src/GuiAchievement.java
@@ -5,37 +5,82 @@
 
 public class GuiAchievement extends Gui {
 	private static final ResourceLocation achievementTextures = new ResourceLocation("textures/gui/achievement/achievement_background.png");
+	
+	/** Holds the instance of the game (Minecraft) */
 	private Minecraft theGame;
+
+	/** Holds the latest width scaled to fit the game window. */
 	private int achievementWindowWidth;
+
+	/** Holds the latest height scaled to fit the game window. */
 	private int achievementWindowHeight;
-	private String e;
-	private String f;
+	private String achievementGetLocalText;
+	private String achievementStatName;
+
+	/** Holds the achievement that will be displayed on the GUI. */
 	private Achievement theAchievement;
 	private long achievementTime;
+
+	/**
+	 * Holds a instance of RenderItem, used to draw the achievement icons on screen (is based on ItemStack)
+	 */
 	private RenderItem itemRender;
 	private boolean haveAchiement;
+	// Spout Start
+	private boolean customNotification = false;
+	private int itemId;
+	private short data = -1;
+	private int time = -1;
+	// Spout End
 
-	public GuiAchievement(Minecraft var1) {
-		this.theGame = var1;
+	public GuiAchievement(Minecraft par1Minecraft) {
+		this.theGame = par1Minecraft;
 		this.itemRender = new RenderItem();
 	}
 
-	public void queueTakenAchievement(Achievement var1) {
-		this.e = I18n.getString("achievement.get");
-		this.f = I18n.getString(var1.getName());
+	/**
+	 * Queue a taken achievement to be displayed.
+	 */
+	public void queueTakenAchievement(Achievement par1Achievement) {
+		this.achievementGetLocalText = I18n.getString("achievement.get");
+		this.achievementStatName = I18n.getString(par1Achievement.getName());
 		this.achievementTime = Minecraft.getSystemTime();
-		this.theAchievement = var1;
+		this.theAchievement = par1Achievement;
 		this.haveAchiement = false;
 	}
 
-	public void queueAchievementInformation(Achievement var1) {
-		this.e = I18n.getString(var1.getName());
-		this.f = var1.getDescription();
+	/**
+	 * Queue a information about a achievement to be displayed.
+	 */
+	public void queueAchievementInformation(Achievement par1Achievement) {
+		this.achievementGetLocalText = I18n.getString(par1Achievement.getName());
+		this.achievementStatName = par1Achievement.getDescription();
 		this.achievementTime = Minecraft.getSystemTime() - 2500L;
-		this.theAchievement = var1;
+		this.theAchievement = par1Achievement;
 		this.haveAchiement = true;
 	}
-
+	
+	// Spout Start
+	public void queueNotification(String title, String message, int toRender) {
+		queueNotification(title, message, toRender, (short) -1, -1);
+	}
+
+	public void queueNotification(String title, String message, int toRender, short data, int time) {
+		achievementGetLocalText = title;
+		achievementStatName = message;
+		achievementTime = Minecraft.getSystemTime();
+		theAchievement = null;
+		haveAchiement = false;
+		customNotification = true;
+		this.itemId = toRender;
+		this.time = time;
+		this.data = data;
+	}
+	// Spout End
+
+	/**
+	 * Update the display of the achievement window to match the game window.
+	 */
 	private void updateAchievementWindowScale() {
 		GL11.glViewport(0, 0, this.theGame.displayWidth, this.theGame.displayHeight);
 		GL11.glMatrixMode(GL11.GL_PROJECTION);
@@ -56,21 +101,39 @@
 		GL11.glTranslatef(0.0F, 0.0F, -2000.0F);
 	}
 
+	/**
+	 * Updates the small achievement tooltip window, showing a queued achievement if is needed.
+	 */
 	public void updateAchievementWindow() {
-		if(this.theAchievement != null && this.achievementTime != 0L) {
-			double var1 = (double)(Minecraft.getSystemTime() - this.achievementTime) / 3000.0D;
-			if(this.haveAchiement || var1 >= 0.0D && var1 <= 1.0D) {
+		// Spout Start
+		if ((this.theAchievement != null || this.customNotification == true) && this.achievementTime != 0L) {
+			double delayTime = 3000.0D;
+			if (customNotification) {
+				if (time < 1) {
+					delayTime = 7500;
+				} else {
+					delayTime = time;
+				}
+			}
+			double var1 = (double)(Minecraft.getSystemTime() - this.achievementTime) / delayTime;
+		// Spout End
+
+			if (!this.haveAchiement && (var1 < 0.0D || var1 > 1.0D)) {
+				this.achievementTime = 0L;
+			} else {
 				this.updateAchievementWindowScale();
 				GL11.glDisable(GL11.GL_DEPTH_TEST);
 				GL11.glDepthMask(false);
 				double var3 = var1 * 2.0D;
-				if(var3 > 1.0D) {
+
+				if (var3 > 1.0D) {
 					var3 = 2.0D - var3;
 				}
 
 				var3 *= 4.0D;
 				var3 = 1.0D - var3;
-				if(var3 < 0.0D) {
+
+				if (var3 < 0.0D) {
 					var3 = 0.0D;
 				}
 
@@ -83,11 +146,12 @@
 				this.theGame.getTextureManager().bindTexture(achievementTextures);
 				GL11.glDisable(GL11.GL_LIGHTING);
 				this.drawTexturedModalRect(var5, var6, 96, 202, 160, 32);
-				if(this.haveAchiement) {
-					this.theGame.fontRenderer.drawSplitString(this.f, var5 + 30, var6 + 7, 120, -1);
+
+				if (this.haveAchiement) {
+					this.theGame.fontRenderer.drawSplitString(this.achievementStatName, var5 + 30, var6 + 7, 120, -1);
 				} else {
-					this.theGame.fontRenderer.drawString(this.e, var5 + 30, var6 + 7, -256);
-					this.theGame.fontRenderer.drawString(this.f, var5 + 30, var6 + 18, -1);
+					this.theGame.fontRenderer.drawString(this.achievementGetLocalText, var5 + 30, var6 + 7, -256);
+					this.theGame.fontRenderer.drawString(this.achievementStatName, var5 + 30, var6 + 18, -1);
 				}
 
 				RenderHelper.enableGUIStandardItemLighting();
@@ -95,12 +159,23 @@
 				GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 				GL11.glEnable(GL11.GL_COLOR_MATERIAL);
 				GL11.glEnable(GL11.GL_LIGHTING);
-				this.itemRender.renderItemAndEffectIntoGUI(this.theGame.fontRenderer, this.theGame.getTextureManager(), this.theAchievement.theItemStack, var5 + 8, var6 + 8);
+				// Spout Start
+				ItemStack toRender = theAchievement != null ? theAchievement.theItemStack : null;
+				if (customNotification){
+					if (data < 1) {
+						toRender = new ItemStack(itemId, 1, 0);
+					} else {
+						toRender = new ItemStack(itemId, 1, data);
+					}
+				}
+
+				if (toRender != null) {
+					this.itemRender.renderItemAndEffectIntoGUI(this.theGame.fontRenderer, this.theGame.getTextureManager(), toRender, var5 + 8, var6 + 8);
+				}
+				// Spout End
 				GL11.glDisable(GL11.GL_LIGHTING);
 				GL11.glDepthMask(true);
 				GL11.glEnable(GL11.GL_DEPTH_TEST);
-			} else {
-				this.achievementTime = 0L;
 			}
 		}
 	}
