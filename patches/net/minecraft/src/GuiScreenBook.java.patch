--- net/minecraft/src/GuiScreenBook.java
+++ net/minecraft/src/GuiScreenBook.java
@@ -7,73 +7,93 @@
 
 public class GuiScreenBook extends GuiScreen {
 	private static final ResourceLocation bookGuiTextures = new ResourceLocation("textures/gui/book.png");
+
+	/** The player editing the book */
 	private final EntityPlayer editingPlayer;
 	private final ItemStack itemstackBook;
+
+	/** Whether the book is signed or can still be edited */
 	private final boolean bookIsUnsigned;
 	private boolean bookModified;
 	private boolean editingTitle;
+
+	/** Update ticks since the gui was opened */
 	private int updateCount;
 	private int bookImageWidth = 192;
 	private int bookImageHeight = 192;
 	private int bookTotalPages = 1;
 	private int currPage;
 	private NBTTagList bookPages;
-	private String w = "";
+	private String bookTitle = "";
 	private GuiButtonNextPage buttonNextPage;
 	private GuiButtonNextPage buttonPreviousPage;
 	private GuiButton buttonDone;
+
+	/** The GuiButton to sign this book. */
 	private GuiButton buttonSign;
 	private GuiButton buttonFinalize;
 	private GuiButton buttonCancel;
 
-	public GuiScreenBook(EntityPlayer var1, ItemStack var2, boolean var3) {
-		this.editingPlayer = var1;
-		this.itemstackBook = var2;
-		this.bookIsUnsigned = var3;
-		if(var2.hasTagCompound()) {
-			NBTTagCompound var4 = var2.getTagCompound();
+	public GuiScreenBook(EntityPlayer par1EntityPlayer, ItemStack par2ItemStack, boolean par3) {
+		this.editingPlayer = par1EntityPlayer;
+		this.itemstackBook = par2ItemStack;
+		this.bookIsUnsigned = par3;
+
+		if (par2ItemStack.hasTagCompound()) {
+			NBTTagCompound var4 = par2ItemStack.getTagCompound();
 			this.bookPages = var4.getTagList("pages");
-			if(this.bookPages != null) {
+
+			if (this.bookPages != null) {
 				this.bookPages = (NBTTagList)this.bookPages.copy();
 				this.bookTotalPages = this.bookPages.tagCount();
-				if(this.bookTotalPages < 1) {
+
+				if (this.bookTotalPages < 1) {
 					this.bookTotalPages = 1;
 				}
 			}
 		}
 
-		if(this.bookPages == null && var3) {
+		if (this.bookPages == null && par3) {
 			this.bookPages = new NBTTagList("pages");
 			this.bookPages.appendTag(new NBTTagString("1", ""));
 			this.bookTotalPages = 1;
 		}
-
 	}
 
+	/**
+	 * Called from the main game loop to update the screen.
+	 */
 	public void updateScreen() {
 		super.updateScreen();
 		++this.updateCount;
 	}
 
+	/**
+	 * Adds the buttons (and other controls) to the screen in question.
+	 */
 	public void initGui() {
-		this.i.clear();
+		this.buttonList.clear();
 		Keyboard.enableRepeatEvents(true);
-		if(this.bookIsUnsigned) {
-			this.i.add(this.buttonSign = new GuiButton(3, this.width / 2 - 100, 4 + this.bookImageHeight, 98, 20, I18n.getString("book.signButton")));
-			this.i.add(this.buttonDone = new GuiButton(0, this.width / 2 + 2, 4 + this.bookImageHeight, 98, 20, I18n.getString("gui.done")));
-			this.i.add(this.buttonFinalize = new GuiButton(5, this.width / 2 - 100, 4 + this.bookImageHeight, 98, 20, I18n.getString("book.finalizeButton")));
-			this.i.add(this.buttonCancel = new GuiButton(4, this.width / 2 + 2, 4 + this.bookImageHeight, 98, 20, I18n.getString("gui.cancel")));
+
+		if (this.bookIsUnsigned) {
+			this.buttonList.add(this.buttonSign = new GuiButton(3, this.width / 2 - 100, 4 + this.bookImageHeight, 98, 20, I18n.getString("book.signButton")));
+			this.buttonList.add(this.buttonDone = new GuiButton(0, this.width / 2 + 2, 4 + this.bookImageHeight, 98, 20, I18n.getString("gui.done")));
+			this.buttonList.add(this.buttonFinalize = new GuiButton(5, this.width / 2 - 100, 4 + this.bookImageHeight, 98, 20, I18n.getString("book.finalizeButton")));
+			this.buttonList.add(this.buttonCancel = new GuiButton(4, this.width / 2 + 2, 4 + this.bookImageHeight, 98, 20, I18n.getString("gui.cancel")));
 		} else {
-			this.i.add(this.buttonDone = new GuiButton(0, this.width / 2 - 100, 4 + this.bookImageHeight, 200, 20, I18n.getString("gui.done")));
+			this.buttonList.add(this.buttonDone = new GuiButton(0, this.width / 2 - 100, 4 + this.bookImageHeight, 200, 20, I18n.getString("gui.done")));
 		}
 
 		int var1 = (this.width - this.bookImageWidth) / 2;
 		byte var2 = 2;
-		this.i.add(this.buttonNextPage = new GuiButtonNextPage(1, var1 + 120, var2 + 154, true));
-		this.i.add(this.buttonPreviousPage = new GuiButtonNextPage(2, var1 + 38, var2 + 154, false));
+		this.buttonList.add(this.buttonNextPage = new GuiButtonNextPage(1, var1 + 120, var2 + 154, true));
+		this.buttonList.add(this.buttonPreviousPage = new GuiButtonNextPage(2, var1 + 38, var2 + 154, false));
 		this.updateButtons();
 	}
 
+	/**
+	 * Called when the screen is unloaded. Used to disable keyboard repeat events
+	 */
 	public void onGuiClosed() {
 		Keyboard.enableRepeatEvents(false);
 	}
@@ -82,28 +102,29 @@
 		this.buttonNextPage.drawButton = !this.editingTitle && (this.currPage < this.bookTotalPages - 1 || this.bookIsUnsigned);
 		this.buttonPreviousPage.drawButton = !this.editingTitle && this.currPage > 0;
 		this.buttonDone.drawButton = !this.bookIsUnsigned || !this.editingTitle;
-		if(this.bookIsUnsigned) {
+
+		if (this.bookIsUnsigned) {
 			this.buttonSign.drawButton = !this.editingTitle;
 			this.buttonCancel.drawButton = this.editingTitle;
 			this.buttonFinalize.drawButton = this.editingTitle;
-			this.buttonFinalize.enabled = this.w.trim().length() > 0;
+			this.buttonFinalize.enabled = this.bookTitle.trim().length() > 0;
 		}
-
 	}
 
-	private void sendBookToServer(boolean var1) {
-		if(this.bookIsUnsigned && this.bookModified) {
-			if(this.bookPages != null) {
-				while(this.bookPages.tagCount() > 1) {
+	private void sendBookToServer(boolean par1) {
+		if (this.bookIsUnsigned && this.bookModified) {
+			if (this.bookPages != null) {
+				while (this.bookPages.tagCount() > 1) {
 					NBTTagString var2 = (NBTTagString)this.bookPages.tagAt(this.bookPages.tagCount() - 1);
-					if(var2.a != null && var2.a.length() != 0) {
+
+					if (var2.data != null && var2.data.length() != 0) {
 						break;
 					}
 
 					this.bookPages.removeTag(this.bookPages.tagCount() - 1);
 				}
 
-				if(this.itemstackBook.hasTagCompound()) {
+				if (this.itemstackBook.hasTagCompound()) {
 					NBTTagCompound var7 = this.itemstackBook.getTagCompound();
 					var7.setTag("pages", this.bookPages);
 				} else {
@@ -111,10 +132,11 @@
 				}
 
 				String var8 = "MC|BEdit";
-				if(var1) {
+
+				if (par1) {
 					var8 = "MC|BSign";
 					this.itemstackBook.setTagInfo("author", new NBTTagString("author", this.editingPlayer.getCommandSenderName()));
-					this.itemstackBook.setTagInfo("title", new NBTTagString("title", this.w.trim()));
+					this.itemstackBook.setTagInfo("title", new NBTTagString("title", this.bookTitle.trim()));
 					this.itemstackBook.itemID = Item.writtenBook.itemID;
 				}
 
@@ -128,34 +150,37 @@
 					var6.printStackTrace();
 				}
 			}
-
 		}
 	}
 
-	protected void actionPerformed(GuiButton var1) {
-		if(var1.enabled) {
-			if(var1.id == 0) {
+	/**
+	 * Fired when a control is clicked. This is the equivalent of ActionListener.actionPerformed(ActionEvent e).
+	 */
+	protected void actionPerformed(GuiButton par1GuiButton) {
+		if (par1GuiButton.enabled) {
+			if (par1GuiButton.id == 0) {
 				this.mc.displayGuiScreen((GuiScreen)null);
 				this.sendBookToServer(false);
-			} else if(var1.id == 3 && this.bookIsUnsigned) {
+			} else if (par1GuiButton.id == 3 && this.bookIsUnsigned) {
 				this.editingTitle = true;
-			} else if(var1.id == 1) {
-				if(this.currPage < this.bookTotalPages - 1) {
+			} else if (par1GuiButton.id == 1) {
+				if (this.currPage < this.bookTotalPages - 1) {
 					++this.currPage;
-				} else if(this.bookIsUnsigned) {
+				} else if (this.bookIsUnsigned) {
 					this.addNewPage();
-					if(this.currPage < this.bookTotalPages - 1) {
+
+					if (this.currPage < this.bookTotalPages - 1) {
 						++this.currPage;
 					}
 				}
-			} else if(var1.id == 2) {
-				if(this.currPage > 0) {
+			} else if (par1GuiButton.id == 2) {
+				if (this.currPage > 0) {
 					--this.currPage;
 				}
-			} else if(var1.id == 5 && this.editingTitle) {
+			} else if (par1GuiButton.id == 5 && this.editingTitle) {
 				this.sendBookToServer(true);
 				this.mc.displayGuiScreen((GuiScreen)null);
-			} else if(var1.id == 4 && this.editingTitle) {
+			} else if (par1GuiButton.id == 4 && this.editingTitle) {
 				this.editingTitle = false;
 			}
 
@@ -164,80 +189,91 @@
 	}
 
 	private void addNewPage() {
-		if(this.bookPages != null && this.bookPages.tagCount() < 50) {
+		if (this.bookPages != null && this.bookPages.tagCount() < 50) {
 			this.bookPages.appendTag(new NBTTagString("" + (this.bookTotalPages + 1), ""));
 			++this.bookTotalPages;
 			this.bookModified = true;
 		}
 	}
 
-	protected void keyTyped(char var1, int var2) {
-		super.keyTyped(var1, var2);
-		if(this.bookIsUnsigned) {
-			if(this.editingTitle) {
-				this.func_74162_c(var1, var2);
+	/**
+	 * Fired when a key is typed. This is the equivalent of KeyListener.keyTyped(KeyEvent e).
+	 */
+	protected void keyTyped(char par1, int par2) {
+		super.keyTyped(par1, par2);
+
+		if (this.bookIsUnsigned) {
+			if (this.editingTitle) {
+				this.func_74162_c(par1, par2);
 			} else {
-				this.keyTypedInBook(var1, var2);
+				this.keyTypedInBook(par1, par2);
 			}
-
-		}
-	}
-
-	private void keyTypedInBook(char var1, int var2) {
-		switch(var1) {
-		case '\u0016':
-			this.func_74160_b(GuiScreen.getClipboardString());
-			return;
-		default:
-			switch(var2) {
+		}
+	}
+
+	/**
+	 * Processes keystrokes when editing the text of a book
+	 */
+	private void keyTypedInBook(char par1, int par2) {
+		switch (par1) {
+			case 22:
+				this.func_74160_b(GuiScreen.getClipboardString());
+				return;
+
+			default:
+				switch (par2) {
+					case 14:
+						String var3 = this.func_74158_i();
+
+						if (var3.length() > 0) {
+							this.func_74159_a(var3.substring(0, var3.length() - 1));
+						}
+
+						return;
+
+					case 28:
+					case 156:
+						this.func_74160_b("\n");
+						return;
+
+					default:
+						if (ChatAllowedCharacters.isAllowedCharacter(par1)) {
+							this.func_74160_b(Character.toString(par1));
+						}
+				}
+		}
+	}
+
+	private void func_74162_c(char par1, int par2) {
+		switch (par2) {
 			case 14:
-				String var3 = this.func_74158_i();
-				if(var3.length() > 0) {
-					this.func_74159_a(var3.substring(0, var3.length() - 1));
+				if (!this.bookTitle.isEmpty()) {
+					this.bookTitle = this.bookTitle.substring(0, this.bookTitle.length() - 1);
+					this.updateButtons();
 				}
 
 				return;
+
 			case 28:
 			case 156:
-				this.func_74160_b("\n");
+				if (!this.bookTitle.isEmpty()) {
+					this.sendBookToServer(true);
+					this.mc.displayGuiScreen((GuiScreen)null);
+				}
+
 				return;
+
 			default:
-				if(ChatAllowedCharacters.isAllowedCharacter(var1)) {
-					this.func_74160_b(Character.toString(var1));
+				if (this.bookTitle.length() < 16 && ChatAllowedCharacters.isAllowedCharacter(par1)) {
+					this.bookTitle = this.bookTitle + Character.toString(par1);
+					this.updateButtons();
+					this.bookModified = true;
 				}
-			}
-		}
-	}
-
-	private void func_74162_c(char var1, int var2) {
-		switch(var2) {
-		case 14:
-			if(!this.w.isEmpty()) {
-				this.w = this.w.substring(0, this.w.length() - 1);
-				this.updateButtons();
-			}
-
-			return;
-		case 28:
-		case 156:
-			if(!this.w.isEmpty()) {
-				this.sendBookToServer(true);
-				this.mc.displayGuiScreen((GuiScreen)null);
-			}
-
-			return;
-		default:
-			if(this.w.length() < 16 && ChatAllowedCharacters.isAllowedCharacter(var1)) {
-				this.w = this.w + Character.toString(var1);
-				this.updateButtons();
-				this.bookModified = true;
-			}
-
 		}
 	}
 
 	private String func_74158_i() {
-		if(this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
+		if (this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
 			NBTTagString var1 = (NBTTagString)this.bookPages.tagAt(this.currPage);
 			return var1.toString();
 		} else {
@@ -245,26 +281,28 @@
 		}
 	}
 
-	private void func_74159_a(String var1) {
-		if(this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
+	private void func_74159_a(String par1Str) {
+		if (this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
 			NBTTagString var2 = (NBTTagString)this.bookPages.tagAt(this.currPage);
-			var2.a = var1;
+			var2.data = par1Str;
 			this.bookModified = true;
 		}
-
 	}
 
-	private void func_74160_b(String var1) {
+	private void func_74160_b(String par1Str) {
 		String var2 = this.func_74158_i();
-		String var3 = var2 + var1;
+		String var3 = var2 + par1Str;
 		int var4 = this.fontRenderer.splitStringWidth(var3 + "" + EnumChatFormatting.BLACK + "_", 118);
-		if(var4 <= 118 && var3.length() < 256) {
+
+		if (var4 <= 118 && var3.length() < 256) {
 			this.func_74159_a(var3);
 		}
-
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
+	/**
+	 * Draws the screen and all the components in it.
+	 */
+	public void drawScreen(int par1, int par2, float par3) {
 		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 		this.mc.getTextureManager().bindTexture(bookGuiTextures);
 		int var4 = (this.width - this.bookImageWidth) / 2;
@@ -273,10 +311,12 @@
 		String var6;
 		String var7;
 		int var8;
-		if(this.editingTitle) {
-			var6 = this.w;
-			if(this.bookIsUnsigned) {
-				if(this.updateCount / 6 % 2 == 0) {
+
+		if (this.editingTitle) {
+			var6 = this.bookTitle;
+
+			if (this.bookIsUnsigned) {
+				if (this.updateCount / 6 % 2 == 0) {
 					var6 = var6 + "" + EnumChatFormatting.BLACK + "_";
 				} else {
 					var6 = var6 + "" + EnumChatFormatting.GRAY + "_";
@@ -288,23 +328,24 @@
 			this.fontRenderer.drawString(var7, var4 + 36 + (116 - var8) / 2, var5 + 16 + 16, 0);
 			int var9 = this.fontRenderer.getStringWidth(var6);
 			this.fontRenderer.drawString(var6, var4 + 36 + (116 - var9) / 2, var5 + 48, 0);
-			String var10 = String.format(I18n.getString("book.byAuthor"), new Object[]{this.editingPlayer.getCommandSenderName()});
+			String var10 = String.format(I18n.getString("book.byAuthor"), new Object[] {this.editingPlayer.getCommandSenderName()});
 			int var11 = this.fontRenderer.getStringWidth(var10);
 			this.fontRenderer.drawString(EnumChatFormatting.DARK_GRAY + var10, var4 + 36 + (116 - var11) / 2, var5 + 48 + 10, 0);
 			String var12 = I18n.getString("book.finalizeWarning");
 			this.fontRenderer.drawSplitString(var12, var4 + 36, var5 + 80, 116, 0);
 		} else {
-			var6 = String.format(I18n.getString("book.pageIndicator"), new Object[]{Integer.valueOf(this.currPage + 1), Integer.valueOf(this.bookTotalPages)});
+			var6 = String.format(I18n.getString("book.pageIndicator"), new Object[] {Integer.valueOf(this.currPage + 1), Integer.valueOf(this.bookTotalPages)});
 			var7 = "";
-			if(this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
+
+			if (this.bookPages != null && this.currPage >= 0 && this.currPage < this.bookPages.tagCount()) {
 				NBTTagString var13 = (NBTTagString)this.bookPages.tagAt(this.currPage);
 				var7 = var13.toString();
 			}
 
-			if(this.bookIsUnsigned) {
-				if(this.fontRenderer.getBidiFlag()) {
+			if (this.bookIsUnsigned) {
+				if (this.fontRenderer.getBidiFlag()) {
 					var7 = var7 + "_";
-				} else if(this.updateCount / 6 % 2 == 0) {
+				} else if (this.updateCount / 6 % 2 == 0) {
 					var7 = var7 + "" + EnumChatFormatting.BLACK + "_";
 				} else {
 					var7 = var7 + "" + EnumChatFormatting.GRAY + "_";
@@ -316,7 +357,7 @@
 			this.fontRenderer.drawSplitString(var7, var4 + 36, var5 + 16 + 16, 116, 0);
 		}
 
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(par1, par2, par3);
 	}
 
 	static ResourceLocation func_110404_g() {
