--- net/minecraft/src/GuiWinGame.java
+++ net/minecraft/src/GuiWinGame.java
@@ -11,39 +11,57 @@
 public class GuiWinGame extends GuiScreen {
 	private static final ResourceLocation minecraftLogoTexture = new ResourceLocation("textures/gui/title/minecraft.png");
 	private static final ResourceLocation field_110361_b = new ResourceLocation("textures/misc/vignette.png");
+
+	/** Counts the number of screen updates. */
 	private int updateCounter;
-	private List d;
+
+	/** List of lines on the ending poem and credits. */
+	private List lines;
 	private int field_73989_c;
 	private float field_73987_d = 0.5F;
 
+	/**
+	 * Called from the main game loop to update the screen.
+	 */
 	public void updateScreen() {
 		++this.updateCounter;
 		float var1 = (float)(this.field_73989_c + this.height + this.height + 24) / this.field_73987_d;
-		if((float)this.updateCounter > var1) {
-			this.respawnPlayer();
-		}
-
-	}
-
-	protected void keyTyped(char var1, int var2) {
-		if(var2 == 1) {
-			this.respawnPlayer();
-		}
-
-	}
-
+
+		if ((float)this.updateCounter > var1) {
+			this.respawnPlayer();
+		}
+	}
+
+	/**
+	 * Fired when a key is typed. This is the equivalent of KeyListener.keyTyped(KeyEvent e).
+	 */
+	protected void keyTyped(char par1, int par2) {
+		if (par2 == 1) {
+			this.respawnPlayer();
+		}
+	}
+
+	/**
+	 * Respawns the player.
+	 */
 	private void respawnPlayer() {
 		this.mc.thePlayer.sendQueue.addToSendQueue(new Packet205ClientCommand(1));
 		this.mc.displayGuiScreen((GuiScreen)null);
 	}
 
+	/**
+	 * Returns true if this GUI should pause the game when it is displayed in single-player
+	 */
 	public boolean doesGuiPauseGame() {
 		return true;
 	}
 
+	/**
+	 * Adds the buttons (and other controls) to the screen in question.
+	 */
 	public void initGui() {
-		if(this.d == null) {
-			this.d = new ArrayList();
+		if (this.lines == null) {
+			this.lines = new ArrayList();
 
 			try {
 				String var1 = "";
@@ -51,65 +69,60 @@
 				short var3 = 274;
 				BufferedReader var4 = new BufferedReader(new InputStreamReader(this.mc.getResourceManager().getResource(new ResourceLocation("texts/end.txt")).getInputStream(), Charsets.UTF_8));
 				Random var5 = new Random(8124371L);
-
-				while(true) {
-					var1 = var4.readLine();
-					int var6;
-					if(var1 == null) {
-						for(var6 = 0; var6 < 8; ++var6) {
-							this.d.add("");
-						}
-
-						var4 = new BufferedReader(new InputStreamReader(this.mc.getResourceManager().getResource(new ResourceLocation("texts/credits.txt")).getInputStream(), Charsets.UTF_8));
-
-						while(true) {
-							var1 = var4.readLine();
-							if(var1 == null) {
-								this.field_73989_c = this.d.size() * 12;
-								return;
-							}
-
-							var1 = var1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername());
-							var1 = var1.replaceAll("\t", "    ");
-							this.d.addAll(this.mc.fontRenderer.listFormattedStringToWidth(var1, var3));
-							this.d.add("");
-						}
-					}
-
+				int var6;
+
+				while ((var1 = var4.readLine()) != null) {
 					String var7;
 					String var8;
-					for(var1 = var1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername()); var1.contains(var2); var1 = var7 + EnumChatFormatting.WHITE + EnumChatFormatting.OBFUSCATED + "XXXXXXXX".substring(0, var5.nextInt(4) + 3) + var8) {
+
+					for (var1 = var1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername()); var1.contains(var2); var1 = var7 + EnumChatFormatting.WHITE + EnumChatFormatting.OBFUSCATED + "XXXXXXXX".substring(0, var5.nextInt(4) + 3) + var8) {
 						var6 = var1.indexOf(var2);
 						var7 = var1.substring(0, var6);
 						var8 = var1.substring(var6 + var2.length());
 					}
 
-					this.d.addAll(this.mc.fontRenderer.listFormattedStringToWidth(var1, var3));
-					this.d.add("");
-				}
+					this.lines.addAll(this.mc.fontRenderer.listFormattedStringToWidth(var1, var3));
+					this.lines.add("");
+				}
+
+				for (var6 = 0; var6 < 8; ++var6) {
+					this.lines.add("");
+				}
+
+				var4 = new BufferedReader(new InputStreamReader(this.mc.getResourceManager().getResource(new ResourceLocation("texts/credits.txt")).getInputStream(), Charsets.UTF_8));
+
+				while ((var1 = var4.readLine()) != null) {
+					var1 = var1.replaceAll("PLAYERNAME", this.mc.getSession().getUsername());
+					var1 = var1.replaceAll("\t", "    ");
+					this.lines.addAll(this.mc.fontRenderer.listFormattedStringToWidth(var1, var3));
+					this.lines.add("");
+				}
+
+				this.field_73989_c = this.lines.size() * 12;
 			} catch (Exception var9) {
 				var9.printStackTrace();
 			}
 		}
 	}
 
-	private void func_73986_b(int var1, int var2, float var3) {
+	private void func_73986_b(int par1, int par2, float par3) {
 		Tessellator var4 = Tessellator.instance;
 		this.mc.getTextureManager().bindTexture(Gui.optionsBackground);
 		var4.startDrawingQuads();
 		var4.setColorRGBA_F(1.0F, 1.0F, 1.0F, 1.0F);
 		int var5 = this.width;
-		float var6 = 0.0F - ((float)this.updateCounter + var3) * 0.5F * this.field_73987_d;
-		float var7 = (float)this.height - ((float)this.updateCounter + var3) * 0.5F * this.field_73987_d;
+		float var6 = 0.0F - ((float)this.updateCounter + par3) * 0.5F * this.field_73987_d;
+		float var7 = (float)this.height - ((float)this.updateCounter + par3) * 0.5F * this.field_73987_d;
 		float var8 = 0.015625F;
-		float var9 = ((float)this.updateCounter + var3 - 0.0F) * 0.02F;
+		float var9 = ((float)this.updateCounter + par3 - 0.0F) * 0.02F;
 		float var10 = (float)(this.field_73989_c + this.height + this.height + 24) / this.field_73987_d;
-		float var11 = (var10 - 20.0F - ((float)this.updateCounter + var3)) * 0.005F;
-		if(var11 < var9) {
+		float var11 = (var10 - 20.0F - ((float)this.updateCounter + par3)) * 0.005F;
+
+		if (var11 < var9) {
 			var9 = var11;
 		}
 
-		if(var9 > 1.0F) {
+		if (var9 > 1.0F) {
 			var9 = 1.0F;
 		}
 
@@ -123,13 +136,16 @@
 		var4.draw();
 	}
 
-	public void drawScreen(int var1, int var2, float var3) {
-		this.func_73986_b(var1, var2, var3);
+	/**
+	 * Draws the screen and all the components in it.
+	 */
+	public void drawScreen(int par1, int par2, float par3) {
+		this.func_73986_b(par1, par2, par3);
 		Tessellator var4 = Tessellator.instance;
 		short var5 = 274;
 		int var6 = this.width / 2 - var5 / 2;
 		int var7 = this.height + 50;
-		float var8 = -((float)this.updateCounter + var3) * this.field_73987_d;
+		float var8 = -((float)this.updateCounter + par3) * this.field_73987_d;
 		GL11.glPushMatrix();
 		GL11.glTranslatef(0.0F, var8, 0.0F);
 		this.mc.getTextureManager().bindTexture(minecraftLogoTexture);
@@ -138,22 +154,24 @@
 		this.drawTexturedModalRect(var6 + 155, var7, 0, 45, 155, 44);
 		var4.setColorOpaque_I(16777215);
 		int var9 = var7 + 200;
-
 		int var10;
-		for(var10 = 0; var10 < this.d.size(); ++var10) {
-			if(var10 == this.d.size() - 1) {
+
+		for (var10 = 0; var10 < this.lines.size(); ++var10) {
+			if (var10 == this.lines.size() - 1) {
 				float var11 = (float)var9 + var8 - (float)(this.height / 2 - 6);
-				if(var11 < 0.0F) {
+
+				if (var11 < 0.0F) {
 					GL11.glTranslatef(0.0F, -var11, 0.0F);
 				}
 			}
 
-			if((float)var9 + var8 + 12.0F + 8.0F > 0.0F && (float)var9 + var8 < (float)this.height) {
-				String var12 = (String)this.d.get(var10);
-				if(var12.startsWith("[C]")) {
+			if ((float)var9 + var8 + 12.0F + 8.0F > 0.0F && (float)var9 + var8 < (float)this.height) {
+				String var12 = (String)this.lines.get(var10);
+
+				if (var12.startsWith("[C]")) {
 					this.fontRenderer.drawStringWithShadow(var12.substring(3), var6 + (var5 - this.fontRenderer.getStringWidth(var12.substring(3))) / 2, var9, 16777215);
 				} else {
-					this.fontRenderer.b.setSeed((long)var10 * 4238972211L + (long)(this.updateCounter / 4));
+					this.fontRenderer.fontRandom.setSeed((long)var10 * 4238972211L + (long)(this.updateCounter / 4));
 					this.fontRenderer.drawStringWithShadow(var12, var6, var9, 16777215);
 				}
 			}
@@ -175,6 +193,6 @@
 		var4.addVertexWithUV(0.0D, 0.0D, (double)this.zLevel, 0.0D, 0.0D);
 		var4.draw();
 		GL11.glDisable(GL11.GL_BLEND);
-		super.drawScreen(var1, var2, var3);
+		super.drawScreen(par1, par2, par3);
 	}
 }
