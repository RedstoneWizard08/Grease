--- net/minecraft/src/IntegratedPlayerList.java
+++ net/minecraft/src/IntegratedPlayerList.java
@@ -4,30 +4,46 @@
 import net.minecraft.server.MinecraftServer;
 
 public class IntegratedPlayerList extends ServerConfigurationManager {
+
+	/**
+	 * Holds the NBT data for the host player's save file, so this can be written to level.dat.
+	 */
 	private NBTTagCompound hostPlayerData;
 
-	public IntegratedPlayerList(IntegratedServer var1) {
-		super(var1);
+	public IntegratedPlayerList(IntegratedServer par1IntegratedServer) {
+		super(par1IntegratedServer);
 		this.viewDistance = 10;
 	}
 
-	protected void writePlayerData(EntityPlayerMP var1) {
-		if(var1.getCommandSenderName().equals(this.getIntegratedServer().getServerOwner())) {
+	/**
+	 * also stores the NBTTags if this is an intergratedPlayerList
+	 */
+	protected void writePlayerData(EntityPlayerMP par1EntityPlayerMP) {
+		if (par1EntityPlayerMP.getCommandSenderName().equals(this.getIntegratedServer().getServerOwner())) {
 			this.hostPlayerData = new NBTTagCompound();
-			var1.writeToNBT(this.hostPlayerData);
+			par1EntityPlayerMP.writeToNBT(this.hostPlayerData);
 		}
 
-		super.writePlayerData(var1);
-	}
-
-	public String allowUserToConnect(SocketAddress var1, String var2) {
-		return var2.equalsIgnoreCase(this.getIntegratedServer().getServerOwner()) ? "That name is already taken." : super.allowUserToConnect(var1, var2);
-	}
-
+		super.writePlayerData(par1EntityPlayerMP);
+	}
+
+	/**
+	 * checks ban-lists, then white-lists, then space for the server. Returns null on success, or an error message
+	 */
+	public String allowUserToConnect(SocketAddress par1SocketAddress, String par2Str) {
+		return par2Str.equalsIgnoreCase(this.getIntegratedServer().getServerOwner()) ? "That name is already taken." : super.allowUserToConnect(par1SocketAddress, par2Str);
+	}
+
+	/**
+	 * get the associated Integrated Server
+	 */
 	public IntegratedServer getIntegratedServer() {
 		return (IntegratedServer)super.getServerInstance();
 	}
 
+	/**
+	 * On integrated servers, returns the host's player data to be written to level.dat.
+	 */
 	public NBTTagCompound getHostPlayerData() {
 		return this.hostPlayerData;
 	}
