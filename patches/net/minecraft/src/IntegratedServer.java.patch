--- net/minecraft/src/IntegratedServer.java
+++ net/minecraft/src/IntegratedServer.java
@@ -5,27 +5,31 @@
 import net.minecraft.server.MinecraftServer;
 
 public class IntegratedServer extends MinecraftServer {
+
+	/** The Minecraft instance. */
 	private final Minecraft mc;
 	private final WorldSettings theWorldSettings;
 	private final ILogAgent serverLogAgent;
+
+	/** Instance of IntegratedServerListenThread. */
 	private IntegratedServerListenThread theServerListeningThread;
 	private boolean isGamePaused;
 	private boolean isPublic;
 	private ThreadLanServerPing lanServerPing;
 
-	public IntegratedServer(Minecraft var1, String var2, String var3, WorldSettings var4) {
-		super(new File(var1.x, "saves"));
-		this.serverLogAgent = new LogAgent("Minecraft-Server", " [SERVER]", (new File(var1.x, "output-server.log")).getAbsolutePath());
-		this.setServerOwner(var1.getSession().getUsername());
-		this.setFolderName(var2);
-		this.setWorldName(var3);
-		this.setDemo(var1.isDemo());
-		this.canCreateBonusChest(var4.isBonusChestEnabled());
+	public IntegratedServer(Minecraft par1Minecraft, String par2Str, String par3Str, WorldSettings par4WorldSettings) {
+		super(new File(par1Minecraft.mcDataDir, "saves"));
+		this.serverLogAgent = new LogAgent("Minecraft-Server", " [SERVER]", (new File(par1Minecraft.mcDataDir, "output-server.log")).getAbsolutePath());
+		this.setServerOwner(par1Minecraft.getSession().getUsername());
+		this.setFolderName(par2Str);
+		this.setWorldName(par3Str);
+		this.setDemo(par1Minecraft.isDemo());
+		this.canCreateBonusChest(par4WorldSettings.isBonusChestEnabled());
 		this.setBuildLimit(256);
 		this.setConfigurationManager(new IntegratedPlayerList(this));
-		this.mc = var1;
-		this.c = var1.getProxy();
-		this.theWorldSettings = var4;
+		this.mc = par1Minecraft;
+		this.serverProxy = par1Minecraft.getProxy();
+		this.theWorldSettings = par4WorldSettings;
 
 		try {
 			this.theServerListeningThread = new IntegratedServerListenThread(this);
@@ -34,30 +38,31 @@
 		}
 	}
 
-	protected void loadAllWorlds(String var1, String var2, long var3, WorldType var5, String var6) {
-		this.convertMapIfNeeded(var1);
+	protected void loadAllWorlds(String par1Str, String par2Str, long par3, WorldType par5WorldType, String par6Str) {
+		this.convertMapIfNeeded(par1Str);
 		this.worldServers = new WorldServer[3];
 		this.timeOfLastDimensionTick = new long[this.worldServers.length][100];
-		ISaveHandler var7 = this.getActiveAnvilConverter().getSaveLoader(var1, true);
+		ISaveHandler var7 = this.getActiveAnvilConverter().getSaveLoader(par1Str, true);
 
-		for(int var8 = 0; var8 < this.worldServers.length; ++var8) {
+		for (int var8 = 0; var8 < this.worldServers.length; ++var8) {
 			byte var9 = 0;
-			if(var8 == 1) {
+
+			if (var8 == 1) {
 				var9 = -1;
 			}
 
-			if(var8 == 2) {
+			if (var8 == 2) {
 				var9 = 1;
 			}
 
-			if(var8 == 0) {
-				if(this.isDemo()) {
-					this.worldServers[var8] = new DemoWorldServer(this, var7, var2, var9, this.theProfiler, this.getLogAgent());
+			if (var8 == 0) {
+				if (this.isDemo()) {
+					this.worldServers[var8] = new DemoWorldServer(this, var7, par2Str, var9, this.theProfiler, this.getLogAgent());
 				} else {
-					this.worldServers[var8] = new WorldServer(this, var7, var2, var9, this.theWorldSettings, this.theProfiler, this.getLogAgent());
+					this.worldServers[var8] = new WorldServer(this, var7, par2Str, var9, this.theWorldSettings, this.theProfiler, this.getLogAgent());
 				}
 			} else {
-				this.worldServers[var8] = new WorldServerMulti(this, var7, var2, var9, this.theWorldSettings, this.worldServers[0], this.theProfiler, this.getLogAgent());
+				this.worldServers[var8] = new WorldServerMulti(this, var7, par2Str, var9, this.theWorldSettings, this.worldServers[0], this.theProfiler, this.getLogAgent());
 			}
 
 			this.worldServers[var8].addWorldAccess(new WorldManager(this, this.worldServers[var8]));
@@ -68,6 +73,9 @@
 		this.initialWorldChunkLoad();
 	}
 
+	/**
+	 * Initialises the server and starts it.
+	 */
 	protected boolean startServer() throws IOException {
 		this.serverLogAgent.logInfo("Starting integrated minecraft server version 1.6.4");
 		this.setOnlineMode(false);
@@ -76,25 +84,28 @@
 		this.setAllowPvp(true);
 		this.setAllowFlight(true);
 		this.serverLogAgent.logInfo("Generating keypair");
-		this.setKeyPair(CryptManager.generateKeyPair());
+		this.setKeyPair(CryptManager.createNewKeyPair());
 		this.loadAllWorlds(this.getFolderName(), this.getWorldName(), this.theWorldSettings.getSeed(), this.theWorldSettings.getTerrainType(), this.theWorldSettings.func_82749_j());
 		this.setMOTD(this.getServerOwner() + " - " + this.worldServers[0].getWorldInfo().getWorldName());
 		return true;
 	}
 
-	protected void tick() {
+	/**
+	 * Main function called by run() every loop.
+	 */
+	public void tick() {
 		boolean var1 = this.isGamePaused;
 		this.isGamePaused = this.theServerListeningThread.isGamePaused();
-		if(!var1 && this.isGamePaused) {
+
+		if (!var1 && this.isGamePaused) {
 			this.serverLogAgent.logInfo("Saving and pausing game...");
 			this.getConfigurationManager().saveAllPlayerData();
 			this.saveAllWorlds(false);
 		}
 
-		if(!this.isGamePaused) {
+		if (!this.isGamePaused) {
 			super.tick();
 		}
-
 	}
 
 	public boolean canStructuresSpawn() {
@@ -105,55 +116,76 @@
 		return this.theWorldSettings.getGameType();
 	}
 
+	/**
+	 * Defaults to "1" (Easy) for the dedicated server, defaults to "2" (Normal) on the client.
+	 */
 	public int getDifficulty() {
 		return this.mc.gameSettings.difficulty;
 	}
 
+	/**
+	 * Defaults to false.
+	 */
 	public boolean isHardcore() {
 		return this.theWorldSettings.getHardcoreEnabled();
 	}
 
 	protected File getDataDirectory() {
-		return this.mc.x;
+		return this.mc.mcDataDir;
 	}
 
 	public boolean isDedicatedServer() {
 		return false;
 	}
 
+	/**
+	 * Gets the IntergratedServerListenThread.
+	 */
 	public IntegratedServerListenThread getServerListeningThread() {
 		return this.theServerListeningThread;
 	}
 
-	protected void finalTick(CrashReport var1) {
-		this.mc.crashed(var1);
-	}
-
-	public CrashReport addServerInfoToCrashReport(CrashReport var1) {
-		var1 = super.addServerInfoToCrashReport(var1);
-		var1.getCategory().addCrashSectionCallable("Type", new CallableType3(this));
-		var1.getCategory().addCrashSectionCallable("Is Modded", new CallableIsModded(this));
-		return var1;
-	}
-
-	public void addServerStatsToSnooper(PlayerUsageSnooper var1) {
-		super.addServerStatsToSnooper(var1);
-		var1.addData("snooper_partner", this.mc.getPlayerUsageSnooper().getUniqueID());
-	}
-
+	/**
+	 * Called on exit from the main run() loop.
+	 */
+	protected void finalTick(CrashReport par1CrashReport) {
+		this.mc.crashed(par1CrashReport);
+	}
+
+	/**
+	 * Adds the server info, including from theWorldServer, to the crash report.
+	 */
+	public CrashReport addServerInfoToCrashReport(CrashReport par1CrashReport) {
+		par1CrashReport = super.addServerInfoToCrashReport(par1CrashReport);
+		par1CrashReport.getCategory().addCrashSectionCallable("Type", new CallableType3(this));
+		par1CrashReport.getCategory().addCrashSectionCallable("Is Modded", new CallableIsModded(this));
+		return par1CrashReport;
+	}
+
+	public void addServerStatsToSnooper(PlayerUsageSnooper par1PlayerUsageSnooper) {
+		super.addServerStatsToSnooper(par1PlayerUsageSnooper);
+		par1PlayerUsageSnooper.addData("snooper_partner", this.mc.getPlayerUsageSnooper().getUniqueID());
+	}
+
+	/**
+	 * Returns whether snooping is enabled or not.
+	 */
 	public boolean isSnooperEnabled() {
 		return Minecraft.getMinecraft().isSnooperEnabled();
 	}
 
-	public String shareToLAN(EnumGameType var1, boolean var2) {
+	/**
+	 * On dedicated does nothing. On integrated, sets commandsAllowedForAll, gameType and allows external connections.
+	 */
+	public String shareToLAN(EnumGameType par1EnumGameType, boolean par2) {
 		try {
 			String var3 = this.theServerListeningThread.func_71755_c();
 			this.getLogAgent().logInfo("Started on " + var3);
 			this.isPublic = true;
 			this.lanServerPing = new ThreadLanServerPing(this.getMOTD(), var3);
 			this.lanServerPing.start();
-			this.getConfigurationManager().setGameType(var1);
-			this.getConfigurationManager().setCommandsAllowedForAll(var2);
+			this.getConfigurationManager().setGameType(par1EnumGameType);
+			this.getConfigurationManager().setCommandsAllowedForAll(par2);
 			return var3;
 		} catch (IOException var4) {
 			return null;
@@ -164,32 +196,47 @@
 		return this.serverLogAgent;
 	}
 
+	/**
+	 * Saves all necessary data as preparation for stopping the server.
+	 */
 	public void stopServer() {
 		super.stopServer();
-		if(this.lanServerPing != null) {
+
+		if (this.lanServerPing != null) {
 			this.lanServerPing.interrupt();
 			this.lanServerPing = null;
 		}
-
 	}
 
+	/**
+	 * Sets the serverRunning variable to false, in order to get the server to shut down.
+	 */
 	public void initiateShutdown() {
 		super.initiateShutdown();
-		if(this.lanServerPing != null) {
+
+		if (this.lanServerPing != null) {
 			this.lanServerPing.interrupt();
 			this.lanServerPing = null;
 		}
-
 	}
 
+	/**
+	 * Returns true if this integrated server is open to LAN
+	 */
 	public boolean getPublic() {
 		return this.isPublic;
 	}
 
-	public void setGameType(EnumGameType var1) {
-		this.getConfigurationManager().setGameType(var1);
+	/**
+	 * Sets the game type for all worlds.
+	 */
+	public void setGameType(EnumGameType par1EnumGameType) {
+		this.getConfigurationManager().setGameType(par1EnumGameType);
 	}
 
+	/**
+	 * Return whether command blocks are enabled.
+	 */
 	public boolean isCommandBlockEnabled() {
 		return true;
 	}
