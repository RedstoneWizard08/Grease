--- net/minecraft/src/InventoryBasic.java
+++ net/minecraft/src/InventoryBasic.java
@@ -4,47 +4,56 @@
 import java.util.List;
 
 public class InventoryBasic implements IInventory {
-	private String a;
+	private String inventoryTitle;
 	private int slotsCount;
 	private ItemStack[] inventoryContents;
-	private List d;
+	private List field_70480_d;
 	private boolean field_94051_e;
 
-	public InventoryBasic(String var1, boolean var2, int var3) {
-		this.a = var1;
-		this.field_94051_e = var2;
-		this.slotsCount = var3;
-		this.inventoryContents = new ItemStack[var3];
+	public InventoryBasic(String par1Str, boolean par2, int par3) {
+		this.inventoryTitle = par1Str;
+		this.field_94051_e = par2;
+		this.slotsCount = par3;
+		this.inventoryContents = new ItemStack[par3];
 	}
 
-	public void func_110134_a(IInvBasic var1) {
-		if(this.d == null) {
-			this.d = new ArrayList();
+	public void func_110134_a(IInvBasic par1IInvBasic) {
+		if (this.field_70480_d == null) {
+			this.field_70480_d = new ArrayList();
 		}
 
-		this.d.add(var1);
-	}
-
-	public void func_110132_b(IInvBasic var1) {
-		this.d.remove(var1);
-	}
-
-	public ItemStack getStackInSlot(int var1) {
-		return this.inventoryContents[var1];
-	}
-
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.inventoryContents[var1] != null) {
+		this.field_70480_d.add(par1IInvBasic);
+	}
+
+	public void func_110132_b(IInvBasic par1IInvBasic) {
+		this.field_70480_d.remove(par1IInvBasic);
+	}
+
+	/**
+	 * Returns the stack in slot i
+	 */
+	public ItemStack getStackInSlot(int par1) {
+		return this.inventoryContents[par1];
+	}
+
+	/**
+	 * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a new
+	 * stack.
+	 */
+	public ItemStack decrStackSize(int par1, int par2) {
+		if (this.inventoryContents[par1] != null) {
 			ItemStack var3;
-			if(this.inventoryContents[var1].stackSize <= var2) {
-				var3 = this.inventoryContents[var1];
-				this.inventoryContents[var1] = null;
+
+			if (this.inventoryContents[par1].stackSize <= par2) {
+				var3 = this.inventoryContents[par1];
+				this.inventoryContents[par1] = null;
 				this.onInventoryChanged();
 				return var3;
 			} else {
-				var3 = this.inventoryContents[var1].splitStack(var2);
-				if(this.inventoryContents[var1].stackSize == 0) {
-					this.inventoryContents[var1] = null;
+				var3 = this.inventoryContents[par1].splitStack(par2);
+
+				if (this.inventoryContents[par1].stackSize == 0) {
+					this.inventoryContents[par1] = null;
 				}
 
 				this.onInventoryChanged();
@@ -55,66 +64,94 @@
 		}
 	}
 
-	public ItemStack getStackInSlotOnClosing(int var1) {
-		if(this.inventoryContents[var1] != null) {
-			ItemStack var2 = this.inventoryContents[var1];
-			this.inventoryContents[var1] = null;
+	/**
+	 * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem - like
+	 * when you close a workbench GUI.
+	 */
+	public ItemStack getStackInSlotOnClosing(int par1) {
+		if (this.inventoryContents[par1] != null) {
+			ItemStack var2 = this.inventoryContents[par1];
+			this.inventoryContents[par1] = null;
 			return var2;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.inventoryContents[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	/**
+	 * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
+	 */
+	public void setInventorySlotContents(int par1, ItemStack par2ItemStack) {
+		this.inventoryContents[par1] = par2ItemStack;
+
+		if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit()) {
+			par2ItemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 		this.onInventoryChanged();
 	}
 
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return this.slotsCount;
 	}
 
+	/**
+	 * Returns the name of the inventory.
+	 */
 	public String getInvName() {
-		return this.a;
+		return this.inventoryTitle;
 	}
 
+	/**
+	 * If this returns false, the inventory name will be used as an unlocalized name, and translated into the player's
+	 * language. Otherwise it will be used directly.
+	 */
 	public boolean isInvNameLocalized() {
 		return this.field_94051_e;
 	}
 
-	public void func_110133_a(String var1) {
+	public void func_110133_a(String par1Str) {
 		this.field_94051_e = true;
-		this.a = var1;
+		this.inventoryTitle = par1Str;
 	}
 
+	/**
+	 * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't this
+	 * more of a set than a get?*
+	 */
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
+	/**
+	 * Called when an the contents of an Inventory change, usually
+	 */
 	public void onInventoryChanged() {
-		if(this.d != null) {
-			for(int var1 = 0; var1 < this.d.size(); ++var1) {
-				((IInvBasic)this.d.get(var1)).onInventoryChanged(this);
+		if (this.field_70480_d != null) {
+			for (int var1 = 0; var1 < this.field_70480_d.size(); ++var1) {
+				((IInvBasic)this.field_70480_d.get(var1)).onInventoryChanged(this);
 			}
 		}
-
 	}
 
-	public boolean isUseableByPlayer(EntityPlayer var1) {
+	/**
+	 * Do not make give this method the name canInteractWith because it clashes with Container
+	 */
+	public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer) {
 		return true;
 	}
 
-	public void openChest() {
-	}
-
-	public void closeChest() {
-	}
-
-	public boolean isItemValidForSlot(int var1, ItemStack var2) {
+	public void openChest() {}
+
+	public void closeChest() {}
+
+	/**
+	 * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
+	 */
+	public boolean isItemValidForSlot(int par1, ItemStack par2ItemStack) {
 		return true;
 	}
 }
