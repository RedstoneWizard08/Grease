--- net/minecraft/src/InventoryCrafting.java
+++ net/minecraft/src/InventoryCrafting.java
@@ -1,64 +1,98 @@
 package net.minecraft.src;
 
 public class InventoryCrafting implements IInventory {
+
+	/** List of the stacks in the crafting matrix. */
 	private ItemStack[] stackList;
+
+	/** the width of the crafting inventory */
 	private int inventoryWidth;
+
+	/**
+	 * Class containing the callbacks for the events on_GUIClosed and on_CraftMaxtrixChanged.
+	 */
 	private Container eventHandler;
 
-	public InventoryCrafting(Container var1, int var2, int var3) {
-		int var4 = var2 * var3;
+	public InventoryCrafting(Container par1Container, int par2, int par3) {
+		int var4 = par2 * par3;
 		this.stackList = new ItemStack[var4];
-		this.eventHandler = var1;
-		this.inventoryWidth = var2;
+		this.eventHandler = par1Container;
+		this.inventoryWidth = par2;
 	}
 
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return this.stackList.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return var1 >= this.getSizeInventory() ? null : this.stackList[var1];
+	/**
+	 * Returns the stack in slot i
+	 */
+	public ItemStack getStackInSlot(int par1) {
+		return par1 >= this.getSizeInventory() ? null : this.stackList[par1];
 	}
 
-	public ItemStack getStackInRowAndColumn(int var1, int var2) {
-		if(var1 >= 0 && var1 < this.inventoryWidth) {
-			int var3 = var1 + var2 * this.inventoryWidth;
+	/**
+	 * Returns the itemstack in the slot specified (Top left is 0, 0). Args: row, column
+	 */
+	public ItemStack getStackInRowAndColumn(int par1, int par2) {
+		if (par1 >= 0 && par1 < this.inventoryWidth) {
+			int var3 = par1 + par2 * this.inventoryWidth;
 			return this.getStackInSlot(var3);
 		} else {
 			return null;
 		}
 	}
 
+	/**
+	 * Returns the name of the inventory.
+	 */
 	public String getInvName() {
 		return "container.crafting";
 	}
 
+	/**
+	 * If this returns false, the inventory name will be used as an unlocalized name, and translated into the player's
+	 * language. Otherwise it will be used directly.
+	 */
 	public boolean isInvNameLocalized() {
 		return false;
 	}
 
-	public ItemStack getStackInSlotOnClosing(int var1) {
-		if(this.stackList[var1] != null) {
-			ItemStack var2 = this.stackList[var1];
-			this.stackList[var1] = null;
+	/**
+	 * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem - like
+	 * when you close a workbench GUI.
+	 */
+	public ItemStack getStackInSlotOnClosing(int par1) {
+		if (this.stackList[par1] != null) {
+			ItemStack var2 = this.stackList[par1];
+			this.stackList[par1] = null;
 			return var2;
 		} else {
 			return null;
 		}
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.stackList[var1] != null) {
+	/**
+	 * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a new
+	 * stack.
+	 */
+	public ItemStack decrStackSize(int par1, int par2) {
+		if (this.stackList[par1] != null) {
 			ItemStack var3;
-			if(this.stackList[var1].stackSize <= var2) {
-				var3 = this.stackList[var1];
-				this.stackList[var1] = null;
+
+			if (this.stackList[par1].stackSize <= par2) {
+				var3 = this.stackList[par1];
+				this.stackList[par1] = null;
 				this.eventHandler.onCraftMatrixChanged(this);
 				return var3;
 			} else {
-				var3 = this.stackList[var1].splitStack(var2);
-				if(this.stackList[var1].stackSize == 0) {
-					this.stackList[var1] = null;
+				var3 = this.stackList[par1].splitStack(par2);
+
+				if (this.stackList[par1].stackSize == 0) {
+					this.stackList[par1] = null;
 				}
 
 				this.eventHandler.onCraftMatrixChanged(this);
@@ -69,29 +103,42 @@
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.stackList[var1] = var2;
+	/**
+	 * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
+	 */
+	public void setInventorySlotContents(int par1, ItemStack par2ItemStack) {
+		this.stackList[par1] = par2ItemStack;
 		this.eventHandler.onCraftMatrixChanged(this);
 	}
 
+	/**
+	 * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't this
+	 * more of a set than a get?*
+	 */
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public void onInventoryChanged() {
-	}
+	/**
+	 * Called when an the contents of an Inventory change, usually
+	 */
+	public void onInventoryChanged() {}
 
-	public boolean isUseableByPlayer(EntityPlayer var1) {
+	/**
+	 * Do not make give this method the name canInteractWith because it clashes with Container
+	 */
+	public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer) {
 		return true;
 	}
 
-	public void openChest() {
-	}
-
-	public void closeChest() {
-	}
-
-	public boolean isItemValidForSlot(int var1, ItemStack var2) {
+	public void openChest() {}
+
+	public void closeChest() {}
+
+	/**
+	 * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
+	 */
+	public boolean isItemValidForSlot(int par1, ItemStack par2ItemStack) {
 		return true;
 	}
 }
