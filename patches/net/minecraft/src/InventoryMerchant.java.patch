--- net/minecraft/src/InventoryMerchant.java
+++ net/minecraft/src/InventoryMerchant.java
@@ -7,41 +7,54 @@
 	private MerchantRecipe currentRecipe;
 	private int currentRecipeIndex;
 
-	public InventoryMerchant(EntityPlayer var1, IMerchant var2) {
-		this.thePlayer = var1;
-		this.theMerchant = var2;
+	public InventoryMerchant(EntityPlayer par1EntityPlayer, IMerchant par2IMerchant) {
+		this.thePlayer = par1EntityPlayer;
+		this.theMerchant = par2IMerchant;
 	}
 
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return this.theInventory.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.theInventory[var1];
+	/**
+	 * Returns the stack in slot i
+	 */
+	public ItemStack getStackInSlot(int par1) {
+		return this.theInventory[par1];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.theInventory[var1] != null) {
+	/**
+	 * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a new
+	 * stack.
+	 */
+	public ItemStack decrStackSize(int par1, int par2) {
+		if (this.theInventory[par1] != null) {
 			ItemStack var3;
-			if(var1 == 2) {
-				var3 = this.theInventory[var1];
-				this.theInventory[var1] = null;
+
+			if (par1 == 2) {
+				var3 = this.theInventory[par1];
+				this.theInventory[par1] = null;
 				return var3;
-			} else if(this.theInventory[var1].stackSize <= var2) {
-				var3 = this.theInventory[var1];
-				this.theInventory[var1] = null;
-				if(this.inventoryResetNeededOnSlotChange(var1)) {
+			} else if (this.theInventory[par1].stackSize <= par2) {
+				var3 = this.theInventory[par1];
+				this.theInventory[par1] = null;
+
+				if (this.inventoryResetNeededOnSlotChange(par1)) {
 					this.resetRecipeAndSlots();
 				}
 
 				return var3;
 			} else {
-				var3 = this.theInventory[var1].splitStack(var2);
-				if(this.theInventory[var1].stackSize == 0) {
-					this.theInventory[var1] = null;
+				var3 = this.theInventory[par1].splitStack(par2);
+
+				if (this.theInventory[par1].stackSize == 0) {
+					this.theInventory[par1] = null;
 				}
 
-				if(this.inventoryResetNeededOnSlotChange(var1)) {
+				if (this.inventoryResetNeededOnSlotChange(par1)) {
 					this.resetRecipeAndSlots();
 				}
 
@@ -52,58 +65,86 @@
 		}
 	}
 
-	private boolean inventoryResetNeededOnSlotChange(int var1) {
-		return var1 == 0 || var1 == 1;
+	/**
+	 * if par1 slot has changed, does resetRecipeAndSlots need to be called?
+	 */
+	private boolean inventoryResetNeededOnSlotChange(int par1) {
+		return par1 == 0 || par1 == 1;
 	}
 
-	public ItemStack getStackInSlotOnClosing(int var1) {
-		if(this.theInventory[var1] != null) {
-			ItemStack var2 = this.theInventory[var1];
-			this.theInventory[var1] = null;
+	/**
+	 * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem - like
+	 * when you close a workbench GUI.
+	 */
+	public ItemStack getStackInSlotOnClosing(int par1) {
+		if (this.theInventory[par1] != null) {
+			ItemStack var2 = this.theInventory[par1];
+			this.theInventory[par1] = null;
 			return var2;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.theInventory[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	/**
+	 * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
+	 */
+	public void setInventorySlotContents(int par1, ItemStack par2ItemStack) {
+		this.theInventory[par1] = par2ItemStack;
+
+		if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit()) {
+			par2ItemStack.stackSize = this.getInventoryStackLimit();
 		}
 
-		if(this.inventoryResetNeededOnSlotChange(var1)) {
+		if (this.inventoryResetNeededOnSlotChange(par1)) {
 			this.resetRecipeAndSlots();
 		}
-
 	}
 
+	/**
+	 * Returns the name of the inventory.
+	 */
 	public String getInvName() {
 		return "mob.villager";
 	}
 
+	/**
+	 * If this returns false, the inventory name will be used as an unlocalized name, and translated into the player's
+	 * language. Otherwise it will be used directly.
+	 */
 	public boolean isInvNameLocalized() {
 		return false;
 	}
 
+	/**
+	 * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't this
+	 * more of a set than a get?*
+	 */
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public boolean isUseableByPlayer(EntityPlayer var1) {
-		return this.theMerchant.getCustomer() == var1;
-	}
-
-	public void openChest() {
-	}
-
-	public void closeChest() {
-	}
-
-	public boolean isItemValidForSlot(int var1, ItemStack var2) {
+	/**
+	 * Do not make give this method the name canInteractWith because it clashes with Container
+	 */
+	public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer) {
+		return this.theMerchant.getCustomer() == par1EntityPlayer;
+	}
+
+	public void openChest() {}
+
+	public void closeChest() {}
+
+	/**
+	 * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
+	 */
+	public boolean isItemValidForSlot(int par1, ItemStack par2ItemStack) {
 		return true;
 	}
 
+	/**
+	 * Called when an the contents of an Inventory change, usually
+	 */
 	public void onInventoryChanged() {
 		this.resetRecipeAndSlots();
 	}
@@ -112,23 +153,27 @@
 		this.currentRecipe = null;
 		ItemStack var1 = this.theInventory[0];
 		ItemStack var2 = this.theInventory[1];
-		if(var1 == null) {
+
+		if (var1 == null) {
 			var1 = var2;
 			var2 = null;
 		}
 
-		if(var1 == null) {
+		if (var1 == null) {
 			this.setInventorySlotContents(2, (ItemStack)null);
 		} else {
 			MerchantRecipeList var3 = this.theMerchant.getRecipes(this.thePlayer);
-			if(var3 != null) {
+
+			if (var3 != null) {
 				MerchantRecipe var4 = var3.canRecipeBeUsed(var1, var2, this.currentRecipeIndex);
-				if(var4 != null && !var4.func_82784_g()) {
+
+				if (var4 != null && !var4.func_82784_g()) {
 					this.currentRecipe = var4;
 					this.setInventorySlotContents(2, var4.getItemToSell().copy());
-				} else if(var2 != null) {
+				} else if (var2 != null) {
 					var4 = var3.canRecipeBeUsed(var2, var1, this.currentRecipeIndex);
-					if(var4 != null && !var4.func_82784_g()) {
+
+					if (var4 != null && !var4.func_82784_g()) {
 						this.currentRecipe = var4;
 						this.setInventorySlotContents(2, var4.getItemToSell().copy());
 					} else {
@@ -147,8 +192,8 @@
 		return this.currentRecipe;
 	}
 
-	public void setCurrentRecipeIndex(int var1) {
-		this.currentRecipeIndex = var1;
+	public void setCurrentRecipeIndex(int par1) {
+		this.currentRecipeIndex = par1;
 		this.resetRecipeAndSlots();
 	}
 }
