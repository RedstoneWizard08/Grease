--- net/minecraft/src/Item.java
+++ net/minecraft/src/Item.java
@@ -1,15 +1,22 @@
 package net.minecraft.src;
 
-import com.google.common.collect.HashMultimap;
-import com.google.common.collect.Multimap;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
 
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Multimap;
+
+import org.spoutcraft.client.item.SpoutItem;
+
 public class Item {
-	protected static final UUID e = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
-	private CreativeTabs tabToDisplayOn;
-	protected static Random f = new Random();
+	protected static final UUID field_111210_e = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+	private CreativeTabs tabToDisplayOn;	
+
+	/** The RNG used by the Item subclasses. */
+	protected static Random itemRand = new Random();
+
+	/** A 32000 elements Item array. */
 	public static Item[] itemsList = new Item[32000];
 	public static Item shovelIron = (new ItemSpade(0, EnumToolMaterial.IRON)).setUnlocalizedName("shovelIron").setTextureName("iron_shovel");
 	public static Item pickaxeIron = (new ItemPickaxe(1, EnumToolMaterial.IRON)).setUnlocalizedName("pickaxeIron").setTextureName("iron_pickaxe");
@@ -44,7 +51,7 @@
 	public static Item axeGold = (new ItemAxe(30, EnumToolMaterial.GOLD)).setUnlocalizedName("hatchetGold").setTextureName("gold_axe");
 	public static Item silk = (new ItemReed(31, Block.tripWire)).setUnlocalizedName("string").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("string");
 	public static Item feather = (new Item(32)).setUnlocalizedName("feather").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("feather");
-	public static Item gunpowder = (new Item(33)).setUnlocalizedName("sulphur").setPotionEffect(PotionHelper.k).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("gunpowder");
+	public static Item gunpowder = (new Item(33)).setUnlocalizedName("sulphur").setPotionEffect(PotionHelper.gunpowderEffect).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("gunpowder");
 	public static Item hoeWood = (new ItemHoe(34, EnumToolMaterial.WOOD)).setUnlocalizedName("hoeWood").setTextureName("wood_hoe");
 	public static Item hoeStone = (new ItemHoe(35, EnumToolMaterial.STONE)).setUnlocalizedName("hoeStone").setTextureName("stone_hoe");
 	public static Item hoeIron = (new ItemHoe(36, EnumToolMaterial.IRON)).setUnlocalizedName("hoeIron").setTextureName("iron_hoe");
@@ -73,7 +80,11 @@
 	public static ItemArmor plateGold = (ItemArmor)(new ItemArmor(59, EnumArmorMaterial.GOLD, 4, 1)).setUnlocalizedName("chestplateGold").setTextureName("gold_chestplate");
 	public static ItemArmor legsGold = (ItemArmor)(new ItemArmor(60, EnumArmorMaterial.GOLD, 4, 2)).setUnlocalizedName("leggingsGold").setTextureName("gold_leggings");
 	public static ItemArmor bootsGold = (ItemArmor)(new ItemArmor(61, EnumArmorMaterial.GOLD, 4, 3)).setUnlocalizedName("bootsGold").setTextureName("gold_boots");
-	public static Item flint = (new Item(62)).setUnlocalizedName("flint").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("flint");
+		
+	// Spout Start - Changed to SpoutItemBlock
+	public static Item flint = (new SpoutItem(62)).setUnlocalizedName("flint").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("flint");
+	// Spout End
+	
 	public static Item porkRaw = (new ItemFood(63, 3, 0.3F, true)).setUnlocalizedName("porkchopRaw").setTextureName("porkchop_raw");
 	public static Item porkCooked = (new ItemFood(64, 8, 0.8F, true)).setUnlocalizedName("porkchopCooked").setTextureName("porkchop_cooked");
 	public static Item painting = (new ItemHangingEntity(65, EntityPainting.class)).setUnlocalizedName("painting").setTextureName("painting");
@@ -86,7 +97,7 @@
 	public static Item minecartEmpty = (new ItemMinecart(72, 0)).setUnlocalizedName("minecart").setTextureName("minecart_normal");
 	public static Item saddle = (new ItemSaddle(73)).setUnlocalizedName("saddle").setTextureName("saddle");
 	public static Item doorIron = (new ItemDoor(74, Material.iron)).setUnlocalizedName("doorIron").setTextureName("door_iron");
-	public static Item redstone = (new ItemRedstone(75)).setUnlocalizedName("redstone").setPotionEffect(PotionHelper.i).setTextureName("redstone_dust");
+	public static Item redstone = (new ItemRedstone(75)).setUnlocalizedName("redstone").setPotionEffect(PotionHelper.redstoneEffect).setTextureName("redstone_dust");
 	public static Item snowball = (new ItemSnowball(76)).setUnlocalizedName("snowball").setTextureName("snowball");
 	public static Item boat = (new ItemBoat(77)).setUnlocalizedName("boat").setTextureName("boat");
 	public static Item leather = (new Item(78)).setUnlocalizedName("leather").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("leather");
@@ -103,17 +114,21 @@
 	public static Item compass = (new Item(89)).setUnlocalizedName("compass").setCreativeTab(CreativeTabs.tabTools).setTextureName("compass");
 	public static ItemFishingRod fishingRod = (ItemFishingRod)(new ItemFishingRod(90)).setUnlocalizedName("fishingRod").setTextureName("fishing_rod");
 	public static Item pocketSundial = (new Item(91)).setUnlocalizedName("clock").setCreativeTab(CreativeTabs.tabTools).setTextureName("clock");
-	public static Item glowstone = (new Item(92)).setUnlocalizedName("yellowDust").setPotionEffect(PotionHelper.j).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("glowstone_dust");
+	public static Item glowstone = (new Item(92)).setUnlocalizedName("yellowDust").setPotionEffect(PotionHelper.glowstoneEffect).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("glowstone_dust");
 	public static Item fishRaw = (new ItemFood(93, 2, 0.3F, false)).setUnlocalizedName("fishRaw").setTextureName("fish_raw");
 	public static Item fishCooked = (new ItemFood(94, 5, 0.6F, false)).setUnlocalizedName("fishCooked").setTextureName("fish_cooked");
 	public static Item dyePowder = (new ItemDye(95)).setUnlocalizedName("dyePowder").setTextureName("dye_powder");
 	public static Item bone = (new Item(96)).setUnlocalizedName("bone").setFull3D().setCreativeTab(CreativeTabs.tabMisc).setTextureName("bone");
-	public static Item sugar = (new Item(97)).setUnlocalizedName("sugar").setPotionEffect(PotionHelper.b).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("sugar");
+	public static Item sugar = (new Item(97)).setUnlocalizedName("sugar").setPotionEffect(PotionHelper.sugarEffect).setCreativeTab(CreativeTabs.tabMaterials).setTextureName("sugar");
 	public static Item cake = (new ItemReed(98, Block.cake)).setMaxStackSize(1).setUnlocalizedName("cake").setCreativeTab(CreativeTabs.tabFood).setTextureName("cake");
 	public static Item bed = (new ItemBed(99)).setMaxStackSize(1).setUnlocalizedName("bed").setTextureName("bed");
 	public static Item redstoneRepeater = (new ItemReed(100, Block.redstoneRepeaterIdle)).setUnlocalizedName("diode").setCreativeTab(CreativeTabs.tabRedstone).setTextureName("repeater");
 	public static Item cookie = (new ItemFood(101, 2, 0.1F, false)).setUnlocalizedName("cookie").setTextureName("cookie");
 	public static ItemMap map = (ItemMap)(new ItemMap(102)).setUnlocalizedName("map").setTextureName("map_filled");
+
+	/**
+	 * Item introduced on 1.7 version, is a shear to cut leaves (you can keep the block) or get wool from sheeps.
+	 */
 	public static ItemShears shears = (ItemShears)(new ItemShears(103)).setUnlocalizedName("shears").setTextureName("shears");
 	public static Item melon = (new ItemFood(104, 2, 0.3F, false)).setUnlocalizedName("melon").setTextureName("melon");
 	public static Item pumpkinSeeds = (new ItemSeeds(105, Block.pumpkinStem.blockID, Block.tilledField.blockID)).setUnlocalizedName("seeds_pumpkin").setTextureName("seeds_pumpkin");
@@ -125,21 +140,29 @@
 	public static Item rottenFlesh = (new ItemFood(111, 4, 0.1F, true)).setPotionEffect(Potion.hunger.id, 30, 0, 0.8F).setUnlocalizedName("rottenFlesh").setTextureName("rotten_flesh");
 	public static Item enderPearl = (new ItemEnderPearl(112)).setUnlocalizedName("enderPearl").setTextureName("ender_pearl");
 	public static Item blazeRod = (new Item(113)).setUnlocalizedName("blazeRod").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("blaze_rod");
-	public static Item ghastTear = (new Item(114)).setUnlocalizedName("ghastTear").setPotionEffect(PotionHelper.c).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("ghast_tear");
+	public static Item ghastTear = (new Item(114)).setUnlocalizedName("ghastTear").setPotionEffect(PotionHelper.ghastTearEffect).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("ghast_tear");
 	public static Item goldNugget = (new Item(115)).setUnlocalizedName("goldNugget").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("gold_nugget");
 	public static Item netherStalkSeeds = (new ItemSeeds(116, Block.netherStalk.blockID, Block.slowSand.blockID)).setUnlocalizedName("netherStalkSeeds").setPotionEffect("+4").setTextureName("nether_wart");
 	public static ItemPotion potion = (ItemPotion)(new ItemPotion(117)).setUnlocalizedName("potion").setTextureName("potion");
 	public static Item glassBottle = (new ItemGlassBottle(118)).setUnlocalizedName("glassBottle").setTextureName("potion_bottle_empty");
-	public static Item spiderEye = (new ItemFood(119, 2, 0.8F, false)).setPotionEffect(Potion.poison.id, 5, 0, 1.0F).setUnlocalizedName("spiderEye").setPotionEffect(PotionHelper.d).setTextureName("spider_eye");
-	public static Item fermentedSpiderEye = (new Item(120)).setUnlocalizedName("fermentedSpiderEye").setPotionEffect(PotionHelper.e).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("spider_eye_fermented");
-	public static Item blazePowder = (new Item(121)).setUnlocalizedName("blazePowder").setPotionEffect(PotionHelper.g).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("blaze_powder");
-	public static Item magmaCream = (new Item(122)).setUnlocalizedName("magmaCream").setPotionEffect(PotionHelper.h).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("magma_cream");
+	public static Item spiderEye = (new ItemFood(119, 2, 0.8F, false)).setPotionEffect(Potion.poison.id, 5, 0, 1.0F).setUnlocalizedName("spiderEye").setPotionEffect(PotionHelper.spiderEyeEffect).setTextureName("spider_eye");
+	public static Item fermentedSpiderEye = (new Item(120)).setUnlocalizedName("fermentedSpiderEye").setPotionEffect(PotionHelper.fermentedSpiderEyeEffect).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("spider_eye_fermented");
+	public static Item blazePowder = (new Item(121)).setUnlocalizedName("blazePowder").setPotionEffect(PotionHelper.blazePowderEffect).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("blaze_powder");
+	public static Item magmaCream = (new Item(122)).setUnlocalizedName("magmaCream").setPotionEffect(PotionHelper.magmaCreamEffect).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("magma_cream");
 	public static Item brewingStand = (new ItemReed(123, Block.brewingStand)).setUnlocalizedName("brewingStand").setCreativeTab(CreativeTabs.tabBrewing).setTextureName("brewing_stand");
 	public static Item cauldron = (new ItemReed(124, Block.cauldron)).setUnlocalizedName("cauldron").setCreativeTab(CreativeTabs.tabBrewing).setTextureName("cauldron");
 	public static Item eyeOfEnder = (new ItemEnderEye(125)).setUnlocalizedName("eyeOfEnder").setTextureName("ender_eye");
-	public static Item speckledMelon = (new Item(126)).setUnlocalizedName("speckledMelon").setPotionEffect(PotionHelper.f).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("melon_speckled");
+	public static Item speckledMelon = (new Item(126)).setUnlocalizedName("speckledMelon").setPotionEffect(PotionHelper.speckledMelonEffect).setCreativeTab(CreativeTabs.tabBrewing).setTextureName("melon_speckled");
 	public static Item monsterPlacer = (new ItemMonsterPlacer(127)).setUnlocalizedName("monsterPlacer").setTextureName("spawn_egg");
+
+	/**
+	 * Bottle o' Enchanting. Drops between 1 and 3 experience orbs when thrown.
+	 */
 	public static Item expBottle = (new ItemExpBottle(128)).setUnlocalizedName("expBottle").setTextureName("experience_bottle");
+
+	/**
+	 * Fire Charge. When used in a dispenser it fires a fireball similiar to a Ghast's.
+	 */
 	public static Item fireballCharge = (new ItemFireball(129)).setUnlocalizedName("fireball").setTextureName("fireball");
 	public static Item writableBook = (new ItemWritableBook(130)).setUnlocalizedName("writingBook").setCreativeTab(CreativeTabs.tabMisc).setTextureName("book_writable");
 	public static Item writtenBook = (new ItemEditableBook(131)).setUnlocalizedName("writtenBook").setTextureName("book_written");
@@ -151,7 +174,7 @@
 	public static Item bakedPotato = (new ItemFood(137, 6, 0.6F, false)).setUnlocalizedName("potatoBaked").setTextureName("potato_baked");
 	public static Item poisonousPotato = (new ItemFood(138, 2, 0.3F, false)).setPotionEffect(Potion.poison.id, 5, 0, 0.6F).setUnlocalizedName("potatoPoisonous").setTextureName("potato_poisonous");
 	public static ItemEmptyMap emptyMap = (ItemEmptyMap)(new ItemEmptyMap(139)).setUnlocalizedName("emptyMap").setTextureName("map_empty");
-	public static Item goldenCarrot = (new ItemFood(140, 6, 1.2F, false)).setUnlocalizedName("carrotGolden").setPotionEffect(PotionHelper.l).setTextureName("carrot_golden");
+	public static Item goldenCarrot = (new ItemFood(140, 6, 1.2F, false)).setUnlocalizedName("carrotGolden").setPotionEffect(PotionHelper.goldenCarrotEffect).setTextureName("carrot_golden");
 	public static Item skull = (new ItemSkull(141)).setUnlocalizedName("skull").setTextureName("skull");
 	public static Item carrotOnAStick = (new ItemCarrotOnAStick(142)).setUnlocalizedName("carrotOnAStick").setTextureName("carrot_on_a_stick");
 	public static Item netherStar = (new ItemSimpleFoiled(143)).setUnlocalizedName("netherStar").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("nether_star");
@@ -162,7 +185,7 @@
 	public static Item comparator = (new ItemReed(148, Block.redstoneComparatorIdle)).setUnlocalizedName("comparator").setCreativeTab(CreativeTabs.tabRedstone).setTextureName("comparator");
 	public static Item netherrackBrick = (new Item(149)).setUnlocalizedName("netherbrick").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("netherbrick");
 	public static Item netherQuartz = (new Item(150)).setUnlocalizedName("netherquartz").setCreativeTab(CreativeTabs.tabMaterials).setTextureName("quartz");
-	public static Item tntMinecart = (new ItemMinecart(151, 3)).setUnlocalizedName("minecartTnt").setTextureName("minecart_tnt");
+	public static Item minecartTnt = (new ItemMinecart(151, 3)).setUnlocalizedName("minecartTnt").setTextureName("minecart_tnt");
 	public static Item minecartHopper = (new ItemMinecart(152, 5)).setUnlocalizedName("minecartHopper").setTextureName("minecart_hopper");
 	public static Item horseArmorIron = (new Item(161)).setUnlocalizedName("horsearmormetal").setMaxStackSize(1).setCreativeTab(CreativeTabs.tabMisc).setTextureName("iron_horse_armor");
 	public static Item horseArmorGold = (new Item(162)).setUnlocalizedName("horsearmorgold").setMaxStackSize(1).setCreativeTab(CreativeTabs.tabMisc).setTextureName("gold_horse_armor");
@@ -181,64 +204,109 @@
 	public static Item recordWard = (new ItemRecord(2009, "ward")).setUnlocalizedName("record").setTextureName("record_ward");
 	public static Item record11 = (new ItemRecord(2010, "11")).setUnlocalizedName("record").setTextureName("record_11");
 	public static Item recordWait = (new ItemRecord(2011, "wait")).setUnlocalizedName("record").setTextureName("record_wait");
+
+	/** The ID of this item. */
 	public final int itemID;
+
+	/** Maximum size of the stack. */
 	protected int maxStackSize = 64;
+
+	/** Maximum damage an item can handle. */
 	private int maxDamage;
+
+	/** If true, render the object in full 3D, like weapons and tools. */
 	protected boolean bFull3D;
+
+	/**
+	 * Some items (like dyes) have multiple subtypes on same item, this is field define this behavior
+	 */
 	protected boolean hasSubtypes;
 	private Item containerItem;
-	private String d;
-	private String cB;
+	private String potionEffect;
+
+	/** The unlocalized name of this item. */
+	private String unlocalizedName;
+
+	/** Icon index in the icons table. */
 	protected Icon itemIcon;
-	protected String cA;
-
-	protected Item(int var1) {
-		this.itemID = 256 + var1;
-		if(itemsList[256 + var1] != null) {
-			System.out.println("CONFLICT @ " + var1);
+	
+	/** The string associated with this Item's Icon. */
+	protected String iconString;
+
+	protected Item(int par1) {
+		this.itemID = 256 + par1;
+
+		if (itemsList[256 + par1] != null) {
+			System.out.println("CONFLICT @ " + par1);
 		}
 
-		itemsList[256 + var1] = this;
+		itemsList[256 + par1] = this;
 	}
 
-	public Item setMaxStackSize(int var1) {
-		this.maxStackSize = var1;
+	public Item setMaxStackSize(int par1) {
+		this.maxStackSize = par1;
 		return this;
 	}
 
+	/**
+	 * Returns 0 for /terrain.png, 1 for /gui/items.png
+	 */
 	public int getSpriteNumber() {
 		return 1;
 	}
 
-	public Icon getIconFromDamage(int var1) {
+	/**
+	 * Gets an icon index based on an item's damage value
+	 */
+	public Icon getIconFromDamage(int par1) {
 		return this.itemIcon;
 	}
 
-	public final Icon getIconIndex(ItemStack var1) {
-		return this.getIconFromDamage(var1.getItemDamage());
+	/**
+	 * Returns the icon index of the stack given as argument.
+	 */
+	public final Icon getIconIndex(ItemStack par1ItemStack) {
+		return this.getIconFromDamage(par1ItemStack.getItemDamage());
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
+	/**
+	 * Callback for item usage. If the item does something special on right clicking, he will have one of those. Return
+	 * True if something happen and false if it don't. This is for ITEMS, not BLOCKS
+	 */
+	public boolean onItemUse(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, World par3World, int par4, int par5, int par6, int par7, float par8, float par9, float par10) {
 		return false;
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
+	/**
+	 * Returns the strength of the stack against a given block. 1.0F base, (Quality+1)*2 if correct blocktype, 1.5F if
+	 * sword
+	 */
+	public float getStrVsBlock(ItemStack par1ItemStack, Block par2Block) {
 		return 1.0F;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		return var1;
-	}
-
-	public ItemStack onEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		return var1;
-	}
-
+	/**
+	 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+	 */
+	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		return par1ItemStack;
+	}
+
+	public ItemStack onEaten(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		return par1ItemStack;
+	}
+
+	/**
+	 * Returns the maximum size of the stack for a specific item. *Isn't this more a Set than a Get?*
+	 */
 	public int getItemStackLimit() {
 		return this.maxStackSize;
 	}
 
-	public int getMetadata(int var1) {
+	/**
+	 * Returns the metadata of the block which this Item (ItemBlock) can place
+	 */
+	public int getMetadata(int par1) {
 		return 0;
 	}
 
@@ -246,17 +314,23 @@
 		return this.hasSubtypes;
 	}
 
-	protected Item setHasSubtypes(boolean var1) {
-		this.hasSubtypes = var1;
+	protected Item setHasSubtypes(boolean par1) {
+		this.hasSubtypes = par1;
 		return this;
 	}
 
+	/**
+	 * Returns the maximum damage an item can take.
+	 */
 	public int getMaxDamage() {
 		return this.maxDamage;
 	}
 
-	protected Item setMaxDamage(int var1) {
-		this.maxDamage = var1;
+	/**
+	 * set max damage of an Item
+	 */
+	protected Item setMaxDamage(int par1) {
+		this.maxDamage = par1;
 		return this;
 	}
 
@@ -264,62 +338,102 @@
 		return this.maxDamage > 0 && !this.hasSubtypes;
 	}
 
-	public boolean hitEntity(ItemStack var1, EntityLivingBase var2, EntityLivingBase var3) {
-		return false;
-	}
-
-	public boolean onBlockDestroyed(ItemStack var1, World var2, int var3, int var4, int var5, int var6, EntityLivingBase var7) {
-		return false;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return false;
-	}
-
-	public boolean itemInteractionForEntity(ItemStack var1, EntityPlayer var2, EntityLivingBase var3) {
-		return false;
-	}
-
+	/**
+	 * Current implementations of this method in child classes do not use the entry argument beside ev. They just raise the
+	 * damage on the stack.
+	 */
+	public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase par2EntityLivingBase, EntityLivingBase par3EntityLivingBase) {
+		return false;
+	}
+
+	public boolean onBlockDestroyed(ItemStack par1ItemStack, World par2World, int par3, int par4, int par5, int par6, EntityLivingBase par7EntityLivingBase) {
+		return false;
+	}
+
+	/**
+	 * Returns if the item (tool) can harvest results from the block type.
+	 */
+	public boolean canHarvestBlock(Block par1Block) {
+		return false;
+	}
+
+	/**
+	 * Returns true if the item can be used on the given entity, e.g. shears on sheep.
+	 */
+	public boolean itemInteractionForEntity(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, EntityLivingBase par3EntityLivingBase) {
+		return false;
+	}
+
+	/**
+	 * Sets bFull3D to True and return the object.
+	 */
 	public Item setFull3D() {
 		this.bFull3D = true;
 		return this;
 	}
 
+	/**
+	 * Returns True is the item is renderer in full 3D when hold.
+	 */
 	public boolean isFull3D() {
 		return this.bFull3D;
 	}
 
+	/**
+	 * Returns true if this item should be rotated by 180 degrees around the Y axis when being held in an entities hands.
+	 */
 	public boolean shouldRotateAroundWhenRendering() {
 		return false;
 	}
 
-	public Item setUnlocalizedName(String var1) {
-		this.cB = var1;
+	/**
+	 * Sets the unlocalized name of this item to the string passed as the parameter, prefixed by "item."
+	 */
+	public Item setUnlocalizedName(String par1Str) {
+		this.unlocalizedName = par1Str;
 		return this;
 	}
 
-	public String getUnlocalizedNameInefficiently(ItemStack var1) {
-		String var2 = this.getUnlocalizedName(var1);
+	/**
+	 * Translates the unlocalized name of this item, but without the .name suffix, so the translation fails and the
+	 * unlocalized name itself is returned.
+	 */
+	public String getUnlocalizedNameInefficiently(ItemStack par1ItemStack) {
+		String var2 = this.getUnlocalizedName(par1ItemStack);
 		return var2 == null ? "" : StatCollector.translateToLocal(var2);
 	}
 
+	/**
+	 * Returns the unlocalized name of this item.
+	 */
 	public String getUnlocalizedName() {
-		return "item." + this.cB;
-	}
-
-	public String getUnlocalizedName(ItemStack var1) {
-		return "item." + this.cB;
-	}
-
-	public Item setContainerItem(Item var1) {
-		this.containerItem = var1;
+		return "item." + this.unlocalizedName;
+	}
+
+	/**
+	 * Returns the unlocalized name of this item. This version accepts an ItemStack so different stacks can have different
+	 * names based on their damage or NBT.
+	 */
+	public String getUnlocalizedName(ItemStack par1ItemStack) {
+		return "item." + this.unlocalizedName;
+	}
+
+	public Item setContainerItem(Item par1Item) {
+		this.containerItem = par1Item;
 		return this;
 	}
 
-	public boolean doesContainerItemLeaveCraftingGrid(ItemStack var1) {
+	/**
+	 * If this returns true, after a recipe involving this item is crafted the container item will be added to the player's
+	 * inventory instead of remaining in the crafting grid.
+	 */
+	public boolean doesContainerItemLeaveCraftingGrid(ItemStack par1ItemStack) {
 		return true;
 	}
 
+	/**
+	 * If this function returns true (or the item is damageable), the ItemStack's NBT tag will be sent to the client.
+	 */
 	public boolean getShareTag() {
 		return true;
 	}
@@ -328,6 +442,9 @@
 		return this.containerItem;
 	}
 
+	/**
+	 * True if this Item has a container item (a.k.a. crafting result)
+	 */
 	public boolean hasContainerItem() {
 		return this.containerItem != null;
 	}
@@ -336,86 +453,122 @@
 		return StatCollector.translateToLocal(this.getUnlocalizedName() + ".name");
 	}
 
-	public String getItemStackDisplayName(ItemStack var1) {
-		return StatCollector.translateToLocal(this.getUnlocalizedName(var1) + ".name");
+	public String getItemStackDisplayName(ItemStack par1ItemStack) {
+		return StatCollector.translateToLocal(this.getUnlocalizedName(par1ItemStack) + ".name");
 	}
 
-	public int getColorFromItemStack(ItemStack var1, int var2) {
+	public int getColorFromItemStack(ItemStack par1ItemStack, int par2) {
 		return 16777215;
 	}
 
-	public void onUpdate(ItemStack var1, World var2, Entity var3, int var4, boolean var5) {
-	}
-
-	public void onCreated(ItemStack var1, World var2, EntityPlayer var3) {
-	}
-
+	/**
+	 * Called each tick as long the item is on a player inventory. Uses by maps to check if is on a player hand and update
+	 * it's contents.
+	 */
+	public void onUpdate(ItemStack par1ItemStack, World par2World, Entity par3Entity, int par4, boolean par5) {}
+
+	/**
+	 * Called when item is crafted/smelted. Used only by maps so far.
+	 */
+	public void onCreated(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {}
+
+	/**
+	 * false for all Items except sub-classes of ItemMapBase
+	 */
 	public boolean isMap() {
 		return false;
 	}
 
-	public EnumAction getItemUseAction(ItemStack var1) {
+	/**
+	 * returns the action that specifies what animation to play when the items is being used
+	 */
+	public EnumAction getItemUseAction(ItemStack par1ItemStack) {
 		return EnumAction.none;
 	}
 
-	public int getMaxItemUseDuration(ItemStack var1) {
+	/**
+	 * How long it takes to use or consume an item
+	 */
+	public int getMaxItemUseDuration(ItemStack par1ItemStack) {
 		return 0;
 	}
 
-	public void onPlayerStoppedUsing(ItemStack var1, World var2, EntityPlayer var3, int var4) {
-	}
+	/**
+	 * called when the player releases the use item button. Args: itemstack, world, entityplayer, itemInUseCount
+	 */
+	public void onPlayerStoppedUsing(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer, int par4) {}
 
-	protected Item setPotionEffect(String var1) {
-		this.d = var1;
+	/**
+	 * Sets the string representing this item's effect on a potion when used as an ingredient.
+	 */
+	protected Item setPotionEffect(String par1Str) {
+		this.potionEffect = par1Str;
 		return this;
 	}
 
+	/**
+	 * Returns a string representing what this item does to a potion.
+	 */
 	public String getPotionEffect() {
-		return this.d;
+		return this.potionEffect;
 	}
 
+	/**
+	 * Returns true if this item serves as a potion ingredient (its ingredient information is not null).
+	 */
 	public boolean isPotionIngredient() {
-		return this.d != null;
-	}
-
-	public void addInformation(ItemStack var1, EntityPlayer var2, List var3, boolean var4) {
-	}
-
-	public String getItemDisplayName(ItemStack var1) {
-		return ("" + StatCollector.translateToLocal(this.getUnlocalizedNameInefficiently(var1) + ".name")).trim();
-	}
-
-	public boolean hasEffect(ItemStack var1) {
-		return var1.isItemEnchanted();
-	}
-
-	public EnumRarity getRarity(ItemStack var1) {
-		return var1.isItemEnchanted() ? EnumRarity.rare : EnumRarity.common;
-	}
-
-	public boolean isItemTool(ItemStack var1) {
+		return this.potionEffect != null;
+	}
+
+	/**
+	 * allows items to add custom lines of information to the mouseover description
+	 */
+	public void addInformation(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, List par3List, boolean par4) {}
+
+	public String getItemDisplayName(ItemStack par1ItemStack) {
+		return ("" + StatCollector.translateToLocal(this.getUnlocalizedNameInefficiently(par1ItemStack) + ".name")).trim();
+	}
+
+	public boolean hasEffect(ItemStack par1ItemStack) {
+		return par1ItemStack.isItemEnchanted();
+	}
+
+	/**
+	 * Return an item rarity from EnumRarity
+	 */
+	public EnumRarity getRarity(ItemStack par1ItemStack) {
+		return par1ItemStack.isItemEnchanted() ? EnumRarity.rare : EnumRarity.common;
+	}
+
+	/**
+	 * Checks isDamagable and if it cannot be stacked
+	 */
+	public boolean isItemTool(ItemStack par1ItemStack) {
 		return this.getItemStackLimit() == 1 && this.isDamageable();
 	}
 
-	protected MovingObjectPosition getMovingObjectPositionFromPlayer(World var1, EntityPlayer var2, boolean var3) {
+	protected MovingObjectPosition getMovingObjectPositionFromPlayer(World par1World, EntityPlayer par2EntityPlayer, boolean par3) {
 		float var4 = 1.0F;
-		float var5 = var2.prevRotationPitch + (var2.rotationPitch - var2.prevRotationPitch) * var4;
-		float var6 = var2.prevRotationYaw + (var2.rotationYaw - var2.prevRotationYaw) * var4;
-		double var7 = var2.prevPosX + (var2.posX - var2.prevPosX) * (double)var4;
-		double var9 = var2.prevPosY + (var2.posY - var2.prevPosY) * (double)var4 + 1.62D - (double)var2.yOffset;
-		double var11 = var2.prevPosZ + (var2.posZ - var2.prevPosZ) * (double)var4;
-		Vec3 var13 = var1.getWorldVec3Pool().getVecFromPool(var7, var9, var11);
-		float var14 = MathHelper.cos(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var15 = MathHelper.sin(-var6 * ((float)Math.PI / 180.0F) - (float)Math.PI);
-		float var16 = -MathHelper.cos(-var5 * ((float)Math.PI / 180.0F));
-		float var17 = MathHelper.sin(-var5 * ((float)Math.PI / 180.0F));
+		float var5 = par2EntityPlayer.prevRotationPitch + (par2EntityPlayer.rotationPitch - par2EntityPlayer.prevRotationPitch) * var4;
+		float var6 = par2EntityPlayer.prevRotationYaw + (par2EntityPlayer.rotationYaw - par2EntityPlayer.prevRotationYaw) * var4;
+		double var7 = par2EntityPlayer.prevPosX + (par2EntityPlayer.posX - par2EntityPlayer.prevPosX) * (double)var4;
+		double var9 = par2EntityPlayer.prevPosY + (par2EntityPlayer.posY - par2EntityPlayer.prevPosY) * (double)var4 + 1.62D - (double)par2EntityPlayer.yOffset;
+		double var11 = par2EntityPlayer.prevPosZ + (par2EntityPlayer.posZ - par2EntityPlayer.prevPosZ) * (double)var4;
+		Vec3 var13 = par1World.getWorldVec3Pool().getVecFromPool(var7, var9, var11);
+		float var14 = MathHelper.cos(-var6 * 0.017453292F - (float)Math.PI);
+		float var15 = MathHelper.sin(-var6 * 0.017453292F - (float)Math.PI);
+		float var16 = -MathHelper.cos(-var5 * 0.017453292F);
+		float var17 = MathHelper.sin(-var5 * 0.017453292F);
 		float var18 = var15 * var16;
 		float var20 = var14 * var16;
 		double var21 = 5.0D;
 		Vec3 var23 = var13.addVector((double)var18 * var21, (double)var17 * var21, (double)var20 * var21);
-		return var1.rayTraceBlocks(var13, var23, var3, !var3);
+		return par1World.rayTraceBlocks_do_do(var13, var23, par3, !par3);
 	}
 
+	/**
+	 * Return the enchantability factor of the item, most of the time is based on material.
+	 */
 	public int getItemEnchantability() {
 		return 0;
 	}
@@ -424,46 +577,71 @@
 		return false;
 	}
 
-	public Icon getIconFromDamageForRenderPass(int var1, int var2) {
-		return this.getIconFromDamage(var1);
-	}
-
-	public void getSubItems(int var1, CreativeTabs var2, List var3) {
-		var3.add(new ItemStack(var1, 1, 0));
-	}
-
+	/**
+	 * Gets an icon index based on an item's damage value and the given render pass
+	 */
+	public Icon getIconFromDamageForRenderPass(int par1, int par2) {
+		return this.getIconFromDamage(par1);
+	}
+
+	/**
+	 * returns a list of items with the same ID, but different meta (eg: dye returns 16 items)
+	 */
+	public void getSubItems(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		par3List.add(new ItemStack(par1, 1, 0));
+	}
+
+	/**
+	 * gets the CreativeTab this item is displayed on
+	 */
 	public CreativeTabs getCreativeTab() {
 		return this.tabToDisplayOn;
 	}
 
-	public Item setCreativeTab(CreativeTabs var1) {
-		this.tabToDisplayOn = var1;
+	/**
+	 * returns this;
+	 */
+	public Item setCreativeTab(CreativeTabs par1CreativeTabs) {
+		this.tabToDisplayOn = par1CreativeTabs;
 		return this;
 	}
 
+	/**
+	 * Returns true if players can use this item to affect the world (e.g. placing blocks, placing ender eyes in portal)
+	 * when not in creative
+	 */
 	public boolean canItemEditBlocks() {
 		return true;
 	}
 
-	public boolean getIsRepairable(ItemStack var1, ItemStack var2) {
+	/**
+	 * Return whether this item is repairable in an anvil.
+	 */
+	public boolean getIsRepairable(ItemStack par1ItemStack, ItemStack par2ItemStack) {
 		return false;
 	}
 
-	public void registerIcons(IconRegister var1) {
-		this.itemIcon = var1.registerIcon(this.getIconString());
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.itemIcon = par1IconRegister.registerIcon(this.getIconString());
 	}
 
+	/**
+	 * Gets a map of item attribute modifiers, used by ItemSword to increase hit damage.
+	 */
 	public Multimap getItemAttributeModifiers() {
 		return HashMultimap.create();
 	}
 
-	protected Item setTextureName(String var1) {
-		this.cA = var1;
+	protected Item setTextureName(String par1Str) {
+		this.iconString = par1Str;
 		return this;
 	}
 
+	/**
+	 * Returns the string associated with this Item's Icon.
+	 */
 	protected String getIconString() {
-		return this.cA == null ? "MISSING_ICON_ITEM_" + this.itemID + "_" + this.cB : this.cA;
+		return this.iconString == null ? "MISSING_ICON_ITEM_" + this.itemID + "_" + this.unlocalizedName : this.iconString;
 	}
 
 	static {
