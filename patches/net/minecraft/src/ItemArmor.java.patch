--- net/minecraft/src/ItemArmor.java
+++ net/minecraft/src/ItemArmor.java
@@ -1,35 +1,55 @@
 package net.minecraft.src;
 
+// MCPatcher Start
+import com.prupe.mcpatcher.cc.ColorizeEntity;
+// MCPatcher End
+
 public class ItemArmor extends Item {
-	private static final int[] maxDamageArray = new int[]{11, 16, 15, 13};
-	private static final String[] cC = new String[]{"leather_helmet_overlay", "leather_chestplate_overlay", "leather_leggings_overlay", "leather_boots_overlay"};
-	public static final String[] a = new String[]{"empty_armor_slot_helmet", "empty_armor_slot_chestplate", "empty_armor_slot_leggings", "empty_armor_slot_boots"};
+
+	/** Holds the 'base' maxDamage that each armorType have. */
+	private static final int[] maxDamageArray = new int[] {11, 16, 15, 13};
+	private static final String[] field_94606_cu = new String[] {"leather_helmet_overlay", "leather_chestplate_overlay", "leather_leggings_overlay", "leather_boots_overlay"};
+	public static final String[] field_94603_a = new String[] {"empty_armor_slot_helmet", "empty_armor_slot_chestplate", "empty_armor_slot_leggings", "empty_armor_slot_boots"};
 	private static final IBehaviorDispenseItem field_96605_cw = new BehaviorDispenseArmor();
+
+	/**
+	 * Stores the armor type: 0 is helmet, 1 is plate, 2 is legs and 3 is boots
+	 */
 	public final int armorType;
+
+	/** Holds the amount of damage that the armor reduces at full durability. */
 	public final int damageReduceAmount;
+
+	/**
+	 * Used on RenderPlayer to select the correspondent armor to be rendered on the player: 0 is cloth, 1 is chain, 2 is
+	 * iron, 3 is diamond and 4 is gold.
+	 */
 	public final int renderIndex;
+
+	/** The EnumArmorMaterial used for this ItemArmor */
 	private final EnumArmorMaterial material;
 	private Icon field_94605_cw;
 	private Icon field_94604_cx;
 
-	public ItemArmor(int var1, EnumArmorMaterial var2, int var3, int var4) {
-		super(var1);
-		this.material = var2;
-		this.armorType = var4;
-		this.renderIndex = var3;
-		this.damageReduceAmount = var2.getDamageReductionAmount(var4);
-		this.setMaxDamage(var2.getDurability(var4));
+	public ItemArmor(int par1, EnumArmorMaterial par2EnumArmorMaterial, int par3, int par4) {
+		super(par1);
+		this.material = par2EnumArmorMaterial;
+		this.armorType = par4;
+		this.renderIndex = par3;
+		this.damageReduceAmount = par2EnumArmorMaterial.getDamageReductionAmount(par4);
+		this.setMaxDamage(par2EnumArmorMaterial.getDurability(par4));
 		this.maxStackSize = 1;
 		this.setCreativeTab(CreativeTabs.tabCombat);
 		BlockDispenser.dispenseBehaviorRegistry.putObject(this, field_96605_cw);
 	}
 
-	public int getColorFromItemStack(ItemStack var1, int var2) {
-		if(var2 > 0) {
+	public int getColorFromItemStack(ItemStack par1ItemStack, int par2) {
+		if (par2 > 0) {
 			return 16777215;
 		} else {
-			int var3 = this.getColor(var1);
-			if(var3 < 0) {
+			int var3 = this.getColor(par1ItemStack);
+
+			if (var3 < 0) {
 				var3 = 16777215;
 			}
 
@@ -41,107 +61,149 @@
 		return this.material == EnumArmorMaterial.CLOTH;
 	}
 
+	/**
+	 * Return the enchantability factor of the item, most of the time is based on material.
+	 */
 	public int getItemEnchantability() {
 		return this.material.getEnchantability();
 	}
 
+	/**
+	 * Return the armor material for this armor item.
+	 */
 	public EnumArmorMaterial getArmorMaterial() {
 		return this.material;
 	}
 
-	public boolean hasColor(ItemStack var1) {
-		return this.material != EnumArmorMaterial.CLOTH ? false : (!var1.hasTagCompound() ? false : (!var1.getTagCompound().hasKey("display") ? false : var1.getTagCompound().getCompoundTag("display").hasKey("color")));
+	/**
+	 * Return whether the specified armor ItemStack has a color.
+	 */
+	public boolean hasColor(ItemStack par1ItemStack) {
+		return this.material != EnumArmorMaterial.CLOTH ? false : (!par1ItemStack.hasTagCompound() ? false : (!par1ItemStack.getTagCompound().hasKey("display") ? false : par1ItemStack.getTagCompound().getCompoundTag("display").hasKey("color")));
 	}
 
-	public int getColor(ItemStack var1) {
-		if(this.material != EnumArmorMaterial.CLOTH) {
+	/**
+	 * Return the color for the specified armor ItemStack.
+	 */
+	public int getColor(ItemStack par1ItemStack) {
+		if (this.material != EnumArmorMaterial.CLOTH) {
 			return -1;
 		} else {
-			NBTTagCompound var2 = var1.getTagCompound();
-			if(var2 == null) {
-				return 10511680;
+			NBTTagCompound var2 = par1ItemStack.getTagCompound();
+
+			if (var2 == null) {
+				// MCPatcher Start
+				return ColorizeEntity.undyedLeatherColor;
+				// MCPatcher End
 			} else {
 				NBTTagCompound var3 = var2.getCompoundTag("display");
-				return var3 == null ? 10511680 : (var3.hasKey("color") ? var3.getInteger("color") : 10511680);
+				// MCPatcher Start
+				return var3 == null ? ColorizeEntity.undyedLeatherColor : (var3.hasKey("color") ? var3.getInteger("color") : ColorizeEntity.undyedLeatherColor);
+				// MCPatcher End
 			}
 		}
 	}
 
-	public Icon getIconFromDamageForRenderPass(int var1, int var2) {
-		return var2 == 1 ? this.field_94605_cw : super.getIconFromDamageForRenderPass(var1, var2);
+	/**
+	 * Gets an icon index based on an item's damage value and the given render pass
+	 */
+	public Icon getIconFromDamageForRenderPass(int par1, int par2) {
+		return par2 == 1 ? this.field_94605_cw : super.getIconFromDamageForRenderPass(par1, par2);
 	}
 
-	public void removeColor(ItemStack var1) {
-		if(this.material == EnumArmorMaterial.CLOTH) {
-			NBTTagCompound var2 = var1.getTagCompound();
-			if(var2 != null) {
+	/**
+	 * Remove the color from the specified armor ItemStack.
+	 */
+	public void removeColor(ItemStack par1ItemStack) {
+		if (this.material == EnumArmorMaterial.CLOTH) {
+			NBTTagCompound var2 = par1ItemStack.getTagCompound();
+
+			if (var2 != null) {
 				NBTTagCompound var3 = var2.getCompoundTag("display");
-				if(var3.hasKey("color")) {
+
+				if (var3.hasKey("color")) {
 					var3.removeTag("color");
 				}
-
 			}
 		}
 	}
 
-	public void func_82813_b(ItemStack var1, int var2) {
-		if(this.material != EnumArmorMaterial.CLOTH) {
+	public void func_82813_b(ItemStack par1ItemStack, int par2) {
+		if (this.material != EnumArmorMaterial.CLOTH) {
 			throw new UnsupportedOperationException("Can\'t dye non-leather!");
 		} else {
-			NBTTagCompound var3 = var1.getTagCompound();
-			if(var3 == null) {
+			NBTTagCompound var3 = par1ItemStack.getTagCompound();
+
+			if (var3 == null) {
 				var3 = new NBTTagCompound();
-				var1.setTagCompound(var3);
+				par1ItemStack.setTagCompound(var3);
 			}
 
 			NBTTagCompound var4 = var3.getCompoundTag("display");
-			if(!var3.hasKey("display")) {
+
+			if (!var3.hasKey("display")) {
 				var3.setCompoundTag("display", var4);
 			}
 
-			var4.setInteger("color", var2);
-		}
-	}
-
-	public boolean getIsRepairable(ItemStack var1, ItemStack var2) {
-		return this.material.getArmorCraftingMaterial() == var2.itemID ? true : super.getIsRepairable(var1, var2);
-	}
-
-	public void registerIcons(IconRegister var1) {
-		super.registerIcons(var1);
-		if(this.material == EnumArmorMaterial.CLOTH) {
-			this.field_94605_cw = var1.registerIcon(cC[this.armorType]);
-		}
-
-		this.field_94604_cx = var1.registerIcon(a[this.armorType]);
-	}
-
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		int var4 = EntityLiving.getArmorPosition(var1) - 1;
-		ItemStack var5 = var3.getCurrentArmor(var4);
-		if(var5 == null) {
-			var3.setCurrentItemOrArmor(var4, var1.copy());
-			var1.stackSize = 0;
-		}
-
-		return var1;
-	}
-
-	public static Icon func_94602_b(int var0) {
-		switch(var0) {
-		case 0:
-			return Item.helmetDiamond.field_94604_cx;
-		case 1:
-			return Item.plateDiamond.field_94604_cx;
-		case 2:
-			return Item.legsDiamond.field_94604_cx;
-		case 3:
-			return Item.bootsDiamond.field_94604_cx;
-		default:
-			return null;
-		}
-	}
-
+			var4.setInteger("color", par2);
+		}
+	}
+
+	/**
+	 * Return whether this item is repairable in an anvil.
+	 */
+	public boolean getIsRepairable(ItemStack par1ItemStack, ItemStack par2ItemStack) {
+		return this.material.getArmorCraftingMaterial() == par2ItemStack.itemID ? true : super.getIsRepairable(par1ItemStack, par2ItemStack);
+	}
+
+	public void registerIcons(IconRegister par1IconRegister) {
+		super.registerIcons(par1IconRegister);
+
+		if (this.material == EnumArmorMaterial.CLOTH) {
+			this.field_94605_cw = par1IconRegister.registerIcon(field_94606_cu[this.armorType]);
+		}
+
+		this.field_94604_cx = par1IconRegister.registerIcon(field_94603_a[this.armorType]);
+	}
+
+	/**
+	 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+	 */
+	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		int var4 = EntityLiving.getArmorPosition(par1ItemStack) - 1;
+		ItemStack var5 = par3EntityPlayer.getCurrentArmor(var4);
+
+		if (var5 == null) {
+			par3EntityPlayer.setCurrentItemOrArmor(var4, par1ItemStack.copy());
+			par1ItemStack.stackSize = 0;
+		}
+
+		return par1ItemStack;
+	}
+
+	public static Icon func_94602_b(int par0) {
+		switch (par0) {
+			case 0:
+				return Item.helmetDiamond.field_94604_cx;
+
+			case 1:
+				return Item.plateDiamond.field_94604_cx;
+
+			case 2:
+				return Item.legsDiamond.field_94604_cx;
+
+			case 3:
+				return Item.bootsDiamond.field_94604_cx;
+
+			default:
+				return null;
+		}
+	}
+
+	/**
+	 * Returns the 'max damage' factor array for the armor, each piece of armor have a durability factor (that gets
+	 * multiplied by armor material factor)
+	 */
 	static int[] getMaxDamageArray() {
 		return maxDamageArray;
 	}
