--- net/minecraft/src/ItemBow.java
+++ net/minecraft/src/ItemBow.java
@@ -1,99 +1,121 @@
 package net.minecraft.src;
 
 public class ItemBow extends Item {
-	public static final String[] a = new String[]{"pulling_0", "pulling_1", "pulling_2"};
+	public static final String[] bowPullIconNameArray = new String[] {"pulling_0", "pulling_1", "pulling_2"};
 	private Icon[] iconArray;
 
-	public ItemBow(int var1) {
-		super(var1);
+	public ItemBow(int par1) {
+		super(par1);
 		this.maxStackSize = 1;
 		this.setMaxDamage(384);
 		this.setCreativeTab(CreativeTabs.tabCombat);
 	}
 
-	public void onPlayerStoppedUsing(ItemStack var1, World var2, EntityPlayer var3, int var4) {
-		boolean var5 = var3.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, var1) > 0;
-		if(var5 || var3.inventory.hasItem(Item.arrow.itemID)) {
-			int var6 = this.getMaxItemUseDuration(var1) - var4;
+	/**
+	 * called when the player releases the use item button. Args: itemstack, world, entityplayer, itemInUseCount
+	 */
+	public void onPlayerStoppedUsing(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer, int par4) {
+		boolean var5 = par3EntityPlayer.capabilities.isCreativeMode || EnchantmentHelper.getEnchantmentLevel(Enchantment.infinity.effectId, par1ItemStack) > 0;
+
+		if (var5 || par3EntityPlayer.inventory.hasItem(Item.arrow.itemID)) {
+			int var6 = this.getMaxItemUseDuration(par1ItemStack) - par4;
 			float var7 = (float)var6 / 20.0F;
 			var7 = (var7 * var7 + var7 * 2.0F) / 3.0F;
-			if((double)var7 < 0.1D) {
+
+			if ((double)var7 < 0.1D) {
 				return;
 			}
 
-			if(var7 > 1.0F) {
+			if (var7 > 1.0F) {
 				var7 = 1.0F;
 			}
 
-			EntityArrow var8 = new EntityArrow(var2, var3, var7 * 2.0F);
-			if(var7 == 1.0F) {
+			EntityArrow var8 = new EntityArrow(par2World, par3EntityPlayer, var7 * 2.0F);
+
+			if (var7 == 1.0F) {
 				var8.setIsCritical(true);
 			}
 
-			int var9 = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, var1);
-			if(var9 > 0) {
+			int var9 = EnchantmentHelper.getEnchantmentLevel(Enchantment.power.effectId, par1ItemStack);
+
+			if (var9 > 0) {
 				var8.setDamage(var8.getDamage() + (double)var9 * 0.5D + 0.5D);
 			}
 
-			int var10 = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, var1);
-			if(var10 > 0) {
+			int var10 = EnchantmentHelper.getEnchantmentLevel(Enchantment.punch.effectId, par1ItemStack);
+
+			if (var10 > 0) {
 				var8.setKnockbackStrength(var10);
 			}
 
-			if(EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, var1) > 0) {
+			if (EnchantmentHelper.getEnchantmentLevel(Enchantment.flame.effectId, par1ItemStack) > 0) {
 				var8.setFire(100);
 			}
 
-			var1.damageItem(1, var3);
-			var2.playSoundAtEntity(var3, "random.bow", 1.0F, 1.0F / (f.nextFloat() * 0.4F + 1.2F) + var7 * 0.5F);
-			if(var5) {
+			par1ItemStack.damageItem(1, par3EntityPlayer);
+			par2World.playSoundAtEntity(par3EntityPlayer, "random.bow", 1.0F, 1.0F / (itemRand.nextFloat() * 0.4F + 1.2F) + var7 * 0.5F);
+
+			if (var5) {
 				var8.canBePickedUp = 2;
 			} else {
-				var3.inventory.consumeInventoryItem(Item.arrow.itemID);
+				par3EntityPlayer.inventory.consumeInventoryItem(Item.arrow.itemID);
 			}
 
-			if(!var2.isRemote) {
-				var2.spawnEntityInWorld(var8);
+			if (!par2World.isRemote) {
+				par2World.spawnEntityInWorld(var8);
 			}
 		}
-
-	}
-
-	public ItemStack onEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		return var1;
-	}
-
-	public int getMaxItemUseDuration(ItemStack var1) {
+	}
+
+	public ItemStack onEaten(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		return par1ItemStack;
+	}
+
+	/**
+	 * How long it takes to use or consume an item
+	 */
+	public int getMaxItemUseDuration(ItemStack par1ItemStack) {
 		return 72000;
 	}
 
-	public EnumAction getItemUseAction(ItemStack var1) {
+	/**
+	 * returns the action that specifies what animation to play when the items is being used
+	 */
+	public EnumAction getItemUseAction(ItemStack par1ItemStack) {
 		return EnumAction.bow;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.capabilities.isCreativeMode || var3.inventory.hasItem(Item.arrow.itemID)) {
-			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+	/**
+	 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+	 */
+	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		if (par3EntityPlayer.capabilities.isCreativeMode || par3EntityPlayer.inventory.hasItem(Item.arrow.itemID)) {
+			par3EntityPlayer.setItemInUse(par1ItemStack, this.getMaxItemUseDuration(par1ItemStack));
 		}
 
-		return var1;
+		return par1ItemStack;
 	}
 
+	/**
+	 * Return the enchantability factor of the item, most of the time is based on material.
+	 */
 	public int getItemEnchantability() {
 		return 1;
 	}
 
-	public void registerIcons(IconRegister var1) {
-		this.itemIcon = var1.registerIcon(this.getIconString() + "_standby");
-		this.iconArray = new Icon[a.length];
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.itemIcon = par1IconRegister.registerIcon(this.getIconString() + "_standby");
+		this.iconArray = new Icon[bowPullIconNameArray.length];
 
-		for(int var2 = 0; var2 < this.iconArray.length; ++var2) {
-			this.iconArray[var2] = var1.registerIcon(this.getIconString() + "_" + a[var2]);
+		for (int var2 = 0; var2 < this.iconArray.length; ++var2) {
+			this.iconArray[var2] = par1IconRegister.registerIcon(this.getIconString() + "_" + bowPullIconNameArray[var2]);
 		}
-
 	}
 
-	public Icon getItemIconForUseDuration(int var1) {
-		return this.iconArray[var1];
+	/**
+	 * used to cycle through icons based on their used duration, i.e. for the bow
+	 */
+	public Icon getItemIconForUseDuration(int par1) {
+		return this.iconArray[par1];
 	}
 }
