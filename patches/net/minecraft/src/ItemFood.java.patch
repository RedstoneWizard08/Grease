--- net/minecraft/src/ItemFood.java
+++ net/minecraft/src/ItemFood.java
@@ -1,80 +1,121 @@
 package net.minecraft.src;
 
 public class ItemFood extends Item {
+
+	/** Number of ticks to run while 'EnumAction'ing until result. */
 	public final int itemUseDuration;
+
+	/** The amount this food item heals the player. */
 	private final int healAmount;
 	private final float saturationModifier;
+
+	/** Whether wolves like this food (true for raw and cooked porkchop). */
 	private final boolean isWolfsFavoriteMeat;
+
+	/**
+	 * If this field is true, the food can be consumed even if the player don't need to eat.
+	 */
 	private boolean alwaysEdible;
+
+	/**
+	 * represents the potion effect that will occurr upon eating this food. Set by setPotionEffect
+	 */
 	private int potionId;
+
+	/** set by setPotionEffect */
 	private int potionDuration;
+
+	/** set by setPotionEffect */
 	private int potionAmplifier;
+
+	/** probably of the set potion effect occurring */
 	private float potionEffectProbability;
 
-	public ItemFood(int var1, int var2, float var3, boolean var4) {
-		super(var1);
+	public ItemFood(int par1, int par2, float par3, boolean par4) {
+		super(par1);
 		this.itemUseDuration = 32;
-		this.healAmount = var2;
-		this.isWolfsFavoriteMeat = var4;
-		this.saturationModifier = var3;
+		this.healAmount = par2;
+		this.isWolfsFavoriteMeat = par4;
+		this.saturationModifier = par3;
 		this.setCreativeTab(CreativeTabs.tabFood);
 	}
 
-	public ItemFood(int var1, int var2, boolean var3) {
-		this(var1, var2, 0.6F, var3);
-	}
-
-	public ItemStack onEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		--var1.stackSize;
-		var3.getFoodStats().addStats(this);
-		var2.playSoundAtEntity(var3, "random.burp", 0.5F, var2.s.nextFloat() * 0.1F + 0.9F);
-		this.onFoodEaten(var1, var2, var3);
-		return var1;
-	}
-
-	protected void onFoodEaten(ItemStack var1, World var2, EntityPlayer var3) {
-		if(!var2.isRemote && this.potionId > 0 && var2.s.nextFloat() < this.potionEffectProbability) {
-			var3.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
+	public ItemFood(int par1, int par2, boolean par3) {
+		this(par1, par2, 0.6F, par3);
+	}
+
+	public ItemStack onEaten(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		--par1ItemStack.stackSize;
+		par3EntityPlayer.getFoodStats().addStats(this);
+		par2World.playSoundAtEntity(par3EntityPlayer, "random.burp", 0.5F, par2World.rand.nextFloat() * 0.1F + 0.9F);
+		this.onFoodEaten(par1ItemStack, par2World, par3EntityPlayer);
+		return par1ItemStack;
+	}
+
+	protected void onFoodEaten(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		if (!par2World.isRemote && this.potionId > 0 && par2World.rand.nextFloat() < this.potionEffectProbability) {
+			par3EntityPlayer.addPotionEffect(new PotionEffect(this.potionId, this.potionDuration * 20, this.potionAmplifier));
 		}
-
 	}
 
-	public int getMaxItemUseDuration(ItemStack var1) {
+	/**
+	 * How long it takes to use or consume an item
+	 */
+	public int getMaxItemUseDuration(ItemStack par1ItemStack) {
 		return 32;
 	}
 
-	public EnumAction getItemUseAction(ItemStack var1) {
+	/**
+	 * returns the action that specifies what animation to play when the items is being used
+	 */
+	public EnumAction getItemUseAction(ItemStack par1ItemStack) {
 		return EnumAction.eat;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		if(var3.canEat(this.alwaysEdible)) {
-			var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
+	/**
+	 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+	 */
+	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		if (par3EntityPlayer.canEat(this.alwaysEdible)) {
+			par3EntityPlayer.setItemInUse(par1ItemStack, this.getMaxItemUseDuration(par1ItemStack));
 		}
 
-		return var1;
+		return par1ItemStack;
 	}
 
 	public int getHealAmount() {
 		return this.healAmount;
 	}
 
+	/**
+	 * gets the saturationModifier of the ItemFood
+	 */
 	public float getSaturationModifier() {
 		return this.saturationModifier;
 	}
 
+	/**
+	 * Whether wolves like this food (true for raw and cooked porkchop).
+	 */
 	public boolean isWolfsFavoriteMeat() {
 		return this.isWolfsFavoriteMeat;
 	}
 
-	public ItemFood setPotionEffect(int var1, int var2, int var3, float var4) {
-		this.potionId = var1;
-		this.potionDuration = var2;
-		this.potionAmplifier = var3;
-		this.potionEffectProbability = var4;
+	/**
+	 * sets a potion effect on the item. Args: int potionId, int duration (will be multiplied by 20), int amplifier, float
+	 * probability of effect happening
+	 */
+	public ItemFood setPotionEffect(int par1, int par2, int par3, float par4) {
+		this.potionId = par1;
+		this.potionDuration = par2;
+		this.potionAmplifier = par3;
+		this.potionEffectProbability = par4;
 		return this;
 	}
 
+	/**
+	 * Set the field 'alwaysEdible' to true, and make the food edible even if the player don't need to eat.
+	 */
 	public ItemFood setAlwaysEdible() {
 		this.alwaysEdible = true;
 		return this;
