--- net/minecraft/src/ItemInWorldManager.java
+++ net/minecraft/src/ItemInWorldManager.java
@@ -1,29 +1,42 @@
 package net.minecraft.src;
 
 public class ItemInWorldManager {
+
+	/** The world object that this object is connected to. */
 	public World theWorld;
+
+	/** The EntityPlayerMP object that this object is connected to. */
 	public EntityPlayerMP thisPlayerMP;
-	private EnumGameType gameType = EnumGameType.NOT_SET;
+	private EnumGameType gameType;
+
+	/** True if the player is destroying a block */
 	private boolean isDestroyingBlock;
 	private int initialDamage;
-	private int curBlockX;
-	private int curBlockY;
-	private int curBlockZ;
+	private int partiallyDestroyedBlockX;
+	private int partiallyDestroyedBlockY;
+	private int partiallyDestroyedBlockZ;
 	private int curblockDamage;
+
+	/**
+	 * Set to true when the "finished destroying block" packet is received but the block wasn't fully damaged yet. The
+	 * block will not be destroyed while this is false.
+	 */
 	private boolean receivedFinishDiggingPacket;
 	private int posX;
 	private int posY;
 	private int posZ;
 	private int field_73093_n;
-	private int durabilityRemainingOnBlock = -1;
+	private int durabilityRemainingOnBlock;
 
-	public ItemInWorldManager(World var1) {
-		this.theWorld = var1;
+	public ItemInWorldManager(World par1World) {
+		this.gameType = EnumGameType.NOT_SET;
+		this.durabilityRemainingOnBlock = -1;
+		this.theWorld = par1World;
 	}
 
-	public void setGameType(EnumGameType var1) {
-		this.gameType = var1;
-		var1.configurePlayerCapabilities(this.thisPlayerMP.capabilities);
+	public void setGameType(EnumGameType par1EnumGameType) {
+		this.gameType = par1EnumGameType;
+		par1EnumGameType.configurePlayerCapabilities(this.thisPlayerMP.capabilities);
 		this.thisPlayerMP.sendPlayerAbilities();
 	}
 
@@ -31,13 +44,19 @@
 		return this.gameType;
 	}
 
+	/**
+	 * Get if we are in creative game mode.
+	 */
 	public boolean isCreative() {
 		return this.gameType.isCreative();
 	}
 
-	public void initializeGameType(EnumGameType var1) {
-		if(this.gameType == EnumGameType.NOT_SET) {
-			this.gameType = var1;
+	/**
+	 * if the gameType is currently NOT_SET then change it to par1
+	 */
+	public void initializeGameType(EnumGameType par1EnumGameType) {
+		if (this.gameType == EnumGameType.NOT_SET) {
+			this.gameType = par1EnumGameType;
 		}
 
 		this.setGameType(this.gameType);
@@ -48,146 +67,182 @@
 		int var1;
 		float var4;
 		int var5;
-		if(this.receivedFinishDiggingPacket) {
+
+		if (this.receivedFinishDiggingPacket) {
 			var1 = this.curblockDamage - this.field_73093_n;
 			int var2 = this.theWorld.getBlockId(this.posX, this.posY, this.posZ);
-			if(var2 == 0) {
+
+			if (var2 == 0) {
 				this.receivedFinishDiggingPacket = false;
 			} else {
 				Block var3 = Block.blocksList[var2];
-				var4 = var3.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.posX, this.posY, this.posZ) * (float)(var1 + 1);
+				// Spout Start
+				var4 = var3.getPlayerRelativeBlockHardness(this.thisPlayerMP) * (float)(var1 + 1);
+				// Spout End
 				var5 = (int)(var4 * 10.0F);
-				if(var5 != this.durabilityRemainingOnBlock) {
+
+				if (var5 != this.durabilityRemainingOnBlock) {
 					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.posX, this.posY, this.posZ, var5);
 					this.durabilityRemainingOnBlock = var5;
 				}
 
-				if(var4 >= 1.0F) {
+				if (var4 >= 1.0F) {
 					this.receivedFinishDiggingPacket = false;
 					this.tryHarvestBlock(this.posX, this.posY, this.posZ);
 				}
 			}
-		} else if(this.isDestroyingBlock) {
-			var1 = this.theWorld.getBlockId(this.curBlockX, this.curBlockY, this.curBlockZ);
+		} else if (this.isDestroyingBlock) {
+			var1 = this.theWorld.getBlockId(this.partiallyDestroyedBlockX, this.partiallyDestroyedBlockY, this.partiallyDestroyedBlockZ);
 			Block var6 = Block.blocksList[var1];
-			if(var6 == null) {
-				this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, -1);
+
+			if (var6 == null) {
+				this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.partiallyDestroyedBlockX, this.partiallyDestroyedBlockY, this.partiallyDestroyedBlockZ, -1);
 				this.durabilityRemainingOnBlock = -1;
 				this.isDestroyingBlock = false;
 			} else {
 				int var7 = this.curblockDamage - this.initialDamage;
-				var4 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, this.curBlockX, this.curBlockY, this.curBlockZ) * (float)(var7 + 1);
+				// Spout Start
+				var4 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP) * (float)(var7 + 1);
+				// Spout End
 				var5 = (int)(var4 * 10.0F);
-				if(var5 != this.durabilityRemainingOnBlock) {
-					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, var5);
+
+				if (var5 != this.durabilityRemainingOnBlock) {
+					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.partiallyDestroyedBlockX, this.partiallyDestroyedBlockY, this.partiallyDestroyedBlockZ, var5);
 					this.durabilityRemainingOnBlock = var5;
 				}
 			}
 		}
-
 	}
 
-	public void onBlockClicked(int var1, int var2, int var3, int var4) {
-		if(!this.gameType.isAdventure() || this.thisPlayerMP.isCurrentToolAdventureModeExempt(var1, var2, var3)) {
-			if(this.isCreative()) {
-				if(!this.theWorld.extinguishFire((EntityPlayer)null, var1, var2, var3, var4)) {
-					this.tryHarvestBlock(var1, var2, var3);
+	/**
+	 * if not creative, it calls destroyBlockInWorldPartially untill the block is broken first. par4 is the specific side.
+	 * tryHarvestBlock can also be the result of this call
+	 */
+	public void onBlockClicked(int par1, int par2, int par3, int par4) {
+		if (!this.gameType.isAdventure() || this.thisPlayerMP.isCurrentToolAdventureModeExempt(par1, par2, par3)) {
+			if (this.isCreative()) {
+				if (!this.theWorld.extinguishFire((EntityPlayer)null, par1, par2, par3, par4)) {
+					this.tryHarvestBlock(par1, par2, par3);
 				}
-
 			} else {
-				this.theWorld.extinguishFire((EntityPlayer)null, var1, var2, var3, var4);
+				this.theWorld.extinguishFire((EntityPlayer)null, par1, par2, par3, par4);
 				this.initialDamage = this.curblockDamage;
 				float var5 = 1.0F;
-				int var6 = this.theWorld.getBlockId(var1, var2, var3);
-				if(var6 > 0) {
-					Block.blocksList[var6].onBlockClicked(this.theWorld, var1, var2, var3, this.thisPlayerMP);
-					var5 = Block.blocksList[var6].getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, var1, var2, var3);
+				int var6 = this.theWorld.getBlockId(par1, par2, par3);
+
+				if (var6 > 0) {
+					Block.blocksList[var6].onBlockClicked(this.theWorld, par1, par2, par3, this.thisPlayerMP);
+					// Spout Start
+					var5 = Block.blocksList[var6].getPlayerRelativeBlockHardness(this.thisPlayerMP);
+					// Spout End
 				}
 
-				if(var6 > 0 && var5 >= 1.0F) {
-					this.tryHarvestBlock(var1, var2, var3);
+				if (var6 > 0 && var5 >= 1.0F) {
+					this.tryHarvestBlock(par1, par2, par3);
 				} else {
 					this.isDestroyingBlock = true;
-					this.curBlockX = var1;
-					this.curBlockY = var2;
-					this.curBlockZ = var3;
+					this.partiallyDestroyedBlockX = par1;
+					this.partiallyDestroyedBlockY = par2;
+					this.partiallyDestroyedBlockZ = par3;
 					int var7 = (int)(var5 * 10.0F);
-					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, var1, var2, var3, var7);
+					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, par1, par2, par3, var7);
 					this.durabilityRemainingOnBlock = var7;
 				}
-
 			}
 		}
 	}
 
-	public void blockRemoving(int var1, int var2, int var3) {
-		if(var1 == this.curBlockX && var2 == this.curBlockY && var3 == this.curBlockZ) {
+	public void uncheckedTryHarvestBlock(int par1, int par2, int par3) {
+		if (par1 == this.partiallyDestroyedBlockX && par2 == this.partiallyDestroyedBlockY && par3 == this.partiallyDestroyedBlockZ) {
 			int var4 = this.curblockDamage - this.initialDamage;
-			int var5 = this.theWorld.getBlockId(var1, var2, var3);
-			if(var5 != 0) {
+			int var5 = this.theWorld.getBlockId(par1, par2, par3);
+
+			if (var5 != 0) {
 				Block var6 = Block.blocksList[var5];
-				float var7 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP, this.thisPlayerMP.worldObj, var1, var2, var3) * (float)(var4 + 1);
-				if(var7 >= 0.7F) {
+				// Spout Start
+				float var7 = var6.getPlayerRelativeBlockHardness(this.thisPlayerMP) * (float)(var4 + 1);
+				// Spout End
+
+				if (var7 >= 0.7F) {
 					this.isDestroyingBlock = false;
-					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, var1, var2, var3, -1);
-					this.tryHarvestBlock(var1, var2, var3);
-				} else if(!this.receivedFinishDiggingPacket) {
+					this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, par1, par2, par3, -1);
+					this.tryHarvestBlock(par1, par2, par3);
+				} else if (!this.receivedFinishDiggingPacket) {
 					this.isDestroyingBlock = false;
 					this.receivedFinishDiggingPacket = true;
-					this.posX = var1;
-					this.posY = var2;
-					this.posZ = var3;
+					this.posX = par1;
+					this.posY = par2;
+					this.posZ = par3;
 					this.field_73093_n = this.initialDamage;
 				}
 			}
 		}
-
-	}
-
-	public void cancelDestroyingBlock(int var1, int var2, int var3) {
+	}
+
+	// Spout Start - Hack for MCP field mapping changes
+	public void destroyBlockInWorldPartially(int var1, int var2, int var3) {
+		cancelDestroyingBlock(var1, var2, var3);
+	}
+	// Spout End
+
+	/**
+	 * note: this ignores the pars passed in and continues to destroy the onClickedBlock
+	 */
+	public void cancelDestroyingBlock(int par1, int par2, int par3) {
 		this.isDestroyingBlock = false;
-		this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.curBlockX, this.curBlockY, this.curBlockZ, -1);
+		this.theWorld.destroyBlockInWorldPartially(this.thisPlayerMP.entityId, this.partiallyDestroyedBlockX, this.partiallyDestroyedBlockY, this.partiallyDestroyedBlockZ, -1);
 	}
 
-	private boolean removeBlock(int var1, int var2, int var3) {
-		Block var4 = Block.blocksList[this.theWorld.getBlockId(var1, var2, var3)];
-		int var5 = this.theWorld.getBlockMetadata(var1, var2, var3);
-		if(var4 != null) {
-			var4.onBlockHarvested(this.theWorld, var1, var2, var3, var5, this.thisPlayerMP);
+	/**
+	 * Removes a block and triggers the appropriate events
+	 */
+	private boolean removeBlock(int par1, int par2, int par3) {
+		Block var4 = Block.blocksList[this.theWorld.getBlockId(par1, par2, par3)];
+		int var5 = this.theWorld.getBlockMetadata(par1, par2, par3);
+
+		if (var4 != null) {
+			var4.onBlockHarvested(this.theWorld, par1, par2, par3, var5, this.thisPlayerMP);
 		}
 
-		boolean var6 = this.theWorld.setBlockToAir(var1, var2, var3);
-		if(var4 != null && var6) {
-			var4.onBlockDestroyedByPlayer(this.theWorld, var1, var2, var3, var5);
+		boolean var6 = this.theWorld.setBlockToAir(par1, par2, par3);
+
+		if (var4 != null && var6) {
+			var4.onBlockDestroyedByPlayer(this.theWorld, par1, par2, par3, var5);
 		}
 
 		return var6;
 	}
 
-	public boolean tryHarvestBlock(int var1, int var2, int var3) {
-		if(this.gameType.isAdventure() && !this.thisPlayerMP.isCurrentToolAdventureModeExempt(var1, var2, var3)) {
+	/**
+	 * Attempts to harvest a block at the given coordinate
+	 */
+	public boolean tryHarvestBlock(int par1, int par2, int par3) {
+		if (this.gameType.isAdventure() && !this.thisPlayerMP.isCurrentToolAdventureModeExempt(par1, par2, par3)) {
 			return false;
-		} else if(this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword) {
+		} else if (this.gameType.isCreative() && this.thisPlayerMP.getHeldItem() != null && this.thisPlayerMP.getHeldItem().getItem() instanceof ItemSword) {
 			return false;
 		} else {
-			int var4 = this.theWorld.getBlockId(var1, var2, var3);
-			int var5 = this.theWorld.getBlockMetadata(var1, var2, var3);
-			this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, var1, var2, var3, var4 + (this.theWorld.getBlockMetadata(var1, var2, var3) << 12));
-			boolean var6 = this.removeBlock(var1, var2, var3);
-			if(this.isCreative()) {
-				this.thisPlayerMP.playerNetServerHandler.sendPacket(new Packet53BlockChange(var1, var2, var3, this.theWorld));
+			int var4 = this.theWorld.getBlockId(par1, par2, par3);
+			int var5 = this.theWorld.getBlockMetadata(par1, par2, par3);
+			this.theWorld.playAuxSFXAtEntity(this.thisPlayerMP, 2001, par1, par2, par3, var4 + (this.theWorld.getBlockMetadata(par1, par2, par3) << 12));
+			boolean var6 = this.removeBlock(par1, par2, par3);
+
+			if (this.isCreative()) {
+				this.thisPlayerMP.playerNetServerHandler.sendPacketToPlayer(new Packet53BlockChange(par1, par2, par3, this.theWorld));
 			} else {
 				ItemStack var7 = this.thisPlayerMP.getCurrentEquippedItem();
 				boolean var8 = this.thisPlayerMP.canHarvestBlock(Block.blocksList[var4]);
-				if(var7 != null) {
-					var7.onBlockDestroyed(this.theWorld, var4, var1, var2, var3, this.thisPlayerMP);
-					if(var7.stackSize == 0) {
+
+				if (var7 != null) {
+					var7.onBlockDestroyed(this.theWorld, var4, par1, par2, par3, this.thisPlayerMP);
+
+					if (var7.stackSize == 0) {
 						this.thisPlayerMP.destroyCurrentEquippedItem();
 					}
 				}
 
-				if(var6 && var8) {
-					Block.blocksList[var4].harvestBlock(this.theWorld, this.thisPlayerMP, var1, var2, var3, var5);
+				if (var6 && var8) {
+					Block.blocksList[var4].harvestBlock(this.theWorld, this.thisPlayerMP, par1, par2, par3, var5);
 				}
 			}
 
@@ -195,57 +250,72 @@
 		}
 	}
 
-	public boolean tryUseItem(EntityPlayer var1, World var2, ItemStack var3) {
-		int var4 = var3.stackSize;
-		int var5 = var3.getItemDamage();
-		ItemStack var6 = var3.useItemRightClick(var2, var1);
-		if(var6 != var3 || var6 != null && (var6.stackSize != var4 || var6.getMaxItemUseDuration() > 0 || var6.getItemDamage() != var5)) {
-			var1.inventory.mainInventory[var1.inventory.currentItem] = var6;
-			if(this.isCreative()) {
+	/**
+	 * Attempts to right-click use an item by the given EntityPlayer in the given World
+	 */
+	public boolean tryUseItem(EntityPlayer par1EntityPlayer, World par2World, ItemStack par3ItemStack) {
+		int var4 = par3ItemStack.stackSize;
+		int var5 = par3ItemStack.getItemDamage();
+		ItemStack var6 = par3ItemStack.useItemRightClick(par2World, par1EntityPlayer);
+
+		if (var6 == par3ItemStack && (var6 == null || var6.stackSize == var4 && var6.getMaxItemUseDuration() <= 0 && var6.getItemDamage() == var5)) {
+			return false;
+		} else {
+			par1EntityPlayer.inventory.mainInventory[par1EntityPlayer.inventory.currentItem] = var6;
+
+			if (this.isCreative()) {
 				var6.stackSize = var4;
-				if(var6.isItemStackDamageable()) {
+
+				if (var6.isItemStackDamageable()) {
 					var6.setItemDamage(var5);
 				}
 			}
 
-			if(var6.stackSize == 0) {
-				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+			if (var6.stackSize == 0) {
+				par1EntityPlayer.inventory.mainInventory[par1EntityPlayer.inventory.currentItem] = null;
 			}
 
-			if(!var1.isUsingItem()) {
-				((EntityPlayerMP)var1).sendContainerToPlayer(var1.inventoryContainer);
+			if (!par1EntityPlayer.isUsingItem()) {
+				((EntityPlayerMP)par1EntityPlayer).sendContainerToPlayer(par1EntityPlayer.inventoryContainer);
 			}
 
 			return true;
-		} else {
-			return false;
 		}
 	}
 
-	public boolean activateBlockOrUseItem(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
+	/**
+	 * Activate the clicked on block, otherwise use the held item. Args: player, world, itemStack, x, y, z, side, xOffset,
+	 * yOffset, zOffset
+	 */
+	public boolean activateBlockOrUseItem(EntityPlayer par1EntityPlayer, World par2World, ItemStack par3ItemStack, int par4, int par5, int par6, int par7, float par8, float par9, float par10) {
 		int var11;
-		if(!var1.isSneaking() || var1.getHeldItem() == null) {
-			var11 = var2.getBlockId(var4, var5, var6);
-			if(var11 > 0 && Block.blocksList[var11].onBlockActivated(var2, var4, var5, var6, var1, var7, var8, var9, var10)) {
+
+		if (!par1EntityPlayer.isSneaking() || par1EntityPlayer.getHeldItem() == null) {
+			var11 = par2World.getBlockId(par4, par5, par6);
+
+			if (var11 > 0 && Block.blocksList[var11].onBlockActivated(par2World, par4, par5, par6, par1EntityPlayer, par7, par8, par9, par10)) {
 				return true;
 			}
 		}
 
-		if(var3 == null) {
+		if (par3ItemStack == null) {
 			return false;
-		} else if(this.isCreative()) {
-			var11 = var3.getItemDamage();
-			int var12 = var3.stackSize;
-			boolean var13 = var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var8, var9, var10);
-			var3.setItemDamage(var11);
-			var3.stackSize = var12;
+		} else if (this.isCreative()) {
+			var11 = par3ItemStack.getItemDamage();
+			int var12 = par3ItemStack.stackSize;
+			boolean var13 = par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10);
+			par3ItemStack.setItemDamage(var11);
+			par3ItemStack.stackSize = var12;
 			return var13;
 		} else {
-			return var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var8, var9, var10);
+			return par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, par8, par9, par10);
 		}
 	}
 
-	public void setWorld(WorldServer var1) {
-		this.theWorld = var1;
+	/**
+	 * Sets the world instance.
+	 */
+	public void setWorld(WorldServer par1WorldServer) {
+		this.theWorld = par1WorldServer;
 	}
 }
