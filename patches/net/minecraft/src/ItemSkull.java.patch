--- net/minecraft/src/ItemSkull.java
+++ net/minecraft/src/ItemSkull.java
@@ -3,110 +3,129 @@
 import java.util.List;
 
 public class ItemSkull extends Item {
-	private static final String[] b = new String[]{"skeleton", "wither", "zombie", "char", "creeper"};
-	public static final String[] a = new String[]{"skeleton", "wither", "zombie", "steve", "creeper"};
+	private static final String[] skullTypes = new String[] {"skeleton", "wither", "zombie", "char", "creeper"};
+	public static final String[] field_94587_a = new String[] {"skeleton", "wither", "zombie", "steve", "creeper"};
 	private Icon[] field_94586_c;
 
-	public ItemSkull(int var1) {
-		super(var1);
+	public ItemSkull(int par1) {
+		super(par1);
 		this.setCreativeTab(CreativeTabs.tabDecorations);
 		this.setMaxDamage(0);
 		this.setHasSubtypes(true);
 	}
 
-	public boolean onItemUse(ItemStack var1, EntityPlayer var2, World var3, int var4, int var5, int var6, int var7, float var8, float var9, float var10) {
-		if(var7 == 0) {
+	/**
+	 * Callback for item usage. If the item does something special on right clicking, he will have one of those. Return
+	 * True if something happen and false if it don't. This is for ITEMS, not BLOCKS
+	 */
+	public boolean onItemUse(ItemStack par1ItemStack, EntityPlayer par2EntityPlayer, World par3World, int par4, int par5, int par6, int par7, float par8, float par9, float par10) {
+		if (par7 == 0) {
 			return false;
-		} else if(!var3.getBlockMaterial(var4, var5, var6).isSolid()) {
+		} else if (!par3World.getBlockMaterial(par4, par5, par6).isSolid()) {
 			return false;
 		} else {
-			if(var7 == 1) {
-				++var5;
-			}
-
-			if(var7 == 2) {
-				--var6;
-			}
-
-			if(var7 == 3) {
-				++var6;
-			}
-
-			if(var7 == 4) {
-				--var4;
-			}
-
-			if(var7 == 5) {
-				++var4;
-			}
-
-			if(!var2.canPlayerEdit(var4, var5, var6, var7, var1)) {
+			if (par7 == 1) {
+				++par5;
+			}
+
+			if (par7 == 2) {
+				--par6;
+			}
+
+			if (par7 == 3) {
+				++par6;
+			}
+
+			if (par7 == 4) {
+				--par4;
+			}
+
+			if (par7 == 5) {
+				++par4;
+			}
+
+			if (!par2EntityPlayer.canPlayerEdit(par4, par5, par6, par7, par1ItemStack)) {
 				return false;
-			} else if(!Block.skull.canPlaceBlockAt(var3, var4, var5, var6)) {
+			} else if (!Block.skull.canPlaceBlockAt(par3World, par4, par5, par6)) {
 				return false;
 			} else {
-				var3.setBlock(var4, var5, var6, Block.skull.blockID, var7, 2);
+				par3World.setBlock(par4, par5, par6, Block.skull.blockID, par7, 2);
 				int var11 = 0;
-				if(var7 == 1) {
-					var11 = MathHelper.floor_double((double)(var2.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
+
+				if (par7 == 1) {
+					var11 = MathHelper.floor_double((double)(par2EntityPlayer.rotationYaw * 16.0F / 360.0F) + 0.5D) & 15;
 				}
 
-				TileEntity var12 = var3.getBlockTileEntity(var4, var5, var6);
-				if(var12 != null && var12 instanceof TileEntitySkull) {
+				TileEntity var12 = par3World.getBlockTileEntity(par4, par5, par6);
+
+				if (var12 != null && var12 instanceof TileEntitySkull) {
 					String var13 = "";
-					if(var1.hasTagCompound() && var1.getTagCompound().hasKey("SkullOwner")) {
-						var13 = var1.getTagCompound().getString("SkullOwner");
+
+					if (par1ItemStack.hasTagCompound() && par1ItemStack.getTagCompound().hasKey("SkullOwner")) {
+						var13 = par1ItemStack.getTagCompound().getString("SkullOwner");
 					}
 
-					((TileEntitySkull)var12).setSkullType(var1.getItemDamage(), var13);
+					((TileEntitySkull)var12).setSkullType(par1ItemStack.getItemDamage(), var13);
 					((TileEntitySkull)var12).setSkullRotation(var11);
-					((BlockSkull)Block.skull).makeWither(var3, var4, var5, var6, (TileEntitySkull)var12);
+					((BlockSkull)Block.skull).makeWither(par3World, par4, par5, par6, (TileEntitySkull)var12);
 				}
 
-				--var1.stackSize;
+				--par1ItemStack.stackSize;
 				return true;
 			}
 		}
 	}
 
-	public void getSubItems(int var1, CreativeTabs var2, List var3) {
-		for(int var4 = 0; var4 < b.length; ++var4) {
-			var3.add(new ItemStack(var1, 1, var4));
-		}
-
-	}
-
-	public Icon getIconFromDamage(int var1) {
-		if(var1 < 0 || var1 >= b.length) {
-			var1 = 0;
-		}
-
-		return this.field_94586_c[var1];
-	}
-
-	public int getMetadata(int var1) {
-		return var1;
-	}
-
-	public String getUnlocalizedName(ItemStack var1) {
-		int var2 = var1.getItemDamage();
-		if(var2 < 0 || var2 >= b.length) {
+	/**
+	 * returns a list of items with the same ID, but different meta (eg: dye returns 16 items)
+	 */
+	public void getSubItems(int par1, CreativeTabs par2CreativeTabs, List par3List) {
+		for (int var4 = 0; var4 < skullTypes.length; ++var4) {
+			par3List.add(new ItemStack(par1, 1, var4));
+		}
+	}
+
+	/**
+	 * Gets an icon index based on an item's damage value
+	 */
+	public Icon getIconFromDamage(int par1) {
+		if (par1 < 0 || par1 >= skullTypes.length) {
+			par1 = 0;
+		}
+
+		return this.field_94586_c[par1];
+	}
+
+	/**
+	 * Returns the metadata of the block which this Item (ItemBlock) can place
+	 */
+	public int getMetadata(int par1) {
+		return par1;
+	}
+
+	/**
+	 * Returns the unlocalized name of this item. This version accepts an ItemStack so different stacks can have different
+	 * names based on their damage or NBT.
+	 */
+	public String getUnlocalizedName(ItemStack par1ItemStack) {
+		int var2 = par1ItemStack.getItemDamage();
+
+		if (var2 < 0 || var2 >= skullTypes.length) {
 			var2 = 0;
 		}
 
-		return super.getUnlocalizedName() + "." + b[var2];
-	}
-
-	public String getItemDisplayName(ItemStack var1) {
-		return var1.getItemDamage() == 3 && var1.hasTagCompound() && var1.getTagCompound().hasKey("SkullOwner") ? StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[]{var1.getTagCompound().getString("SkullOwner")}) : super.getItemDisplayName(var1);
-	}
-
-	public void registerIcons(IconRegister var1) {
-		this.field_94586_c = new Icon[a.length];
-
-		for(int var2 = 0; var2 < a.length; ++var2) {
-			this.field_94586_c[var2] = var1.registerIcon(this.getIconString() + "_" + a[var2]);
+		return super.getUnlocalizedName() + "." + skullTypes[var2];
+	}
+
+	public String getItemDisplayName(ItemStack par1ItemStack) {
+		return par1ItemStack.getItemDamage() == 3 && par1ItemStack.hasTagCompound() && par1ItemStack.getTagCompound().hasKey("SkullOwner") ? StatCollector.translateToLocalFormatted("item.skull.player.name", new Object[] {par1ItemStack.getTagCompound().getString("SkullOwner")}): super.getItemDisplayName(par1ItemStack);
+	}
+
+	public void registerIcons(IconRegister par1IconRegister) {
+		this.field_94586_c = new Icon[field_94587_a.length];
+
+		for (int var2 = 0; var2 < field_94587_a.length; ++var2) {
+			this.field_94586_c[var2] = par1IconRegister.registerIcon(this.getIconString() + "_" + field_94587_a[var2]);
 		}
-
 	}
 }
