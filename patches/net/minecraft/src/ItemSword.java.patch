--- net/minecraft/src/ItemSword.java
+++ net/minecraft/src/ItemSword.java
@@ -6,77 +6,112 @@
 	private float weaponDamage;
 	private final EnumToolMaterial toolMaterial;
 
-	public ItemSword(int var1, EnumToolMaterial var2) {
-		super(var1);
-		this.toolMaterial = var2;
+	public ItemSword(int par1, EnumToolMaterial par2EnumToolMaterial) {
+		super(par1);
+		this.toolMaterial = par2EnumToolMaterial;
 		this.maxStackSize = 1;
-		this.setMaxDamage(var2.getMaxUses());
+		this.setMaxDamage(par2EnumToolMaterial.getMaxUses());
 		this.setCreativeTab(CreativeTabs.tabCombat);
-		this.weaponDamage = 4.0F + var2.getDamageVsEntity();
+		this.weaponDamage = 4.0F + par2EnumToolMaterial.getDamageVsEntity();
 	}
 
 	public float func_82803_g() {
 		return this.toolMaterial.getDamageVsEntity();
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
-		if(var2.blockID == Block.web.blockID) {
+	/**
+	 * Returns the strength of the stack against a given block. 1.0F base, (Quality+1)*2 if correct blocktype, 1.5F if
+	 * sword
+	 */
+	public float getStrVsBlock(ItemStack par1ItemStack, Block par2Block) {
+		if (par2Block.blockID == Block.web.blockID) {
 			return 15.0F;
 		} else {
-			Material var3 = var2.blockMaterial;
+			Material var3 = par2Block.blockMaterial;
 			return var3 != Material.plants && var3 != Material.vine && var3 != Material.coral && var3 != Material.leaves && var3 != Material.pumpkin ? 1.0F : 1.5F;
 		}
 	}
 
-	public boolean hitEntity(ItemStack var1, EntityLivingBase var2, EntityLivingBase var3) {
-		var1.damageItem(1, var3);
+	/**
+	 * Current implementations of this method in child classes do not use the entry argument beside ev. They just raise the
+	 * damage on the stack.
+	 */
+	public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase par2EntityLivingBase, EntityLivingBase par3EntityLivingBase) {
+		par1ItemStack.damageItem(1, par3EntityLivingBase);
 		return true;
 	}
 
-	public boolean onBlockDestroyed(ItemStack var1, World var2, int var3, int var4, int var5, int var6, EntityLivingBase var7) {
-		if((double)Block.blocksList[var3].getBlockHardness(var2, var4, var5, var6) != 0.0D) {
-			var1.damageItem(2, var7);
+	public boolean onBlockDestroyed(ItemStack par1ItemStack, World par2World, int par3, int par4, int par5, int par6, EntityLivingBase par7EntityLivingBase) {
+		if ((double)Block.blocksList[par3].getBlockHardness(par2World, par4, par5, par6) != 0.0D) {
+			par1ItemStack.damageItem(2, par7EntityLivingBase);
 		}
 
 		return true;
 	}
 
+	/**
+	 * Returns True is the item is renderer in full 3D when hold.
+	 */
 	public boolean isFull3D() {
 		return true;
 	}
 
-	public EnumAction getItemUseAction(ItemStack var1) {
+	/**
+	 * returns the action that specifies what animation to play when the items is being used
+	 */
+	public EnumAction getItemUseAction(ItemStack par1ItemStack) {
 		return EnumAction.block;
 	}
 
-	public int getMaxItemUseDuration(ItemStack var1) {
+	/**
+	 * How long it takes to use or consume an item
+	 */
+	public int getMaxItemUseDuration(ItemStack par1ItemStack) {
 		return 72000;
 	}
 
-	public ItemStack onItemRightClick(ItemStack var1, World var2, EntityPlayer var3) {
-		var3.setItemInUse(var1, this.getMaxItemUseDuration(var1));
-		return var1;
-	}
-
-	public boolean canHarvestBlock(Block var1) {
-		return var1.blockID == Block.web.blockID;
-	}
-
+	/**
+	 * Called whenever this item is equipped and the right mouse button is pressed. Args: itemStack, world, entityPlayer
+	 */
+	public ItemStack onItemRightClick(ItemStack par1ItemStack, World par2World, EntityPlayer par3EntityPlayer) {
+		par3EntityPlayer.setItemInUse(par1ItemStack, this.getMaxItemUseDuration(par1ItemStack));
+		return par1ItemStack;
+	}
+
+	/**
+	 * Returns if the item (tool) can harvest results from the block type.
+	 */
+	public boolean canHarvestBlock(Block par1Block) {
+		return par1Block.blockID == Block.web.blockID;
+	}
+
+	/**
+	 * Return the enchantability factor of the item, most of the time is based on material.
+	 */
 	public int getItemEnchantability() {
 		return this.toolMaterial.getEnchantability();
 	}
 
+	/**
+	 * Return the name for this tool's material.
+	 */
 	public String getToolMaterialName() {
 		return this.toolMaterial.toString();
 	}
 
-	public boolean getIsRepairable(ItemStack var1, ItemStack var2) {
-		return this.toolMaterial.getToolCraftingMaterial() == var2.itemID ? true : super.getIsRepairable(var1, var2);
+	/**
+	 * Return whether this item is repairable in an anvil.
+	 */
+	public boolean getIsRepairable(ItemStack par1ItemStack, ItemStack par2ItemStack) {
+		return this.toolMaterial.getToolCraftingMaterial() == par2ItemStack.itemID ? true : super.getIsRepairable(par1ItemStack, par2ItemStack);
 	}
 
+	/**
+	 * Gets a map of item attribute modifiers, used by ItemSword to increase hit damage.
+	 */
 	public Multimap getItemAttributeModifiers() {
 		Multimap var1 = super.getItemAttributeModifiers();
-		var1.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(e, "Weapon modifier", (double)this.weaponDamage, 0));
+		var1.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(field_111210_e, "Weapon modifier", (double)this.weaponDamage, 0));
 		return var1;
 	}
 }
