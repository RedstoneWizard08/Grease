--- net/minecraft/src/ItemTool.java
+++ net/minecraft/src/ItemTool.java
@@ -3,25 +3,35 @@
 import com.google.common.collect.Multimap;
 
 public class ItemTool extends Item {
+
+	/** Array of blocks the tool has extra effect against. */
 	private Block[] blocksEffectiveAgainst;
 	protected float efficiencyOnProperMaterial = 4.0F;
+
+	/** Damage versus entities. */
 	private float damageVsEntity;
+
+	/** The material this tool is made from. */
 	protected EnumToolMaterial toolMaterial;
 
-	protected ItemTool(int var1, float var2, EnumToolMaterial var3, Block[] var4) {
-		super(var1);
-		this.toolMaterial = var3;
-		this.blocksEffectiveAgainst = var4;
+	protected ItemTool(int par1, float par2, EnumToolMaterial par3EnumToolMaterial, Block[] par4ArrayOfBlock) {
+		super(par1);
+		this.toolMaterial = par3EnumToolMaterial;
+		this.blocksEffectiveAgainst = par4ArrayOfBlock;
 		this.maxStackSize = 1;
-		this.setMaxDamage(var3.getMaxUses());
-		this.efficiencyOnProperMaterial = var3.getEfficiencyOnProperMaterial();
-		this.damageVsEntity = var2 + var3.getDamageVsEntity();
+		this.setMaxDamage(par3EnumToolMaterial.getMaxUses());
+		this.efficiencyOnProperMaterial = par3EnumToolMaterial.getEfficiencyOnProperMaterial();
+		this.damageVsEntity = par2 + par3EnumToolMaterial.getDamageVsEntity();
 		this.setCreativeTab(CreativeTabs.tabTools);
 	}
 
-	public float getStrVsBlock(ItemStack var1, Block var2) {
-		for(int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
-			if(this.blocksEffectiveAgainst[var3] == var2) {
+	/**
+	 * Returns the strength of the stack against a given block. 1.0F base, (Quality+1)*2 if correct blocktype, 1.5F if
+	 * sword
+	 */
+	public float getStrVsBlock(ItemStack par1ItemStack, Block par2Block) {
+		for (int var3 = 0; var3 < this.blocksEffectiveAgainst.length; ++var3) {
+			if (this.blocksEffectiveAgainst[var3] == par2Block) {
 				return this.efficiencyOnProperMaterial;
 			}
 		}
@@ -29,38 +39,57 @@
 		return 1.0F;
 	}
 
-	public boolean hitEntity(ItemStack var1, EntityLivingBase var2, EntityLivingBase var3) {
-		var1.damageItem(2, var3);
+	/**
+	 * Current implementations of this method in child classes do not use the entry argument beside ev. They just raise the
+	 * damage on the stack.
+	 */
+	public boolean hitEntity(ItemStack par1ItemStack, EntityLivingBase par2EntityLivingBase, EntityLivingBase par3EntityLivingBase) {
+		par1ItemStack.damageItem(2, par3EntityLivingBase);
 		return true;
 	}
 
-	public boolean onBlockDestroyed(ItemStack var1, World var2, int var3, int var4, int var5, int var6, EntityLivingBase var7) {
-		if((double)Block.blocksList[var3].getBlockHardness(var2, var4, var5, var6) != 0.0D) {
-			var1.damageItem(1, var7);
+	public boolean onBlockDestroyed(ItemStack par1ItemStack, World par2World, int par3, int par4, int par5, int par6, EntityLivingBase par7EntityLivingBase) {
+		if ((double)Block.blocksList[par3].getBlockHardness(par2World, par4, par5, par6) != 0.0D) {
+			par1ItemStack.damageItem(1, par7EntityLivingBase);
 		}
 
 		return true;
 	}
 
+	/**
+	 * Returns True is the item is renderer in full 3D when hold.
+	 */
 	public boolean isFull3D() {
 		return true;
 	}
 
+	/**
+	 * Return the enchantability factor of the item, most of the time is based on material.
+	 */
 	public int getItemEnchantability() {
 		return this.toolMaterial.getEnchantability();
 	}
 
+	/**
+	 * Return the name for this tool's material.
+	 */
 	public String getToolMaterialName() {
 		return this.toolMaterial.toString();
 	}
 
-	public boolean getIsRepairable(ItemStack var1, ItemStack var2) {
-		return this.toolMaterial.getToolCraftingMaterial() == var2.itemID ? true : super.getIsRepairable(var1, var2);
+	/**
+	 * Return whether this item is repairable in an anvil.
+	 */
+	public boolean getIsRepairable(ItemStack par1ItemStack, ItemStack par2ItemStack) {
+		return this.toolMaterial.getToolCraftingMaterial() == par2ItemStack.itemID ? true : super.getIsRepairable(par1ItemStack, par2ItemStack);
 	}
 
+	/**
+	 * Gets a map of item attribute modifiers, used by ItemSword to increase hit damage.
+	 */
 	public Multimap getItemAttributeModifiers() {
 		Multimap var1 = super.getItemAttributeModifiers();
-		var1.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(e, "Tool modifier", (double)this.damageVsEntity, 0));
+		var1.put(SharedMonsterAttributes.attackDamage.getAttributeUnlocalizedName(), new AttributeModifier(field_111210_e, "Tool modifier", (double)this.damageVsEntity, 0));
 		return var1;
 	}
 }
