--- net/minecraft/src/LoadingScreenRenderer.java
+++ net/minecraft/src/LoadingScreenRenderer.java
@@ -4,30 +4,44 @@
 import org.lwjgl.opengl.GL11;
 
 public class LoadingScreenRenderer implements IProgressUpdate {
-	private String a = "";
+	private String field_73727_a = "";
+
+	/** A reference to the Minecraft object. */
 	private Minecraft mc;
-	private String c = "";
+
+	/**
+	 * The text currently displayed (i.e. the argument to the last call to printText or func_73722_d)
+	 */
+	private String currentlyDisplayedText = "";
 	private long field_73723_d = Minecraft.getSystemTime();
 	private boolean field_73724_e;
 
-	public LoadingScreenRenderer(Minecraft var1) {
-		this.mc = var1;
+	public LoadingScreenRenderer(Minecraft par1Minecraft) {
+		this.mc = par1Minecraft;
 	}
 
-	public void resetProgressAndMessage(String var1) {
+	/**
+	 * this string, followed by "working..." and then the "% complete" are the 3 lines shown. This resets progress to 0,
+	 * and the WorkingString to "working...".
+	 */
+	public void resetProgressAndMessage(String par1Str) {
 		this.field_73724_e = false;
-		this.func_73722_d(var1);
+		this.func_73722_d(par1Str);
 	}
 
-	public void displaySavingString(String var1) {
+	/**
+	 * "Saving level", or the loading,or downloading equivelent
+	 */
+	public void displayProgressMessage(String par1Str) {
 		this.field_73724_e = true;
-		this.func_73722_d(var1);
+		this.func_73722_d(par1Str);
 	}
 
-	public void func_73722_d(String var1) {
-		this.c = var1;
-		if(!this.mc.running) {
-			if(!this.field_73724_e) {
+	public void func_73722_d(String par1Str) {
+		this.currentlyDisplayedText = par1Str;
+
+		if (!this.mc.running) {
+			if (!this.field_73724_e) {
 				throw new MinecraftError();
 			}
 		} else {
@@ -42,27 +56,34 @@
 		}
 	}
 
-	public void displayLoadingString(String var1) {
-		if(!this.mc.running) {
-			if(!this.field_73724_e) {
+	/**
+	 * This is called with "Working..." by resetProgressAndMessage
+	 */
+	public void resetProgresAndWorkingMessage(String par1Str) {
+		if (!this.mc.running) {
+			if (!this.field_73724_e) {
 				throw new MinecraftError();
 			}
 		} else {
 			this.field_73723_d = 0L;
-			this.a = var1;
+			this.field_73727_a = par1Str;
 			this.setLoadingProgress(-1);
 			this.field_73723_d = 0L;
 		}
 	}
 
-	public void setLoadingProgress(int var1) {
-		if(!this.mc.running) {
-			if(!this.field_73724_e) {
+	/**
+	 * Updates the progress bar on the loading screen to the specified amount. Args: loadProgress
+	 */
+	public void setLoadingProgress(int par1) {
+		if (!this.mc.running) {
+			if (!this.field_73724_e) {
 				throw new MinecraftError();
 			}
 		} else {
 			long var2 = Minecraft.getSystemTime();
-			if(var2 - this.field_73723_d >= 100L) {
+
+			if (var2 - this.field_73723_d >= 100L) {
 				this.field_73723_d = var2;
 				ScaledResolution var4 = new ScaledResolution(this.mc.gameSettings, this.mc.displayWidth, this.mc.displayHeight);
 				int var5 = var4.getScaledWidth();
@@ -74,7 +95,7 @@
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
 				GL11.glLoadIdentity();
 				GL11.glTranslatef(0.0F, 0.0F, -200.0F);
-				GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT | GL11.GL_COLOR_BUFFER_BIT);
+				GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
 				Tessellator var7 = Tessellator.instance;
 				this.mc.getTextureManager().bindTexture(Gui.optionsBackground);
 				float var8 = 32.0F;
@@ -85,7 +106,8 @@
 				var7.addVertexWithUV((double)var5, 0.0D, 0.0D, (double)((float)var5 / var8), 0.0D);
 				var7.addVertexWithUV(0.0D, 0.0D, 0.0D, 0.0D, 0.0D);
 				var7.draw();
-				if(var1 >= 0) {
+
+				if (par1 >= 0) {
 					byte var9 = 100;
 					byte var10 = 2;
 					int var11 = var5 / 2 - var9 / 2;
@@ -100,22 +122,26 @@
 					var7.setColorOpaque_I(8454016);
 					var7.addVertex((double)var11, (double)var12, 0.0D);
 					var7.addVertex((double)var11, (double)(var12 + var10), 0.0D);
-					var7.addVertex((double)(var11 + var1), (double)(var12 + var10), 0.0D);
-					var7.addVertex((double)(var11 + var1), (double)var12, 0.0D);
+					var7.addVertex((double)(var11 + par1), (double)(var12 + var10), 0.0D);
+					var7.addVertex((double)(var11 + par1), (double)var12, 0.0D);
 					var7.draw();
 					GL11.glEnable(GL11.GL_TEXTURE_2D);
+					// Spout Start
+				} else {
+					GL11.glEnable(GL11.GL_TEXTURE_2D);
+					// Spout End
 				}
 
-				this.mc.fontRenderer.drawStringWithShadow(this.c, (var5 - this.mc.fontRenderer.getStringWidth(this.c)) / 2, var6 / 2 - 4 - 16, 16777215);
-				this.mc.fontRenderer.drawStringWithShadow(this.a, (var5 - this.mc.fontRenderer.getStringWidth(this.a)) / 2, var6 / 2 - 4 + 8, 16777215);
+				this.mc.fontRenderer.drawStringWithShadow(this.currentlyDisplayedText, (var5 - this.mc.fontRenderer.getStringWidth(this.currentlyDisplayedText)) / 2, var6 / 2 - 4 - 16, 16777215);
+				this.mc.fontRenderer.drawStringWithShadow(this.field_73727_a, (var5 - this.mc.fontRenderer.getStringWidth(this.field_73727_a)) / 2, var6 / 2 - 4 + 8, 16777215);
 				Display.update();
 
 				try {
 					Thread.yield();
 				} catch (Exception var13) {
+					;
 				}
-
 			}
 		}
-	}
+	}	
 }
