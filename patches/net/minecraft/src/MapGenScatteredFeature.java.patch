--- net/minecraft/src/MapGenScatteredFeature.java
+++ net/minecraft/src/MapGenScatteredFeature.java
@@ -9,60 +9,69 @@
 import java.util.Map.Entry;
 
 public class MapGenScatteredFeature extends MapGenStructure {
-	private static List e = Arrays.asList(new BiomeGenBase[]{BiomeGenBase.desert, BiomeGenBase.desertHills, BiomeGenBase.jungle, BiomeGenBase.jungleHills, BiomeGenBase.swampland});
-	private List f;
+	private static List biomelist = Arrays.asList(new BiomeGenBase[] {BiomeGenBase.desert, BiomeGenBase.desertHills, BiomeGenBase.jungle, BiomeGenBase.jungleHills, BiomeGenBase.swampland});
+
+	/** contains possible spawns for scattered features */
+	private List scatteredFeatureSpawnList;
+
+	/** the maximum distance between scattered features */
 	private int maxDistanceBetweenScatteredFeatures;
+
+	/** the minimum distance between scattered features */
 	private int minDistanceBetweenScatteredFeatures;
 
 	public MapGenScatteredFeature() {
-		this.f = new ArrayList();
+		this.scatteredFeatureSpawnList = new ArrayList();
 		this.maxDistanceBetweenScatteredFeatures = 32;
 		this.minDistanceBetweenScatteredFeatures = 8;
-		this.f.add(new SpawnListEntry(EntityWitch.class, 1, 1, 1));
+		this.scatteredFeatureSpawnList.add(new SpawnListEntry(EntityWitch.class, 1, 1, 1));
 	}
 
-	public MapGenScatteredFeature(Map var1) {
+	public MapGenScatteredFeature(Map par1Map) {
 		this();
-		Iterator var2 = var1.entrySet().iterator();
+		Iterator var2 = par1Map.entrySet().iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			Entry var3 = (Entry)var2.next();
-			if(((String)var3.getKey()).equals("distance")) {
+
+			if (((String)var3.getKey()).equals("distance")) {
 				this.maxDistanceBetweenScatteredFeatures = MathHelper.parseIntWithDefaultAndMax((String)var3.getValue(), this.maxDistanceBetweenScatteredFeatures, this.minDistanceBetweenScatteredFeatures + 1);
 			}
 		}
-
 	}
 
 	public String func_143025_a() {
 		return "Temple";
 	}
 
-	protected boolean canSpawnStructureAtCoords(int var1, int var2) {
-		int var3 = var1;
-		int var4 = var2;
-		if(var1 < 0) {
-			var1 -= this.maxDistanceBetweenScatteredFeatures - 1;
-		}
-
-		if(var2 < 0) {
-			var2 -= this.maxDistanceBetweenScatteredFeatures - 1;
-		}
-
-		int var5 = var1 / this.maxDistanceBetweenScatteredFeatures;
-		int var6 = var2 / this.maxDistanceBetweenScatteredFeatures;
+	protected boolean canSpawnStructureAtCoords(int par1, int par2) {
+		int var3 = par1;
+		int var4 = par2;
+
+		if (par1 < 0) {
+			par1 -= this.maxDistanceBetweenScatteredFeatures - 1;
+		}
+
+		if (par2 < 0) {
+			par2 -= this.maxDistanceBetweenScatteredFeatures - 1;
+		}
+
+		int var5 = par1 / this.maxDistanceBetweenScatteredFeatures;
+		int var6 = par2 / this.maxDistanceBetweenScatteredFeatures;
 		Random var7 = this.worldObj.setRandomSeed(var5, var6, 14357617);
 		var5 *= this.maxDistanceBetweenScatteredFeatures;
 		var6 *= this.maxDistanceBetweenScatteredFeatures;
 		var5 += var7.nextInt(this.maxDistanceBetweenScatteredFeatures - this.minDistanceBetweenScatteredFeatures);
 		var6 += var7.nextInt(this.maxDistanceBetweenScatteredFeatures - this.minDistanceBetweenScatteredFeatures);
-		if(var3 == var5 && var4 == var6) {
+
+		if (var3 == var5 && var4 == var6) {
 			BiomeGenBase var8 = this.worldObj.getWorldChunkManager().getBiomeGenAt(var3 * 16 + 8, var4 * 16 + 8);
-			Iterator var9 = e.iterator();
+			Iterator var9 = biomelist.iterator();
 
-			while(var9.hasNext()) {
+			while (var9.hasNext()) {
 				BiomeGenBase var10 = (BiomeGenBase)var9.next();
-				if(var8 == var10) {
+
+				if (var8 == var10) {
 					return true;
 				}
 			}
@@ -71,21 +80,25 @@
 		return false;
 	}
 
-	protected StructureStart getStructureStart(int var1, int var2) {
-		return new StructureScatteredFeatureStart(this.worldObj, this.b, var1, var2);
+	protected StructureStart getStructureStart(int par1, int par2) {
+		return new StructureScatteredFeatureStart(this.worldObj, this.rand, par1, par2);
 	}
 
-	public boolean func_143030_a(int var1, int var2, int var3) {
-		StructureStart var4 = this.func_143028_c(var1, var2, var3);
-		if(var4 != null && var4 instanceof StructureScatteredFeatureStart && !var4.a.isEmpty()) {
-			StructureComponent var5 = (StructureComponent)var4.a.getFirst();
+	public boolean func_143030_a(int par1, int par2, int par3) {
+		StructureStart var4 = this.func_143028_c(par1, par2, par3);
+
+		if (var4 != null && var4 instanceof StructureScatteredFeatureStart && !var4.components.isEmpty()) {
+			StructureComponent var5 = (StructureComponent)var4.components.getFirst();
 			return var5 instanceof ComponentScatteredFeatureSwampHut;
 		} else {
 			return false;
 		}
 	}
 
+	/**
+	 * returns possible spawns for scattered features
+	 */
 	public List getScatteredFeatureSpawnList() {
-		return this.f;
+		return this.scatteredFeatureSpawnList;
 	}
 }
