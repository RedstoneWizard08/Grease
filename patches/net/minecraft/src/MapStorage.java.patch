--- net/minecraft/src/MapStorage.java
+++ net/minecraft/src/MapStorage.java
@@ -1,8 +1,6 @@
 package net.minecraft.src;
 
-import java.io.DataInput;
 import java.io.DataInputStream;
-import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
@@ -15,28 +13,42 @@
 
 public class MapStorage {
 	private ISaveHandler saveHandler;
-	private Map b = new HashMap();
-	private List c = new ArrayList();
-	private Map d = new HashMap();
-
-	public MapStorage(ISaveHandler var1) {
-		this.saveHandler = var1;
+
+	/** Map of item data String id to loaded MapDataBases */
+	private Map loadedDataMap = new HashMap();
+
+	/** List of loaded MapDataBases. */
+	private List loadedDataList = new ArrayList();
+
+	/**
+	 * Map of MapDataBase id String prefixes ('map' etc) to max known unique Short id (the 0 part etc) for that prefix
+	 */
+	private Map idCounts = new HashMap();
+
+	public MapStorage(ISaveHandler par1ISaveHandler) {
+		this.saveHandler = par1ISaveHandler;
 		this.loadIdCounts();
 	}
 
-	public WorldSavedData loadData(Class var1, String var2) {
-		WorldSavedData var3 = (WorldSavedData)this.b.get(var2);
-		if(var3 != null) {
+	/**
+	 * Loads an existing MapDataBase corresponding to the given String id from disk, instantiating the given Class, or
+	 * returns null if none such file exists. args: Class to instantiate, String dataid
+	 */
+	public WorldSavedData loadData(Class par1Class, String par2Str) {
+		WorldSavedData var3 = (WorldSavedData)this.loadedDataMap.get(par2Str);
+
+		if (var3 != null) {
 			return var3;
 		} else {
-			if(this.saveHandler != null) {
+			if (this.saveHandler != null) {
 				try {
-					File var4 = this.saveHandler.getMapFileFromName(var2);
-					if(var4 != null && var4.exists()) {
+					File var4 = this.saveHandler.getMapFileFromName(par2Str);
+
+					if (var4 != null && var4.exists()) {
 						try {
-							var3 = (WorldSavedData)var1.getConstructor(new Class[]{String.class}).newInstance(new Object[]{var2});
+							var3 = (WorldSavedData)par1Class.getConstructor(new Class[] {String.class}).newInstance(new Object[] {par2Str});
 						} catch (Exception var7) {
-							throw new RuntimeException("Failed to instantiate " + var1.toString(), var7);
+							throw new RuntimeException("Failed to instantiate " + par1Class.toString(), var7);
 						}
 
 						FileInputStream var5 = new FileInputStream(var4);
@@ -49,46 +61,56 @@
 				}
 			}
 
-			if(var3 != null) {
-				this.b.put(var2, var3);
-				this.c.add(var3);
+			if (var3 != null) {
+				this.loadedDataMap.put(par2Str, var3);
+				this.loadedDataList.add(var3);
 			}
 
 			return var3;
 		}
 	}
 
-	public void setData(String var1, WorldSavedData var2) {
-		if(var2 == null) {
+	/**
+	 * Assigns the given String id to the given MapDataBase, removing any existing ones of the same id.
+	 */
+	public void setData(String par1Str, WorldSavedData par2WorldSavedData) {
+		if (par2WorldSavedData == null) {
 			throw new RuntimeException("Can\'t set null data");
 		} else {
-			if(this.b.containsKey(var1)) {
-				this.c.remove(this.b.remove(var1));
+			if (this.loadedDataMap.containsKey(par1Str)) {
+				this.loadedDataList.remove(this.loadedDataMap.remove(par1Str));
 			}
 
-			this.b.put(var1, var2);
-			this.c.add(var2);
+			this.loadedDataMap.put(par1Str, par2WorldSavedData);
+			this.loadedDataList.add(par2WorldSavedData);
 		}
 	}
 
+	/**
+	 * Saves all dirty loaded MapDataBases to disk.
+	 */
 	public void saveAllData() {
-		for(int var1 = 0; var1 < this.c.size(); ++var1) {
-			WorldSavedData var2 = (WorldSavedData)this.c.get(var1);
-			if(var2.isDirty()) {
+		for (int var1 = 0; var1 < this.loadedDataList.size(); ++var1) {
+			WorldSavedData var2 = (WorldSavedData)this.loadedDataList.get(var1);
+
+			if (var2.isDirty()) {
 				this.saveData(var2);
 				var2.setDirty(false);
 			}
 		}
-
 	}
 
-	private void saveData(WorldSavedData var1) {
-		if(this.saveHandler != null) {
+	/**
+	 * Saves the given MapDataBase to disk.
+	 */
+	private void saveData(WorldSavedData par1WorldSavedData) {
+		if (this.saveHandler != null) {
 			try {
-				File var2 = this.saveHandler.getMapFileFromName(var1.h);
-				if(var2 != null) {
+				File var2 = this.saveHandler.getMapFileFromName(par1WorldSavedData.mapName);
+
+				if (var2 != null) {
 					NBTTagCompound var3 = new NBTTagCompound();
-					var1.writeToNBT(var3);
+					par1WorldSavedData.writeToNBT(var3);
 					NBTTagCompound var4 = new NBTTagCompound();
 					var4.setCompoundTag("data", var3);
 					FileOutputStream var5 = new FileOutputStream(var2);
@@ -98,66 +120,76 @@
 			} catch (Exception var6) {
 				var6.printStackTrace();
 			}
-
 		}
 	}
 
+	/**
+	 * Loads the idCounts Map from the 'idcounts' file.
+	 */
 	private void loadIdCounts() {
 		try {
-			this.d.clear();
-			if(this.saveHandler == null) {
+			this.idCounts.clear();
+
+			if (this.saveHandler == null) {
 				return;
 			}
 
 			File var1 = this.saveHandler.getMapFileFromName("idcounts");
-			if(var1 != null && var1.exists()) {
+
+			if (var1 != null && var1.exists()) {
 				DataInputStream var2 = new DataInputStream(new FileInputStream(var1));
-				NBTTagCompound var3 = CompressedStreamTools.read((DataInput)var2);
+				NBTTagCompound var3 = CompressedStreamTools.read(var2);
 				var2.close();
 				Iterator var4 = var3.getTags().iterator();
 
-				while(var4.hasNext()) {
+				while (var4.hasNext()) {
 					NBTBase var5 = (NBTBase)var4.next();
-					if(var5 instanceof NBTTagShort) {
+
+					if (var5 instanceof NBTTagShort) {
 						NBTTagShort var6 = (NBTTagShort)var5;
 						String var7 = var6.getName();
 						short var8 = var6.data;
-						this.d.put(var7, Short.valueOf(var8));
+						this.idCounts.put(var7, Short.valueOf(var8));
 					}
 				}
 			}
 		} catch (Exception var9) {
 			var9.printStackTrace();
 		}
-
 	}
 
-	public int getUniqueDataId(String var1) {
-		Short var2 = (Short)this.d.get(var1);
-		if(var2 == null) {
+	/**
+	 * Returns an unique new data id for the given prefix and saves the idCounts map to the 'idcounts' file.
+	 */
+	public int getUniqueDataId(String par1Str) {
+		Short var2 = (Short)this.idCounts.get(par1Str);
+
+		if (var2 == null) {
 			var2 = Short.valueOf((short)0);
 		} else {
 			var2 = Short.valueOf((short)(var2.shortValue() + 1));
 		}
 
-		this.d.put(var1, var2);
-		if(this.saveHandler == null) {
+		this.idCounts.put(par1Str, var2);
+
+		if (this.saveHandler == null) {
 			return var2.shortValue();
 		} else {
 			try {
 				File var3 = this.saveHandler.getMapFileFromName("idcounts");
-				if(var3 != null) {
+
+				if (var3 != null) {
 					NBTTagCompound var4 = new NBTTagCompound();
-					Iterator var5 = this.d.keySet().iterator();
+					Iterator var5 = this.idCounts.keySet().iterator();
 
-					while(var5.hasNext()) {
+					while (var5.hasNext()) {
 						String var6 = (String)var5.next();
-						short var7 = ((Short)this.d.get(var6)).shortValue();
+						short var7 = ((Short)this.idCounts.get(var6)).shortValue();
 						var4.setShort(var6, var7);
 					}
 
 					DataOutputStream var9 = new DataOutputStream(new FileOutputStream(var3));
-					CompressedStreamTools.write(var4, (DataOutput)var9);
+					CompressedStreamTools.write(var4, var9);
 					var9.close();
 				}
 			} catch (Exception var8) {
