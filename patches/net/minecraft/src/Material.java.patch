--- net/minecraft/src/Material.java
+++ net/minecraft/src/Material.java
@@ -2,6 +2,8 @@
 
 public class Material {
 	public static final Material air = new MaterialTransparent(MapColor.airColor);
+
+	/** The material used by BlockGrass. */
 	public static final Material grass = new Material(MapColor.grassColor);
 	public static final Material ground = new Material(MapColor.dirtColor);
 	public static final Material wood = (new Material(MapColor.woodColor)).setBurning();
@@ -25,27 +27,62 @@
 	public static final Material coral = (new Material(MapColor.foliageColor)).setNoPushMobility();
 	public static final Material ice = (new Material(MapColor.iceColor)).setTranslucent().setAdventureModeExempt();
 	public static final Material snow = (new MaterialLogic(MapColor.snowColor)).setReplaceable().setTranslucent().setRequiresTool().setNoPushMobility();
+
+	/** The material for crafted snow. */
 	public static final Material craftedSnow = (new Material(MapColor.snowColor)).setRequiresTool();
 	public static final Material cactus = (new Material(MapColor.foliageColor)).setTranslucent().setNoPushMobility();
 	public static final Material clay = new Material(MapColor.clayColor);
+
+	/** pumpkin */
 	public static final Material pumpkin = (new Material(MapColor.foliageColor)).setNoPushMobility();
 	public static final Material dragonEgg = (new Material(MapColor.foliageColor)).setNoPushMobility();
+
+	/** Material used for portals */
 	public static final Material portal = (new MaterialPortal(MapColor.airColor)).setImmovableMobility();
+
+	/** Cake's material, see BlockCake */
 	public static final Material cake = (new Material(MapColor.airColor)).setNoPushMobility();
+
+	/** Web's material. */
 	public static final Material web = (new MaterialWeb(MapColor.clothColor)).setRequiresTool().setNoPushMobility();
+
+	/** Pistons' material. */
 	public static final Material piston = (new Material(MapColor.stoneColor)).setImmovableMobility();
+
+	/** Bool defining if the block can burn or not. */
 	private boolean canBurn;
+
+	/**
+	 * Determines whether blocks with this material can be "overwritten" by other blocks when placed - eg snow, vines and
+	 * tall grass.
+	 */
 	private boolean replaceable;
+
+	/** Indicates if the material is translucent */
 	private boolean isTranslucent;
+
+	/** The color index used to draw the blocks of this material on maps. */
 	public final MapColor materialMapColor;
+
+	/**
+	 * Determines if the material can be harvested without a tool (or with the wrong tool)
+	 */
 	private boolean requiresNoTool = true;
+
+	/**
+	 * Mobility information flag. 0 indicates that this block is normal, 1 indicates that it can't push other blocks, 2
+	 * indicates that it can't be pushed.
+	 */
 	private int mobilityFlag;
 	private boolean isAdventureModeExempt;
 
-	public Material(MapColor var1) {
-		this.materialMapColor = var1;
+	public Material(MapColor par1MapColor) {
+		this.materialMapColor = par1MapColor;
 	}
 
+	/**
+	 * Returns if blocks of these materials are liquids.
+	 */
 	public boolean isLiquid() {
 		return false;
 	}
@@ -54,69 +91,115 @@
 		return true;
 	}
 
+	/**
+	 * Will prevent grass from growing on dirt underneath and kill any grass below it if it returns true
+	 */
 	public boolean getCanBlockGrass() {
 		return true;
 	}
 
+	/**
+	 * Returns if this material is considered solid or not
+	 */
 	public boolean blocksMovement() {
 		return true;
 	}
 
+	/**
+	 * Marks the material as translucent
+	 */
 	private Material setTranslucent() {
 		this.isTranslucent = true;
 		return this;
 	}
 
+	/**
+	 * Makes blocks with this material require the correct tool to be harvested.
+	 */
 	protected Material setRequiresTool() {
 		this.requiresNoTool = false;
 		return this;
 	}
 
+	/**
+	 * Set the canBurn bool to True and return the current object.
+	 */
 	protected Material setBurning() {
 		this.canBurn = true;
 		return this;
 	}
 
+	/**
+	 * Returns if the block can burn or not.
+	 */
 	public boolean getCanBurn() {
 		return this.canBurn;
 	}
 
+	/**
+	 * Sets {@link #replaceable} to true.
+	 */
 	public Material setReplaceable() {
 		this.replaceable = true;
 		return this;
 	}
 
+	/**
+	 * Returns whether the material can be replaced by other blocks when placed - eg snow, vines and tall grass.
+	 */
 	public boolean isReplaceable() {
 		return this.replaceable;
 	}
 
+	/**
+	 * Indicate if the material is opaque
+	 */
 	public boolean isOpaque() {
 		return this.isTranslucent ? false : this.blocksMovement();
 	}
 
+	/**
+	 * Returns true if the material can be harvested without a tool (or with the wrong tool)
+	 */
 	public boolean isToolNotRequired() {
 		return this.requiresNoTool;
 	}
 
+	/**
+	 * Returns the mobility information of the material, 0 = free, 1 = can't push but can move over, 2 = total immobility
+	 * and stop pistons.
+	 */
 	public int getMaterialMobility() {
 		return this.mobilityFlag;
 	}
 
+	/**
+	 * This type of material can't be pushed, but pistons can move over it.
+	 */
 	protected Material setNoPushMobility() {
 		this.mobilityFlag = 1;
 		return this;
 	}
 
+	/**
+	 * This type of material can't be pushed, and pistons are blocked to move.
+	 */
 	protected Material setImmovableMobility() {
 		this.mobilityFlag = 2;
 		return this;
 	}
 
+	/**
+	 * @see #isAdventureModeExempt()
+	 */
 	protected Material setAdventureModeExempt() {
 		this.isAdventureModeExempt = true;
 		return this;
 	}
 
+	/**
+	 * Returns true if blocks with this material can always be mined in adventure mode.
+	 */
 	public boolean isAdventureModeExempt() {
 		return this.isAdventureModeExempt;
 	}
