--- net/minecraft/src/MemoryConnection.java
+++ net/minecraft/src/MemoryConnection.java
@@ -7,28 +7,36 @@
 import java.util.List;
 
 public class MemoryConnection implements INetworkManager {
-	private static final SocketAddress a = new InetSocketAddress("127.0.0.1", 0);
-	private final List b = Collections.synchronizedList(new ArrayList());
+	private static final SocketAddress mySocketAddress = new InetSocketAddress("127.0.0.1", 0);
+	private final List readPacketCache = Collections.synchronizedList(new ArrayList());
 	private final ILogAgent field_98214_c;
 	private MemoryConnection pairedConnection;
 	private NetHandler myNetHandler;
+
+	/** set to true by {server,network}Shutdown */
 	private boolean shuttingDown;
-	private String g = "";
-	private Object[] h;
+	private String shutdownReason = "";
+	private Object[] field_74439_g;
 	private boolean gamePaused;
 
-	public MemoryConnection(ILogAgent var1, NetHandler var2) {
-		this.myNetHandler = var2;
-		this.field_98214_c = var1;
-	}
-
-	public void setNetHandler(NetHandler var1) {
-		this.myNetHandler = var1;
-	}
-
-	public void addToSendQueue(Packet var1) {
-		if(!this.shuttingDown) {
-			this.pairedConnection.processOrCachePacket(var1);
+	public MemoryConnection(ILogAgent par1ILogAgent, NetHandler par2NetHandler) {
+		this.myNetHandler = par2NetHandler;
+		this.field_98214_c = par1ILogAgent;
+	}
+
+	/**
+	 * Sets the NetHandler for this NetworkManager. Server-only.
+	 */
+	public void setNetHandler(NetHandler par1NetHandler) {
+		this.myNetHandler = par1NetHandler;
+	}
+
+	/**
+	 * Adds the packet to the correct send queue (chunk data packets go to a separate queue).
+	 */
+	public void addToSendQueue(Packet par1Packet) {
+		if (!this.shuttingDown) {
+			this.pairedConnection.processOrCachePacket(par1Packet);
 		}
 	}
 
@@ -41,68 +49,87 @@
 		return !this.shuttingDown && this.pairedConnection != null;
 	}
 
-	public void wakeThreads() {
-	}
+	/**
+	 * Wakes reader and writer threads
+	 */
+	public void wakeThreads() {}
 
+	/**
+	 * Checks timeouts and processes all pending read packets.
+	 */
 	public void processReadPackets() {
 		int var1 = 2500;
 
-		while(var1-- >= 0 && !this.b.isEmpty()) {
-			Packet var2 = (Packet)this.b.remove(0);
+		while (var1-- >= 0 && !this.readPacketCache.isEmpty()) {
+			Packet var2 = (Packet)this.readPacketCache.remove(0);
 			var2.processPacket(this.myNetHandler);
 		}
 
-		if(this.b.size() > var1) {
-			this.field_98214_c.logWarning("Memory connection overburdened; after processing 2500 packets, we still have " + this.b.size() + " to go!");
-		}
-
-		if(this.shuttingDown && this.b.isEmpty()) {
-			this.myNetHandler.handleErrorMessage(this.g, this.h);
-		}
-
-	}
-
-	public SocketAddress getRemoteAddress() {
-		return a;
-	}
-
+		if (this.readPacketCache.size() > var1) {
+			this.field_98214_c.logWarning("Memory connection overburdened; after processing 2500 packets, we still have " + this.readPacketCache.size() + " to go!");
+		}
+
+		if (this.shuttingDown && this.readPacketCache.isEmpty()) {
+			this.myNetHandler.handleErrorMessage(this.shutdownReason, this.field_74439_g);
+		}
+	}
+
+	/**
+	 * Return the InetSocketAddress of the remote endpoint
+	 */
+	public SocketAddress getSocketAddress() {
+		return mySocketAddress;
+	}
+
+	/**
+	 * Shuts down the server. (Only actually used on the server)
+	 */
 	public void serverShutdown() {
 		this.shuttingDown = true;
 	}
 
-	public void networkShutdown(String var1, Object... var2) {
+	/**
+	 * Shuts down the network with the specified reason. Closes all streams and sockets, spawns NetworkMasterThread to stop
+	 * reading and writing threads.
+	 */
+	public void networkShutdown(String par1Str, Object ... par2ArrayOfObj) {
 		this.shuttingDown = true;
-		this.g = var1;
-		this.h = var2;
+		this.shutdownReason = par1Str;
+		this.field_74439_g = par2ArrayOfObj;
 	}
 
-	public int getNumChunkDataPackets() {
+	/**
+	 * returns 0 for memoryConnections
+	 */
+	public int packetSize() {
 		return 0;
 	}
 
-	public void pairWith(MemoryConnection var1) {
-		this.pairedConnection = var1;
-		var1.pairedConnection = this;
+	public void pairWith(MemoryConnection par1MemoryConnection) {
+		this.pairedConnection = par1MemoryConnection;
+		par1MemoryConnection.pairedConnection = this;
 	}
 
 	public boolean isGamePaused() {
 		return this.gamePaused;
 	}
 
-	public void setGamePaused(boolean var1) {
-		this.gamePaused = var1;
+	public void setGamePaused(boolean par1) {
+		this.gamePaused = par1;
 	}
 
 	public MemoryConnection getPairedConnection() {
 		return this.pairedConnection;
 	}
 
-	public void processOrCachePacket(Packet var1) {
-		if(var1.canProcessAsync() && this.myNetHandler.canProcessPacketsAsync()) {
-			var1.processPacket(this.myNetHandler);
+	/**
+	 * acts immiditally if isWritePacket, otherwise adds it to the readCache to be processed next tick
+	 */
+	public void processOrCachePacket(Packet par1Packet) {
+		if (par1Packet.canProcessAsync() && this.myNetHandler.canProcessPacketsAsync()) {
+			par1Packet.processPacket(this.myNetHandler);
 		} else {
-			this.b.add(var1);
+			this.readPacketCache.add(par1Packet);
 		}
-
 	}
 }
