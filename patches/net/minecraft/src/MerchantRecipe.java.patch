--- net/minecraft/src/MerchantRecipe.java
+++ net/minecraft/src/MerchantRecipe.java
@@ -1,61 +1,91 @@
 package net.minecraft.src;
 
 public class MerchantRecipe {
+
+	/** Item the Villager buys. */
 	private ItemStack itemToBuy;
+
+	/** Second Item the Villager buys. */
 	private ItemStack secondItemToBuy;
+
+	/** Item the Villager sells. */
 	private ItemStack itemToSell;
+
+	/**
+	 * Saves how much has been tool used when put into to slot to be enchanted.
+	 */
 	private int toolUses;
+
+	/** Maximum times this trade can be used. */
 	private int maxTradeUses;
 
-	public MerchantRecipe(NBTTagCompound var1) {
-		this.readFromTags(var1);
+	public MerchantRecipe(NBTTagCompound par1NBTTagCompound) {
+		this.readFromTags(par1NBTTagCompound);
 	}
 
-	public MerchantRecipe(ItemStack var1, ItemStack var2, ItemStack var3) {
-		this.itemToBuy = var1;
-		this.secondItemToBuy = var2;
-		this.itemToSell = var3;
+	public MerchantRecipe(ItemStack par1ItemStack, ItemStack par2ItemStack, ItemStack par3ItemStack) {
+		this.itemToBuy = par1ItemStack;
+		this.secondItemToBuy = par2ItemStack;
+		this.itemToSell = par3ItemStack;
 		this.maxTradeUses = 7;
 	}
 
-	public MerchantRecipe(ItemStack var1, ItemStack var2) {
-		this(var1, (ItemStack)null, var2);
-	}
-
-	public MerchantRecipe(ItemStack var1, Item var2) {
-		this(var1, new ItemStack(var2));
-	}
-
+	public MerchantRecipe(ItemStack par1ItemStack, ItemStack par2ItemStack) {
+		this(par1ItemStack, (ItemStack)null, par2ItemStack);
+	}
+
+	public MerchantRecipe(ItemStack par1ItemStack, Item par2Item) {
+		this(par1ItemStack, new ItemStack(par2Item));
+	}
+
+	/**
+	 * Gets the itemToBuy.
+	 */
 	public ItemStack getItemToBuy() {
 		return this.itemToBuy;
 	}
 
+	/**
+	 * Gets secondItemToBuy.
+	 */
 	public ItemStack getSecondItemToBuy() {
 		return this.secondItemToBuy;
 	}
 
+	/**
+	 * Gets if Villager has secondItemToBuy.
+	 */
 	public boolean hasSecondItemToBuy() {
 		return this.secondItemToBuy != null;
 	}
 
+	/**
+	 * Gets itemToSell.
+	 */
 	public ItemStack getItemToSell() {
 		return this.itemToSell;
 	}
 
-	public boolean hasSameIDsAs(MerchantRecipe var1) {
-		return this.itemToBuy.itemID == var1.itemToBuy.itemID && this.itemToSell.itemID == var1.itemToSell.itemID ? this.secondItemToBuy == null && var1.secondItemToBuy == null || this.secondItemToBuy != null && var1.secondItemToBuy != null && this.secondItemToBuy.itemID == var1.secondItemToBuy.itemID : false;
+	/**
+	 * checks if both the first and second ItemToBuy IDs are the same
+	 */
+	public boolean hasSameIDsAs(MerchantRecipe par1MerchantRecipe) {
+		return this.itemToBuy.itemID == par1MerchantRecipe.itemToBuy.itemID && this.itemToSell.itemID == par1MerchantRecipe.itemToSell.itemID ? this.secondItemToBuy == null && par1MerchantRecipe.secondItemToBuy == null || this.secondItemToBuy != null && par1MerchantRecipe.secondItemToBuy != null && this.secondItemToBuy.itemID == par1MerchantRecipe.secondItemToBuy.itemID : false;
 	}
 
-	public boolean hasSameItemsAs(MerchantRecipe var1) {
-		return this.hasSameIDsAs(var1) && (this.itemToBuy.stackSize < var1.itemToBuy.stackSize || this.secondItemToBuy != null && this.secondItemToBuy.stackSize < var1.secondItemToBuy.stackSize);
+	/**
+	 * checks first and second ItemToBuy ID's and count. Calls hasSameIDs
+	 */
+	public boolean hasSameItemsAs(MerchantRecipe par1MerchantRecipe) {
+		return this.hasSameIDsAs(par1MerchantRecipe) && (this.itemToBuy.stackSize < par1MerchantRecipe.itemToBuy.stackSize || this.secondItemToBuy != null && this.secondItemToBuy.stackSize < par1MerchantRecipe.secondItemToBuy.stackSize);
 	}
 
 	public void incrementToolUses() {
 		++this.toolUses;
 	}
 
-	public void func_82783_a(int var1) {
-		this.maxTradeUses += var1;
+	public void func_82783_a(int par1) {
+		this.maxTradeUses += par1;
 	}
 
 	public boolean func_82784_g() {
@@ -66,32 +96,33 @@
 		this.toolUses = this.maxTradeUses;
 	}
 
-	public void readFromTags(NBTTagCompound var1) {
-		NBTTagCompound var2 = var1.getCompoundTag("buy");
+	public void readFromTags(NBTTagCompound par1NBTTagCompound) {
+		NBTTagCompound var2 = par1NBTTagCompound.getCompoundTag("buy");
 		this.itemToBuy = ItemStack.loadItemStackFromNBT(var2);
-		NBTTagCompound var3 = var1.getCompoundTag("sell");
+		NBTTagCompound var3 = par1NBTTagCompound.getCompoundTag("sell");
 		this.itemToSell = ItemStack.loadItemStackFromNBT(var3);
-		if(var1.hasKey("buyB")) {
-			this.secondItemToBuy = ItemStack.loadItemStackFromNBT(var1.getCompoundTag("buyB"));
-		}
-
-		if(var1.hasKey("uses")) {
-			this.toolUses = var1.getInteger("uses");
-		}
-
-		if(var1.hasKey("maxUses")) {
-			this.maxTradeUses = var1.getInteger("maxUses");
+
+		if (par1NBTTagCompound.hasKey("buyB")) {
+			this.secondItemToBuy = ItemStack.loadItemStackFromNBT(par1NBTTagCompound.getCompoundTag("buyB"));
+		}
+
+		if (par1NBTTagCompound.hasKey("uses")) {
+			this.toolUses = par1NBTTagCompound.getInteger("uses");
+		}
+
+		if (par1NBTTagCompound.hasKey("maxUses")) {
+			this.maxTradeUses = par1NBTTagCompound.getInteger("maxUses");
 		} else {
 			this.maxTradeUses = 7;
 		}
-
 	}
 
 	public NBTTagCompound writeToTags() {
 		NBTTagCompound var1 = new NBTTagCompound();
 		var1.setCompoundTag("buy", this.itemToBuy.writeToNBT(new NBTTagCompound("buy")));
 		var1.setCompoundTag("sell", this.itemToSell.writeToNBT(new NBTTagCompound("sell")));
-		if(this.secondItemToBuy != null) {
+
+		if (this.secondItemToBuy != null) {
 			var1.setCompoundTag("buyB", this.secondItemToBuy.writeToNBT(new NBTTagCompound("buyB")));
 		}
 
