--- net/minecraft/src/ModelBat.java
+++ net/minecraft/src/ModelBat.java
@@ -2,10 +2,20 @@
 
 public class ModelBat extends ModelBase {
 	private ModelRenderer batHead;
+
+	/** The body box of the bat model. */
 	private ModelRenderer batBody;
+
+	/** The inner right wing box of the bat model. */
 	private ModelRenderer batRightWing;
+
+	/** The inner left wing box of the bat model. */
 	private ModelRenderer batLeftWing;
+
+	/** The outer right wing box of the bat model. */
 	private ModelRenderer batOuterRightWing;
+
+	/** The outer left wing box of the bat model. */
 	private ModelRenderer batOuterLeftWing;
 
 	public ModelBat() {
@@ -41,45 +51,53 @@
 		this.batLeftWing.addChild(this.batOuterLeftWing);
 	}
 
+	/**
+	 * not actually sure this is size, is not used as of now, but the model would be recreated if the value changed and it
+	 * seems a good match for a bats size
+	 */
 	public int getBatSize() {
 		return 36;
 	}
 
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		EntityBat var8 = (EntityBat)var1;
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {
+		EntityBat var8 = (EntityBat)par1Entity;
 		float var9;
-		if(var8.getIsBatHanging()) {
-			var9 = 180.0F / (float)Math.PI;
-			this.batHead.rotateAngleX = var6 / (180.0F / (float)Math.PI);
-			this.batHead.rotateAngleY = (float)Math.PI - var5 / (180.0F / (float)Math.PI);
+
+		if (var8.getIsBatHanging()) {
+			var9 = (180F / (float)Math.PI);
+			this.batHead.rotateAngleX = par6 / (180F / (float)Math.PI);
+			this.batHead.rotateAngleY = (float)Math.PI - par5 / (180F / (float)Math.PI);
 			this.batHead.rotateAngleZ = (float)Math.PI;
 			this.batHead.setRotationPoint(0.0F, -2.0F, 0.0F);
 			this.batRightWing.setRotationPoint(-3.0F, 0.0F, 3.0F);
 			this.batLeftWing.setRotationPoint(3.0F, 0.0F, 3.0F);
 			this.batBody.rotateAngleX = (float)Math.PI;
-			this.batRightWing.rotateAngleX = (float)Math.PI * -0.05F;
-			this.batRightWing.rotateAngleY = (float)Math.PI * -0.4F;
-			this.batOuterRightWing.rotateAngleY = (float)Math.PI * -0.55F;
+			this.batRightWing.rotateAngleX = -0.15707964F;
+			this.batRightWing.rotateAngleY = -((float)Math.PI * 2F / 5F);
+			this.batOuterRightWing.rotateAngleY = -1.7278761F;
 			this.batLeftWing.rotateAngleX = this.batRightWing.rotateAngleX;
 			this.batLeftWing.rotateAngleY = -this.batRightWing.rotateAngleY;
 			this.batOuterLeftWing.rotateAngleY = -this.batOuterRightWing.rotateAngleY;
 		} else {
-			var9 = 180.0F / (float)Math.PI;
-			this.batHead.rotateAngleX = var6 / (180.0F / (float)Math.PI);
-			this.batHead.rotateAngleY = var5 / (180.0F / (float)Math.PI);
+			var9 = (180F / (float)Math.PI);
+			this.batHead.rotateAngleX = par6 / (180F / (float)Math.PI);
+			this.batHead.rotateAngleY = par5 / (180F / (float)Math.PI);
 			this.batHead.rotateAngleZ = 0.0F;
 			this.batHead.setRotationPoint(0.0F, 0.0F, 0.0F);
 			this.batRightWing.setRotationPoint(0.0F, 0.0F, 0.0F);
 			this.batLeftWing.setRotationPoint(0.0F, 0.0F, 0.0F);
-			this.batBody.rotateAngleX = (float)Math.PI * 0.25F + MathHelper.cos(var4 * 0.1F) * 0.15F;
+			this.batBody.rotateAngleX = ((float)Math.PI / 4F) + MathHelper.cos(par4 * 0.1F) * 0.15F;
 			this.batBody.rotateAngleY = 0.0F;
-			this.batRightWing.rotateAngleY = MathHelper.cos(var4 * 1.3F) * (float)Math.PI * 0.25F;
+			this.batRightWing.rotateAngleY = MathHelper.cos(par4 * 1.3F) * (float)Math.PI * 0.25F;
 			this.batLeftWing.rotateAngleY = -this.batRightWing.rotateAngleY;
 			this.batOuterRightWing.rotateAngleY = this.batRightWing.rotateAngleY * 0.5F;
 			this.batOuterLeftWing.rotateAngleY = -this.batRightWing.rotateAngleY * 0.5F;
 		}
 
-		this.batHead.render(var7);
-		this.batBody.render(var7);
+		this.batHead.render(par7);
+		this.batBody.render(par7);
 	}
 }
