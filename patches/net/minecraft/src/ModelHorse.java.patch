--- net/minecraft/src/ModelHorse.java
+++ net/minecraft/src/ModelHorse.java
@@ -134,11 +134,11 @@
 		this.field_110687_G = new ModelRenderer(this, 0, 34);
 		this.field_110687_G.addBox(-3.0F, 0.0F, 0.0F, 8, 8, 3);
 		this.field_110687_G.setRotationPoint(-7.5F, 3.0F, 10.0F);
-		this.func_110682_a(this.field_110687_G, 0.0F, 1.570796F, 0.0F);
+		this.func_110682_a(this.field_110687_G, 0.0F, ((float)Math.PI / 2F), 0.0F);
 		this.field_110695_H = new ModelRenderer(this, 0, 47);
 		this.field_110695_H.addBox(-3.0F, 0.0F, 0.0F, 8, 8, 3);
 		this.field_110695_H.setRotationPoint(4.5F, 3.0F, 10.0F);
-		this.func_110682_a(this.field_110695_H, 0.0F, 1.570796F, 0.0F);
+		this.func_110682_a(this.field_110695_H, 0.0F, ((float)Math.PI / 2F), 0.0F);
 		this.field_110696_I = new ModelRenderer(this, 80, 0);
 		this.field_110696_I.addBox(-5.0F, 0.0F, -3.0F, 10, 1, 8);
 		this.field_110696_I.setRotationPoint(0.0F, 2.0F, 2.0F);
@@ -184,8 +184,11 @@
 		this.func_110682_a(this.field_110717_i, 0.5235988F, 0.0F, 0.0F);
 	}
 
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		EntityHorse var8 = (EntityHorse)var1;
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {
+		EntityHorse var8 = (EntityHorse)par1Entity;
 		int var9 = var8.getHorseType();
 		float var10 = var8.getGrassEatingAmount(0.0F);
 		boolean var11 = var8.isAdultHorse();
@@ -194,134 +197,146 @@
 		boolean var14 = var9 == 1 || var9 == 2;
 		float var15 = var8.getHorseSize();
 		boolean var16 = var8.riddenByEntity != null;
-		if(var12) {
-			this.field_110717_i.render(var7);
-			this.field_110696_I.render(var7);
-			this.field_110697_J.render(var7);
-			this.field_110698_K.render(var7);
-			this.field_110691_L.render(var7);
-			this.field_110692_M.render(var7);
-			this.field_110693_N.render(var7);
-			this.field_110694_O.render(var7);
-			this.field_110700_P.render(var7);
-			this.field_110699_Q.render(var7);
-			if(var16) {
-				this.field_110702_R.render(var7);
-				this.field_110701_S.render(var7);
+
+		if (var12) {
+			this.field_110717_i.render(par7);
+			this.field_110696_I.render(par7);
+			this.field_110697_J.render(par7);
+			this.field_110698_K.render(par7);
+			this.field_110691_L.render(par7);
+			this.field_110692_M.render(par7);
+			this.field_110693_N.render(par7);
+			this.field_110694_O.render(par7);
+			this.field_110700_P.render(par7);
+			this.field_110699_Q.render(par7);
+
+			if (var16) {
+				this.field_110702_R.render(par7);
+				this.field_110701_S.render(par7);
 			}
 		}
 
-		if(!var11) {
+		if (!var11) {
 			GL11.glPushMatrix();
 			GL11.glScalef(var15, 0.5F + var15 * 0.5F, var15);
 			GL11.glTranslatef(0.0F, 0.95F * (1.0F - var15), 0.0F);
 		}
 
-		this.backLeftLeg.render(var7);
-		this.backLeftShin.render(var7);
-		this.backLeftHoof.render(var7);
-		this.backRightLeg.render(var7);
-		this.backRightShin.render(var7);
-		this.backRightHoof.render(var7);
-		this.frontRightLeg.render(var7);
-		this.frontLeftShin.render(var7);
-		this.frontLeftHoof.render(var7);
-		this.field_110684_D.render(var7);
-		this.frontRightShin.render(var7);
-		this.frontRightHoof.render(var7);
-		if(!var11) {
+		this.backLeftLeg.render(par7);
+		this.backLeftShin.render(par7);
+		this.backLeftHoof.render(par7);
+		this.backRightLeg.render(par7);
+		this.backRightShin.render(par7);
+		this.backRightHoof.render(par7);
+		this.frontRightLeg.render(par7);
+		this.frontLeftShin.render(par7);
+		this.frontLeftHoof.render(par7);
+		this.field_110684_D.render(par7);
+		this.frontRightShin.render(par7);
+		this.frontRightHoof.render(par7);
+
+		if (!var11) {
 			GL11.glPopMatrix();
 			GL11.glPushMatrix();
 			GL11.glScalef(var15, var15, var15);
 			GL11.glTranslatef(0.0F, 1.35F * (1.0F - var15), 0.0F);
 		}
 
-		this.body.render(var7);
-		this.tailBase.render(var7);
-		this.tailMiddle.render(var7);
-		this.tailTip.render(var7);
-		this.neck.render(var7);
-		this.mane.render(var7);
-		if(!var11) {
+		this.body.render(par7);
+		this.tailBase.render(par7);
+		this.tailMiddle.render(par7);
+		this.tailTip.render(par7);
+		this.neck.render(par7);
+		this.mane.render(par7);
+
+		if (!var11) {
 			GL11.glPopMatrix();
 			GL11.glPushMatrix();
 			float var17 = 0.5F + var15 * var15 * 0.5F;
 			GL11.glScalef(var17, var17, var17);
-			if(var10 <= 0.0F) {
+
+			if (var10 <= 0.0F) {
 				GL11.glTranslatef(0.0F, 1.35F * (1.0F - var15), 0.0F);
 			} else {
 				GL11.glTranslatef(0.0F, 0.9F * (1.0F - var15) * var10 + 1.35F * (1.0F - var15) * (1.0F - var10), 0.15F * (1.0F - var15) * var10);
 			}
 		}
 
-		if(var14) {
-			this.field_110703_f.render(var7);
-			this.field_110704_g.render(var7);
+		if (var14) {
+			this.field_110703_f.render(par7);
+			this.field_110704_g.render(par7);
 		} else {
-			this.horseLeftEar.render(var7);
-			this.horseRightEar.render(var7);
+			this.horseLeftEar.render(par7);
+			this.horseRightEar.render(par7);
 		}
 
-		this.head.render(var7);
-		if(!var11) {
+		this.head.render(par7);
+
+		if (!var11) {
 			GL11.glPopMatrix();
 		}
 
-		if(var13) {
-			this.field_110687_G.render(var7);
-			this.field_110695_H.render(var7);
+		if (var13) {
+			this.field_110687_G.render(par7);
+			this.field_110695_H.render(par7);
 		}
-
-	}
-
-	private void func_110682_a(ModelRenderer var1, float var2, float var3, float var4) {
-		var1.rotateAngleX = var2;
-		var1.rotateAngleY = var3;
-		var1.rotateAngleZ = var4;
-	}
-
-	private float func_110683_a(float var1, float var2, float var3) {
+	}
+
+	private void func_110682_a(ModelRenderer par1ModelRenderer, float par2, float par3, float par4) {
+		par1ModelRenderer.rotateAngleX = par2;
+		par1ModelRenderer.rotateAngleY = par3;
+		par1ModelRenderer.rotateAngleZ = par4;
+	}
+
+	private float func_110683_a(float par1, float par2, float par3) {
 		float var4;
-		for(var4 = var2 - var1; var4 < -180.0F; var4 += 360.0F) {
+
+		for (var4 = par2 - par1; var4 < -180.0F; var4 += 360.0F) {
+			;
 		}
 
-		while(var4 >= 180.0F) {
+		while (var4 >= 180.0F) {
 			var4 -= 360.0F;
 		}
 
-		return var1 + var3 * var4;
+		return par1 + par3 * var4;
 	}
 
-	public void setLivingAnimations(EntityLivingBase var1, float var2, float var3, float var4) {
-		super.setLivingAnimations(var1, var2, var3, var4);
-		float var5 = this.func_110683_a(var1.prevRenderYawOffset, var1.renderYawOffset, var4);
-		float var6 = this.func_110683_a(var1.prevRotationYawHead, var1.rotationYawHead, var4);
-		float var7 = var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var4;
+	/**
+	 * Used for easily adding entity-dependent animations. The second and third float params here are the same second and
+	 * third as in the setRotationAngles method.
+	 */
+	public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4) {
+		super.setLivingAnimations(par1EntityLivingBase, par2, par3, par4);
+		float var5 = this.func_110683_a(par1EntityLivingBase.prevRenderYawOffset, par1EntityLivingBase.renderYawOffset, par4);
+		float var6 = this.func_110683_a(par1EntityLivingBase.prevRotationYawHead, par1EntityLivingBase.rotationYawHead, par4);
+		float var7 = par1EntityLivingBase.prevRotationPitch + (par1EntityLivingBase.rotationPitch - par1EntityLivingBase.prevRotationPitch) * par4;
 		float var8 = var6 - var5;
-		float var9 = var7 / 57.29578F;
-		if(var8 > 20.0F) {
+		float var9 = var7 / (180F / (float)Math.PI);
+
+		if (var8 > 20.0F) {
 			var8 = 20.0F;
 		}
 
-		if(var8 < -20.0F) {
+		if (var8 < -20.0F) {
 			var8 = -20.0F;
 		}
 
-		if(var3 > 0.2F) {
-			var9 += MathHelper.cos(var2 * 0.4F) * 0.15F * var3;
+		if (par3 > 0.2F) {
+			var9 += MathHelper.cos(par2 * 0.4F) * 0.15F * par3;
 		}
 
-		EntityHorse var10 = (EntityHorse)var1;
-		float var11 = var10.getGrassEatingAmount(var4);
-		float var12 = var10.getRearingAmount(var4);
+		EntityHorse var10 = (EntityHorse)par1EntityLivingBase;
+		float var11 = var10.getGrassEatingAmount(par4);
+		float var12 = var10.getRearingAmount(par4);
 		float var13 = 1.0F - var12;
-		float var14 = var10.func_110201_q(var4);
+		float var14 = var10.func_110201_q(par4);
 		boolean var15 = var10.field_110278_bp != 0;
 		boolean var16 = var10.isHorseSaddled();
 		boolean var17 = var10.riddenByEntity != null;
-		float var18 = (float)var1.ticksExisted + var4;
-		float var19 = MathHelper.cos(var2 * 0.6662F + 3.141593F);
-		float var20 = var19 * 0.8F * var3;
+		float var18 = (float)par1EntityLivingBase.ticksExisted + par4;
+		float var19 = MathHelper.cos(par2 * 0.6662F + (float)Math.PI);
+		float var20 = var19 * 0.8F * par3;
 		this.head.rotationPointY = 4.0F;
 		this.head.rotationPointZ = -10.0F;
 		this.tailBase.rotationPointY = 3.0F;
@@ -330,16 +345,16 @@
 		this.field_110695_H.rotationPointZ = 10.0F;
 		this.body.rotateAngleX = 0.0F;
 		this.head.rotateAngleX = 0.5235988F + var9;
-		this.head.rotateAngleY = var8 / 57.29578F;
+		this.head.rotateAngleY = var8 / (180F / (float)Math.PI);
 		this.head.rotateAngleX = var12 * (0.2617994F + var9) + var11 * 2.18166F + (1.0F - Math.max(var12, var11)) * this.head.rotateAngleX;
-		this.head.rotateAngleY = var12 * (var8 / 57.29578F) + (1.0F - Math.max(var12, var11)) * this.head.rotateAngleY;
+		this.head.rotateAngleY = var12 * (var8 / (180F / (float)Math.PI)) + (1.0F - Math.max(var12, var11)) * this.head.rotateAngleY;
 		this.head.rotationPointY = var12 * -6.0F + var11 * 11.0F + (1.0F - Math.max(var12, var11)) * this.head.rotationPointY;
 		this.head.rotationPointZ = var12 * -1.0F + var11 * -10.0F + (1.0F - Math.max(var12, var11)) * this.head.rotationPointZ;
 		this.tailBase.rotationPointY = var12 * 9.0F + var13 * this.tailBase.rotationPointY;
 		this.tailMiddle.rotationPointZ = var12 * 18.0F + var13 * this.tailMiddle.rotationPointZ;
 		this.field_110695_H.rotationPointY = var12 * 5.5F + var13 * this.field_110695_H.rotationPointY;
 		this.field_110695_H.rotationPointZ = var12 * 15.0F + var13 * this.field_110695_H.rotationPointZ;
-		this.body.rotateAngleX = var12 * -0.7853981F + var13 * this.body.rotateAngleX;
+		this.body.rotateAngleX = var12 * -((float)Math.PI / 4F) + var13 * this.body.rotateAngleX;
 		this.horseLeftEar.rotationPointY = this.head.rotationPointY;
 		this.horseRightEar.rotationPointY = this.head.rotationPointY;
 		this.field_110703_f.rotationPointY = this.head.rotationPointY;
@@ -361,8 +376,8 @@
 		this.field_110703_f.rotateAngleX = this.head.rotateAngleX;
 		this.field_110704_g.rotateAngleX = this.head.rotateAngleX;
 		this.neck.rotateAngleX = this.head.rotateAngleX;
-		this.mouthTop.rotateAngleX = 0.0F - (float)Math.PI * 0.03F * var14;
-		this.mouthBottom.rotateAngleX = 0.0F + (float)Math.PI * 0.05F * var14;
+		this.mouthTop.rotateAngleX = 0.0F - 0.09424778F * var14;
+		this.mouthBottom.rotateAngleX = 0.0F + 0.15707964F * var14;
 		this.mane.rotateAngleX = this.head.rotateAngleX;
 		this.horseLeftEar.rotateAngleY = this.head.rotateAngleY;
 		this.horseRightEar.rotateAngleY = this.head.rotateAngleY;
@@ -374,36 +389,36 @@
 		this.mane.rotateAngleY = this.head.rotateAngleY;
 		this.field_110687_G.rotateAngleX = var20 / 5.0F;
 		this.field_110695_H.rotateAngleX = -var20 / 5.0F;
-		float var21 = (float)Math.PI * 0.5F;
-		float var22 = (float)Math.PI * 3.0F / 2.0F;
+		float var21 = ((float)Math.PI / 2F);
+		float var22 = ((float)Math.PI * 3F / 2F);
 		float var23 = -1.0471976F;
 		float var24 = 0.2617994F * var12;
-		float var25 = MathHelper.cos(var18 * 0.6F + 3.141593F);
+		float var25 = MathHelper.cos(var18 * 0.6F + (float)Math.PI);
 		this.frontRightLeg.rotationPointY = -2.0F * var12 + 9.0F * var13;
 		this.frontRightLeg.rotationPointZ = -2.0F * var12 + -8.0F * var13;
 		this.field_110684_D.rotationPointY = this.frontRightLeg.rotationPointY;
 		this.field_110684_D.rotationPointZ = this.frontRightLeg.rotationPointZ;
-		this.backLeftShin.rotationPointY = this.backLeftLeg.rotationPointY + MathHelper.sin((float)Math.PI * 0.5F + var24 + var13 * -var19 * 0.5F * var3) * 7.0F;
-		this.backLeftShin.rotationPointZ = this.backLeftLeg.rotationPointZ + MathHelper.cos((float)Math.PI * 3.0F / 2.0F + var24 + var13 * -var19 * 0.5F * var3) * 7.0F;
-		this.backRightShin.rotationPointY = this.backRightLeg.rotationPointY + MathHelper.sin((float)Math.PI * 0.5F + var24 + var13 * var19 * 0.5F * var3) * 7.0F;
-		this.backRightShin.rotationPointZ = this.backRightLeg.rotationPointZ + MathHelper.cos((float)Math.PI * 3.0F / 2.0F + var24 + var13 * var19 * 0.5F * var3) * 7.0F;
+		this.backLeftShin.rotationPointY = this.backLeftLeg.rotationPointY + MathHelper.sin(((float)Math.PI / 2F) + var24 + var13 * -var19 * 0.5F * par3) * 7.0F;
+		this.backLeftShin.rotationPointZ = this.backLeftLeg.rotationPointZ + MathHelper.cos(((float)Math.PI * 3F / 2F) + var24 + var13 * -var19 * 0.5F * par3) * 7.0F;
+		this.backRightShin.rotationPointY = this.backRightLeg.rotationPointY + MathHelper.sin(((float)Math.PI / 2F) + var24 + var13 * var19 * 0.5F * par3) * 7.0F;
+		this.backRightShin.rotationPointZ = this.backRightLeg.rotationPointZ + MathHelper.cos(((float)Math.PI * 3F / 2F) + var24 + var13 * var19 * 0.5F * par3) * 7.0F;
 		float var26 = (-1.0471976F + var25) * var12 + var20 * var13;
 		float var27 = (-1.0471976F + -var25) * var12 + -var20 * var13;
-		this.frontLeftShin.rotationPointY = this.frontRightLeg.rotationPointY + MathHelper.sin((float)Math.PI * 0.5F + var26) * 7.0F;
-		this.frontLeftShin.rotationPointZ = this.frontRightLeg.rotationPointZ + MathHelper.cos((float)Math.PI * 3.0F / 2.0F + var26) * 7.0F;
-		this.frontRightShin.rotationPointY = this.field_110684_D.rotationPointY + MathHelper.sin((float)Math.PI * 0.5F + var27) * 7.0F;
-		this.frontRightShin.rotationPointZ = this.field_110684_D.rotationPointZ + MathHelper.cos((float)Math.PI * 3.0F / 2.0F + var27) * 7.0F;
-		this.backLeftLeg.rotateAngleX = var24 + -var19 * 0.5F * var3 * var13;
-		this.backLeftShin.rotateAngleX = -0.08726646F * var12 + (-var19 * 0.5F * var3 - Math.max(0.0F, var19 * 0.5F * var3)) * var13;
+		this.frontLeftShin.rotationPointY = this.frontRightLeg.rotationPointY + MathHelper.sin(((float)Math.PI / 2F) + var26) * 7.0F;
+		this.frontLeftShin.rotationPointZ = this.frontRightLeg.rotationPointZ + MathHelper.cos(((float)Math.PI * 3F / 2F) + var26) * 7.0F;
+		this.frontRightShin.rotationPointY = this.field_110684_D.rotationPointY + MathHelper.sin(((float)Math.PI / 2F) + var27) * 7.0F;
+		this.frontRightShin.rotationPointZ = this.field_110684_D.rotationPointZ + MathHelper.cos(((float)Math.PI * 3F / 2F) + var27) * 7.0F;
+		this.backLeftLeg.rotateAngleX = var24 + -var19 * 0.5F * par3 * var13;
+		this.backLeftShin.rotateAngleX = -0.08726646F * var12 + (-var19 * 0.5F * par3 - Math.max(0.0F, var19 * 0.5F * par3)) * var13;
 		this.backLeftHoof.rotateAngleX = this.backLeftShin.rotateAngleX;
-		this.backRightLeg.rotateAngleX = var24 + var19 * 0.5F * var3 * var13;
-		this.backRightShin.rotateAngleX = -0.08726646F * var12 + (var19 * 0.5F * var3 - Math.max(0.0F, -var19 * 0.5F * var3)) * var13;
+		this.backRightLeg.rotateAngleX = var24 + var19 * 0.5F * par3 * var13;
+		this.backRightShin.rotateAngleX = -0.08726646F * var12 + (var19 * 0.5F * par3 - Math.max(0.0F, -var19 * 0.5F * par3)) * var13;
 		this.backRightHoof.rotateAngleX = this.backRightShin.rotateAngleX;
 		this.frontRightLeg.rotateAngleX = var26;
-		this.frontLeftShin.rotateAngleX = (this.frontRightLeg.rotateAngleX + (float)Math.PI * Math.max(0.0F, 0.2F + var25 * 0.2F)) * var12 + (var20 + Math.max(0.0F, var19 * 0.5F * var3)) * var13;
+		this.frontLeftShin.rotateAngleX = (this.frontRightLeg.rotateAngleX + (float)Math.PI * Math.max(0.0F, 0.2F + var25 * 0.2F)) * var12 + (var20 + Math.max(0.0F, var19 * 0.5F * par3)) * var13;
 		this.frontLeftHoof.rotateAngleX = this.frontLeftShin.rotateAngleX;
 		this.field_110684_D.rotateAngleX = var27;
-		this.frontRightShin.rotateAngleX = (this.field_110684_D.rotateAngleX + (float)Math.PI * Math.max(0.0F, 0.2F - var25 * 0.2F)) * var12 + (-var20 + Math.max(0.0F, -var19 * 0.5F * var3)) * var13;
+		this.frontRightShin.rotateAngleX = (this.field_110684_D.rotateAngleX + (float)Math.PI * Math.max(0.0F, 0.2F - var25 * 0.2F)) * var12 + (-var20 + Math.max(0.0F, -var19 * 0.5F * par3)) * var13;
 		this.frontRightHoof.rotateAngleX = this.frontRightShin.rotateAngleX;
 		this.backLeftHoof.rotationPointY = this.backLeftShin.rotationPointY;
 		this.backLeftHoof.rotationPointZ = this.backLeftShin.rotationPointZ;
@@ -413,7 +428,8 @@
 		this.frontLeftHoof.rotationPointZ = this.frontLeftShin.rotationPointZ;
 		this.frontRightHoof.rotationPointY = this.frontRightShin.rotationPointY;
 		this.frontRightHoof.rotationPointZ = this.frontRightShin.rotationPointZ;
-		if(var16) {
+
+		if (var16) {
 			this.field_110696_I.rotationPointY = var12 * 0.5F + var13 * 2.0F;
 			this.field_110696_I.rotationPointZ = var12 * 11.0F + var13 * 2.0F;
 			this.field_110697_J.rotationPointY = this.field_110696_I.rotationPointY;
@@ -453,7 +469,8 @@
 			this.field_110702_R.rotateAngleY = this.head.rotateAngleY;
 			this.field_110699_Q.rotateAngleY = this.head.rotateAngleY;
 			this.field_110701_S.rotateAngleY = this.head.rotateAngleY;
-			if(var17) {
+
+			if (var17) {
 				this.field_110691_L.rotateAngleX = -1.0471976F;
 				this.field_110692_M.rotateAngleX = -1.0471976F;
 				this.field_110693_N.rotateAngleX = -1.0471976F;
@@ -474,12 +491,13 @@
 			}
 		}
 
-		var21 = -1.3089F + var3 * 1.5F;
-		if(var21 > 0.0F) {
+		var21 = -1.3089F + par3 * 1.5F;
+
+		if (var21 > 0.0F) {
 			var21 = 0.0F;
 		}
 
-		if(var15) {
+		if (var15) {
 			this.tailBase.rotateAngleY = MathHelper.cos(var18 * 0.7F);
 			var21 = 0.0F;
 		} else {
