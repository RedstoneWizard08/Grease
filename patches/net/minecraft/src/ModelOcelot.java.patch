--- net/minecraft/src/ModelOcelot.java
+++ net/minecraft/src/ModelOcelot.java
@@ -3,13 +3,29 @@
 import org.lwjgl.opengl.GL11;
 
 public class ModelOcelot extends ModelBase {
+
+	/** The back left leg model for the Ocelot. */
 	ModelRenderer ocelotBackLeftLeg;
+
+	/** The back right leg model for the Ocelot. */
 	ModelRenderer ocelotBackRightLeg;
+
+	/** The front left leg model for the Ocelot. */
 	ModelRenderer ocelotFrontLeftLeg;
+
+	/** The front right leg model for the Ocelot. */
 	ModelRenderer ocelotFrontRightLeg;
+
+	/** The tail model for the Ocelot. */
 	ModelRenderer ocelotTail;
+
+	/** The second part of tail model for the Ocelot. */
 	ModelRenderer ocelotTail2;
+
+	/** The head model for the Ocelot. */
 	ModelRenderer ocelotHead;
+
+	/** The body model for the Ocelot. */
 	ModelRenderer ocelotBody;
 	int field_78163_i = 1;
 
@@ -48,67 +64,81 @@
 		this.ocelotFrontRightLeg.setRotationPoint(-1.2F, 13.8F, -5.0F);
 	}
 
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		this.setRotationAngles(var2, var3, var4, var5, var6, var7, var1);
-		if(this.isChild) {
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {
+		this.setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
+
+		if (this.isChild) {
 			float var8 = 2.0F;
 			GL11.glPushMatrix();
 			GL11.glScalef(1.5F / var8, 1.5F / var8, 1.5F / var8);
-			GL11.glTranslatef(0.0F, 10.0F * var7, 4.0F * var7);
-			this.ocelotHead.render(var7);
+			GL11.glTranslatef(0.0F, 10.0F * par7, 4.0F * par7);
+			this.ocelotHead.render(par7);
 			GL11.glPopMatrix();
 			GL11.glPushMatrix();
 			GL11.glScalef(1.0F / var8, 1.0F / var8, 1.0F / var8);
-			GL11.glTranslatef(0.0F, 24.0F * var7, 0.0F);
-			this.ocelotBody.render(var7);
-			this.ocelotBackLeftLeg.render(var7);
-			this.ocelotBackRightLeg.render(var7);
-			this.ocelotFrontLeftLeg.render(var7);
-			this.ocelotFrontRightLeg.render(var7);
-			this.ocelotTail.render(var7);
-			this.ocelotTail2.render(var7);
+			GL11.glTranslatef(0.0F, 24.0F * par7, 0.0F);
+			this.ocelotBody.render(par7);
+			this.ocelotBackLeftLeg.render(par7);
+			this.ocelotBackRightLeg.render(par7);
+			this.ocelotFrontLeftLeg.render(par7);
+			this.ocelotFrontRightLeg.render(par7);
+			this.ocelotTail.render(par7);
+			this.ocelotTail2.render(par7);
 			GL11.glPopMatrix();
 		} else {
-			this.ocelotHead.render(var7);
-			this.ocelotBody.render(var7);
-			this.ocelotTail.render(var7);
-			this.ocelotTail2.render(var7);
-			this.ocelotBackLeftLeg.render(var7);
-			this.ocelotBackRightLeg.render(var7);
-			this.ocelotFrontLeftLeg.render(var7);
-			this.ocelotFrontRightLeg.render(var7);
+			this.ocelotHead.render(par7);
+			this.ocelotBody.render(par7);
+			this.ocelotTail.render(par7);
+			this.ocelotTail2.render(par7);
+			this.ocelotBackLeftLeg.render(par7);
+			this.ocelotBackRightLeg.render(par7);
+			this.ocelotFrontLeftLeg.render(par7);
+			this.ocelotFrontRightLeg.render(par7);
 		}
-
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6, Entity var7) {
-		this.ocelotHead.rotateAngleX = var5 / (180.0F / (float)Math.PI);
-		this.ocelotHead.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		if(this.field_78163_i != 3) {
-			this.ocelotBody.rotateAngleX = (float)Math.PI * 0.5F;
-			if(this.field_78163_i == 2) {
-				this.ocelotBackLeftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.0F * var2;
-				this.ocelotBackRightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + 0.3F) * 1.0F * var2;
-				this.ocelotFrontLeftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI + 0.3F) * 1.0F * var2;
-				this.ocelotFrontRightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.0F * var2;
-				this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.55F + (float)Math.PI * 0.1F * MathHelper.cos(var1) * var2;
+	/**
+	 * Sets the model's various rotation angles. For bipeds, par1 and par2 are used for animating the movement of arms and
+	 * legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how "far" arms
+	 * and legs can swing at most.
+	 */
+	public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity) {
+		this.ocelotHead.rotateAngleX = par5 / (180F / (float)Math.PI);
+		this.ocelotHead.rotateAngleY = par4 / (180F / (float)Math.PI);
+
+		if (this.field_78163_i != 3) {
+			this.ocelotBody.rotateAngleX = ((float)Math.PI / 2F);
+
+			if (this.field_78163_i == 2) {
+				this.ocelotBackLeftLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
+				this.ocelotBackRightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + 0.3F) * 1.0F * par2;
+				this.ocelotFrontLeftLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI + 0.3F) * 1.0F * par2;
+				this.ocelotFrontRightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
+				this.ocelotTail2.rotateAngleX = 1.7278761F + ((float)Math.PI / 10F) * MathHelper.cos(par1) * par2;
 			} else {
-				this.ocelotBackLeftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.0F * var2;
-				this.ocelotBackRightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.0F * var2;
-				this.ocelotFrontLeftLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F + (float)Math.PI) * 1.0F * var2;
-				this.ocelotFrontRightLeg.rotateAngleX = MathHelper.cos(var1 * 0.6662F) * 1.0F * var2;
-				if(this.field_78163_i == 1) {
-					this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.55F + (float)Math.PI * 0.25F * MathHelper.cos(var1) * var2;
+				this.ocelotBackLeftLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
+				this.ocelotBackRightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
+				this.ocelotFrontLeftLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.0F * par2;
+				this.ocelotFrontRightLeg.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.0F * par2;
+
+				if (this.field_78163_i == 1) {
+					this.ocelotTail2.rotateAngleX = 1.7278761F + ((float)Math.PI / 4F) * MathHelper.cos(par1) * par2;
 				} else {
-					this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.55F + (float)Math.PI * 0.15F * MathHelper.cos(var1) * var2;
+					this.ocelotTail2.rotateAngleX = 1.7278761F + 0.47123894F * MathHelper.cos(par1) * par2;
 				}
 			}
 		}
-
 	}
 
-	public void setLivingAnimations(EntityLivingBase var1, float var2, float var3, float var4) {
-		EntityOcelot var5 = (EntityOcelot)var1;
+	/**
+	 * Used for easily adding entity-dependent animations. The second and third float params here are the same second and
+	 * third as in the setRotationAngles method.
+	 */
+	public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4) {
+		EntityOcelot var5 = (EntityOcelot)par1EntityLivingBase;
 		this.ocelotBody.rotationPointY = 12.0F;
 		this.ocelotBody.rotationPointZ = -10.0F;
 		this.ocelotHead.rotationPointY = 15.0F;
@@ -122,23 +152,24 @@
 		this.ocelotBackLeftLeg.rotationPointY = this.ocelotBackRightLeg.rotationPointY = 18.0F;
 		this.ocelotBackLeftLeg.rotationPointZ = this.ocelotBackRightLeg.rotationPointZ = 5.0F;
 		this.ocelotTail.rotateAngleX = 0.9F;
-		if(var5.isSneaking()) {
+
+		if (var5.isSneaking()) {
 			++this.ocelotBody.rotationPointY;
 			this.ocelotHead.rotationPointY += 2.0F;
 			++this.ocelotTail.rotationPointY;
 			this.ocelotTail2.rotationPointY += -4.0F;
 			this.ocelotTail2.rotationPointZ += 2.0F;
-			this.ocelotTail.rotateAngleX = (float)Math.PI * 0.5F;
-			this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.5F;
+			this.ocelotTail.rotateAngleX = ((float)Math.PI / 2F);
+			this.ocelotTail2.rotateAngleX = ((float)Math.PI / 2F);
 			this.field_78163_i = 0;
-		} else if(var5.isSprinting()) {
+		} else if (var5.isSprinting()) {
 			this.ocelotTail2.rotationPointY = this.ocelotTail.rotationPointY;
 			this.ocelotTail2.rotationPointZ += 2.0F;
-			this.ocelotTail.rotateAngleX = (float)Math.PI * 0.5F;
-			this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.5F;
+			this.ocelotTail.rotateAngleX = ((float)Math.PI / 2F);
+			this.ocelotTail2.rotateAngleX = ((float)Math.PI / 2F);
 			this.field_78163_i = 2;
-		} else if(var5.isSitting()) {
-			this.ocelotBody.rotateAngleX = (float)Math.PI * 0.25F;
+		} else if (var5.isSitting()) {
+			this.ocelotBody.rotateAngleX = ((float)Math.PI / 4F);
 			this.ocelotBody.rotationPointY += -4.0F;
 			this.ocelotBody.rotationPointZ += 5.0F;
 			this.ocelotHead.rotationPointY += -3.3F;
@@ -147,18 +178,17 @@
 			this.ocelotTail.rotationPointZ += -2.0F;
 			this.ocelotTail2.rotationPointY += 2.0F;
 			this.ocelotTail2.rotationPointZ += -0.8F;
-			this.ocelotTail.rotateAngleX = (float)Math.PI * 0.55F;
-			this.ocelotTail2.rotateAngleX = (float)Math.PI * 0.85F;
-			this.ocelotFrontLeftLeg.rotateAngleX = this.ocelotFrontRightLeg.rotateAngleX = (float)Math.PI * -0.05F;
+			this.ocelotTail.rotateAngleX = 1.7278761F;
+			this.ocelotTail2.rotateAngleX = 2.670354F;
+			this.ocelotFrontLeftLeg.rotateAngleX = this.ocelotFrontRightLeg.rotateAngleX = -0.15707964F;
 			this.ocelotFrontLeftLeg.rotationPointY = this.ocelotFrontRightLeg.rotationPointY = 15.8F;
 			this.ocelotFrontLeftLeg.rotationPointZ = this.ocelotFrontRightLeg.rotationPointZ = -7.0F;
-			this.ocelotBackLeftLeg.rotateAngleX = this.ocelotBackRightLeg.rotateAngleX = (float)Math.PI * -0.5F;
+			this.ocelotBackLeftLeg.rotateAngleX = this.ocelotBackRightLeg.rotateAngleX = -((float)Math.PI / 2F);
 			this.ocelotBackLeftLeg.rotationPointY = this.ocelotBackRightLeg.rotationPointY = 21.0F;
 			this.ocelotBackLeftLeg.rotationPointZ = this.ocelotBackRightLeg.rotationPointZ = 1.0F;
 			this.field_78163_i = 3;
 		} else {
 			this.field_78163_i = 1;
 		}
-
 	}
 }
