--- net/minecraft/src/ModelWither.java
+++ net/minecraft/src/ModelWither.java
@@ -35,44 +35,54 @@
 		return 32;
 	}
 
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		this.setRotationAngles(var2, var3, var4, var5, var6, var7, var1);
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {
+		this.setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
 		ModelRenderer[] var8 = this.field_82904_b;
 		int var9 = var8.length;
-
 		int var10;
 		ModelRenderer var11;
-		for(var10 = 0; var10 < var9; ++var10) {
+
+		for (var10 = 0; var10 < var9; ++var10) {
 			var11 = var8[var10];
-			var11.render(var7);
+			var11.render(par7);
 		}
 
 		var8 = this.field_82905_a;
 		var9 = var8.length;
 
-		for(var10 = 0; var10 < var9; ++var10) {
+		for (var10 = 0; var10 < var9; ++var10) {
 			var11 = var8[var10];
-			var11.render(var7);
+			var11.render(par7);
 		}
-
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6, Entity var7) {
-		float var8 = MathHelper.cos(var3 * 0.1F);
+	/**
+	 * Sets the model's various rotation angles. For bipeds, par1 and par2 are used for animating the movement of arms and
+	 * legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how "far" arms
+	 * and legs can swing at most.
+	 */
+	public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity) {
+		float var8 = MathHelper.cos(par3 * 0.1F);
 		this.field_82905_a[1].rotateAngleX = (0.065F + 0.05F * var8) * (float)Math.PI;
 		this.field_82905_a[2].setRotationPoint(-2.0F, 6.9F + MathHelper.cos(this.field_82905_a[1].rotateAngleX) * 10.0F, -0.5F + MathHelper.sin(this.field_82905_a[1].rotateAngleX) * 10.0F);
 		this.field_82905_a[2].rotateAngleX = (0.265F + 0.1F * var8) * (float)Math.PI;
-		this.field_82904_b[0].rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.field_82904_b[0].rotateAngleX = var5 / (180.0F / (float)Math.PI);
+		this.field_82904_b[0].rotateAngleY = par4 / (180F / (float)Math.PI);
+		this.field_82904_b[0].rotateAngleX = par5 / (180F / (float)Math.PI);
 	}
 
-	public void setLivingAnimations(EntityLivingBase var1, float var2, float var3, float var4) {
-		EntityWither var5 = (EntityWither)var1;
+	/**
+	 * Used for easily adding entity-dependent animations. The second and third float params here are the same second and
+	 * third as in the setRotationAngles method.
+	 */
+	public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4) {
+		EntityWither var5 = (EntityWither)par1EntityLivingBase;
 
-		for(int var6 = 1; var6 < 3; ++var6) {
-			this.field_82904_b[var6].rotateAngleY = (var5.func_82207_a(var6 - 1) - var1.renderYawOffset) / (180.0F / (float)Math.PI);
-			this.field_82904_b[var6].rotateAngleX = var5.func_82210_r(var6 - 1) / (180.0F / (float)Math.PI);
+		for (int var6 = 1; var6 < 3; ++var6) {
+			this.field_82904_b[var6].rotateAngleY = (var5.func_82207_a(var6 - 1) - par1EntityLivingBase.renderYawOffset) / (180F / (float)Math.PI);
+			this.field_82904_b[var6].rotateAngleX = var5.func_82210_r(var6 - 1) / (180F / (float)Math.PI);
 		}
-
 	}
 }
