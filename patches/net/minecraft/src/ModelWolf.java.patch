--- net/minecraft/src/ModelWolf.java
+++ net/minecraft/src/ModelWolf.java
@@ -3,13 +3,29 @@
 import org.lwjgl.opengl.GL11;
 
 public class ModelWolf extends ModelBase {
+
+	/** main box for the wolf head */
 	public ModelRenderer wolfHeadMain;
+
+	/** The wolf's body */
 	public ModelRenderer wolfBody;
+
+	/** Wolf'se first leg */
 	public ModelRenderer wolfLeg1;
+
+	/** Wolf's second leg */
 	public ModelRenderer wolfLeg2;
+
+	/** Wolf's third leg */
 	public ModelRenderer wolfLeg3;
+
+	/** Wolf's fourth leg */
 	public ModelRenderer wolfLeg4;
+
+	/** The wolf's tail */
 	ModelRenderer wolfTail;
+
+	/** The wolf's mane */
 	ModelRenderer wolfMane;
 
 	public ModelWolf() {
@@ -44,65 +60,73 @@
 		this.wolfHeadMain.setTextureOffset(0, 10).addBox(-1.5F, 0.0F, -5.0F, 3, 3, 4, var1);
 	}
 
-	public void render(Entity var1, float var2, float var3, float var4, float var5, float var6, float var7) {
-		super.render(var1, var2, var3, var4, var5, var6, var7);
-		this.setRotationAngles(var2, var3, var4, var5, var6, var7, var1);
-		if(this.isChild) {
+	/**
+	 * Sets the models various rotation angles then renders the model.
+	 */
+	public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7) {
+		super.render(par1Entity, par2, par3, par4, par5, par6, par7);
+		this.setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
+
+		if (this.isChild) {
 			float var8 = 2.0F;
 			GL11.glPushMatrix();
-			GL11.glTranslatef(0.0F, 5.0F * var7, 2.0F * var7);
-			this.wolfHeadMain.renderWithRotation(var7);
+			GL11.glTranslatef(0.0F, 5.0F * par7, 2.0F * par7);
+			this.wolfHeadMain.renderWithRotation(par7);
 			GL11.glPopMatrix();
 			GL11.glPushMatrix();
 			GL11.glScalef(1.0F / var8, 1.0F / var8, 1.0F / var8);
-			GL11.glTranslatef(0.0F, 24.0F * var7, 0.0F);
-			this.wolfBody.render(var7);
-			this.wolfLeg1.render(var7);
-			this.wolfLeg2.render(var7);
-			this.wolfLeg3.render(var7);
-			this.wolfLeg4.render(var7);
-			this.wolfTail.renderWithRotation(var7);
-			this.wolfMane.render(var7);
+			GL11.glTranslatef(0.0F, 24.0F * par7, 0.0F);
+			this.wolfBody.render(par7);
+			this.wolfLeg1.render(par7);
+			this.wolfLeg2.render(par7);
+			this.wolfLeg3.render(par7);
+			this.wolfLeg4.render(par7);
+			this.wolfTail.renderWithRotation(par7);
+			this.wolfMane.render(par7);
 			GL11.glPopMatrix();
 		} else {
-			this.wolfHeadMain.renderWithRotation(var7);
-			this.wolfBody.render(var7);
-			this.wolfLeg1.render(var7);
-			this.wolfLeg2.render(var7);
-			this.wolfLeg3.render(var7);
-			this.wolfLeg4.render(var7);
-			this.wolfTail.renderWithRotation(var7);
-			this.wolfMane.render(var7);
+			this.wolfHeadMain.renderWithRotation(par7);
+			this.wolfBody.render(par7);
+			this.wolfLeg1.render(par7);
+			this.wolfLeg2.render(par7);
+			this.wolfLeg3.render(par7);
+			this.wolfLeg4.render(par7);
+			this.wolfTail.renderWithRotation(par7);
+			this.wolfMane.render(par7);
 		}
-
 	}
 
-	public void setLivingAnimations(EntityLivingBase var1, float var2, float var3, float var4) {
-		EntityWolf var5 = (EntityWolf)var1;
-		if(var5.isAngry()) {
+	/**
+	 * Used for easily adding entity-dependent animations. The second and third float params here are the same second and
+	 * third as in the setRotationAngles method.
+	 */
+	public void setLivingAnimations(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4) {
+		EntityWolf var5 = (EntityWolf)par1EntityLivingBase;
+
+		if (var5.isAngry()) {
 			this.wolfTail.rotateAngleY = 0.0F;
 		} else {
-			this.wolfTail.rotateAngleY = MathHelper.cos(var2 * 0.6662F) * 1.4F * var3;
+			this.wolfTail.rotateAngleY = MathHelper.cos(par2 * 0.6662F) * 1.4F * par3;
 		}
 
-		if(var5.isSitting()) {
+		if (var5.isSitting()) {
 			this.wolfMane.setRotationPoint(-1.0F, 16.0F, -3.0F);
-			this.wolfMane.rotateAngleX = (float)Math.PI * 0.4F;
+			this.wolfMane.rotateAngleX = ((float)Math.PI * 2F / 5F);
 			this.wolfMane.rotateAngleY = 0.0F;
 			this.wolfBody.setRotationPoint(0.0F, 18.0F, 0.0F);
-			this.wolfBody.rotateAngleX = (float)Math.PI * 0.25F;
+			this.wolfBody.rotateAngleX = ((float)Math.PI / 4F);
 			this.wolfTail.setRotationPoint(-1.0F, 21.0F, 6.0F);
 			this.wolfLeg1.setRotationPoint(-2.5F, 22.0F, 2.0F);
-			this.wolfLeg1.rotateAngleX = (float)Math.PI * 3.0F / 2.0F;
+			this.wolfLeg1.rotateAngleX = ((float)Math.PI * 3F / 2F);
 			this.wolfLeg2.setRotationPoint(0.5F, 22.0F, 2.0F);
-			this.wolfLeg2.rotateAngleX = (float)Math.PI * 3.0F / 2.0F;
-			this.wolfLeg3.rotateAngleX = (float)Math.PI * 1.85F;
+			this.wolfLeg2.rotateAngleX = ((float)Math.PI * 3F / 2F);
+			this.wolfLeg3.rotateAngleX = 5.811947F;
 			this.wolfLeg3.setRotationPoint(-2.49F, 17.0F, -4.0F);
-			this.wolfLeg4.rotateAngleX = (float)Math.PI * 1.85F;
+			this.wolfLeg4.rotateAngleX = 5.811947F;
 			this.wolfLeg4.setRotationPoint(0.51F, 17.0F, -4.0F);
 		} else {
 			this.wolfBody.setRotationPoint(0.0F, 14.0F, 2.0F);
-			this.wolfBody.rotateAngleX = (float)Math.PI * 0.5F;
+			this.wolfBody.rotateAngleX = ((float)Math.PI / 2F);
 			this.wolfMane.setRotationPoint(-1.0F, 14.0F, -3.0F);
 			this.wolfMane.rotateAngleX = this.wolfBody.rotateAngleX;
 			this.wolfTail.setRotationPoint(-1.0F, 12.0F, 8.0F);
@@ -110,22 +134,27 @@
 			this.wolfLeg2.setRotationPoint(0.5F, 16.0F, 7.0F);
 			this.wolfLeg3.setRotationPoint(-2.5F, 16.0F, -4.0F);
 			this.wolfLeg4.setRotationPoint(0.5F, 16.0F, -4.0F);
-			this.wolfLeg1.rotateAngleX = MathHelper.cos(var2 * 0.6662F) * 1.4F * var3;
-			this.wolfLeg2.rotateAngleX = MathHelper.cos(var2 * 0.6662F + (float)Math.PI) * 1.4F * var3;
-			this.wolfLeg3.rotateAngleX = MathHelper.cos(var2 * 0.6662F + (float)Math.PI) * 1.4F * var3;
-			this.wolfLeg4.rotateAngleX = MathHelper.cos(var2 * 0.6662F) * 1.4F * var3;
+			this.wolfLeg1.rotateAngleX = MathHelper.cos(par2 * 0.6662F) * 1.4F * par3;
+			this.wolfLeg2.rotateAngleX = MathHelper.cos(par2 * 0.6662F + (float)Math.PI) * 1.4F * par3;
+			this.wolfLeg3.rotateAngleX = MathHelper.cos(par2 * 0.6662F + (float)Math.PI) * 1.4F * par3;
+			this.wolfLeg4.rotateAngleX = MathHelper.cos(par2 * 0.6662F) * 1.4F * par3;
 		}
 
-		this.wolfHeadMain.rotateAngleZ = var5.getInterestedAngle(var4) + var5.getShakeAngle(var4, 0.0F);
-		this.wolfMane.rotateAngleZ = var5.getShakeAngle(var4, -0.08F);
-		this.wolfBody.rotateAngleZ = var5.getShakeAngle(var4, -0.16F);
-		this.wolfTail.rotateAngleZ = var5.getShakeAngle(var4, -0.2F);
+		this.wolfHeadMain.rotateAngleZ = var5.getInterestedAngle(par4) + var5.getShakeAngle(par4, 0.0F);
+		this.wolfMane.rotateAngleZ = var5.getShakeAngle(par4, -0.08F);
+		this.wolfBody.rotateAngleZ = var5.getShakeAngle(par4, -0.16F);
+		this.wolfTail.rotateAngleZ = var5.getShakeAngle(par4, -0.2F);
 	}
 
-	public void setRotationAngles(float var1, float var2, float var3, float var4, float var5, float var6, Entity var7) {
-		super.setRotationAngles(var1, var2, var3, var4, var5, var6, var7);
-		this.wolfHeadMain.rotateAngleX = var5 / (180.0F / (float)Math.PI);
-		this.wolfHeadMain.rotateAngleY = var4 / (180.0F / (float)Math.PI);
-		this.wolfTail.rotateAngleX = var3;
+	/**
+	 * Sets the model's various rotation angles. For bipeds, par1 and par2 are used for animating the movement of arms and
+	 * legs, where par1 represents the time(so that arms and legs swing back and forth) and par2 represents how "far" arms
+	 * and legs can swing at most.
+	 */
+	public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity) {
+		super.setRotationAngles(par1, par2, par3, par4, par5, par6, par7Entity);
+		this.wolfHeadMain.rotateAngleX = par5 / (180F / (float)Math.PI);
+		this.wolfHeadMain.rotateAngleY = par4 / (180F / (float)Math.PI);
+		this.wolfTail.rotateAngleX = par3;
 	}
 }
