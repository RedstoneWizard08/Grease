--- net/minecraft/src/NBTTagIntArray.java
+++ net/minecraft/src/NBTTagIntArray.java
@@ -6,36 +6,45 @@
 import java.util.Arrays;
 
 public class NBTTagIntArray extends NBTBase {
+
+	/** The array of saved integers */
 	public int[] intArray;
 
-	public NBTTagIntArray(String var1) {
-		super(var1);
-	}
-
-	public NBTTagIntArray(String var1, int[] var2) {
-		super(var1);
-		this.intArray = var2;
-	}
-
-	void write(DataOutput var1) throws IOException {
-		var1.writeInt(this.intArray.length);
-
-		for(int var2 = 0; var2 < this.intArray.length; ++var2) {
-			var1.writeInt(this.intArray[var2]);
+	public NBTTagIntArray(String par1Str) {
+		super(par1Str);
+	}
+
+	public NBTTagIntArray(String par1Str, int[] par2ArrayOfInteger) {
+		super(par1Str);
+		this.intArray = par2ArrayOfInteger;
+	}
+
+	/**
+	 * Write the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void write(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.intArray.length);
+
+		for (int var2 = 0; var2 < this.intArray.length; ++var2) {
+			par1DataOutput.writeInt(this.intArray[var2]);
 		}
-
 	}
 
-	void load(DataInput var1, int var2) throws IOException {
-		int var3 = var1.readInt();
+	/**
+	 * Read the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void load(DataInput par1DataInput, int par2) throws IOException {
+		int var3 = par1DataInput.readInt();
 		this.intArray = new int[var3];
 
-		for(int var4 = 0; var4 < var3; ++var4) {
-			this.intArray[var4] = var1.readInt();
+		for (int var4 = 0; var4 < var3; ++var4) {
+			this.intArray[var4] = par1DataInput.readInt();
 		}
-
 	}
 
+	/**
+	 * Gets the type byte for the tag.
+	 */
 	public byte getId() {
 		return (byte)11;
 	}
@@ -44,17 +53,20 @@
 		return "[" + this.intArray.length + " bytes]";
 	}
 
+	/**
+	 * Creates a clone of the tag.
+	 */
 	public NBTBase copy() {
 		int[] var1 = new int[this.intArray.length];
 		System.arraycopy(this.intArray, 0, var1, 0, this.intArray.length);
 		return new NBTTagIntArray(this.getName(), var1);
 	}
 
-	public boolean equals(Object var1) {
-		if(!super.equals(var1)) {
+	public boolean equals(Object par1Obj) {
+		if (!super.equals(par1Obj)) {
 			return false;
 		} else {
-			NBTTagIntArray var2 = (NBTTagIntArray)var1;
+			NBTTagIntArray var2 = (NBTTagIntArray)par1Obj;
 			return this.intArray == null && var2.intArray == null || this.intArray != null && Arrays.equals(this.intArray, var2.intArray);
 		}
 	}
