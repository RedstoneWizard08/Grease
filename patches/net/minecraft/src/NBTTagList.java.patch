--- net/minecraft/src/NBTTagList.java
+++ net/minecraft/src/NBTTagList.java
@@ -8,94 +8,126 @@
 import java.util.List;
 
 public class NBTTagList extends NBTBase {
-	private List a = new ArrayList();
+
+	/** The array list containing the tags encapsulated in this list. */
+	// Spout Start - private to public
+	public List tagList = new ArrayList();
+	// Spout End
+
+	/**
+	 * The type byte for the tags in the list - they must all be of the same type.
+	 */
 	private byte tagType;
 
 	public NBTTagList() {
 		super("");
 	}
 
-	public NBTTagList(String var1) {
-		super(var1);
+	public NBTTagList(String par1Str) {
+		super(par1Str);
 	}
 
-	void write(DataOutput var1) throws IOException {
-		if(!this.a.isEmpty()) {
-			this.tagType = ((NBTBase)this.a.get(0)).getId();
+	/**
+	 * Write the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void write(DataOutput par1DataOutput) throws IOException {
+		if (!this.tagList.isEmpty()) {
+			this.tagType = ((NBTBase)this.tagList.get(0)).getId();
 		} else {
 			this.tagType = 1;
 		}
 
-		var1.writeByte(this.tagType);
-		var1.writeInt(this.a.size());
+		par1DataOutput.writeByte(this.tagType);
+		par1DataOutput.writeInt(this.tagList.size());
 
-		for(int var2 = 0; var2 < this.a.size(); ++var2) {
-			((NBTBase)this.a.get(var2)).write(var1);
+		for (int var2 = 0; var2 < this.tagList.size(); ++var2) {
+			((NBTBase)this.tagList.get(var2)).write(par1DataOutput);
 		}
-
 	}
 
-	void load(DataInput var1, int var2) throws IOException {
-		if(var2 > 512) {
+	/**
+	 * Read the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void load(DataInput par1DataInput, int par2) throws IOException {
+		if (par2 > 512) {
 			throw new RuntimeException("Tried to read NBT tag with too high complexity, depth > 512");
 		} else {
-			this.tagType = var1.readByte();
-			int var3 = var1.readInt();
-			this.a = new ArrayList();
+			this.tagType = par1DataInput.readByte();
+			int var3 = par1DataInput.readInt();
+			this.tagList = new ArrayList();
 
-			for(int var4 = 0; var4 < var3; ++var4) {
+			for (int var4 = 0; var4 < var3; ++var4) {
 				NBTBase var5 = NBTBase.newTag(this.tagType, (String)null);
-				var5.load(var1, var2 + 1);
-				this.a.add(var5);
+				var5.load(par1DataInput, par2 + 1);
+				this.tagList.add(var5);
 			}
-
 		}
 	}
 
+	/**
+	 * Gets the type byte for the tag.
+	 */
 	public byte getId() {
 		return (byte)9;
 	}
 
 	public String toString() {
-		return "" + this.a.size() + " entries of type " + NBTBase.getTagName(this.tagType);
-	}
-
-	public void appendTag(NBTBase var1) {
-		this.tagType = var1.getId();
-		this.a.add(var1);
-	}
-
-	public NBTBase removeTag(int var1) {
-		return (NBTBase)this.a.remove(var1);
-	}
-
-	public NBTBase tagAt(int var1) {
-		return (NBTBase)this.a.get(var1);
-	}
-
+		return "" + this.tagList.size() + " entries of type " + NBTBase.getTagName(this.tagType);
+	}
+
+	/**
+	 * Adds the provided tag to the end of the list. There is no check to verify this tag is of the same type as any
+	 * previous tag.
+	 */
+	public void appendTag(NBTBase par1NBTBase) {
+		this.tagType = par1NBTBase.getId();
+		this.tagList.add(par1NBTBase);
+	}
+
+	/**
+	 * Removes a tag at the given index.
+	 */
+	public NBTBase removeTag(int par1) {
+		return (NBTBase)this.tagList.remove(par1);
+	}
+
+	/**
+	 * Retrieves the tag at the specified index from the list.
+	 */
+	public NBTBase tagAt(int par1) {
+		return (NBTBase)this.tagList.get(par1);
+	}
+
+	/**
+	 * Returns the number of tags in the list.
+	 */
 	public int tagCount() {
-		return this.a.size();
+		return this.tagList.size();
 	}
 
+	/**
+	 * Creates a clone of the tag.
+	 */
 	public NBTBase copy() {
 		NBTTagList var1 = new NBTTagList(this.getName());
 		var1.tagType = this.tagType;
-		Iterator var2 = this.a.iterator();
+		Iterator var2 = this.tagList.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			NBTBase var3 = (NBTBase)var2.next();
 			NBTBase var4 = var3.copy();
-			var1.a.add(var4);
+			var1.tagList.add(var4);
 		}
 
 		return var1;
 	}
 
-	public boolean equals(Object var1) {
-		if(super.equals(var1)) {
-			NBTTagList var2 = (NBTTagList)var1;
-			if(this.tagType == var2.tagType) {
-				return this.a.equals(var2.a);
+	public boolean equals(Object par1Obj) {
+		if (super.equals(par1Obj)) {
+			NBTTagList var2 = (NBTTagList)par1Obj;
+
+			if (this.tagType == var2.tagType) {
+				return this.tagList.equals(var2.tagList);
 			}
 		}
 
@@ -103,6 +135,6 @@
 	}
 
 	public int hashCode() {
-		return super.hashCode() ^ this.a.hashCode();
+		return super.hashCode() ^ this.tagList.hashCode();
 	}
 }
