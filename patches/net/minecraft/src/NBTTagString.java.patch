--- net/minecraft/src/NBTTagString.java
+++ net/minecraft/src/NBTTagString.java
@@ -5,50 +5,65 @@
 import java.io.IOException;
 
 public class NBTTagString extends NBTBase {
-	public String a;
-
-	public NBTTagString(String var1) {
-		super(var1);
+
+	/** The string value for the tag (cannot be empty). */
+	public String data;
+
+	public NBTTagString(String par1Str) {
+		super(par1Str);
 	}
 
-	public NBTTagString(String var1, String var2) {
-		super(var1);
-		this.a = var2;
-		if(var2 == null) {
+	public NBTTagString(String par1Str, String par2Str) {
+		super(par1Str);
+		this.data = par2Str;
+
+		if (par2Str == null) {
 			throw new IllegalArgumentException("Empty string not allowed");
 		}
 	}
 
-	void write(DataOutput var1) throws IOException {
-		var1.writeUTF(this.a);
-	}
-
-	void load(DataInput var1, int var2) throws IOException {
-		this.a = var1.readUTF();
-	}
-
+	/**
+	 * Write the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void write(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeUTF(this.data);
+	}
+
+	/**
+	 * Read the actual data contents of the tag, implemented in NBT extension classes
+	 */
+	void load(DataInput par1DataInput, int par2) throws IOException {
+		this.data = par1DataInput.readUTF();
+	}
+
+	/**
+	 * Gets the type byte for the tag.
+	 */
 	public byte getId() {
 		return (byte)8;
 	}
 
 	public String toString() {
-		return "" + this.a;
+		return "" + this.data;
 	}
 
+	/**
+	 * Creates a clone of the tag.
+	 */
 	public NBTBase copy() {
-		return new NBTTagString(this.getName(), this.a);
+		return new NBTTagString(this.getName(), this.data);
 	}
 
-	public boolean equals(Object var1) {
-		if(!super.equals(var1)) {
+	public boolean equals(Object par1Obj) {
+		if (!super.equals(par1Obj)) {
 			return false;
 		} else {
-			NBTTagString var2 = (NBTTagString)var1;
-			return this.a == null && var2.a == null || this.a != null && this.a.equals(var2.a);
+			NBTTagString var2 = (NBTTagString)par1Obj;
+			return this.data == null && var2.data == null || this.data != null && this.data.equals(var2.data);
 		}
 	}
 
 	public int hashCode() {
-		return super.hashCode() ^ this.a.hashCode();
+		return super.hashCode() ^ this.data.hashCode();
 	}
 }
