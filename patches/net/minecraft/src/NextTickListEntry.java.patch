--- net/minecraft/src/NextTickListEntry.java
+++ net/minecraft/src/NextTickListEntry.java
@@ -1,27 +1,44 @@
 package net.minecraft.src;
 
 public class NextTickListEntry implements Comparable {
+
+	/** The id number for the next tick entry */
 	private static long nextTickEntryID;
+
+	/** X position this tick is occuring at */
 	public int xCoord;
+
+	/** Y position this tick is occuring at */
 	public int yCoord;
+
+	/** Z position this tick is occuring at */
 	public int zCoord;
+
+	/**
+	 * blockID of the scheduled tick (ensures when the tick occurs its still for this block)
+	 */
 	public int blockID;
+
+	/** Time this tick is scheduled to occur at */
 	public long scheduledTime;
 	public int priority;
-	private long tickEntryID = nextTickEntryID++;
-
-	public NextTickListEntry(int var1, int var2, int var3, int var4) {
-		this.xCoord = var1;
-		this.yCoord = var2;
-		this.zCoord = var3;
-		this.blockID = var4;
+
+	/** The id of the tick entry */
+	private long tickEntryID;
+
+	public NextTickListEntry(int par1, int par2, int par3, int par4) {
+		this.tickEntryID = (long)(nextTickEntryID++);
+		this.xCoord = par1;
+		this.yCoord = par2;
+		this.zCoord = par3;
+		this.blockID = par4;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof NextTickListEntry)) {
+	public boolean equals(Object par1Obj) {
+		if (!(par1Obj instanceof NextTickListEntry)) {
 			return false;
 		} else {
-			NextTickListEntry var2 = (NextTickListEntry)var1;
+			NextTickListEntry var2 = (NextTickListEntry)par1Obj;
 			return this.xCoord == var2.xCoord && this.yCoord == var2.yCoord && this.zCoord == var2.zCoord && Block.isAssociatedBlockID(this.blockID, var2.blockID);
 		}
 	}
@@ -30,24 +47,31 @@
 		return (this.xCoord * 1024 * 1024 + this.zCoord * 1024 + this.yCoord) * 256;
 	}
 
-	public NextTickListEntry setScheduledTime(long var1) {
-		this.scheduledTime = var1;
+	/**
+	 * Sets the scheduled time for this tick entry
+	 */
+	public NextTickListEntry setScheduledTime(long par1) {
+		this.scheduledTime = par1;
 		return this;
 	}
 
-	public void setPriority(int var1) {
-		this.priority = var1;
+	public void setPriority(int par1) {
+		this.priority = par1;
 	}
 
-	public int comparer(NextTickListEntry var1) {
-		return this.scheduledTime < var1.scheduledTime ? -1 : (this.scheduledTime > var1.scheduledTime ? 1 : (this.priority != var1.priority ? this.priority - var1.priority : (this.tickEntryID < var1.tickEntryID ? -1 : (this.tickEntryID > var1.tickEntryID ? 1 : 0))));
+	/**
+	 * Compares this tick entry to another tick entry for sorting purposes. Compared first based on the scheduled time and
+	 * second based on tickEntryID.
+	 */
+	public int comparer(NextTickListEntry par1NextTickListEntry) {
+		return this.scheduledTime < par1NextTickListEntry.scheduledTime ? -1 : (this.scheduledTime > par1NextTickListEntry.scheduledTime ? 1 : (this.priority != par1NextTickListEntry.priority ? this.priority - par1NextTickListEntry.priority : (this.tickEntryID < par1NextTickListEntry.tickEntryID ? -1 : (this.tickEntryID > par1NextTickListEntry.tickEntryID ? 1 : 0))));
 	}
 
 	public String toString() {
 		return this.blockID + ": (" + this.xCoord + ", " + this.yCoord + ", " + this.zCoord + "), " + this.scheduledTime + ", " + this.priority + ", " + this.tickEntryID;
 	}
 
-	public int compareTo(Object var1) {
-		return this.comparer((NextTickListEntry)var1);
+	public int compareTo(Object par1Obj) {
+		return this.comparer((NextTickListEntry)par1Obj);
 	}
 }
