--- net/minecraft/src/NoiseGeneratorPerlin.java
+++ net/minecraft/src/NoiseGeneratorPerlin.java
@@ -12,45 +12,49 @@
 		this(new Random());
 	}
 
-	public NoiseGeneratorPerlin(Random var1) {
+	public NoiseGeneratorPerlin(Random par1Random) {
 		this.permutations = new int[512];
-		this.xCoord = var1.nextDouble() * 256.0D;
-		this.yCoord = var1.nextDouble() * 256.0D;
-		this.zCoord = var1.nextDouble() * 256.0D;
-
+		this.xCoord = par1Random.nextDouble() * 256.0D;
+		this.yCoord = par1Random.nextDouble() * 256.0D;
+		this.zCoord = par1Random.nextDouble() * 256.0D;
 		int var2;
-		for(var2 = 0; var2 < 256; this.permutations[var2] = var2++) {
+
+		for (var2 = 0; var2 < 256; this.permutations[var2] = var2++) {
+			;
 		}
 
-		for(var2 = 0; var2 < 256; ++var2) {
-			int var3 = var1.nextInt(256 - var2) + var2;
+		for (var2 = 0; var2 < 256; ++var2) {
+			int var3 = par1Random.nextInt(256 - var2) + var2;
 			int var4 = this.permutations[var2];
 			this.permutations[var2] = this.permutations[var3];
 			this.permutations[var3] = var4;
 			this.permutations[var2 + 256] = this.permutations[var2];
 		}
-
-	}
-
-	public final double lerp(double var1, double var3, double var5) {
-		return var3 + var1 * (var5 - var3);
-	}
-
-	public final double func_76309_a(int var1, double var2, double var4) {
-		int var6 = var1 & 15;
-		double var7 = (double)(1 - ((var6 & 8) >> 3)) * var2;
-		double var9 = var6 < 4 ? 0.0D : (var6 != 12 && var6 != 14 ? var4 : var2);
+	}
+
+	public final double lerp(double par1, double par3, double par5) {
+		return par3 + par1 * (par5 - par3);
+	}
+
+	public final double func_76309_a(int par1, double par2, double par4) {
+		int var6 = par1 & 15;
+		double var7 = (double)(1 - ((var6 & 8) >> 3)) * par2;
+		double var9 = var6 < 4 ? 0.0D : (var6 != 12 && var6 != 14 ? par4 : par2);
 		return ((var6 & 1) == 0 ? var7 : -var7) + ((var6 & 2) == 0 ? var9 : -var9);
 	}
 
-	public final double grad(int var1, double var2, double var4, double var6) {
-		int var8 = var1 & 15;
-		double var9 = var8 < 8 ? var2 : var4;
-		double var11 = var8 < 4 ? var4 : (var8 != 12 && var8 != 14 ? var6 : var2);
+	public final double grad(int par1, double par2, double par4, double par6) {
+		int var8 = par1 & 15;
+		double var9 = var8 < 8 ? par2 : par4;
+		double var11 = var8 < 4 ? par4 : (var8 != 12 && var8 != 14 ? par6 : par2);
 		return ((var8 & 1) == 0 ? var9 : -var9) + ((var8 & 2) == 0 ? var11 : -var11);
 	}
 
-	public void populateNoiseArray(double[] var1, double var2, double var4, double var6, int var8, int var9, int var10, double var11, double var13, double var15, double var17) {
+	/**
+	 * pars: noiseArray , xOffset , yOffset , zOffset , xSize , ySize , zSize , xScale, yScale , zScale , noiseScale.
+	 * noiseArray should be xSize*ySize*zSize in size
+	 */
+	public void populateNoiseArray(double[] par1ArrayOfDouble, double par2, double par4, double par6, int par8, int par9, int par10, double par11, double par13, double par15, double par17) {
 		int var10001;
 		int var19;
 		int var22;
@@ -62,7 +66,8 @@
 		int var41;
 		double var42;
 		int var75;
-		if(var9 == 1) {
+
+		if (par9 == 1) {
 			boolean var64 = false;
 			boolean var65 = false;
 			boolean var21 = false;
@@ -70,12 +75,13 @@
 			double var70 = 0.0D;
 			double var73 = 0.0D;
 			var75 = 0;
-			double var77 = 1.0D / var17;
+			double var77 = 1.0D / par17;
 
-			for(int var30 = 0; var30 < var8; ++var30) {
-				var31 = var2 + (double)var30 * var11 + this.xCoord;
+			for (int var30 = 0; var30 < par8; ++var30) {
+				var31 = par2 + (double)var30 * par11 + this.xCoord;
 				int var78 = (int)var31;
-				if(var31 < (double)var78) {
+
+				if (var31 < (double)var78) {
 					--var78;
 				}
 
@@ -83,10 +89,11 @@
 				var31 -= (double)var78;
 				var35 = var31 * var31 * var31 * (var31 * (var31 * 6.0D - 15.0D) + 10.0D);
 
-				for(var37 = 0; var37 < var10; ++var37) {
-					var38 = var6 + (double)var37 * var15 + this.zCoord;
+				for (var37 = 0; var37 < par10; ++var37) {
+					var38 = par6 + (double)var37 * par15 + this.zCoord;
 					var40 = (int)var38;
-					if(var38 < (double)var40) {
+
+					if (var38 < (double)var40) {
 						--var40;
 					}
 
@@ -101,13 +108,12 @@
 					var73 = this.lerp(var35, this.grad(this.permutations[var66 + 1], var31, 0.0D, var38 - 1.0D), this.grad(this.permutations[var22 + 1], var31 - 1.0D, 0.0D, var38 - 1.0D));
 					double var79 = this.lerp(var42, var70, var73);
 					var10001 = var75++;
-					var1[var10001] += var79 * var77;
+					par1ArrayOfDouble[var10001] += var79 * var77;
 				}
 			}
-
 		} else {
 			var19 = 0;
-			double var20 = 1.0D / var17;
+			double var20 = 1.0D / par17;
 			var22 = -1;
 			boolean var23 = false;
 			boolean var24 = false;
@@ -120,10 +126,11 @@
 			double var33 = 0.0D;
 			var35 = 0.0D;
 
-			for(var37 = 0; var37 < var8; ++var37) {
-				var38 = var2 + (double)var37 * var11 + this.xCoord;
+			for (var37 = 0; var37 < par8; ++var37) {
+				var38 = par2 + (double)var37 * par11 + this.xCoord;
 				var40 = (int)var38;
-				if(var38 < (double)var40) {
+
+				if (var38 < (double)var40) {
 					--var40;
 				}
 
@@ -131,10 +138,11 @@
 				var38 -= (double)var40;
 				var42 = var38 * var38 * var38 * (var38 * (var38 * 6.0D - 15.0D) + 10.0D);
 
-				for(int var44 = 0; var44 < var10; ++var44) {
-					double var45 = var6 + (double)var44 * var15 + this.zCoord;
+				for (int var44 = 0; var44 < par10; ++var44) {
+					double var45 = par6 + (double)var44 * par15 + this.zCoord;
 					int var47 = (int)var45;
-					if(var45 < (double)var47) {
+
+					if (var45 < (double)var47) {
 						--var47;
 					}
 
@@ -142,17 +150,19 @@
 					var45 -= (double)var47;
 					double var49 = var45 * var45 * var45 * (var45 * (var45 * 6.0D - 15.0D) + 10.0D);
 
-					for(int var51 = 0; var51 < var9; ++var51) {
-						double var52 = var4 + (double)var51 * var13 + this.yCoord;
+					for (int var51 = 0; var51 < par9; ++var51) {
+						double var52 = par4 + (double)var51 * par13 + this.yCoord;
 						int var54 = (int)var52;
-						if(var52 < (double)var54) {
+
+						if (var52 < (double)var54) {
 							--var54;
 						}
 
 						int var55 = var54 & 255;
 						var52 -= (double)var54;
 						double var56 = var52 * var52 * var52 * (var52 * (var52 * 6.0D - 15.0D) + 10.0D);
-						if(var51 == 0 || var55 != var22) {
+
+						if (var51 == 0 || var55 != var22) {
 							var22 = var55;
 							int var69 = this.permutations[var41] + var55;
 							int var71 = this.permutations[var69] + var48;
@@ -170,11 +180,10 @@
 						double var60 = this.lerp(var56, var33, var35);
 						double var62 = this.lerp(var49, var58, var60);
 						var10001 = var19++;
-						var1[var10001] += var62 * var20;
+						par1ArrayOfDouble[var10001] += var62 * var20;
 					}
 				}
 			}
-
 		}
 	}
 }
