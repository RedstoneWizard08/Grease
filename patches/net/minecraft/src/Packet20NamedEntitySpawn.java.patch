--- net/minecraft/src/Packet20NamedEntitySpawn.java
+++ net/minecraft/src/Packet20NamedEntitySpawn.java
@@ -6,70 +6,97 @@
 import java.util.List;
 
 public class Packet20NamedEntitySpawn extends Packet {
+
+	/** The entity ID, in this case it's the player ID. */
 	public int entityId;
-	public String b;
+
+	/** The player's name. */
+	public String name;
+
+	/** The player's X position. */
 	public int xPosition;
+
+	/** The player's Y position. */
 	public int yPosition;
+
+	/** The player's Z position. */
 	public int zPosition;
+
+	/** The player's rotation. */
 	public byte rotation;
+
+	/** The player's pitch. */
 	public byte pitch;
+
+	/** The current item the player is holding. */
 	public int currentItem;
 	private DataWatcher metadata;
-	private List j;
-
-	public Packet20NamedEntitySpawn() {
-	}
-
-	public Packet20NamedEntitySpawn(EntityPlayer var1) {
-		this.entityId = var1.entityId;
-		this.b = var1.getCommandSenderName();
-		this.xPosition = MathHelper.floor_double(var1.posX * 32.0D);
-		this.yPosition = MathHelper.floor_double(var1.posY * 32.0D);
-		this.zPosition = MathHelper.floor_double(var1.posZ * 32.0D);
-		this.rotation = (byte)((int)(var1.rotationYaw * 256.0F / 360.0F));
-		this.pitch = (byte)((int)(var1.rotationPitch * 256.0F / 360.0F));
-		ItemStack var2 = var1.inventory.getCurrentItem();
+	private List metadataWatchableObjects;
+
+	public Packet20NamedEntitySpawn() {}
+
+	public Packet20NamedEntitySpawn(EntityPlayer par1EntityPlayer) {
+		this.entityId = par1EntityPlayer.entityId;
+		this.name = par1EntityPlayer.getCommandSenderName();
+		this.xPosition = MathHelper.floor_double(par1EntityPlayer.posX * 32.0D);
+		this.yPosition = MathHelper.floor_double(par1EntityPlayer.posY * 32.0D);
+		this.zPosition = MathHelper.floor_double(par1EntityPlayer.posZ * 32.0D);
+		this.rotation = (byte)((int)(par1EntityPlayer.rotationYaw * 256.0F / 360.0F));
+		this.pitch = (byte)((int)(par1EntityPlayer.rotationPitch * 256.0F / 360.0F));
+		ItemStack var2 = par1EntityPlayer.inventory.getCurrentItem();
 		this.currentItem = var2 == null ? 0 : var2.itemID;
-		this.metadata = var1.getDataWatcher();
-	}
-
-	public void readPacketData(DataInput var1) throws IOException {
-		this.entityId = var1.readInt();
-		this.b = readString(var1, 16);
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-		this.rotation = var1.readByte();
-		this.pitch = var1.readByte();
-		this.currentItem = var1.readShort();
-		this.j = DataWatcher.readWatchableObjects(var1);
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.entityId);
-		writeString(this.b, var1);
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-		var1.writeByte(this.rotation);
-		var1.writeByte(this.pitch);
-		var1.writeShort(this.currentItem);
-		this.metadata.writeWatchableObjects(var1);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleNamedEntitySpawn(this);
-	}
-
+		this.metadata = par1EntityPlayer.getDataWatcher();
+	}
+
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.entityId = par1DataInput.readInt();
+		this.name = readString(par1DataInput, 16);
+		this.xPosition = par1DataInput.readInt();
+		this.yPosition = par1DataInput.readInt();
+		this.zPosition = par1DataInput.readInt();
+		this.rotation = par1DataInput.readByte();
+		this.pitch = par1DataInput.readByte();
+		this.currentItem = par1DataInput.readShort();
+		this.metadataWatchableObjects = DataWatcher.readWatchableObjects(par1DataInput);
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.entityId);
+		writeString(this.name, par1DataOutput);
+		par1DataOutput.writeInt(this.xPosition);
+		par1DataOutput.writeInt(this.yPosition);
+		par1DataOutput.writeInt(this.zPosition);
+		par1DataOutput.writeByte(this.rotation);
+		par1DataOutput.writeByte(this.pitch);
+		par1DataOutput.writeShort(this.currentItem);
+		this.metadata.writeWatchableObjects(par1DataOutput);
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleNamedEntitySpawn(this);
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 28;
 	}
 
 	public List getWatchedMetadata() {
-		if(this.j == null) {
-			this.j = this.metadata.getAllWatched();
+		if (this.metadataWatchableObjects == null) {
+			this.metadataWatchableObjects = this.metadata.getAllWatched();
 		}
 
-		return this.j;
+		return this.metadataWatchableObjects;
 	}
 }
