--- net/minecraft/src/Packet30Entity.java
+++ net/minecraft/src/Packet30Entity.java
@@ -5,33 +5,58 @@
 import java.io.IOException;
 
 public class Packet30Entity extends Packet {
+
+	/** The ID of this entity. */
 	public int entityId;
+
+	/** The X axis relative movement. */
 	public byte xPosition;
+
+	/** The Y axis relative movement. */
 	public byte yPosition;
+
+	/** The Z axis relative movement. */
 	public byte zPosition;
+
+	/** The X axis rotation. */
 	public byte yaw;
+
+	/** The Y axis rotation. */
 	public byte pitch;
+
+	/** Boolean set to true if the entity is rotating. */
 	public boolean rotating;
 
-	public Packet30Entity() {
-	}
-
-	public Packet30Entity(int var1) {
-		this.entityId = var1;
-	}
-
-	public void readPacketData(DataInput var1) throws IOException {
-		this.entityId = var1.readInt();
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.entityId);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleEntity(this);
-	}
-
+	public Packet30Entity() {}
+
+	public Packet30Entity(int par1) {
+		this.entityId = par1;
+	}
+
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.entityId = par1DataInput.readInt();
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.entityId);
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleEntity(this);
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 4;
 	}
@@ -40,12 +65,19 @@
 		return "Entity_" + super.toString();
 	}
 
+	/**
+	 * only false for the abstract Packet class, all real packets return true
+	 */
 	public boolean isRealPacket() {
 		return true;
 	}
 
-	public boolean containsSameEntityIDAs(Packet var1) {
-		Packet30Entity var2 = (Packet30Entity)var1;
+	/**
+	 * eg return packet30entity.entityId == entityId; WARNING : will throw if you compare a packet to a different packet
+	 * class
+	 */
+	public boolean containsSameEntityIDAs(Packet par1Packet) {
+		Packet30Entity var2 = (Packet30Entity)par1Packet;
 		return var2.entityId == this.entityId;
 	}
 }
