--- net/minecraft/src/Packet39AttachEntity.java
+++ net/minecraft/src/Packet39AttachEntity.java
@@ -5,45 +5,65 @@
 import java.io.IOException;
 
 public class Packet39AttachEntity extends Packet {
+
+	/** 0 for riding, 1 for leashed. */
 	public int attachState;
 	public int ridingEntityId;
 	public int vehicleEntityId;
 
-	public Packet39AttachEntity() {
-	}
-
-	public Packet39AttachEntity(int var1, Entity var2, Entity var3) {
-		this.attachState = var1;
-		this.ridingEntityId = var2.entityId;
-		this.vehicleEntityId = var3 != null ? var3.entityId : -1;
-	}
-
+	public Packet39AttachEntity() {}
+
+	public Packet39AttachEntity(int par1, Entity par2Entity, Entity par3Entity) {
+		this.attachState = par1;
+		this.ridingEntityId = par2Entity.entityId;
+		this.vehicleEntityId = par3Entity != null ? par3Entity.entityId : -1;
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 8;
 	}
 
-	public void readPacketData(DataInput var1) throws IOException {
-		this.ridingEntityId = var1.readInt();
-		this.vehicleEntityId = var1.readInt();
-		this.attachState = var1.readUnsignedByte();
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.ridingEntityId);
-		var1.writeInt(this.vehicleEntityId);
-		var1.writeByte(this.attachState);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleAttachEntity(this);
-	}
-
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.ridingEntityId = par1DataInput.readInt();
+		this.vehicleEntityId = par1DataInput.readInt();
+		this.attachState = par1DataInput.readUnsignedByte();
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.ridingEntityId);
+		par1DataOutput.writeInt(this.vehicleEntityId);
+		par1DataOutput.writeByte(this.attachState);
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleAttachEntity(this);
+	}
+
+	/**
+	 * only false for the abstract Packet class, all real packets return true
+	 */
 	public boolean isRealPacket() {
 		return true;
 	}
 
-	public boolean containsSameEntityIDAs(Packet var1) {
-		Packet39AttachEntity var2 = (Packet39AttachEntity)var1;
+	/**
+	 * eg return packet30entity.entityId == entityId; WARNING : will throw if you compare a packet to a different packet
+	 * class
+	 */
+	public boolean containsSameEntityIDAs(Packet par1Packet) {
+		Packet39AttachEntity var2 = (Packet39AttachEntity)par1Packet;
 		return var2.ridingEntityId == this.ridingEntityId;
 	}
 }
