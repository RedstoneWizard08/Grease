--- net/minecraft/src/Packet44UpdateAttributes.java
+++ net/minecraft/src/Packet44UpdateAttributes.java
@@ -11,71 +11,79 @@
 
 public class Packet44UpdateAttributes extends Packet {
 	private int field_111005_a;
-	private final List b = new ArrayList();
-
-	public Packet44UpdateAttributes() {
-	}
-
-	public Packet44UpdateAttributes(int var1, Collection var2) {
-		this.field_111005_a = var1;
-		Iterator var3 = var2.iterator();
-
-		while(var3.hasNext()) {
+	private final List field_111004_b = new ArrayList();
+
+	public Packet44UpdateAttributes() {}
+
+	public Packet44UpdateAttributes(int par1, Collection par2Collection) {
+		this.field_111005_a = par1;
+		Iterator var3 = par2Collection.iterator();
+
+		while (var3.hasNext()) {
 			AttributeInstance var4 = (AttributeInstance)var3.next();
-			this.b.add(new Packet44UpdateAttributesSnapshot(this, var4.func_111123_a().getAttributeUnlocalizedName(), var4.getBaseValue(), var4.func_111122_c()));
+			this.field_111004_b.add(new Packet44UpdateAttributesSnapshot(this, var4.func_111123_a().getAttributeUnlocalizedName(), var4.getBaseValue(), var4.func_111122_c()));
 		}
-
 	}
 
-	public void readPacketData(DataInput var1) throws IOException {
-		this.field_111005_a = var1.readInt();
-		int var2 = var1.readInt();
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.field_111005_a = par1DataInput.readInt();
+		int var2 = par1DataInput.readInt();
 
-		for(int var3 = 0; var3 < var2; ++var3) {
-			String var4 = readString(var1, 64);
-			double var5 = var1.readDouble();
+		for (int var3 = 0; var3 < var2; ++var3) {
+			String var4 = readString(par1DataInput, 64);
+			double var5 = par1DataInput.readDouble();
 			ArrayList var7 = new ArrayList();
-			short var8 = var1.readShort();
+			short var8 = par1DataInput.readShort();
 
-			for(int var9 = 0; var9 < var8; ++var9) {
-				UUID var10 = new UUID(var1.readLong(), var1.readLong());
-				var7.add(new AttributeModifier(var10, "Unknown synced attribute modifier", var1.readDouble(), var1.readByte()));
+			for (int var9 = 0; var9 < var8; ++var9) {
+				UUID var10 = new UUID(par1DataInput.readLong(), par1DataInput.readLong());
+				var7.add(new AttributeModifier(var10, "Unknown synced attribute modifier", par1DataInput.readDouble(), par1DataInput.readByte()));
 			}
 
-			this.b.add(new Packet44UpdateAttributesSnapshot(this, var4, var5, var7));
+			this.field_111004_b.add(new Packet44UpdateAttributesSnapshot(this, var4, var5, var7));
 		}
-
 	}
 
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.field_111005_a);
-		var1.writeInt(this.b.size());
-		Iterator var2 = this.b.iterator();
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.field_111005_a);
+		par1DataOutput.writeInt(this.field_111004_b.size());
+		Iterator var2 = this.field_111004_b.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			Packet44UpdateAttributesSnapshot var3 = (Packet44UpdateAttributesSnapshot)var2.next();
-			writeString(var3.func_142040_a(), var1);
-			var1.writeDouble(var3.func_142041_b());
-			var1.writeShort(var3.func_142039_c().size());
+			writeString(var3.func_142040_a(), par1DataOutput);
+			par1DataOutput.writeDouble(var3.func_142041_b());
+			par1DataOutput.writeShort(var3.func_142039_c().size());
 			Iterator var4 = var3.func_142039_c().iterator();
 
-			while(var4.hasNext()) {
+			while (var4.hasNext()) {
 				AttributeModifier var5 = (AttributeModifier)var4.next();
-				var1.writeLong(var5.getID().getMostSignificantBits());
-				var1.writeLong(var5.getID().getLeastSignificantBits());
-				var1.writeDouble(var5.getAmount());
-				var1.writeByte(var5.getOperation());
+				par1DataOutput.writeLong(var5.getID().getMostSignificantBits());
+				par1DataOutput.writeLong(var5.getID().getLeastSignificantBits());
+				par1DataOutput.writeDouble(var5.getAmount());
+				par1DataOutput.writeByte(var5.getOperation());
 			}
 		}
-
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.func_110773_a(this);
-	}
-
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.func_110773_a(this);
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
-		return 8 + this.b.size() * 24;
+		return 8 + this.field_111004_b.size() * 24;
 	}
 
 	public int func_111002_d() {
@@ -83,6 +91,6 @@
 	}
 
 	public List func_111003_f() {
-		return this.b;
+		return this.field_111004_b;
 	}
 }
