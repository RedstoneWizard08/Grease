--- net/minecraft/src/Packet62LevelSound.java
+++ net/minecraft/src/Packet62LevelSound.java
@@ -5,53 +5,70 @@
 import java.io.IOException;
 
 public class Packet62LevelSound extends Packet {
-	private String a;
+
+	/** e.g. step.grass */
+	private String soundName;
+
+	/** Effect X multiplied by 8 */
 	private int effectX;
+
+	/** Effect Y multiplied by 8 */
 	private int effectY = Integer.MAX_VALUE;
+
+	/** Effect Z multiplied by 8 */
 	private int effectZ;
+
+	/** 1 is 100%. Can be more. */
 	private float volume;
+
+	/** 63 is 100%. Can be more. */
 	private int pitch;
 
-	public Packet62LevelSound() {
-	}
-
-	public Packet62LevelSound(String var1, double var2, double var4, double var6, float var8, float var9) {
-		this.a = var1;
-		this.effectX = (int)(var2 * 8.0D);
-		this.effectY = (int)(var4 * 8.0D);
-		this.effectZ = (int)(var6 * 8.0D);
-		this.volume = var8;
-		this.pitch = (int)(var9 * 63.0F);
-		if(this.pitch < 0) {
+	public Packet62LevelSound() {}
+
+	public Packet62LevelSound(String par1Str, double par2, double par4, double par6, float par8, float par9) {
+		this.soundName = par1Str;
+		this.effectX = (int)(par2 * 8.0D);
+		this.effectY = (int)(par4 * 8.0D);
+		this.effectZ = (int)(par6 * 8.0D);
+		this.volume = par8;
+		this.pitch = (int)(par9 * 63.0F);
+
+		if (this.pitch < 0) {
 			this.pitch = 0;
 		}
 
-		if(this.pitch > 255) {
+		if (this.pitch > 255) {
 			this.pitch = 255;
 		}
-
-	}
-
-	public void readPacketData(DataInput var1) throws IOException {
-		this.a = readString(var1, 256);
-		this.effectX = var1.readInt();
-		this.effectY = var1.readInt();
-		this.effectZ = var1.readInt();
-		this.volume = var1.readFloat();
-		this.pitch = var1.readUnsignedByte();
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		writeString(this.a, var1);
-		var1.writeInt(this.effectX);
-		var1.writeInt(this.effectY);
-		var1.writeInt(this.effectZ);
-		var1.writeFloat(this.volume);
-		var1.writeByte(this.pitch);
+	}
+
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.soundName = readString(par1DataInput, 256);
+		this.effectX = par1DataInput.readInt();
+		this.effectY = par1DataInput.readInt();
+		this.effectZ = par1DataInput.readInt();
+		this.volume = par1DataInput.readFloat();
+		this.pitch = par1DataInput.readUnsignedByte();
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		writeString(this.soundName, par1DataOutput);
+		par1DataOutput.writeInt(this.effectX);
+		par1DataOutput.writeInt(this.effectY);
+		par1DataOutput.writeInt(this.effectZ);
+		par1DataOutput.writeFloat(this.volume);
+		par1DataOutput.writeByte(this.pitch);
 	}
 
 	public String getSoundName() {
-		return this.a;
+		return this.soundName;
 	}
 
 	public double getEffectX() {
@@ -70,14 +87,23 @@
 		return this.volume;
 	}
 
+	/**
+	 * Gets the pitch divided by 63 (63 is 100%)
+	 */
 	public float getPitch() {
 		return (float)this.pitch / 63.0F;
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleLevelSound(this);
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleLevelSound(this);
 	}
 
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 24;
 	}
