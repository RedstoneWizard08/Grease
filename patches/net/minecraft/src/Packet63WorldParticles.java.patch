--- net/minecraft/src/Packet63WorldParticles.java
+++ net/minecraft/src/Packet63WorldParticles.java
@@ -5,80 +5,142 @@
 import java.io.IOException;
 
 public class Packet63WorldParticles extends Packet {
-	private String a;
+
+	/**
+	 * The name of the particle to create. A list can be found at https://gist.github.com/thinkofdeath/5110835
+	 */
+	private String particleName;
+
+	/** X position of the particle. */
 	private float posX;
+
+	/** Y position of the particle. */
 	private float posY;
+
+	/** Z position of the particle. */
 	private float posZ;
+
+	/**
+	 * This is added to the X position after being multiplied by random.nextGaussian()
+	 */
 	private float offsetX;
+
+	/**
+	 * This is added to the Y position after being multiplied by random.nextGaussian()
+	 */
 	private float offsetY;
+
+	/**
+	 * This is added to the Z position after being multiplied by random.nextGaussian()
+	 */
 	private float offsetZ;
+
+	/** The speed of each particle. */
 	private float speed;
+
+	/** The number of particles to create. */
 	private int quantity;
 
-	public void readPacketData(DataInput var1) throws IOException {
-		this.a = readString(var1, 64);
-		this.posX = var1.readFloat();
-		this.posY = var1.readFloat();
-		this.posZ = var1.readFloat();
-		this.offsetX = var1.readFloat();
-		this.offsetY = var1.readFloat();
-		this.offsetZ = var1.readFloat();
-		this.speed = var1.readFloat();
-		this.quantity = var1.readInt();
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.particleName = readString(par1DataInput, 64);
+		this.posX = par1DataInput.readFloat();
+		this.posY = par1DataInput.readFloat();
+		this.posZ = par1DataInput.readFloat();
+		this.offsetX = par1DataInput.readFloat();
+		this.offsetY = par1DataInput.readFloat();
+		this.offsetZ = par1DataInput.readFloat();
+		this.speed = par1DataInput.readFloat();
+		this.quantity = par1DataInput.readInt();
 	}
 
-	public void writePacketData(DataOutput var1) throws IOException {
-		writeString(this.a, var1);
-		var1.writeFloat(this.posX);
-		var1.writeFloat(this.posY);
-		var1.writeFloat(this.posZ);
-		var1.writeFloat(this.offsetX);
-		var1.writeFloat(this.offsetY);
-		var1.writeFloat(this.offsetZ);
-		var1.writeFloat(this.speed);
-		var1.writeInt(this.quantity);
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		writeString(this.particleName, par1DataOutput);
+		par1DataOutput.writeFloat(this.posX);
+		par1DataOutput.writeFloat(this.posY);
+		par1DataOutput.writeFloat(this.posZ);
+		par1DataOutput.writeFloat(this.offsetX);
+		par1DataOutput.writeFloat(this.offsetY);
+		par1DataOutput.writeFloat(this.offsetZ);
+		par1DataOutput.writeFloat(this.speed);
+		par1DataOutput.writeInt(this.quantity);
 	}
 
 	public String getParticleName() {
-		return this.a;
+		return this.particleName;
 	}
 
+	/**
+	 * Gets the X position of the particle.
+	 */
 	public double getPositionX() {
 		return (double)this.posX;
 	}
 
+	/**
+	 * Gets the Y position of the particle.
+	 */
 	public double getPositionY() {
 		return (double)this.posY;
 	}
 
+	/**
+	 * Gets the Z position of the particle.
+	 */
 	public double getPositionZ() {
 		return (double)this.posZ;
 	}
 
+	/**
+	 * This is added to the X position after being multiplied by random.nextGaussian()
+	 */
 	public float getOffsetX() {
 		return this.offsetX;
 	}
 
+	/**
+	 * This is added to the Y position after being multiplied by random.nextGaussian()
+	 */
 	public float getOffsetY() {
 		return this.offsetY;
 	}
 
+	/**
+	 * This is added to the Z position after being multiplied by random.nextGaussian()
+	 */
 	public float getOffsetZ() {
 		return this.offsetZ;
 	}
 
+	/**
+	 * Gets the speed of the particles.
+	 */
 	public float getSpeed() {
 		return this.speed;
 	}
 
+	/**
+	 * Gets the number of particles to create.
+	 */
 	public int getQuantity() {
 		return this.quantity;
 	}
 
-	public void processPacket(NetHandler var1) {
-		var1.handleWorldParticles(this);
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleWorldParticles(this);
 	}
 
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 64;
 	}
