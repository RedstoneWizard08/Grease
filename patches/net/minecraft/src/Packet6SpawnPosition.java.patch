--- net/minecraft/src/Packet6SpawnPosition.java
+++ net/minecraft/src/Packet6SpawnPosition.java
@@ -5,47 +5,75 @@
 import java.io.IOException;
 
 public class Packet6SpawnPosition extends Packet {
+
+	/** X coordinate of spawn. */
 	public int xPosition;
+
+	/** Y coordinate of spawn. */
 	public int yPosition;
+
+	/** Z coordinate of spawn. */
 	public int zPosition;
 
-	public Packet6SpawnPosition() {
-	}
-
-	public Packet6SpawnPosition(int var1, int var2, int var3) {
-		this.xPosition = var1;
-		this.yPosition = var2;
-		this.zPosition = var3;
-	}
-
-	public void readPacketData(DataInput var1) throws IOException {
-		this.xPosition = var1.readInt();
-		this.yPosition = var1.readInt();
-		this.zPosition = var1.readInt();
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.xPosition);
-		var1.writeInt(this.yPosition);
-		var1.writeInt(this.zPosition);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleSpawnPosition(this);
-	}
-
+	public Packet6SpawnPosition() {}
+
+	public Packet6SpawnPosition(int par1, int par2, int par3) {
+		this.xPosition = par1;
+		this.yPosition = par2;
+		this.zPosition = par3;
+	}
+
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.xPosition = par1DataInput.readInt();
+		this.yPosition = par1DataInput.readInt();
+		this.zPosition = par1DataInput.readInt();
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.xPosition);
+		par1DataOutput.writeInt(this.yPosition);
+		par1DataOutput.writeInt(this.zPosition);
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleSpawnPosition(this);
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 12;
 	}
 
+	/**
+	 * only false for the abstract Packet class, all real packets return true
+	 */
 	public boolean isRealPacket() {
 		return true;
 	}
 
-	public boolean containsSameEntityIDAs(Packet var1) {
+	/**
+	 * eg return packet30entity.entityId == entityId; WARNING : will throw if you compare a packet to a different packet
+	 * class
+	 */
+	public boolean containsSameEntityIDAs(Packet par1Packet) {
 		return true;
 	}
 
+	/**
+	 * If this returns true, the packet may be processed on any thread; otherwise it is queued for the main thread to
+	 * handle.
+	 */
 	public boolean canProcessAsync() {
 		return false;
 	}
