--- net/minecraft/src/Packet71Weather.java
+++ net/minecraft/src/Packet71Weather.java
@@ -11,40 +11,51 @@
 	public int posZ;
 	public int isLightningBolt;
 
-	public Packet71Weather() {
-	}
-
-	public Packet71Weather(Entity var1) {
-		this.entityID = var1.entityId;
-		this.posX = MathHelper.floor_double(var1.posX * 32.0D);
-		this.posY = MathHelper.floor_double(var1.posY * 32.0D);
-		this.posZ = MathHelper.floor_double(var1.posZ * 32.0D);
-		if(var1 instanceof EntityLightningBolt) {
+	public Packet71Weather() {}
+
+	public Packet71Weather(Entity par1Entity) {
+		this.entityID = par1Entity.entityId;
+		this.posX = MathHelper.floor_double(par1Entity.posX * 32.0D);
+		this.posY = MathHelper.floor_double(par1Entity.posY * 32.0D);
+		this.posZ = MathHelper.floor_double(par1Entity.posZ * 32.0D);
+
+		if (par1Entity instanceof EntityLightningBolt) {
 			this.isLightningBolt = 1;
 		}
-
-	}
-
-	public void readPacketData(DataInput var1) throws IOException {
-		this.entityID = var1.readInt();
-		this.isLightningBolt = var1.readByte();
-		this.posX = var1.readInt();
-		this.posY = var1.readInt();
-		this.posZ = var1.readInt();
-	}
-
-	public void writePacketData(DataOutput var1) throws IOException {
-		var1.writeInt(this.entityID);
-		var1.writeByte(this.isLightningBolt);
-		var1.writeInt(this.posX);
-		var1.writeInt(this.posY);
-		var1.writeInt(this.posZ);
-	}
-
-	public void processPacket(NetHandler var1) {
-		var1.handleWeather(this);
-	}
-
+	}
+
+	/**
+	 * Abstract. Reads the raw packet data from the data stream.
+	 */
+	public void readPacketData(DataInput par1DataInput) throws IOException {
+		this.entityID = par1DataInput.readInt();
+		this.isLightningBolt = par1DataInput.readByte();
+		this.posX = par1DataInput.readInt();
+		this.posY = par1DataInput.readInt();
+		this.posZ = par1DataInput.readInt();
+	}
+
+	/**
+	 * Abstract. Writes the raw packet data to the data stream.
+	 */
+	public void writePacketData(DataOutput par1DataOutput) throws IOException {
+		par1DataOutput.writeInt(this.entityID);
+		par1DataOutput.writeByte(this.isLightningBolt);
+		par1DataOutput.writeInt(this.posX);
+		par1DataOutput.writeInt(this.posY);
+		par1DataOutput.writeInt(this.posZ);
+	}
+
+	/**
+	 * Passes this Packet on to the NetHandler for processing.
+	 */
+	public void processPacket(NetHandler par1NetHandler) {
+		par1NetHandler.handleWeather(this);
+	}
+
+	/**
+	 * Abstract. Return the size of the packet (not counting the header).
+	 */
 	public int getPacketSize() {
 		return 17;
 	}
