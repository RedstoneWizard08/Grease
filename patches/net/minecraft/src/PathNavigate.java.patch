--- net/minecraft/src/PathNavigate.java
+++ net/minecraft/src/PathNavigate.java
@@ -3,95 +3,155 @@
 public class PathNavigate {
 	private EntityLiving theEntity;
 	private World worldObj;
+
+	/** The PathEntity being followed. */
 	private PathEntity currentPath;
 	private double speed;
+
+	/**
+	 * The number of blocks (extra) +/- in each axis that get pulled out as cache for the pathfinder's search space
+	 */
 	private AttributeInstance pathSearchRange;
 	private boolean noSunPathfind;
+
+	/** Time, in number of ticks, following the current path */
 	private int totalTicks;
+
+	/**
+	 * The time when the last position check was done (to detect successful movement)
+	 */
 	private int ticksAtLastPos;
+
+	/**
+	 * Coordinates of the entity's position last time a check was done (part of monitoring getting 'stuck')
+	 */
 	private Vec3 lastPosCheck = Vec3.createVectorHelper(0.0D, 0.0D, 0.0D);
+
+	/**
+	 * Specifically, if a wooden door block is even considered to be passable by the pathfinder
+	 */
 	private boolean canPassOpenWoodenDoors = true;
+
+	/** If door blocks are considered passable even when closed */
 	private boolean canPassClosedWoodenDoors;
+
+	/** If water blocks are avoided (at least by the pathfinder) */
 	private boolean avoidsWater;
+
+	/**
+	 * If the entity can swim. Swimming AI enables this and the pathfinder will also cause the entity to swim straight
+	 * upwards when underwater
+	 */
 	private boolean canSwim;
 
-	public PathNavigate(EntityLiving var1, World var2) {
-		this.theEntity = var1;
-		this.worldObj = var2;
-		this.pathSearchRange = var1.getEntityAttribute(SharedMonsterAttributes.followRange);
+	public PathNavigate(EntityLiving par1EntityLiving, World par2World) {
+		this.theEntity = par1EntityLiving;
+		this.worldObj = par2World;
+		this.pathSearchRange = par1EntityLiving.getEntityAttribute(SharedMonsterAttributes.followRange);
 	}
 
-	public void setAvoidsWater(boolean var1) {
-		this.avoidsWater = var1;
+	public void setAvoidsWater(boolean par1) {
+		this.avoidsWater = par1;
 	}
 
 	public boolean getAvoidsWater() {
 		return this.avoidsWater;
 	}
 
-	public void setBreakDoors(boolean var1) {
-		this.canPassClosedWoodenDoors = var1;
-	}
-
-	public void setEnterDoors(boolean var1) {
-		this.canPassOpenWoodenDoors = var1;
-	}
-
+	public void setBreakDoors(boolean par1) {
+		this.canPassClosedWoodenDoors = par1;
+	}
+
+	/**
+	 * Sets if the entity can enter open doors
+	 */
+	public void setEnterDoors(boolean par1) {
+		this.canPassOpenWoodenDoors = par1;
+	}
+
+	/**
+	 * Returns true if the entity can break doors, false otherwise
+	 */
 	public boolean getCanBreakDoors() {
 		return this.canPassClosedWoodenDoors;
 	}
 
-	public void setAvoidSun(boolean var1) {
-		this.noSunPathfind = var1;
-	}
-
-	public void setSpeed(double var1) {
-		this.speed = var1;
-	}
-
-	public void setCanSwim(boolean var1) {
-		this.canSwim = var1;
-	}
-
-	public float getPathSearchRange() {
+	/**
+	 * Sets if the path should avoid sunlight
+	 */
+	public void setAvoidSun(boolean par1) {
+		this.noSunPathfind = par1;
+	}
+
+	/**
+	 * Sets the speed
+	 */
+	public void setSpeed(double par1) {
+		this.speed = par1;
+	}
+
+	/**
+	 * Sets if the entity can swim
+	 */
+	public void setCanSwim(boolean par1) {
+		this.canSwim = par1;
+	}
+
+	public float func_111269_d() {
 		return (float)this.pathSearchRange.getAttributeValue();
 	}
 
-	public PathEntity getPathToXYZ(double var1, double var3, double var5) {
-		return !this.canNavigate() ? null : this.worldObj.getEntityPathToXYZ(this.theEntity, MathHelper.floor_double(var1), (int)var3, MathHelper.floor_double(var5), this.getPathSearchRange(), this.canPassOpenWoodenDoors, this.canPassClosedWoodenDoors, this.avoidsWater, this.canSwim);
-	}
-
-	public boolean tryMoveToXYZ(double var1, double var3, double var5, double var7) {
-		PathEntity var9 = this.getPathToXYZ((double)MathHelper.floor_double(var1), (double)((int)var3), (double)MathHelper.floor_double(var5));
-		return this.setPath(var9, var7);
-	}
-
-	public PathEntity getPathToEntityLiving(Entity var1) {
-		return !this.canNavigate() ? null : this.worldObj.getPathEntityToEntity(this.theEntity, var1, this.getPathSearchRange(), this.canPassOpenWoodenDoors, this.canPassClosedWoodenDoors, this.avoidsWater, this.canSwim);
-	}
-
-	public boolean tryMoveToEntityLiving(Entity var1, double var2) {
-		PathEntity var4 = this.getPathToEntityLiving(var1);
-		return var4 != null ? this.setPath(var4, var2) : false;
-	}
-
-	public boolean setPath(PathEntity var1, double var2) {
-		if(var1 == null) {
+	/**
+	 * Returns the path to the given coordinates
+	 */
+	public PathEntity getPathToXYZ(double par1, double par3, double par5) {
+		return !this.canNavigate() ? null : this.worldObj.getEntityPathToXYZ(this.theEntity, MathHelper.floor_double(par1), (int)par3, MathHelper.floor_double(par5), this.func_111269_d(), this.canPassOpenWoodenDoors, this.canPassClosedWoodenDoors, this.avoidsWater, this.canSwim);
+	}
+
+	/**
+	 * Try to find and set a path to XYZ. Returns true if successful.
+	 */
+	public boolean tryMoveToXYZ(double par1, double par3, double par5, double par7) {
+		PathEntity var9 = this.getPathToXYZ((double)MathHelper.floor_double(par1), (double)((int)par3), (double)MathHelper.floor_double(par5));
+		return this.setPath(var9, par7);
+	}
+
+	/**
+	 * Returns the path to the given EntityLiving
+	 */
+	public PathEntity getPathToEntityLiving(Entity par1Entity) {
+		return !this.canNavigate() ? null : this.worldObj.getPathEntityToEntity(this.theEntity, par1Entity, this.func_111269_d(), this.canPassOpenWoodenDoors, this.canPassClosedWoodenDoors, this.avoidsWater, this.canSwim);
+	}
+
+	/**
+	 * Try to find and set a path to EntityLiving. Returns true if successful.
+	 */
+	public boolean tryMoveToEntityLiving(Entity par1Entity, double par2) {
+		PathEntity var4 = this.getPathToEntityLiving(par1Entity);
+		return var4 != null ? this.setPath(var4, par2) : false;
+	}
+
+	/**
+	 * sets the active path data if path is 100% unique compared to old path, checks to adjust path for sun avoiding ents
+	 * and stores end coords
+	 */
+	public boolean setPath(PathEntity par1PathEntity, double par2) {
+		if (par1PathEntity == null) {
 			this.currentPath = null;
 			return false;
 		} else {
-			if(!var1.isSamePath(this.currentPath)) {
-				this.currentPath = var1;
+			if (!par1PathEntity.isSamePath(this.currentPath)) {
+				this.currentPath = par1PathEntity;
 			}
 
-			if(this.noSunPathfind) {
+			if (this.noSunPathfind) {
 				this.removeSunnyPath();
 			}
 
-			if(this.currentPath.getCurrentPathLength() == 0) {
+			if (this.currentPath.getCurrentPathLength() == 0) {
 				return false;
 			} else {
-				this.speed = var2;
+				this.speed = par2;
 				Vec3 var4 = this.getEntityPosition();
 				this.ticksAtLastPos = this.totalTicks;
 				this.lastPosCheck.xCoord = var4.xCoord;
@@ -102,20 +162,25 @@
 		}
 	}
 
+	/**
+	 * gets the actively used PathEntity
+	 */
 	public PathEntity getPath() {
 		return this.currentPath;
 	}
 
 	public void onUpdateNavigation() {
 		++this.totalTicks;
-		if(!this.noPath()) {
-			if(this.canNavigate()) {
+
+		if (!this.noPath()) {
+			if (this.canNavigate()) {
 				this.pathFollow();
 			}
 
-			if(!this.noPath()) {
+			if (!this.noPath()) {
 				Vec3 var1 = this.currentPath.getPosition(this.theEntity);
-				if(var1 != null) {
+
+				if (var1 != null) {
 					this.theEntity.getMoveHelper().setMoveTo(var1.xCoord, var1.yCoord, var1.zCoord, this.speed);
 				}
 			}
@@ -126,18 +191,18 @@
 		Vec3 var1 = this.getEntityPosition();
 		int var2 = this.currentPath.getCurrentPathLength();
 
-		for(int var3 = this.currentPath.getCurrentPathIndex(); var3 < this.currentPath.getCurrentPathLength(); ++var3) {
-			if(this.currentPath.getPathPointFromIndex(var3).yCoord != (int)var1.yCoord) {
+		for (int var3 = this.currentPath.getCurrentPathIndex(); var3 < this.currentPath.getCurrentPathLength(); ++var3) {
+			if (this.currentPath.getPathPointFromIndex(var3).yCoord != (int)var1.yCoord) {
 				var2 = var3;
 				break;
 			}
 		}
 
 		float var8 = this.theEntity.width * this.theEntity.width;
-
 		int var4;
-		for(var4 = this.currentPath.getCurrentPathIndex(); var4 < var2; ++var4) {
-			if(var1.squareDistanceTo(this.currentPath.getVectorFromIndex(this.theEntity, var4)) < (double)var8) {
+
+		for (var4 = this.currentPath.getCurrentPathIndex(); var4 < var2; ++var4) {
+			if (var1.squareDistanceTo(this.currentPath.getVectorFromIndex(this.theEntity, var4)) < (double)var8) {
 				this.currentPath.setCurrentPathIndex(var4 + 1);
 			}
 		}
@@ -146,15 +211,15 @@
 		int var5 = (int)this.theEntity.height + 1;
 		int var6 = var4;
 
-		for(int var7 = var2 - 1; var7 >= this.currentPath.getCurrentPathIndex(); --var7) {
-			if(this.isDirectPathBetweenPoints(var1, this.currentPath.getVectorFromIndex(this.theEntity, var7), var4, var5, var6)) {
+		for (int var7 = var2 - 1; var7 >= this.currentPath.getCurrentPathIndex(); --var7) {
+			if (this.isDirectPathBetweenPoints(var1, this.currentPath.getVectorFromIndex(this.theEntity, var7), var4, var5, var6)) {
 				this.currentPath.setCurrentPathIndex(var7);
 				break;
 			}
 		}
 
-		if(this.totalTicks - this.ticksAtLastPos > 100) {
-			if(var1.squareDistanceTo(this.lastPosCheck) < 2.25D) {
+		if (this.totalTicks - this.ticksAtLastPos > 100) {
+			if (var1.squareDistanceTo(this.lastPosCheck) < 2.25D) {
 				this.clearPathEntity();
 			}
 
@@ -163,13 +228,18 @@
 			this.lastPosCheck.yCoord = var1.yCoord;
 			this.lastPosCheck.zCoord = var1.zCoord;
 		}
-
 	}
 
+	/**
+	 * If null path or reached the end
+	 */
 	public boolean noPath() {
 		return this.currentPath == null || this.currentPath.isFinished();
 	}
 
+	/**
+	 * sets active PathEntity to null
+	 */
 	public void clearPathEntity() {
 		this.currentPath = null;
 	}
@@ -178,21 +248,24 @@
 		return this.worldObj.getWorldVec3Pool().getVecFromPool(this.theEntity.posX, (double)this.getPathableYPos(), this.theEntity.posZ);
 	}
 
+	/**
+	 * Gets the safe pathing Y position for the entity depending on if it can path swim or not
+	 */
 	private int getPathableYPos() {
-		if(this.theEntity.isInWater() && this.canSwim) {
+		if (this.theEntity.isInWater() && this.canSwim) {
 			int var1 = (int)this.theEntity.boundingBox.minY;
 			int var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.theEntity.posX), var1, MathHelper.floor_double(this.theEntity.posZ));
 			int var3 = 0;
 
 			do {
-				if(var2 != Block.waterMoving.blockID && var2 != Block.waterStill.blockID) {
+				if (var2 != Block.waterMoving.blockID && var2 != Block.waterStill.blockID) {
 					return var1;
 				}
 
 				++var1;
 				var2 = this.worldObj.getBlockId(MathHelper.floor_double(this.theEntity.posX), var1, MathHelper.floor_double(this.theEntity.posZ));
 				++var3;
-			} while(var3 <= 16);
+			} while (var3 <= 16);
 
 			return (int)this.theEntity.boundingBox.minY;
 		} else {
@@ -200,55 +273,71 @@
 		}
 	}
 
+	/**
+	 * If on ground or swimming and can swim
+	 */
 	private boolean canNavigate() {
 		return this.theEntity.onGround || this.canSwim && this.isInFluid();
 	}
 
+	/**
+	 * Returns true if the entity is in water or lava, false otherwise
+	 */
 	private boolean isInFluid() {
 		return this.theEntity.isInWater() || this.theEntity.handleLavaMovement();
 	}
 
+	/**
+	 * Trims path data from the end to the first sun covered block
+	 */
 	private void removeSunnyPath() {
-		if(!this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.theEntity.posX), (int)(this.theEntity.boundingBox.minY + 0.5D), MathHelper.floor_double(this.theEntity.posZ))) {
-			for(int var1 = 0; var1 < this.currentPath.getCurrentPathLength(); ++var1) {
+		if (!this.worldObj.canBlockSeeTheSky(MathHelper.floor_double(this.theEntity.posX), (int)(this.theEntity.boundingBox.minY + 0.5D), MathHelper.floor_double(this.theEntity.posZ))) {
+			for (int var1 = 0; var1 < this.currentPath.getCurrentPathLength(); ++var1) {
 				PathPoint var2 = this.currentPath.getPathPointFromIndex(var1);
-				if(this.worldObj.canBlockSeeTheSky(var2.xCoord, var2.yCoord, var2.zCoord)) {
+
+				if (this.worldObj.canBlockSeeTheSky(var2.xCoord, var2.yCoord, var2.zCoord)) {
 					this.currentPath.setCurrentPathLength(var1 - 1);
 					return;
 				}
 			}
-
 		}
 	}
 
-	private boolean isDirectPathBetweenPoints(Vec3 var1, Vec3 var2, int var3, int var4, int var5) {
-		int var6 = MathHelper.floor_double(var1.xCoord);
-		int var7 = MathHelper.floor_double(var1.zCoord);
-		double var8 = var2.xCoord - var1.xCoord;
-		double var10 = var2.zCoord - var1.zCoord;
+	/**
+	 * Returns true when an entity of specified size could safely walk in a straight line between the two points. Args:
+	 * pos1, pos2, entityXSize, entityYSize, entityZSize
+	 */
+	private boolean isDirectPathBetweenPoints(Vec3 par1Vec3, Vec3 par2Vec3, int par3, int par4, int par5) {
+		int var6 = MathHelper.floor_double(par1Vec3.xCoord);
+		int var7 = MathHelper.floor_double(par1Vec3.zCoord);
+		double var8 = par2Vec3.xCoord - par1Vec3.xCoord;
+		double var10 = par2Vec3.zCoord - par1Vec3.zCoord;
 		double var12 = var8 * var8 + var10 * var10;
-		if(var12 < 1.0E-8D) {
+
+		if (var12 < 1.0E-8D) {
 			return false;
 		} else {
 			double var14 = 1.0D / Math.sqrt(var12);
 			var8 *= var14;
 			var10 *= var14;
-			var3 += 2;
-			var5 += 2;
-			if(!this.isSafeToStandAt(var6, (int)var1.yCoord, var7, var3, var4, var5, var1, var8, var10)) {
+			par3 += 2;
+			par5 += 2;
+
+			if (!this.isSafeToStandAt(var6, (int)par1Vec3.yCoord, var7, par3, par4, par5, par1Vec3, var8, var10)) {
 				return false;
 			} else {
-				var3 -= 2;
-				var5 -= 2;
+				par3 -= 2;
+				par5 -= 2;
 				double var16 = 1.0D / Math.abs(var8);
 				double var18 = 1.0D / Math.abs(var10);
-				double var20 = (double)(var6 * 1) - var1.xCoord;
-				double var22 = (double)(var7 * 1) - var1.zCoord;
-				if(var8 >= 0.0D) {
+				double var20 = (double)(var6 * 1) - par1Vec3.xCoord;
+				double var22 = (double)(var7 * 1) - par1Vec3.zCoord;
+
+				if (var8 >= 0.0D) {
 					++var20;
 				}
 
-				if(var10 >= 0.0D) {
+				if (var10 >= 0.0D) {
 					++var22;
 				}
 
@@ -256,17 +345,17 @@
 				var22 /= var10;
 				int var24 = var8 < 0.0D ? -1 : 1;
 				int var25 = var10 < 0.0D ? -1 : 1;
-				int var26 = MathHelper.floor_double(var2.xCoord);
-				int var27 = MathHelper.floor_double(var2.zCoord);
+				int var26 = MathHelper.floor_double(par2Vec3.xCoord);
+				int var27 = MathHelper.floor_double(par2Vec3.zCoord);
 				int var28 = var26 - var6;
 				int var29 = var27 - var7;
 
 				do {
-					if(var28 * var24 <= 0 && var29 * var25 <= 0) {
+					if (var28 * var24 <= 0 && var29 * var25 <= 0) {
 						return true;
 					}
 
-					if(var20 < var22) {
+					if (var20 < var22) {
 						var20 += var16;
 						var6 += var24;
 						var28 = var26 - var6;
@@ -275,35 +364,43 @@
 						var7 += var25;
 						var29 = var27 - var7;
 					}
-				} while(this.isSafeToStandAt(var6, (int)var1.yCoord, var7, var3, var4, var5, var1, var8, var10));
+				} while (this.isSafeToStandAt(var6, (int)par1Vec3.yCoord, var7, par3, par4, par5, par1Vec3, var8, var10));
 
 				return false;
 			}
 		}
 	}
 
-	private boolean isSafeToStandAt(int var1, int var2, int var3, int var4, int var5, int var6, Vec3 var7, double var8, double var10) {
-		int var12 = var1 - var4 / 2;
-		int var13 = var3 - var6 / 2;
-		if(!this.isPositionClear(var12, var2, var13, var4, var5, var6, var7, var8, var10)) {
+	/**
+	 * Returns true when an entity could stand at a position, including solid blocks under the entire entity. Args:
+	 * xOffset, yOffset, zOffset, entityXSize, entityYSize, entityZSize, originPosition, vecX, vecZ
+	 */
+	private boolean isSafeToStandAt(int par1, int par2, int par3, int par4, int par5, int par6, Vec3 par7Vec3, double par8, double par10) {
+		int var12 = par1 - par4 / 2;
+		int var13 = par3 - par6 / 2;
+
+		if (!this.isPositionClear(var12, par2, var13, par4, par5, par6, par7Vec3, par8, par10)) {
 			return false;
 		} else {
-			for(int var14 = var12; var14 < var12 + var4; ++var14) {
-				for(int var15 = var13; var15 < var13 + var6; ++var15) {
-					double var16 = (double)var14 + 0.5D - var7.xCoord;
-					double var18 = (double)var15 + 0.5D - var7.zCoord;
-					if(var16 * var8 + var18 * var10 >= 0.0D) {
-						int var20 = this.worldObj.getBlockId(var14, var2 - 1, var15);
-						if(var20 <= 0) {
+			for (int var14 = var12; var14 < var12 + par4; ++var14) {
+				for (int var15 = var13; var15 < var13 + par6; ++var15) {
+					double var16 = (double)var14 + 0.5D - par7Vec3.xCoord;
+					double var18 = (double)var15 + 0.5D - par7Vec3.zCoord;
+
+					if (var16 * par8 + var18 * par10 >= 0.0D) {
+						int var20 = this.worldObj.getBlockId(var14, par2 - 1, var15);
+
+						if (var20 <= 0) {
 							return false;
 						}
 
 						Material var21 = Block.blocksList[var20].blockMaterial;
-						if(var21 == Material.water && !this.theEntity.isInWater()) {
+
+						if (var21 == Material.water && !this.theEntity.isInWater()) {
 							return false;
 						}
 
-						if(var21 == Material.lava) {
+						if (var21 == Material.lava) {
 							return false;
 						}
 					}
@@ -314,15 +411,21 @@
 		}
 	}
 
-	private boolean isPositionClear(int var1, int var2, int var3, int var4, int var5, int var6, Vec3 var7, double var8, double var10) {
-		for(int var12 = var1; var12 < var1 + var4; ++var12) {
-			for(int var13 = var2; var13 < var2 + var5; ++var13) {
-				for(int var14 = var3; var14 < var3 + var6; ++var14) {
-					double var15 = (double)var12 + 0.5D - var7.xCoord;
-					double var17 = (double)var14 + 0.5D - var7.zCoord;
-					if(var15 * var8 + var17 * var10 >= 0.0D) {
+	/**
+	 * Returns true if an entity does not collide with any solid blocks at the position. Args: xOffset, yOffset, zOffset,
+	 * entityXSize, entityYSize, entityZSize, originPosition, vecX, vecZ
+	 */
+	private boolean isPositionClear(int par1, int par2, int par3, int par4, int par5, int par6, Vec3 par7Vec3, double par8, double par10) {
+		for (int var12 = par1; var12 < par1 + par4; ++var12) {
+			for (int var13 = par2; var13 < par2 + par5; ++var13) {
+				for (int var14 = par3; var14 < par3 + par6; ++var14) {
+					double var15 = (double)var12 + 0.5D - par7Vec3.xCoord;
+					double var17 = (double)var14 + 0.5D - par7Vec3.zCoord;
+
+					if (var15 * par8 + var17 * par10 >= 0.0D) {
 						int var19 = this.worldObj.getBlockId(var12, var13, var14);
-						if(var19 > 0 && !Block.blocksList[var19].getBlocksMovement(this.worldObj, var12, var13, var14)) {
+
+						if (var19 > 0 && !Block.blocksList[var19].getBlocksMovement(this.worldObj, var12, var13, var14)) {
 							return false;
 						}
 					}
