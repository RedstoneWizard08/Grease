--- net/minecraft/src/PlayerControllerMP.java
+++ net/minecraft/src/PlayerControllerMP.java
@@ -1,76 +1,126 @@
 package net.minecraft.src;
 
 public class PlayerControllerMP {
+
+	/** The Minecraft instance. */
 	private final Minecraft mc;
 	private final NetClientHandler netClientHandler;
+
+	/** PosX of the current block being destroyed */
 	private int currentBlockX = -1;
+
+	/** PosY of the current block being destroyed */
 	private int currentBlockY = -1;
+
+	/** PosZ of the current block being destroyed */
 	private int currentblockZ = -1;
 	private ItemStack field_85183_f;
+
+	/** Current block damage (MP) */
 	private float curBlockDamageMP;
+
+	/**
+	 * Tick counter, when it hits 4 it resets back to 0 and plays the step sound
+	 */
 	private float stepSoundTickCounter;
+
+	/**
+	 * Delays the first damage on the block after the first click on the block
+	 */
 	private int blockHitDelay;
+
+	/** Tells if the player is hitting a block */
 	private boolean isHittingBlock;
-	private EnumGameType currentGameType = EnumGameType.SURVIVAL;
+
+	/** Current game type for the player */
+	private EnumGameType currentGameType;
+
+	/** Index of the current item held by the player in the inventory hotbar */
 	private int currentPlayerItem;
 
-	public PlayerControllerMP(Minecraft var1, NetClientHandler var2) {
-		this.mc = var1;
-		this.netClientHandler = var2;
+	public PlayerControllerMP(Minecraft par1Minecraft, NetClientHandler par2NetClientHandler) {
+		this.currentGameType = EnumGameType.SURVIVAL;		
+		this.mc = par1Minecraft;
+		this.netClientHandler = par2NetClientHandler;
 	}
 
-	public static void clickBlockCreative(Minecraft var0, PlayerControllerMP var1, int var2, int var3, int var4, int var5) {
-		if(!var0.theWorld.extinguishFire(var0.thePlayer, var2, var3, var4, var5)) {
-			var1.onPlayerDestroyBlock(var2, var3, var4, var5);
+	/**
+	 * Block dig operation in creative mode (instantly digs the block).
+	 */
+	public static void clickBlockCreative(Minecraft par0Minecraft, PlayerControllerMP par1PlayerControllerMP, int par2, int par3, int par4, int par5) {
+		if (!par0Minecraft.theWorld.extinguishFire(par0Minecraft.thePlayer, par2, par3, par4, par5)) {
+			par1PlayerControllerMP.onPlayerDestroyBlock(par2, par3, par4, par5);
 		}
-
-	}
-
-	public void setPlayerCapabilities(EntityPlayer var1) {
-		this.currentGameType.configurePlayerCapabilities(var1.capabilities);
-	}
-
+	}
+
+	/**
+	 * Sets player capabilities depending on current gametype. params: player
+	 */
+	public void setPlayerCapabilities(EntityPlayer par1EntityPlayer) {
+		this.currentGameType.configurePlayerCapabilities(par1EntityPlayer.capabilities);
+	}
+
+	/**
+	 * If modified to return true, the player spins around slowly around (0, 68.5, 0). The GUI is disabled, the view is set
+	 * to first person, and both chat and menu are disabled. Unless the server is modified to ignore illegal stances,
+	 * attempting to enter a world at all will result in an immediate kick due to an illegal stance. Appears to be left-
+	 * over debug, or demo code.
+	 */
 	public boolean enableEverythingIsScrewedUpMode() {
 		return false;
 	}
 
-	public void setGameType(EnumGameType var1) {
-		this.currentGameType = var1;
+	/**
+	 * Sets the game type for the player.
+	 */
+	public void setGameType(EnumGameType par1EnumGameType) {
+		this.currentGameType = par1EnumGameType;
 		this.currentGameType.configurePlayerCapabilities(this.mc.thePlayer.capabilities);
 	}
 
-	public void flipPlayer(EntityPlayer var1) {
-		var1.rotationYaw = -180.0F;
+	/**
+	 * Flips the player around. Args: player
+	 */
+	public void flipPlayer(EntityPlayer par1EntityPlayer) {
+		par1EntityPlayer.rotationYaw = -180.0F;
 	}
 
 	public boolean shouldDrawHUD() {
 		return this.currentGameType.isSurvivalOrAdventure();
 	}
 
-	public boolean onPlayerDestroyBlock(int var1, int var2, int var3, int var4) {
-		if(this.currentGameType.isAdventure() && !this.mc.thePlayer.isCurrentToolAdventureModeExempt(var1, var2, var3)) {
+	/**
+	 * Called when a player completes the destruction of a block
+	 */
+	public boolean onPlayerDestroyBlock(int par1, int par2, int par3, int par4) {
+		if (this.currentGameType.isAdventure() && !this.mc.thePlayer.isCurrentToolAdventureModeExempt(par1, par2, par3)) {
 			return false;
-		} else if(this.currentGameType.isCreative() && this.mc.thePlayer.getHeldItem() != null && this.mc.thePlayer.getHeldItem().getItem() instanceof ItemSword) {
+		} else if (this.currentGameType.isCreative() && this.mc.thePlayer.getHeldItem() != null && this.mc.thePlayer.getHeldItem().getItem() instanceof ItemSword) {
 			return false;
 		} else {
 			WorldClient var5 = this.mc.theWorld;
-			Block var6 = Block.blocksList[var5.getBlockId(var1, var2, var3)];
-			if(var6 == null) {
+			Block var6 = Block.blocksList[var5.getBlockId(par1, par2, par3)];
+
+			if (var6 == null) {
 				return false;
 			} else {
-				var5.playAuxSFX(2001, var1, var2, var3, var6.blockID + (var5.getBlockMetadata(var1, var2, var3) << 12));
-				int var7 = var5.getBlockMetadata(var1, var2, var3);
-				boolean var8 = var5.setBlockToAir(var1, var2, var3);
-				if(var8) {
-					var6.onBlockDestroyedByPlayer(var5, var1, var2, var3, var7);
+				var5.playAuxSFX(2001, par1, par2, par3, var6.blockID + (var5.getBlockMetadata(par1, par2, par3) << 12));
+				int var7 = var5.getBlockMetadata(par1, par2, par3);
+				boolean var8 = var5.setBlockToAir(par1, par2, par3);
+
+				if (var8) {
+					var6.onBlockDestroyedByPlayer(var5, par1, par2, par3, var7);
 				}
 
 				this.currentBlockY = -1;
-				if(!this.currentGameType.isCreative()) {
+
+				if (!this.currentGameType.isCreative()) {
 					ItemStack var9 = this.mc.thePlayer.getCurrentEquippedItem();
-					if(var9 != null) {
-						var9.onBlockDestroyed(var5, var6.blockID, var1, var2, var3, this.mc.thePlayer);
-						if(var9.stackSize == 0) {
+
+					if (var9 != null) {
+						var9.onBlockDestroyed(var5, var6.blockID, par1, par2, par3, this.mc.thePlayer);
+
+						if (var9.stackSize == 0) {
 							this.mc.thePlayer.destroyCurrentEquippedItem();
 						}
 					}
@@ -81,42 +131,50 @@
 		}
 	}
 
-	public void clickBlock(int var1, int var2, int var3, int var4) {
-		if(!this.currentGameType.isAdventure() || this.mc.thePlayer.isCurrentToolAdventureModeExempt(var1, var2, var3)) {
-			if(this.currentGameType.isCreative()) {
-				this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
-				clickBlockCreative(this.mc, this, var1, var2, var3, var4);
+	/**
+	 * Called by Minecraft class when the player is hitting a block with an item. Args: x, y, z, side
+	 */
+	public void clickBlock(int par1, int par2, int par3, int par4) {
+		if (!this.currentGameType.isAdventure() || this.mc.thePlayer.isCurrentToolAdventureModeExempt(par1, par2, par3)) {
+			if (this.currentGameType.isCreative()) {
+				this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, par1, par2, par3, par4));
+				clickBlockCreative(this.mc, this, par1, par2, par3, par4);
 				this.blockHitDelay = 5;
-			} else if(!this.isHittingBlock || !this.sameToolAndBlock(var1, var2, var3)) {
-				if(this.isHittingBlock) {
-					this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, this.currentBlockX, this.currentBlockY, this.currentblockZ, var4));
-				}
-
-				this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-				if(var5 > 0 && this.curBlockDamageMP == 0.0F) {
-					Block.blocksList[var5].onBlockClicked(this.mc.theWorld, var1, var2, var3, this.mc.thePlayer);
-				}
-
-				if(var5 > 0 && Block.blocksList[var5].getPlayerRelativeBlockHardness(this.mc.thePlayer, this.mc.thePlayer.worldObj, var1, var2, var3) >= 1.0F) {
-					this.onPlayerDestroyBlock(var1, var2, var3, var4);
+			} else if (!this.isHittingBlock || !this.sameToolAndBlock(par1, par2, par3)) {
+				if (this.isHittingBlock) {
+					this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, this.currentBlockX, this.currentBlockY, this.currentblockZ, par4));
+				}
+
+				this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, par1, par2, par3, par4));
+				int var5 = this.mc.theWorld.getBlockId(par1, par2, par3);
+
+				if (var5 > 0 && this.curBlockDamageMP == 0.0F) {
+					Block.blocksList[var5].onBlockClicked(this.mc.theWorld, par1, par2, par3, this.mc.thePlayer);
+				}
+
+				// Spout Start
+				if (var5 > 0 && Block.blocksList[var5].getPlayerRelativeBlockHardness(this.mc.thePlayer) >= 1.0F) {
+				// Spout End
+					this.onPlayerDestroyBlock(par1, par2, par3, par4);
 				} else {
 					this.isHittingBlock = true;
-					this.currentBlockX = var1;
-					this.currentBlockY = var2;
-					this.currentblockZ = var3;
+					this.currentBlockX = par1;
+					this.currentBlockY = par2;
+					this.currentblockZ = par3;
 					this.field_85183_f = this.mc.thePlayer.getHeldItem();
 					this.curBlockDamageMP = 0.0F;
 					this.stepSoundTickCounter = 0.0F;
 					this.mc.theWorld.destroyBlockInWorldPartially(this.mc.thePlayer.entityId, this.currentBlockX, this.currentBlockY, this.currentblockZ, (int)(this.curBlockDamageMP * 10.0F) - 1);
 				}
 			}
-
 		}
 	}
 
+	/**
+	 * Resets current block damage and isHittingBlock
+	 */
 	public void resetBlockRemoving() {
-		if(this.isHittingBlock) {
+		if (this.isHittingBlock) {
 			this.netClientHandler.addToSendQueue(new Packet14BlockDig(1, this.currentBlockX, this.currentBlockY, this.currentblockZ, -1));
 		}
 
@@ -125,33 +183,42 @@
 		this.mc.theWorld.destroyBlockInWorldPartially(this.mc.thePlayer.entityId, this.currentBlockX, this.currentBlockY, this.currentblockZ, -1);
 	}
 
-	public void onPlayerDamageBlock(int var1, int var2, int var3, int var4) {
+	/**
+	 * Called when a player damages a block and updates damage counters
+	 */
+	public void onPlayerDamageBlock(int par1, int par2, int par3, int par4) {
 		this.syncCurrentPlayItem();
-		if(this.blockHitDelay > 0) {
+
+		if (this.blockHitDelay > 0) {
 			--this.blockHitDelay;
-		} else if(this.currentGameType.isCreative()) {
+		} else if (this.currentGameType.isCreative()) {
 			this.blockHitDelay = 5;
-			this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, var1, var2, var3, var4));
-			clickBlockCreative(this.mc, this, var1, var2, var3, var4);
+			this.netClientHandler.addToSendQueue(new Packet14BlockDig(0, par1, par2, par3, par4));
+			clickBlockCreative(this.mc, this, par1, par2, par3, par4);
 		} else {
-			if(this.sameToolAndBlock(var1, var2, var3)) {
-				int var5 = this.mc.theWorld.getBlockId(var1, var2, var3);
-				if(var5 == 0) {
+			if (this.sameToolAndBlock(par1, par2, par3)) {
+				int var5 = this.mc.theWorld.getBlockId(par1, par2, par3);
+
+				if (var5 == 0) {
 					this.isHittingBlock = false;
 					return;
 				}
 
 				Block var6 = Block.blocksList[var5];
-				this.curBlockDamageMP += var6.getPlayerRelativeBlockHardness(this.mc.thePlayer, this.mc.thePlayer.worldObj, var1, var2, var3);
-				if(this.stepSoundTickCounter % 4.0F == 0.0F && var6 != null) {
-					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)var1 + 0.5F, (float)var2 + 0.5F, (float)var3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
+				// Spout Start
+				this.curBlockDamageMP += var6.getPlayerRelativeBlockHardness(this.mc.thePlayer);
+				// Spout End
+
+				if (this.stepSoundTickCounter % 4.0F == 0.0F && var6 != null) {
+					this.mc.sndManager.playSound(var6.stepSound.getStepSound(), (float)par1 + 0.5F, (float)par2 + 0.5F, (float)par3 + 0.5F, (var6.stepSound.getVolume() + 1.0F) / 8.0F, var6.stepSound.getPitch() * 0.5F);
 				}
 
 				++this.stepSoundTickCounter;
-				if(this.curBlockDamageMP >= 1.0F) {
+
+				if (this.curBlockDamageMP >= 1.0F) {
 					this.isHittingBlock = false;
-					this.netClientHandler.addToSendQueue(new Packet14BlockDig(2, var1, var2, var3, var4));
-					this.onPlayerDestroyBlock(var1, var2, var3, var4);
+					this.netClientHandler.addToSendQueue(new Packet14BlockDig(2, par1, par2, par3, par4));
+					this.onPlayerDestroyBlock(par1, par2, par3, par4);
 					this.curBlockDamageMP = 0.0F;
 					this.stepSoundTickCounter = 0.0F;
 					this.blockHitDelay = 5;
@@ -159,12 +226,14 @@
 
 				this.mc.theWorld.destroyBlockInWorldPartially(this.mc.thePlayer.entityId, this.currentBlockX, this.currentBlockY, this.currentblockZ, (int)(this.curBlockDamageMP * 10.0F) - 1);
 			} else {
-				this.clickBlock(var1, var2, var3, var4);
+				this.clickBlock(par1, par2, par3, par4);
 			}
-
 		}
 	}
 
+	/**
+	 * player reach distance = 4F
+	 */
 	public float getBlockReachDistance() {
 		return this.currentGameType.isCreative() ? 5.0F : 4.5F;
 	}
@@ -174,143 +243,176 @@
 		this.mc.sndManager.playRandomMusicIfReady();
 	}
 
-	private boolean sameToolAndBlock(int var1, int var2, int var3) {
+	private boolean sameToolAndBlock(int par1, int par2, int par3) {
 		ItemStack var4 = this.mc.thePlayer.getHeldItem();
 		boolean var5 = this.field_85183_f == null && var4 == null;
-		if(this.field_85183_f != null && var4 != null) {
+
+		if (this.field_85183_f != null && var4 != null) {
 			var5 = var4.itemID == this.field_85183_f.itemID && ItemStack.areItemStackTagsEqual(var4, this.field_85183_f) && (var4.isItemStackDamageable() || var4.getItemDamage() == this.field_85183_f.getItemDamage());
 		}
 
-		return var1 == this.currentBlockX && var2 == this.currentBlockY && var3 == this.currentblockZ && var5;
+		return par1 == this.currentBlockX && par2 == this.currentBlockY && par3 == this.currentblockZ && var5;
 	}
 
+	/**
+	 * Syncs the current player item with the server
+	 */
 	private void syncCurrentPlayItem() {
 		int var1 = this.mc.thePlayer.inventory.currentItem;
-		if(var1 != this.currentPlayerItem) {
+
+		if (var1 != this.currentPlayerItem) {
 			this.currentPlayerItem = var1;
 			this.netClientHandler.addToSendQueue(new Packet16BlockItemSwitch(this.currentPlayerItem));
 		}
-
 	}
 
-	public boolean onPlayerRightClick(EntityPlayer var1, World var2, ItemStack var3, int var4, int var5, int var6, int var7, Vec3 var8) {
+	/**
+	 * Handles a players right click. Args: player, world, x, y, z, side, hitVec
+	 */
+	public boolean onPlayerRightClick(EntityPlayer par1EntityPlayer, World par2World, ItemStack par3ItemStack, int par4, int par5, int par6, int par7, Vec3 par8Vec3) {
 		this.syncCurrentPlayItem();
-		float var9 = (float)var8.xCoord - (float)var4;
-		float var10 = (float)var8.yCoord - (float)var5;
-		float var11 = (float)var8.zCoord - (float)var6;
+		float var9 = (float)par8Vec3.xCoord - (float)par4;
+		float var10 = (float)par8Vec3.yCoord - (float)par5;
+		float var11 = (float)par8Vec3.zCoord - (float)par6;
 		boolean var12 = false;
 		int var13;
-		if(!var1.isSneaking() || var1.getHeldItem() == null) {
-			var13 = var2.getBlockId(var4, var5, var6);
-			if(var13 > 0 && Block.blocksList[var13].onBlockActivated(var2, var4, var5, var6, var1, var7, var9, var10, var11)) {
+
+		if (!par1EntityPlayer.isSneaking() || par1EntityPlayer.getHeldItem() == null) {
+			var13 = par2World.getBlockId(par4, par5, par6);
+
+			if (var13 > 0 && Block.blocksList[var13].onBlockActivated(par2World, par4, par5, par6, par1EntityPlayer, par7, var9, var10, var11)) {
 				var12 = true;
 			}
 		}
 
-		if(!var12 && var3 != null && var3.getItem() instanceof ItemBlock) {
-			ItemBlock var16 = (ItemBlock)var3.getItem();
-			if(!var16.canPlaceItemBlockOnSide(var2, var4, var5, var6, var7, var1, var3)) {
+		if (!var12 && par3ItemStack != null && par3ItemStack.getItem() instanceof ItemBlock) {
+			ItemBlock var16 = (ItemBlock)par3ItemStack.getItem();
+
+			if (!var16.canPlaceItemBlockOnSide(par2World, par4, par5, par6, par7, par1EntityPlayer, par3ItemStack)) {
 				return false;
 			}
 		}
 
-		this.netClientHandler.addToSendQueue(new Packet15Place(var4, var5, var6, var7, var1.inventory.getCurrentItem(), var9, var10, var11));
-		if(var12) {
+		this.netClientHandler.addToSendQueue(new Packet15Place(par4, par5, par6, par7, par1EntityPlayer.inventory.getCurrentItem(), var9, var10, var11));
+
+		if (var12) {
 			return true;
-		} else if(var3 == null) {
+		} else if (par3ItemStack == null) {
 			return false;
-		} else if(this.currentGameType.isCreative()) {
-			var13 = var3.getItemDamage();
-			int var14 = var3.stackSize;
-			boolean var15 = var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var9, var10, var11);
-			var3.setItemDamage(var13);
-			var3.stackSize = var14;
+		} else if (this.currentGameType.isCreative()) {
+			var13 = par3ItemStack.getItemDamage();
+			int var14 = par3ItemStack.stackSize;
+			boolean var15 = par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, var9, var10, var11);
+			par3ItemStack.setItemDamage(var13);
+			par3ItemStack.stackSize = var14;
 			return var15;
 		} else {
-			return var3.tryPlaceItemIntoWorld(var1, var2, var4, var5, var6, var7, var9, var10, var11);
+			return par3ItemStack.tryPlaceItemIntoWorld(par1EntityPlayer, par2World, par4, par5, par6, par7, var9, var10, var11);
 		}
 	}
 
-	public boolean sendUseItem(EntityPlayer var1, World var2, ItemStack var3) {
+	/**
+	 * Notifies the server of things like consuming food, etc...
+	 */
+	public boolean sendUseItem(EntityPlayer par1EntityPlayer, World par2World, ItemStack par3ItemStack) {
 		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet15Place(-1, -1, -1, 255, var1.inventory.getCurrentItem(), 0.0F, 0.0F, 0.0F));
-		int var4 = var3.stackSize;
-		ItemStack var5 = var3.useItemRightClick(var2, var1);
-		if(var5 != var3 || var5 != null && var5.stackSize != var4) {
-			var1.inventory.mainInventory[var1.inventory.currentItem] = var5;
-			if(var5.stackSize == 0) {
-				var1.inventory.mainInventory[var1.inventory.currentItem] = null;
+		this.netClientHandler.addToSendQueue(new Packet15Place(-1, -1, -1, 255, par1EntityPlayer.inventory.getCurrentItem(), 0.0F, 0.0F, 0.0F));
+		int var4 = par3ItemStack.stackSize;
+		ItemStack var5 = par3ItemStack.useItemRightClick(par2World, par1EntityPlayer);
+
+		if (var5 == par3ItemStack && (var5 == null || var5.stackSize == var4)) {
+			return false;
+		} else {
+			par1EntityPlayer.inventory.mainInventory[par1EntityPlayer.inventory.currentItem] = var5;
+
+			if (var5.stackSize == 0) {
+				par1EntityPlayer.inventory.mainInventory[par1EntityPlayer.inventory.currentItem] = null;
 			}
 
 			return true;
-		} else {
-			return false;
 		}
 	}
 
-	public EntityClientPlayerMP func_78754_a(World var1) {
-		return new EntityClientPlayerMP(this.mc, var1, this.mc.getSession(), this.netClientHandler);
-	}
-
-	public void attackEntity(EntityPlayer var1, Entity var2) {
-		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet7UseEntity(var1.entityId, var2.entityId, 1));
-		var1.attackTargetEntityWithCurrentItem(var2);
-	}
-
-	public boolean func_78768_b(EntityPlayer var1, Entity var2) {
-		this.syncCurrentPlayItem();
-		this.netClientHandler.addToSendQueue(new Packet7UseEntity(var1.entityId, var2.entityId, 0));
-		return var1.interactWith(var2);
-	}
-
-	public ItemStack windowClick(int var1, int var2, int var3, int var4, EntityPlayer var5) {
-		short var6 = var5.openContainer.getNextTransactionID(var5.inventory);
-		ItemStack var7 = var5.openContainer.slotClick(var2, var3, var4, var5);
-		this.netClientHandler.addToSendQueue(new Packet102WindowClick(var1, var2, var3, var4, var7, var6));
+	public EntityClientPlayerMP func_78754_a(World par1World) {
+		return new EntityClientPlayerMP(this.mc, par1World, this.mc.getSession(), this.netClientHandler);
+	}
+
+	/**
+	 * Attacks an entity
+	 */
+	public void attackEntity(EntityPlayer par1EntityPlayer, Entity par2Entity) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet7UseEntity(par1EntityPlayer.entityId, par2Entity.entityId, 1));
+		par1EntityPlayer.attackTargetEntityWithCurrentItem(par2Entity);
+	}
+
+	public boolean func_78768_b(EntityPlayer par1EntityPlayer, Entity par2Entity) {
+		this.syncCurrentPlayItem();
+		this.netClientHandler.addToSendQueue(new Packet7UseEntity(par1EntityPlayer.entityId, par2Entity.entityId, 0));
+		return par1EntityPlayer.interactWith(par2Entity);
+	}
+
+	public ItemStack windowClick(int par1, int par2, int par3, int par4, EntityPlayer par5EntityPlayer) {
+		short var6 = par5EntityPlayer.openContainer.getNextTransactionID(par5EntityPlayer.inventory);
+		ItemStack var7 = par5EntityPlayer.openContainer.slotClick(par2, par3, par4, par5EntityPlayer);
+		this.netClientHandler.addToSendQueue(new Packet102WindowClick(par1, par2, par3, par4, var7, var6));
 		return var7;
 	}
 
-	public void sendEnchantPacket(int var1, int var2) {
-		this.netClientHandler.addToSendQueue(new Packet108EnchantItem(var1, var2));
-	}
-
-	public void sendSlotPacket(ItemStack var1, int var2) {
-		if(this.currentGameType.isCreative()) {
-			this.netClientHandler.addToSendQueue(new Packet107CreativeSetSlot(var2, var1));
-		}
-
-	}
-
-	public void func_78752_a(ItemStack var1) {
-		if(this.currentGameType.isCreative() && var1 != null) {
-			this.netClientHandler.addToSendQueue(new Packet107CreativeSetSlot(-1, var1));
-		}
-
-	}
-
-	public void onStoppedUsingItem(EntityPlayer var1) {
+	/**
+	 * GuiEnchantment uses this during multiplayer to tell PlayerControllerMP to send a packet indicating the enchantment
+	 * action the player has taken.
+	 */
+	public void sendEnchantPacket(int par1, int par2) {
+		this.netClientHandler.addToSendQueue(new Packet108EnchantItem(par1, par2));
+	}
+
+	/**
+	 * Used in PlayerControllerMP to update the server with an ItemStack in a slot.
+	 */
+	public void sendSlotPacket(ItemStack par1ItemStack, int par2) {
+		if (this.currentGameType.isCreative()) {
+			this.netClientHandler.addToSendQueue(new Packet107CreativeSetSlot(par2, par1ItemStack));
+		}
+	}
+
+	public void func_78752_a(ItemStack par1ItemStack) {
+		if (this.currentGameType.isCreative() && par1ItemStack != null) {
+			this.netClientHandler.addToSendQueue(new Packet107CreativeSetSlot(-1, par1ItemStack));
+		}
+	}
+
+	public void onStoppedUsingItem(EntityPlayer par1EntityPlayer) {
 		this.syncCurrentPlayItem();
 		this.netClientHandler.addToSendQueue(new Packet14BlockDig(5, 0, 0, 0, 255));
-		var1.stopUsingItem();
+		par1EntityPlayer.stopUsingItem();
 	}
 
 	public boolean func_78763_f() {
 		return this.currentGameType.isSurvivalOrAdventure();
 	}
 
+	/**
+	 * Checks if the player is not creative, used for checking if it should break a block instantly
+	 */
 	public boolean isNotCreative() {
 		return !this.currentGameType.isCreative();
 	}
 
+	/**
+	 * returns true if player is in creative mode
+	 */
 	public boolean isInCreativeMode() {
 		return this.currentGameType.isCreative();
 	}
 
+	/**
+	 * true for hitting entities far away.
+	 */
 	public boolean extendedReach() {
 		return this.currentGameType.isCreative();
 	}
-
+	
 	public boolean func_110738_j() {
 		return this.mc.thePlayer.isRiding() && this.mc.thePlayer.ridingEntity instanceof EntityHorse;
 	}
