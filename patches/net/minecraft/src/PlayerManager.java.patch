--- net/minecraft/src/PlayerManager.java
+++ net/minecraft/src/PlayerManager.java
@@ -5,121 +5,160 @@
 
 public class PlayerManager {
 	private final WorldServer theWorldServer;
-	private final List b = new ArrayList();
+
+	/** players in the current instance */
+	private final List players = new ArrayList();
+
+	/**
+	 * A map of chunk position (two ints concatenated into a long) to PlayerInstance
+	 */
 	private final LongHashMap playerInstances = new LongHashMap();
-	private final List d = new ArrayList();
-	private final List e = new ArrayList();
+
+	/**
+	 * contains a PlayerInstance for every chunk they can see. the "player instance" cotains a list of all players who can
+	 * also that chunk
+	 */
+	private final List chunkWatcherWithPlayers = new ArrayList();
+
+	/** This field is using when chunk should be processed (every 8000 ticks) */
+	private final List playerInstanceList = new ArrayList();
+
+	/**
+	 * Number of chunks the server sends to the client. Valid 3<=x<=15. In server.properties.
+	 */
 	private final int playerViewRadius;
+
+	/** time what is using to check if InhabitedTime should be calculated */
 	private long previousTotalWorldTime;
-	private final int[][] xzDirectionsConst = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
-
-	public PlayerManager(WorldServer var1, int var2) {
-		if(var2 > 15) {
+
+	/** x, z direction vectors: east, south, west, north */
+	private final int[][] xzDirectionsConst = new int[][] {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};
+
+	public PlayerManager(WorldServer par1WorldServer, int par2) {
+		if (par2 > 15) {
 			throw new IllegalArgumentException("Too big view radius!");
-		} else if(var2 < 3) {
+		} else if (par2 < 3) {
 			throw new IllegalArgumentException("Too small view radius!");
 		} else {
-			this.playerViewRadius = var2;
-			this.theWorldServer = var1;
+			this.playerViewRadius = par2;
+			this.theWorldServer = par1WorldServer;
 		}
 	}
 
-	public WorldServer getMinecraftServer() {
+	public WorldServer getWorldServer() {
 		return this.theWorldServer;
 	}
 
+	/**
+	 * updates all the player instances that need to be updated
+	 */
 	public void updatePlayerInstances() {
 		long var1 = this.theWorldServer.getTotalWorldTime();
 		int var3;
 		PlayerInstance var4;
-		if(var1 - this.previousTotalWorldTime > 8000L) {
+
+		if (var1 - this.previousTotalWorldTime > 8000L) {
 			this.previousTotalWorldTime = var1;
 
-			for(var3 = 0; var3 < this.e.size(); ++var3) {
-				var4 = (PlayerInstance)this.e.get(var3);
-				var4.onUpdate();
+			for (var3 = 0; var3 < this.playerInstanceList.size(); ++var3) {
+				var4 = (PlayerInstance)this.playerInstanceList.get(var3);
+				var4.sendChunkUpdate();
 				var4.processChunk();
 			}
 		} else {
-			for(var3 = 0; var3 < this.d.size(); ++var3) {
-				var4 = (PlayerInstance)this.d.get(var3);
-				var4.onUpdate();
+			for (var3 = 0; var3 < this.chunkWatcherWithPlayers.size(); ++var3) {
+				var4 = (PlayerInstance)this.chunkWatcherWithPlayers.get(var3);
+				var4.sendChunkUpdate();
 			}
 		}
 
-		this.d.clear();
-		if(this.b.isEmpty()) {
+		this.chunkWatcherWithPlayers.clear();
+
+		if (this.players.isEmpty()) {
 			WorldProvider var5 = this.theWorldServer.provider;
-			if(!var5.canRespawnHere()) {
+
+			if (!var5.canRespawnHere()) {
 				this.theWorldServer.theChunkProviderServer.unloadAllChunks();
 			}
 		}
-
 	}
 
-	private PlayerInstance getPlayerInstance(int var1, int var2, boolean var3) {
-		long var4 = (long)var1 + 2147483647L | (long)var2 + 2147483647L << 32;
+	private PlayerInstance getOrCreateChunkWatcher(int par1, int par2, boolean par3) {
+		long var4 = (long)par1 + 2147483647L | (long)par2 + 2147483647L << 32;
 		PlayerInstance var6 = (PlayerInstance)this.playerInstances.getValueByKey(var4);
-		if(var6 == null && var3) {
-			var6 = new PlayerInstance(this, var1, var2);
+
+		if (var6 == null && par3) {
+			var6 = new PlayerInstance(this, par1, par2);
 			this.playerInstances.add(var4, var6);
-			this.e.add(var6);
+			this.playerInstanceList.add(var6);
 		}
 
 		return var6;
 	}
 
-	public void markBlockForUpdate(int var1, int var2, int var3) {
-		int var4 = var1 >> 4;
-		int var5 = var3 >> 4;
-		PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-		if(var6 != null) {
-			var6.markBlockNeedsUpdate(var1 & 15, var2, var3 & 15);
+	/**
+	 * Called by WorldManager.markBlockForUpdate; marks a block to be resent to clients.
+	 */
+	public void markBlockForUpdate(int par1, int par2, int par3) {
+		int var4 = par1 >> 4;
+		int var5 = par3 >> 4;
+		PlayerInstance var6 = this.getOrCreateChunkWatcher(var4, var5, false);
+
+		if (var6 != null) {
+			var6.flagChunkForUpdate(par1 & 15, par2, par3 & 15);
 		}
-
 	}
 
-	public void addPlayer(EntityPlayerMP var1) {
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		var1.managedPosX = var1.posX;
-		var1.managedPosZ = var1.posZ;
+	/**
+	 * Adds an EntityPlayerMP to the PlayerManager.
+	 */
+	public void addPlayer(EntityPlayerMP par1EntityPlayerMP) {
+		int var2 = (int)par1EntityPlayerMP.posX >> 4;
+		int var3 = (int)par1EntityPlayerMP.posZ >> 4;
+		par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
+		par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
 
-		for(int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
-			for(int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
-				this.getPlayerInstance(var4, var5, true).addPlayer(var1);
+		for (int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
+			for (int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
+				this.getOrCreateChunkWatcher(var4, var5, true).addPlayer(par1EntityPlayerMP);
 			}
 		}
 
-		this.b.add(var1);
-		this.filterChunkLoadQueue(var1);
+		this.players.add(par1EntityPlayerMP);
+		this.filterChunkLoadQueue(par1EntityPlayerMP);
 	}
 
-	public void filterChunkLoadQueue(EntityPlayerMP var1) {
-		ArrayList var2 = new ArrayList(var1.f);
+	/**
+	 * Removes all chunks from the given player's chunk load queue that are not in viewing range of the player.
+	 */
+	public void filterChunkLoadQueue(EntityPlayerMP par1EntityPlayerMP) {
+		ArrayList var2 = new ArrayList(par1EntityPlayerMP.loadedChunks);
 		int var3 = 0;
 		int var4 = this.playerViewRadius;
-		int var5 = (int)var1.posX >> 4;
-		int var6 = (int)var1.posZ >> 4;
+		int var5 = (int)par1EntityPlayerMP.posX >> 4;
+		int var6 = (int)par1EntityPlayerMP.posZ >> 4;
 		int var7 = 0;
 		int var8 = 0;
-		ChunkCoordIntPair var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5, var6, true));
-		var1.f.clear();
-		if(var2.contains(var9)) {
-			var1.f.add(var9);
+		ChunkCoordIntPair var9 = PlayerInstance.getChunkLocation(this.getOrCreateChunkWatcher(var5, var6, true));
+		par1EntityPlayerMP.loadedChunks.clear();
+
+		if (var2.contains(var9)) {
+			par1EntityPlayerMP.loadedChunks.add(var9);
 		}
 
 		int var10;
-		for(var10 = 1; var10 <= var4 * 2; ++var10) {
-			for(int var11 = 0; var11 < 2; ++var11) {
+
+		for (var10 = 1; var10 <= var4 * 2; ++var10) {
+			for (int var11 = 0; var11 < 2; ++var11) {
 				int[] var12 = this.xzDirectionsConst[var3++ % 4];
 
-				for(int var13 = 0; var13 < var10; ++var13) {
+				for (int var13 = 0; var13 < var10; ++var13) {
 					var7 += var12[0];
 					var8 += var12[1];
-					var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5 + var7, var6 + var8, true));
-					if(var2.contains(var9)) {
-						var1.f.add(var9);
+					var9 = PlayerInstance.getChunkLocation(this.getOrCreateChunkWatcher(var5 + var7, var6 + var8, true));
+
+					if (var2.contains(var9)) {
+						par1EntityPlayerMP.loadedChunks.add(var9);
 					}
 				}
 			}
@@ -127,96 +166,116 @@
 
 		var3 %= 4;
 
-		for(var10 = 0; var10 < var4 * 2; ++var10) {
+		for (var10 = 0; var10 < var4 * 2; ++var10) {
 			var7 += this.xzDirectionsConst[var3][0];
 			var8 += this.xzDirectionsConst[var3][1];
-			var9 = PlayerInstance.getChunkLocation(this.getPlayerInstance(var5 + var7, var6 + var8, true));
-			if(var2.contains(var9)) {
-				var1.f.add(var9);
+			var9 = PlayerInstance.getChunkLocation(this.getOrCreateChunkWatcher(var5 + var7, var6 + var8, true));
+
+			if (var2.contains(var9)) {
+				par1EntityPlayerMP.loadedChunks.add(var9);
 			}
 		}
-
 	}
 
-	public void removePlayer(EntityPlayerMP var1) {
-		int var2 = (int)var1.managedPosX >> 4;
-		int var3 = (int)var1.managedPosZ >> 4;
-
-		for(int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
-			for(int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
-				PlayerInstance var6 = this.getPlayerInstance(var4, var5, false);
-				if(var6 != null) {
-					var6.removePlayer(var1);
+	/**
+	 * Removes an EntityPlayerMP from the PlayerManager.
+	 */
+	public void removePlayer(EntityPlayerMP par1EntityPlayerMP) {
+		int var2 = (int)par1EntityPlayerMP.managedPosX >> 4;
+		int var3 = (int)par1EntityPlayerMP.managedPosZ >> 4;
+
+		for (int var4 = var2 - this.playerViewRadius; var4 <= var2 + this.playerViewRadius; ++var4) {
+			for (int var5 = var3 - this.playerViewRadius; var5 <= var3 + this.playerViewRadius; ++var5) {
+				PlayerInstance var6 = this.getOrCreateChunkWatcher(var4, var5, false);
+
+				if (var6 != null) {
+					var6.removePlayer(par1EntityPlayerMP);
 				}
 			}
 		}
 
-		this.b.remove(var1);
-	}
-
-	private boolean overlaps(int var1, int var2, int var3, int var4, int var5) {
-		int var6 = var1 - var3;
-		int var7 = var2 - var4;
-		return var6 >= -var5 && var6 <= var5 ? var7 >= -var5 && var7 <= var5 : false;
-	}
-
-	public void updateMountedMovingPlayer(EntityPlayerMP var1) {
-		int var2 = (int)var1.posX >> 4;
-		int var3 = (int)var1.posZ >> 4;
-		double var4 = var1.managedPosX - var1.posX;
-		double var6 = var1.managedPosZ - var1.posZ;
+		this.players.remove(par1EntityPlayerMP);
+	}
+
+	/**
+	 * Determine if two rectangles centered at the given points overlap for the provided radius. Arguments: x1, z1, x2, z2,
+	 * radius.
+	 */
+	private boolean overlaps(int par1, int par2, int par3, int par4, int par5) {
+		int var6 = par1 - par3;
+		int var7 = par2 - par4;
+		return var6 >= -par5 && var6 <= par5 ? var7 >= -par5 && var7 <= par5 : false;
+	}
+
+	/**
+	 * update chunks around a player being moved by server logic (e.g. cart, boat)
+	 */
+	public void updateMountedMovingPlayer(EntityPlayerMP par1EntityPlayerMP) {
+		int var2 = (int)par1EntityPlayerMP.posX >> 4;
+		int var3 = (int)par1EntityPlayerMP.posZ >> 4;
+		double var4 = par1EntityPlayerMP.managedPosX - par1EntityPlayerMP.posX;
+		double var6 = par1EntityPlayerMP.managedPosZ - par1EntityPlayerMP.posZ;
 		double var8 = var4 * var4 + var6 * var6;
-		if(var8 >= 64.0D) {
-			int var10 = (int)var1.managedPosX >> 4;
-			int var11 = (int)var1.managedPosZ >> 4;
+
+		if (var8 >= 64.0D) {
+			int var10 = (int)par1EntityPlayerMP.managedPosX >> 4;
+			int var11 = (int)par1EntityPlayerMP.managedPosZ >> 4;
 			int var12 = this.playerViewRadius;
 			int var13 = var2 - var10;
 			int var14 = var3 - var11;
-			if(var13 != 0 || var14 != 0) {
-				for(int var15 = var2 - var12; var15 <= var2 + var12; ++var15) {
-					for(int var16 = var3 - var12; var16 <= var3 + var12; ++var16) {
-						if(!this.overlaps(var15, var16, var10, var11, var12)) {
-							this.getPlayerInstance(var15, var16, true).addPlayer(var1);
+
+			if (var13 != 0 || var14 != 0) {
+				for (int var15 = var2 - var12; var15 <= var2 + var12; ++var15) {
+					for (int var16 = var3 - var12; var16 <= var3 + var12; ++var16) {
+						if (!this.overlaps(var15, var16, var10, var11, var12)) {
+							this.getOrCreateChunkWatcher(var15, var16, true).addPlayer(par1EntityPlayerMP);
 						}
 
-						if(!this.overlaps(var15 - var13, var16 - var14, var2, var3, var12)) {
-							PlayerInstance var17 = this.getPlayerInstance(var15 - var13, var16 - var14, false);
-							if(var17 != null) {
-								var17.removePlayer(var1);
+						if (!this.overlaps(var15 - var13, var16 - var14, var2, var3, var12)) {
+							PlayerInstance var17 = this.getOrCreateChunkWatcher(var15 - var13, var16 - var14, false);
+
+							if (var17 != null) {
+								var17.removePlayer(par1EntityPlayerMP);
 							}
 						}
 					}
 				}
 
-				this.filterChunkLoadQueue(var1);
-				var1.managedPosX = var1.posX;
-				var1.managedPosZ = var1.posZ;
+				this.filterChunkLoadQueue(par1EntityPlayerMP);
+				par1EntityPlayerMP.managedPosX = par1EntityPlayerMP.posX;
+				par1EntityPlayerMP.managedPosZ = par1EntityPlayerMP.posZ;
 			}
 		}
 	}
 
-	public boolean isPlayerWatchingChunk(EntityPlayerMP var1, int var2, int var3) {
-		PlayerInstance var4 = this.getPlayerInstance(var2, var3, false);
-		return var4 == null ? false : PlayerInstance.getPlayersInChunk(var4).contains(var1) && !var1.f.contains(PlayerInstance.getChunkLocation(var4));
-	}
-
-	public static int getFurthestViewableBlock(int var0) {
-		return var0 * 16 - 16;
-	}
-
-	static WorldServer getWorldServer(PlayerManager var0) {
-		return var0.theWorldServer;
-	}
-
-	static LongHashMap getChunkWatchers(PlayerManager var0) {
-		return var0.playerInstances;
-	}
-
-	static List getChunkWatcherList(PlayerManager var0) {
-		return var0.e;
-	}
-
-	static List getChunkWatchersWithPlayers(PlayerManager var0) {
-		return var0.d;
+	public boolean isPlayerWatchingChunk(EntityPlayerMP par1EntityPlayerMP, int par2, int par3) {
+		PlayerInstance var4 = this.getOrCreateChunkWatcher(par2, par3, false);
+		return var4 == null ? false : PlayerInstance.getPlayersInChunk(var4).contains(par1EntityPlayerMP) && !par1EntityPlayerMP.loadedChunks.contains(PlayerInstance.getChunkLocation(var4));
+	}
+
+	/**
+	 * Get the furthest viewable block given player's view distance
+	 */
+	public static int getFurthestViewableBlock(int par0) {
+		return par0 * 16 - 16;
+	}
+
+	static WorldServer getWorldServer(PlayerManager par0PlayerManager) {
+		return par0PlayerManager.theWorldServer;
+	}
+
+	static LongHashMap getChunkWatchers(PlayerManager par0PlayerManager) {
+		return par0PlayerManager.playerInstances;
+	}
+
+	/**
+	 * Returns player instances as list
+	 */
+	static List getChunkWatcherList(PlayerManager par0PlayerManager) {
+		return par0PlayerManager.playerInstanceList;
+	}
+
+	static List getChunkWatchersWithPlayers(PlayerManager par0PlayerManager) {
+		return par0PlayerManager.chunkWatcherWithPlayers;
 	}
 }
