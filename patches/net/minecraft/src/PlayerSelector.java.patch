--- net/minecraft/src/PlayerSelector.java
+++ net/minecraft/src/PlayerSelector.java
@@ -10,21 +10,40 @@
 import net.minecraft.server.MinecraftServer;
 
 public class PlayerSelector {
-	private static final Pattern a = Pattern.compile("^@([parf])(?:\\[([\\w=,!-]*)\\])?$");
-	private static final Pattern b = Pattern.compile("\\G([-!]?[\\w-]*)(?:$|,)");
-	private static final Pattern c = Pattern.compile("\\G(\\w+)=([-!]?[\\w-]*)(?:$|,)");
-
-	public static EntityPlayerMP matchOnePlayer(ICommandSender var0, String var1) {
-		EntityPlayerMP[] var2 = matchPlayers(var0, var1);
+
+	/**
+	 * This matches the at-tokens introduced for command blocks, including their arguments, if any.
+	 */
+	private static final Pattern tokenPattern = Pattern.compile("^@([parf])(?:\\[([\\w=,!-]*)\\])?$");
+
+	/**
+	 * This matches things like "-1,,4", and is used for getting x,y,z,range from the token's argument list.
+	 */
+	private static final Pattern intListPattern = Pattern.compile("\\G([-!]?[\\w-]*)(?:$|,)");
+
+	/**
+	 * This matches things like "rm=4,c=2" and is used for handling named token arguments.
+	 */
+	private static final Pattern keyValueListPattern = Pattern.compile("\\G(\\w+)=([-!]?[\\w-]*)(?:$|,)");
+
+	/**
+	 * Returns the one player that matches the given at-token.  Returns null if more than one player matches.
+	 */
+	public static EntityPlayerMP matchOnePlayer(ICommandSender par0ICommandSender, String par1Str) {
+		EntityPlayerMP[] var2 = matchPlayers(par0ICommandSender, par1Str);
 		return var2 != null && var2.length == 1 ? var2[0] : null;
 	}
 
-	public static String matchPlayersAsString(ICommandSender var0, String var1) {
-		EntityPlayerMP[] var2 = matchPlayers(var0, var1);
-		if(var2 != null && var2.length != 0) {
+	/**
+	 * Returns a nicely-formatted string listing the matching players.
+	 */
+	public static String matchPlayersAsString(ICommandSender par0ICommandSender, String par1Str) {
+		EntityPlayerMP[] var2 = matchPlayers(par0ICommandSender, par1Str);
+
+		if (var2 != null && var2.length != 0) {
 			String[] var3 = new String[var2.length];
 
-			for(int var4 = 0; var4 < var3.length; ++var4) {
+			for (int var4 = 0; var4 < var3.length; ++var4) {
 				var3[var4] = var2[var4].getTranslatedEntityName();
 			}
 
@@ -34,9 +53,13 @@
 		}
 	}
 
-	public static EntityPlayerMP[] matchPlayers(ICommandSender var0, String var1) {
-		Matcher var2 = a.matcher(var1);
-		if(!var2.matches()) {
+	/**
+	 * Returns an array of all players matched by the given at-token.
+	 */
+	public static EntityPlayerMP[] matchPlayers(ICommandSender par0ICommandSender, String par1Str) {
+		Matcher var2 = tokenPattern.matcher(par1Str);
+
+		if (!var2.matches()) {
 			return null;
 		} else {
 			Map var3 = getArgumentMap(var2.group(2));
@@ -47,64 +70,66 @@
 			int var8 = getDefaultMaximumLevel(var4);
 			int var9 = getDefaultCount(var4);
 			int var10 = EnumGameType.NOT_SET.getID();
-			ChunkCoordinates var11 = var0.getCommandSenderPosition();
+			ChunkCoordinates var11 = par0ICommandSender.getPlayerCoordinates();
 			Map var12 = func_96560_a(var3);
 			String var13 = null;
 			String var14 = null;
 			boolean var15 = false;
-			if(var3.containsKey("rm")) {
+
+			if (var3.containsKey("rm")) {
 				var5 = MathHelper.parseIntWithDefault((String)var3.get("rm"), var5);
 				var15 = true;
 			}
 
-			if(var3.containsKey("r")) {
+			if (var3.containsKey("r")) {
 				var6 = MathHelper.parseIntWithDefault((String)var3.get("r"), var6);
 				var15 = true;
 			}
 
-			if(var3.containsKey("lm")) {
+			if (var3.containsKey("lm")) {
 				var7 = MathHelper.parseIntWithDefault((String)var3.get("lm"), var7);
 			}
 
-			if(var3.containsKey("l")) {
+			if (var3.containsKey("l")) {
 				var8 = MathHelper.parseIntWithDefault((String)var3.get("l"), var8);
 			}
 
-			if(var3.containsKey("x")) {
+			if (var3.containsKey("x")) {
 				var11.posX = MathHelper.parseIntWithDefault((String)var3.get("x"), var11.posX);
 				var15 = true;
 			}
 
-			if(var3.containsKey("y")) {
+			if (var3.containsKey("y")) {
 				var11.posY = MathHelper.parseIntWithDefault((String)var3.get("y"), var11.posY);
 				var15 = true;
 			}
 
-			if(var3.containsKey("z")) {
+			if (var3.containsKey("z")) {
 				var11.posZ = MathHelper.parseIntWithDefault((String)var3.get("z"), var11.posZ);
 				var15 = true;
 			}
 
-			if(var3.containsKey("m")) {
+			if (var3.containsKey("m")) {
 				var10 = MathHelper.parseIntWithDefault((String)var3.get("m"), var10);
 			}
 
-			if(var3.containsKey("c")) {
+			if (var3.containsKey("c")) {
 				var9 = MathHelper.parseIntWithDefault((String)var3.get("c"), var9);
 			}
 
-			if(var3.containsKey("team")) {
+			if (var3.containsKey("team")) {
 				var14 = (String)var3.get("team");
 			}
 
-			if(var3.containsKey("name")) {
+			if (var3.containsKey("name")) {
 				var13 = (String)var3.get("name");
 			}
 
-			World var16 = var15 ? var0.getEntityWorld() : null;
+			World var16 = var15 ? par0ICommandSender.getEntityWorld() : null;
 			List var17;
-			if(!var4.equals("p") && !var4.equals("a")) {
-				if(!var4.equals("r")) {
+
+			if (!var4.equals("p") && !var4.equals("a")) {
+				if (!var4.equals("r")) {
 					return null;
 				} else {
 					var17 = MinecraftServer.getServer().getConfigurationManager().findPlayers(var11, var5, var6, 0, var10, var7, var8, var12, var13, var14, var16);
@@ -119,28 +144,34 @@
 		}
 	}
 
-	public static Map func_96560_a(Map var0) {
+	public static Map func_96560_a(Map par0Map) {
 		HashMap var1 = new HashMap();
-		Iterator var2 = var0.keySet().iterator();
+		Iterator var2 = par0Map.keySet().iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			String var3 = (String)var2.next();
-			if(var3.startsWith("score_") && var3.length() > "score_".length()) {
+
+			if (var3.startsWith("score_") && var3.length() > "score_".length()) {
 				String var4 = var3.substring("score_".length());
-				var1.put(var4, Integer.valueOf(MathHelper.parseIntWithDefault((String)var0.get(var3), 1)));
+				var1.put(var4, Integer.valueOf(MathHelper.parseIntWithDefault((String)par0Map.get(var3), 1)));
 			}
 		}
 
 		return var1;
 	}
 
-	public static boolean matchesMultiplePlayers(String var0) {
-		Matcher var1 = a.matcher(var0);
-		if(var1.matches()) {
+	/**
+	 * Returns whether the given pattern can match more than one player.
+	 */
+	public static boolean matchesMultiplePlayers(String par0Str) {
+		Matcher var1 = tokenPattern.matcher(par0Str);
+
+		if (var1.matches()) {
 			Map var2 = getArgumentMap(var1.group(2));
 			String var3 = var1.group(1);
 			int var4 = getDefaultCount(var3);
-			if(var2.containsKey("c")) {
+
+			if (var2.containsKey("c")) {
 				var4 = MathHelper.parseIntWithDefault((String)var2.get("c"), var4);
 			}
 
@@ -150,74 +181,104 @@
 		}
 	}
 
-	public static boolean hasTheseArguments(String var0, String var1) {
-		Matcher var2 = a.matcher(var0);
-		if(var2.matches()) {
+	/**
+	 * Returns whether the given token (parameter 1) has exactly the given arguments (parameter 2).
+	 */
+	public static boolean hasTheseArguments(String par0Str, String par1Str) {
+		Matcher var2 = tokenPattern.matcher(par0Str);
+
+		if (var2.matches()) {
 			String var3 = var2.group(1);
-			return var1 == null || var1.equals(var3);
+			return par1Str == null || par1Str.equals(var3);
 		} else {
 			return false;
 		}
 	}
 
-	public static boolean hasArguments(String var0) {
-		return hasTheseArguments(var0, (String)null);
-	}
-
-	private static final int getDefaultMinimumRange(String var0) {
-		return 0;
-	}
-
-	private static final int getDefaultMaximumRange(String var0) {
-		return 0;
-	}
-
-	private static final int getDefaultMaximumLevel(String var0) {
+	/**
+	 * Returns whether the given token has any arguments set.
+	 */
+	public static boolean hasArguments(String par0Str) {
+		return hasTheseArguments(par0Str, (String)null);
+	}
+
+	/**
+	 * Gets the default minimum range (argument rm).
+	 */
+	private static final int getDefaultMinimumRange(String par0Str) {
+		return 0;
+	}
+
+	/**
+	 * Gets the default maximum range (argument r).
+	 */
+	private static final int getDefaultMaximumRange(String par0Str) {
+		return 0;
+	}
+
+	/**
+	 * Gets the default maximum experience level (argument l)
+	 */
+	private static final int getDefaultMaximumLevel(String par0Str) {
 		return Integer.MAX_VALUE;
 	}
 
-	private static final int getDefaultMinimumLevel(String var0) {
+	/**
+	 * Gets the default minimum experience level (argument lm)
+	 */
+	private static final int getDefaultMinimumLevel(String par0Str) {
 		return 0;
 	}
 
-	private static final int getDefaultCount(String var0) {
-		return var0.equals("a") ? 0 : 1;
+	/**
+	 * Gets the default number of players to return (argument c, 0 for infinite)
+	 */
+	private static final int getDefaultCount(String par0Str) {
+		return par0Str.equals("a") ? 0 : 1;
 	}
 
-	private static Map getArgumentMap(String var0) {
+	/**
+	 * Parses the given argument string, turning it into a HashMap&lt;String, String&gt; of name-&gt;value.
+	 */
+	private static Map getArgumentMap(String par0Str) {
 		HashMap var1 = new HashMap();
-		if(var0 == null) {
+
+		if (par0Str == null) {
 			return var1;
 		} else {
-			Matcher var2 = b.matcher(var0);
+			Matcher var2 = intListPattern.matcher(par0Str);
 			int var3 = 0;
-
 			int var4;
-			for(var4 = -1; var2.find(); var4 = var2.end()) {
+
+			for (var4 = -1; var2.find(); var4 = var2.end()) {
 				String var5 = null;
-				switch(var3++) {
-				case 0:
-					var5 = "x";
-					break;
-				case 1:
-					var5 = "y";
-					break;
-				case 2:
-					var5 = "z";
-					break;
-				case 3:
-					var5 = "r";
+
+				switch (var3++) {
+					case 0:
+						var5 = "x";
+						break;
+
+					case 1:
+						var5 = "y";
+						break;
+
+					case 2:
+						var5 = "z";
+						break;
+
+					case 3:
+						var5 = "r";
 				}
 
-				if(var5 != null && var2.group(1).length() > 0) {
+				if (var5 != null && var2.group(1).length() > 0) {
 					var1.put(var5, var2.group(1));
 				}
 			}
 
-			if(var4 < var0.length()) {
-				var2 = c.matcher(var4 == -1 ? var0 : var0.substring(var4));
+			if (var4 < par0Str.length()) {
+				var2 = keyValueListPattern.matcher(var4 == -1 ? par0Str : par0Str.substring(var4));
 
-				while(var2.find()) {
+				while (var2.find()) {
 					var1.put(var2.group(1), var2.group(2));
 				}
 			}
