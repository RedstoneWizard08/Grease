--- net/minecraft/src/PlayerUsageSnooper.java
+++ net/minecraft/src/PlayerUsageSnooper.java
@@ -13,38 +13,49 @@
 import java.util.Map.Entry;
 
 public class PlayerUsageSnooper {
-	private Map a = new HashMap();
-	private final String b = UUID.randomUUID().toString();
-	private final URL c;
+
+	/** String map for report data */
+	private Map dataMap = new HashMap();
+	private final String uniqueID = UUID.randomUUID().toString();
+
+	/** URL of the server to send the report to */
+	private final URL serverUrl;
 	private final IPlayerUsage playerStatsCollector;
-	private final java.util.Timer e = new java.util.Timer("Snooper Timer", true);
-	private final Object f = new Object();
+
+	/** set to fire the snooperThread every 15 mins */
+	private final java.util.Timer threadTrigger = new java.util.Timer("Snooper Timer", true);
+	private final Object syncLock = new Object();
 	private final long field_98224_g;
 	private boolean isRunning;
+
+	/** incremented on every getSelfCounterFor */
 	private int selfCounter;
 
-	public PlayerUsageSnooper(String var1, IPlayerUsage var2, long var3) {
+	public PlayerUsageSnooper(String par1Str, IPlayerUsage par2IPlayerUsage, long par3) {
 		try {
-			this.c = new URL("http://snoop.minecraft.net/" + var1 + "?version=" + 1);
+			this.serverUrl = new URL("http://snoop.minecraft.net/" + par1Str + "?version=" + 1);
 		} catch (MalformedURLException var6) {
 			throw new IllegalArgumentException();
 		}
 
-		this.playerStatsCollector = var2;
-		this.field_98224_g = var3;
+		this.playerStatsCollector = par2IPlayerUsage;
+		this.field_98224_g = par3;
 	}
 
+	/**
+	 * Note issuing start multiple times is not an error.
+	 */
 	public void startSnooper() {
-		if(!this.isRunning) {
+		if (!this.isRunning) {
 			this.isRunning = true;
 			this.addBaseDataToSnooper();
-			this.e.schedule(new PlayerUsageSnooperThread(this), 0L, 900000L);
+			this.threadTrigger.schedule(new PlayerUsageSnooperThread(this), 0L, 900000L);
 		}
 	}
 
 	private void addBaseDataToSnooper() {
 		this.addJvmArgsToSnooper();
-		this.addData("snooper_token", this.b);
+		this.addData("snooper_token", this.uniqueID);
 		this.addData("os_name", System.getProperty("os.name"));
 		this.addData("os_version", System.getProperty("os.version"));
 		this.addData("os_architecture", System.getProperty("os.arch"));
@@ -59,9 +70,10 @@
 		int var3 = 0;
 		Iterator var4 = var2.iterator();
 
-		while(var4.hasNext()) {
+		while (var4.hasNext()) {
 			String var5 = (String)var4.next();
-			if(var5.startsWith("-X")) {
+
+			if (var5.startsWith("-X")) {
 				this.addData("jvm_arg[" + var3++ + "]", var5);
 			}
 		}
@@ -77,21 +89,26 @@
 		this.playerStatsCollector.addServerStatsToSnooper(this);
 	}
 
-	public void addData(String var1, Object var2) {
-		Object var3 = this.f;
-		synchronized(var3) {
-			this.a.put(var1, var2);
+	/**
+	 * Adds information to the report
+	 */
+	public void addData(String par1Str, Object par2Obj) {
+		Object var3 = this.syncLock;
+
+		synchronized (this.syncLock) {
+			this.dataMap.put(par1Str, par2Obj);
 		}
 	}
 
 	public Map getCurrentStats() {
 		LinkedHashMap var1 = new LinkedHashMap();
-		Object var2 = this.f;
-		synchronized(var2) {
+		Object var2 = this.syncLock;
+
+		synchronized (this.syncLock) {
 			this.addMemoryStatsToSnooper();
-			Iterator var3 = this.a.entrySet().iterator();
+			Iterator var3 = this.dataMap.entrySet().iterator();
 
-			while(var3.hasNext()) {
+			while (var3.hasNext()) {
 				Entry var4 = (Entry)var3.next();
 				var1.put(var4.getKey(), var4.getValue().toString());
 			}
@@ -105,34 +122,37 @@
 	}
 
 	public void stopSnooper() {
-		this.e.cancel();
+		this.threadTrigger.cancel();
 	}
 
 	public String getUniqueID() {
-		return this.b;
+		return this.uniqueID;
 	}
 
 	public long func_130105_g() {
 		return this.field_98224_g;
 	}
 
-	static IPlayerUsage getStatsCollectorFor(PlayerUsageSnooper var0) {
-		return var0.playerStatsCollector;
-	}
-
-	static Object getSyncLockFor(PlayerUsageSnooper var0) {
-		return var0.f;
-	}
-
-	static Map getDataMapFor(PlayerUsageSnooper var0) {
-		return var0.a;
-	}
-
-	static int getSelfCounterFor(PlayerUsageSnooper var0) {
-		return var0.selfCounter++;
-	}
-
-	static URL getServerUrlFor(PlayerUsageSnooper var0) {
-		return var0.c;
+	static IPlayerUsage getStatsCollectorFor(PlayerUsageSnooper par0PlayerUsageSnooper) {
+		return par0PlayerUsageSnooper.playerStatsCollector;
+	}
+
+	static Object getSyncLockFor(PlayerUsageSnooper par0PlayerUsageSnooper) {
+		return par0PlayerUsageSnooper.syncLock;
+	}
+
+	static Map getDataMapFor(PlayerUsageSnooper par0PlayerUsageSnooper) {
+		return par0PlayerUsageSnooper.dataMap;
+	}
+
+	/**
+	 * returns a value indicating how many times this function has been run on the snooper
+	 */
+	static int getSelfCounterFor(PlayerUsageSnooper par0PlayerUsageSnooper) {
+		return par0PlayerUsageSnooper.selfCounter++;
+	}
+
+	static URL getServerUrlFor(PlayerUsageSnooper par0PlayerUsageSnooper) {
+		return par0PlayerUsageSnooper.serverUrl;
 	}
 }
