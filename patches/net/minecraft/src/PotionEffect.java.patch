--- net/minecraft/src/PotionEffect.java
+++ net/minecraft/src/PotionEffect.java
@@ -1,50 +1,68 @@
 package net.minecraft.src;
 
 public class PotionEffect {
+
+	/** ID value of the potion this effect matches. */
 	private int potionID;
+
+	/** The duration of the potion effect */
 	private int duration;
+
+	/** The amplifier of the potion effect */
 	private int amplifier;
+
+	/** Whether the potion is a splash potion */
 	private boolean isSplashPotion;
+
+	/** Whether the potion effect came from a beacon */
 	private boolean isAmbient;
+
+	/** True if potion effect duration is at maximum, false otherwise. */
 	private boolean isPotionDurationMax;
 
-	public PotionEffect(int var1, int var2) {
-		this(var1, var2, 0);
-	}
-
-	public PotionEffect(int var1, int var2, int var3) {
-		this(var1, var2, var3, false);
-	}
-
-	public PotionEffect(int var1, int var2, int var3, boolean var4) {
-		this.potionID = var1;
-		this.duration = var2;
-		this.amplifier = var3;
-		this.isAmbient = var4;
-	}
-
-	public PotionEffect(PotionEffect var1) {
-		this.potionID = var1.potionID;
-		this.duration = var1.duration;
-		this.amplifier = var1.amplifier;
-	}
-
-	public void combine(PotionEffect var1) {
-		if(this.potionID != var1.potionID) {
+	public PotionEffect(int par1, int par2) {
+		this(par1, par2, 0);
+	}
+
+	public PotionEffect(int par1, int par2, int par3) {
+		this(par1, par2, par3, false);
+	}
+
+	public PotionEffect(int par1, int par2, int par3, boolean par4) {
+		this.potionID = par1;
+		this.duration = par2;
+		this.amplifier = par3;
+		this.isAmbient = par4;
+	}
+
+	public PotionEffect(PotionEffect par1PotionEffect) {
+		this.potionID = par1PotionEffect.potionID;
+		this.duration = par1PotionEffect.duration;
+		this.amplifier = par1PotionEffect.amplifier;
+	}
+
+	/**
+	 * merges the input PotionEffect into this one if this.amplifier <= tomerge.amplifier. The duration in the supplied
+	 * potion effect is assumed to be greater.
+	 */
+	public void combine(PotionEffect par1PotionEffect) {
+		if (this.potionID != par1PotionEffect.potionID) {
 			System.err.println("This method should only be called for matching effects!");
 		}
 
-		if(var1.amplifier > this.amplifier) {
-			this.amplifier = var1.amplifier;
-			this.duration = var1.duration;
-		} else if(var1.amplifier == this.amplifier && this.duration < var1.duration) {
-			this.duration = var1.duration;
-		} else if(!var1.isAmbient && this.isAmbient) {
-			this.isAmbient = var1.isAmbient;
+		if (par1PotionEffect.amplifier > this.amplifier) {
+			this.amplifier = par1PotionEffect.amplifier;
+			this.duration = par1PotionEffect.duration;
+		} else if (par1PotionEffect.amplifier == this.amplifier && this.duration < par1PotionEffect.duration) {
+			this.duration = par1PotionEffect.duration;
+		} else if (!par1PotionEffect.isAmbient && this.isAmbient) {
+			this.isAmbient = par1PotionEffect.isAmbient;
 		}
-
 	}
 
+	/**
+	 * Retrieve the ID of the potion this effect matches.
+	 */
 	public int getPotionID() {
 		return this.potionID;
 	}
@@ -57,18 +75,24 @@
 		return this.amplifier;
 	}
 
-	public void setSplashPotion(boolean var1) {
-		this.isSplashPotion = var1;
+	/**
+	 * Set whether this potion is a splash potion.
+	 */
+	public void setSplashPotion(boolean par1) {
+		this.isSplashPotion = par1;
 	}
 
+	/**
+	 * Gets whether this potion effect originated from a beacon
+	 */
 	public boolean getIsAmbient() {
 		return this.isAmbient;
 	}
 
-	public boolean onUpdate(EntityLivingBase var1) {
-		if(this.duration > 0) {
-			if(Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier)) {
-				this.performEffect(var1);
+	public boolean onUpdate(EntityLivingBase par1EntityLivingBase) {
+		if (this.duration > 0) {
+			if (Potion.potionTypes[this.potionID].isReady(this.duration, this.amplifier)) {
+				this.performEffect(par1EntityLivingBase);
 			}
 
 			this.deincrementDuration();
@@ -81,11 +105,10 @@
 		return --this.duration;
 	}
 
-	public void performEffect(EntityLivingBase var1) {
-		if(this.duration > 0) {
-			Potion.potionTypes[this.potionID].performEffect(var1, this.amplifier);
+	public void performEffect(EntityLivingBase par1EntityLivingBase) {
+		if (this.duration > 0) {
+			Potion.potionTypes[this.potionID].performEffect(par1EntityLivingBase, this.amplifier);
 		}
-
 	}
 
 	public String getEffectName() {
@@ -98,46 +121,56 @@
 
 	public String toString() {
 		String var1 = "";
-		if(this.getAmplifier() > 0) {
+
+		if (this.getAmplifier() > 0) {
 			var1 = this.getEffectName() + " x " + (this.getAmplifier() + 1) + ", Duration: " + this.getDuration();
 		} else {
 			var1 = this.getEffectName() + ", Duration: " + this.getDuration();
 		}
 
-		if(this.isSplashPotion) {
+		if (this.isSplashPotion) {
 			var1 = var1 + ", Splash: true";
 		}
 
 		return Potion.potionTypes[this.potionID].isUsable() ? "(" + var1 + ")" : var1;
 	}
 
-	public boolean equals(Object var1) {
-		if(!(var1 instanceof PotionEffect)) {
+	public boolean equals(Object par1Obj) {
+		if (!(par1Obj instanceof PotionEffect)) {
 			return false;
 		} else {
-			PotionEffect var2 = (PotionEffect)var1;
+			PotionEffect var2 = (PotionEffect)par1Obj;
 			return this.potionID == var2.potionID && this.amplifier == var2.amplifier && this.duration == var2.duration && this.isSplashPotion == var2.isSplashPotion && this.isAmbient == var2.isAmbient;
 		}
 	}
 
-	public NBTTagCompound writeCustomPotionEffectToNBT(NBTTagCompound var1) {
-		var1.setByte("Id", (byte)this.getPotionID());
-		var1.setByte("Amplifier", (byte)this.getAmplifier());
-		var1.setInteger("Duration", this.getDuration());
-		var1.setBoolean("Ambient", this.getIsAmbient());
-		return var1;
+	/**
+	 * Write a custom potion effect to a potion item's NBT data.
+	 */
+	public NBTTagCompound writeCustomPotionEffectToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setByte("Id", (byte)this.getPotionID());
+		par1NBTTagCompound.setByte("Amplifier", (byte)this.getAmplifier());
+		par1NBTTagCompound.setInteger("Duration", this.getDuration());
+		par1NBTTagCompound.setBoolean("Ambient", this.getIsAmbient());
+		return par1NBTTagCompound;
 	}
 
-	public static PotionEffect readCustomPotionEffectFromNBT(NBTTagCompound var0) {
-		byte var1 = var0.getByte("Id");
-		byte var2 = var0.getByte("Amplifier");
-		int var3 = var0.getInteger("Duration");
-		boolean var4 = var0.getBoolean("Ambient");
+	/**
+	 * Read a custom potion effect from a potion item's NBT data.
+	 */
+	public static PotionEffect readCustomPotionEffectFromNBT(NBTTagCompound par0NBTTagCompound) {
+		byte var1 = par0NBTTagCompound.getByte("Id");
+		byte var2 = par0NBTTagCompound.getByte("Amplifier");
+		int var3 = par0NBTTagCompound.getInteger("Duration");
+		boolean var4 = par0NBTTagCompound.getBoolean("Ambient");
 		return new PotionEffect(var1, var3, var2, var4);
 	}
 
-	public void setPotionDurationMax(boolean var1) {
-		this.isPotionDurationMax = var1;
+	/**
+	 * Toggle the isPotionDurationMax field.
+	 */
+	public void setPotionDurationMax(boolean par1) {
+		this.isPotionDurationMax = par1;
 	}
 
 	public boolean getIsPotionDurationMax() {
