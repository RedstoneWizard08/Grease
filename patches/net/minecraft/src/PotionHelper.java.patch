--- net/minecraft/src/PotionHelper.java
+++ net/minecraft/src/PotionHelper.java
@@ -6,54 +6,75 @@
 import java.util.Iterator;
 import java.util.List;
 
+import com.prupe.mcpatcher.cc.ColorizeItem;
+
 public class PotionHelper {
-	public static final String a = null;
-	public static final String b;
-	public static final String c = "+0-1-2-3&4-4+13";
-	public static final String d;
-	public static final String e;
-	public static final String f;
-	public static final String g;
-	public static final String h;
-	public static final String i;
-	public static final String j;
-	public static final String k;
-	public static final String l;
-	private static final HashMap m = new HashMap();
-	private static final HashMap n = new HashMap();
-	private static final HashMap o;
-	private static final String[] p;
-
-	public static boolean checkFlag(int var0, int var1) {
-		return (var0 & 1 << var1) != 0;
-	}
-
-	private static int isFlagSet(int var0, int var1) {
-		return checkFlag(var0, var1) ? 1 : 0;
-	}
-
-	private static int isFlagUnset(int var0, int var1) {
-		return checkFlag(var0, var1) ? 0 : 1;
-	}
-
-	public static int func_77909_a(int var0) {
-		return func_77908_a(var0, 5, 4, 3, 2, 1);
-	}
-
-	public static int calcPotionLiquidColor(Collection var0) {
-		int var1 = 3694022;
-		if(var0 != null && !var0.isEmpty()) {
+	public static final String field_77924_a = null;
+	public static final String sugarEffect;
+	public static final String ghastTearEffect = "+0-1-2-3&4-4+13";
+	public static final String spiderEyeEffect;
+	public static final String fermentedSpiderEyeEffect;
+	public static final String speckledMelonEffect;
+	public static final String blazePowderEffect;
+	public static final String magmaCreamEffect;
+	public static final String redstoneEffect;
+	public static final String glowstoneEffect;
+	public static final String gunpowderEffect;
+	public static final String goldenCarrotEffect;
+	private static final HashMap potionRequirements = new HashMap();
+
+	/** Potion effect amplifier map */
+	private static final HashMap potionAmplifiers = new HashMap();
+	public static final HashMap field_77925_n;
+
+	/** An array of possible potion prefix names, as translation IDs. */
+	private static final String[] potionPrefixes;
+
+	/**
+	 * Is the bit given set to 1?
+	 */
+	public static boolean checkFlag(int par0, int par1) {
+		return (par0 & 1 << par1) != 0;
+	}
+
+	/**
+	 * Returns 1 if the flag is set, 0 if it is not set.
+	 */
+	private static int isFlagSet(int par0, int par1) {
+		return checkFlag(par0, par1) ? 1 : 0;
+	}
+
+	/**
+	 * Returns 0 if the flag is set, 1 if it is not set.
+	 */
+	private static int isFlagUnset(int par0, int par1) {
+		return checkFlag(par0, par1) ? 0 : 1;
+	}
+
+	public static int func_77909_a(int par0) {
+		return func_77908_a(par0, 5, 4, 3, 2, 1);
+	}
+
+	/**
+	 * Given a {@link Collection}<{@link PotionEffect}> will return an Integer color.
+	 */
+	public static int calcPotionLiquidColor(Collection par0Collection) {
+		// MCPatcher Start
+		int var1 = ColorizeItem.getWaterBottleColor();
+		// MCPatcher End
+
+		if (par0Collection != null && !par0Collection.isEmpty()) {
 			float var2 = 0.0F;
 			float var3 = 0.0F;
 			float var4 = 0.0F;
 			float var5 = 0.0F;
-			Iterator var6 = var0.iterator();
+			Iterator var6 = par0Collection.iterator();
 
-			while(var6.hasNext()) {
+			while (var6.hasNext()) {
 				PotionEffect var7 = (PotionEffect)var6.next();
 				int var8 = Potion.potionTypes[var7.getPotionID()].getLiquidColor();
 
-				for(int var9 = 0; var9 <= var7.getAmplifier(); ++var9) {
+				for (int var9 = 0; var9 <= var7.getAmplifier(); ++var9) {
 					var2 += (float)(var8 >> 16 & 255) / 255.0F;
 					var3 += (float)(var8 >> 8 & 255) / 255.0F;
 					var4 += (float)(var8 >> 0 & 255) / 255.0F;
@@ -70,97 +91,106 @@
 		}
 	}
 
-	public static boolean func_82817_b(Collection var0) {
-		Iterator var1 = var0.iterator();
-
+	public static boolean func_82817_b(Collection par0Collection) {
+		Iterator var1 = par0Collection.iterator();
 		PotionEffect var2;
+
 		do {
-			if(!var1.hasNext()) {
+			if (!var1.hasNext()) {
 				return true;
 			}
 
 			var2 = (PotionEffect)var1.next();
-		} while(var2.getIsAmbient());
+		} while (var2.getIsAmbient());
 
 		return false;
 	}
 
-	public static int func_77915_a(int var0, boolean var1) {
-		if(!var1) {
-			if(o.containsKey(Integer.valueOf(var0))) {
-				return ((Integer)o.get(Integer.valueOf(var0))).intValue();
+	public static int func_77915_a(int par0, boolean par1) {
+		if (!par1) {
+			if (field_77925_n.containsKey(Integer.valueOf(par0))) {
+				return ((Integer)field_77925_n.get(Integer.valueOf(par0))).intValue();
 			} else {
-				int var2 = calcPotionLiquidColor(getPotionEffects(var0, false));
-				o.put(Integer.valueOf(var0), Integer.valueOf(var2));
+				int var2 = calcPotionLiquidColor(getPotionEffects(par0, false));
+				field_77925_n.put(Integer.valueOf(par0), Integer.valueOf(var2));
 				return var2;
 			}
 		} else {
-			return calcPotionLiquidColor(getPotionEffects(var0, var1));
+			return calcPotionLiquidColor(getPotionEffects(par0, par1));
 		}
 	}
 
-	public static String func_77905_c(int var0) {
-		int var1 = func_77909_a(var0);
-		return p[var1];
+	public static String func_77905_c(int par0) {
+		int var1 = func_77909_a(par0);
+		return potionPrefixes[var1];
 	}
 
-	private static int func_77904_a(boolean var0, boolean var1, boolean var2, int var3, int var4, int var5, int var6) {
+	private static int func_77904_a(boolean par0, boolean par1, boolean par2, int par3, int par4, int par5, int par6) {
 		int var7 = 0;
-		if(var0) {
-			var7 = isFlagUnset(var6, var4);
-		} else if(var3 != -1) {
-			if(var3 == 0 && countSetFlags(var6) == var4) {
-				var7 = 1;
-			} else if(var3 == 1 && countSetFlags(var6) > var4) {
-				var7 = 1;
-			} else if(var3 == 2 && countSetFlags(var6) < var4) {
+
+		if (par0) {
+			var7 = isFlagUnset(par6, par4);
+		} else if (par3 != -1) {
+			if (par3 == 0 && countSetFlags(par6) == par4) {
+				var7 = 1;
+			} else if (par3 == 1 && countSetFlags(par6) > par4) {
+				var7 = 1;
+			} else if (par3 == 2 && countSetFlags(par6) < par4) {
 				var7 = 1;
 			}
 		} else {
-			var7 = isFlagSet(var6, var4);
-		}
-
-		if(var1) {
-			var7 *= var5;
-		}
-
-		if(var2) {
+			var7 = isFlagSet(par6, par4);
+		}
+
+		if (par1) {
+			var7 *= par5;
+		}
+
+		if (par2) {
 			var7 *= -1;
 		}
 
 		return var7;
 	}
 
-	private static int countSetFlags(int var0) {
+	/**
+	 * Count the number of bits in an integer set to ON.
+	 */
+	private static int countSetFlags(int par0) {
 		int var1;
-		for(var1 = 0; var0 > 0; ++var1) {
-			var0 &= var0 - 1;
+
+		for (var1 = 0; par0 > 0; ++var1) {
+			par0 &= par0 - 1;
 		}
 
 		return var1;
 	}
 
-	private static int parsePotionEffects(String var0, int var1, int var2, int var3) {
-		if(var1 < var0.length() && var2 >= 0 && var1 < var2) {
-			int var4 = var0.indexOf(124, var1);
+	private static int parsePotionEffects(String par0Str, int par1, int par2, int par3) {
+		if (par1 < par0Str.length() && par2 >= 0 && par1 < par2) {
+			int var4 = par0Str.indexOf(124, par1);
 			int var5;
 			int var17;
-			if(var4 >= 0 && var4 < var2) {
-				var5 = parsePotionEffects(var0, var1, var4 - 1, var3);
-				if(var5 > 0) {
+
+			if (var4 >= 0 && var4 < par2) {
+				var5 = parsePotionEffects(par0Str, par1, var4 - 1, par3);
+
+				if (var5 > 0) {
 					return var5;
 				} else {
-					var17 = parsePotionEffects(var0, var4 + 1, var2, var3);
+					var17 = parsePotionEffects(par0Str, var4 + 1, par2, par3);
 					return var17 > 0 ? var17 : 0;
 				}
 			} else {
-				var5 = var0.indexOf(38, var1);
-				if(var5 >= 0 && var5 < var2) {
-					var17 = parsePotionEffects(var0, var1, var5 - 1, var3);
-					if(var17 <= 0) {
+				var5 = par0Str.indexOf(38, par1);
+
+				if (var5 >= 0 && var5 < par2) {
+					var17 = parsePotionEffects(par0Str, par1, var5 - 1, par3);
+
+					if (var17 <= 0) {
 						return 0;
 					} else {
-						int var18 = parsePotionEffects(var0, var5 + 1, var2, var3);
+						int var18 = parsePotionEffects(par0Str, var5 + 1, par2, par3);
 						return var18 <= 0 ? 0 : (var17 > var18 ? var17 : var18);
 					}
 				} else {
@@ -174,10 +204,11 @@
 					int var13 = 0;
 					int var14 = 0;
 
-					for(int var15 = var1; var15 < var2; ++var15) {
-						char var16 = var0.charAt(var15);
-						if(var16 >= 48 && var16 <= 57) {
-							if(var6) {
+					for (int var15 = par1; var15 < par2; ++var15) {
+						char var16 = par0Str.charAt(var15);
+
+						if (var16 >= 48 && var16 <= 57) {
+							if (var6) {
 								var13 = var16 - 48;
 								var7 = true;
 							} else {
@@ -185,72 +216,73 @@
 								var12 += var16 - 48;
 								var8 = true;
 							}
-						} else if(var16 == 42) {
+						} else if (var16 == 42) {
 							var6 = true;
-						} else if(var16 == 33) {
-							if(var8) {
-								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, var3);
+						} else if (var16 == 33) {
+							if (var8) {
+								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, par3);
 								var9 = false;
-								var10 = var9;
-								var6 = var9;
-								var7 = var9;
-								var8 = var9;
+								var10 = false;
+								var6 = false;
+								var7 = false;
+								var8 = false;
 								var13 = 0;
-								var12 = var13;
+								var12 = 0;
 								var11 = -1;
 							}
 
 							var9 = true;
-						} else if(var16 == 45) {
-							if(var8) {
-								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, var3);
+						} else if (var16 == 45) {
+							if (var8) {
+								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, par3);
 								var9 = false;
-								var6 = var9;
-								var7 = var9;
-								var8 = var9;
+								var10 = false;
+								var6 = false;
+								var7 = false;
+								var8 = false;
 								var13 = 0;
-								var12 = var13;
+								var12 = 0;
 								var11 = -1;
 							}
 
 							var10 = true;
-						} else if(var16 != 61 && var16 != 60 && var16 != 62) {
-							if(var16 == 43 && var8) {
-								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, var3);
+						} else if (var16 != 61 && var16 != 60 && var16 != 62) {
+							if (var16 == 43 && var8) {
+								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, par3);
 								var9 = false;
-								var10 = var9;
-								var6 = var9;
-								var7 = var9;
-								var8 = var9;
+								var10 = false;
+								var6 = false;
+								var7 = false;
+								var8 = false;
 								var13 = 0;
-								var12 = var13;
+								var12 = 0;
 								var11 = -1;
 							}
 						} else {
-							if(var8) {
-								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, var3);
+							if (var8) {
+								var14 += func_77904_a(var9, var7, var10, var11, var12, var13, par3);
 								var9 = false;
-								var10 = var9;
-								var6 = var9;
-								var7 = var9;
-								var8 = var9;
+								var10 = false;
+								var6 = false;
+								var7 = false;
+								var8 = false;
 								var13 = 0;
-								var12 = var13;
+								var12 = 0;
 								var11 = -1;
 							}
 
-							if(var16 == 61) {
+							if (var16 == 61) {
 								var11 = 0;
-							} else if(var16 == 60) {
+							} else if (var16 == 60) {
 								var11 = 2;
-							} else if(var16 == 62) {
+							} else if (var16 == 62) {
 								var11 = 1;
 							}
 						}
 					}
 
-					if(var8) {
-						var14 += func_77904_a(var9, var7, var10, var11, var12, var13, var3);
+					if (var8) {
+						var14 += func_77904_a(var9, var7, var10, var11, var12, var13, par3);
 					}
 
 					return var14;
@@ -261,44 +293,54 @@
 		}
 	}
 
-	public static List getPotionEffects(int var0, boolean var1) {
+	/**
+	 * Returns a list of effects for the specified potion damage value.
+	 */
+	public static List getPotionEffects(int par0, boolean par1) {
 		ArrayList var2 = null;
 		Potion[] var3 = Potion.potionTypes;
 		int var4 = var3.length;
 
-		for(int var5 = 0; var5 < var4; ++var5) {
+		for (int var5 = 0; var5 < var4; ++var5) {
 			Potion var6 = var3[var5];
-			if(var6 != null && (!var6.isUsable() || var1)) {
-				String var7 = (String)m.get(Integer.valueOf(var6.getId()));
-				if(var7 != null) {
-					int var8 = parsePotionEffects(var7, 0, var7.length(), var0);
-					if(var8 > 0) {
+
+			if (var6 != null && (!var6.isUsable() || par1)) {
+				String var7 = (String)potionRequirements.get(Integer.valueOf(var6.getId()));
+
+				if (var7 != null) {
+					int var8 = parsePotionEffects(var7, 0, var7.length(), par0);
+
+					if (var8 > 0) {
 						int var9 = 0;
-						String var10 = (String)n.get(Integer.valueOf(var6.getId()));
-						if(var10 != null) {
-							var9 = parsePotionEffects(var10, 0, var10.length(), var0);
-							if(var9 < 0) {
+						String var10 = (String)potionAmplifiers.get(Integer.valueOf(var6.getId()));
+
+						if (var10 != null) {
+							var9 = parsePotionEffects(var10, 0, var10.length(), par0);
+
+							if (var9 < 0) {
 								var9 = 0;
 							}
 						}
 
-						if(var6.isInstant()) {
+						if (var6.isInstant()) {
 							var8 = 1;
 						} else {
 							var8 = 1200 * (var8 * 3 + (var8 - 1) * 2);
 							var8 >>= var9;
 							var8 = (int)Math.round((double)var8 * var6.getEffectiveness());
-							if((var0 & 16384) != 0) {
+
+							if ((par0 & 16384) != 0) {
 								var8 = (int)Math.round((double)var8 * 0.75D + 0.5D);
 							}
 						}
 
-						if(var2 == null) {
+						if (var2 == null) {
 							var2 = new ArrayList();
 						}
 
 						PotionEffect var11 = new PotionEffect(var6.getId(), var8, var9);
-						if((var0 & 16384) != 0) {
+
+						if ((par0 & 16384) != 0) {
 							var11.setSplashPotion(true);
 						}
 
@@ -311,77 +353,89 @@
 		return var2;
 	}
 
-	private static int brewBitOperations(int var0, int var1, boolean var2, boolean var3, boolean var4) {
-		if(var4) {
-			if(!checkFlag(var0, var1)) {
+	/**
+	 * Does bit operations for brewPotionData, given data, the index of the bit being operated upon, whether the bit will
+	 * be removed, whether the bit will be toggled (NOT), or whether the data field will be set to 0 if the bit is not
+	 * present.
+	 */
+	private static int brewBitOperations(int par0, int par1, boolean par2, boolean par3, boolean par4) {
+		if (par4) {
+			if (!checkFlag(par0, par1)) {
 				return 0;
 			}
-		} else if(var2) {
-			var0 &= ~(1 << var1);
-		} else if(var3) {
-			if((var0 & 1 << var1) == 0) {
-				var0 |= 1 << var1;
+		} else if (par2) {
+			par0 &= ~(1 << par1);
+		} else if (par3) {
+			if ((par0 & 1 << par1) == 0) {
+				par0 |= 1 << par1;
 			} else {
-				var0 &= ~(1 << var1);
+				par0 &= ~(1 << par1);
 			}
 		} else {
-			var0 |= 1 << var1;
+			par0 |= 1 << par1;
 		}
 
-		return var0;
+		return par0;
 	}
 
-	public static int applyIngredient(int var0, String var1) {
+	/**
+	 * Generate a data value for a potion, given its previous data value and the encoded string of new effects it will
+	 * receive
+	 */
+	public static int applyIngredient(int par0, String par1Str) {
 		byte var2 = 0;
-		int var3 = var1.length();
+		int var3 = par1Str.length();
 		boolean var4 = false;
 		boolean var5 = false;
 		boolean var6 = false;
 		boolean var7 = false;
 		int var8 = 0;
 
-		for(int var9 = var2; var9 < var3; ++var9) {
-			char var10 = var1.charAt(var9);
-			if(var10 >= 48 && var10 <= 57) {
+		for (int var9 = var2; var9 < var3; ++var9) {
+			char var10 = par1Str.charAt(var9);
+
+			if (var10 >= 48 && var10 <= 57) {
 				var8 *= 10;
 				var8 += var10 - 48;
 				var4 = true;
-			} else if(var10 == 33) {
-				if(var4) {
-					var0 = brewBitOperations(var0, var8, var6, var5, var7);
+			} else if (var10 == 33) {
+				if (var4) {
+					par0 = brewBitOperations(par0, var8, var6, var5, var7);
 					var7 = false;
-					var6 = var7;
-					var4 = var7;
+					var5 = false;
+					var6 = false;
+					var4 = false;
 					var8 = 0;
 				}
 
 				var5 = true;
-			} else if(var10 == 45) {
-				if(var4) {
-					var0 = brewBitOperations(var0, var8, var6, var5, var7);
+			} else if (var10 == 45) {
+				if (var4) {
+					par0 = brewBitOperations(par0, var8, var6, var5, var7);
 					var7 = false;
-					var5 = var7;
-					var4 = var7;
+					var5 = false;
+					var6 = false;
+					var4 = false;
 					var8 = 0;
 				}
 
 				var6 = true;
-			} else if(var10 == 43) {
-				if(var4) {
-					var0 = brewBitOperations(var0, var8, var6, var5, var7);
+			} else if (var10 == 43) {
+				if (var4) {
+					par0 = brewBitOperations(par0, var8, var6, var5, var7);
 					var7 = false;
-					var5 = var7;
-					var6 = var7;
-					var4 = var7;
+					var5 = false;
+					var6 = false;
+					var4 = false;
 					var8 = 0;
 				}
-			} else if(var10 == 38) {
-				if(var4) {
-					var0 = brewBitOperations(var0, var8, var6, var5, var7);
+			} else if (var10 == 38) {
+				if (var4) {
+					par0 = brewBitOperations(par0, var8, var6, var5, var7);
 					var7 = false;
-					var5 = var7;
-					var6 = var7;
-					var4 = var7;
+					var5 = false;
+					var6 = false;
+					var4 = false;
 					var8 = 0;
 				}
 
@@ -389,48 +443,48 @@
 			}
 		}
 
-		if(var4) {
-			var0 = brewBitOperations(var0, var8, var6, var5, var7);
+		if (var4) {
+			par0 = brewBitOperations(par0, var8, var6, var5, var7);
 		}
 
-		return var0 & Short.MAX_VALUE;
+		return par0 & 32767;
 	}
 
-	public static int func_77908_a(int var0, int var1, int var2, int var3, int var4, int var5) {
-		return (checkFlag(var0, var1) ? 16 : 0) | (checkFlag(var0, var2) ? 8 : 0) | (checkFlag(var0, var3) ? 4 : 0) | (checkFlag(var0, var4) ? 2 : 0) | (checkFlag(var0, var5) ? 1 : 0);
+	public static int func_77908_a(int par0, int par1, int par2, int par3, int par4, int par5) {
+		return (checkFlag(par0, par1) ? 16 : 0) | (checkFlag(par0, par2) ? 8 : 0) | (checkFlag(par0, par3) ? 4 : 0) | (checkFlag(par0, par4) ? 2 : 0) | (checkFlag(par0, par5) ? 1 : 0);
 	}
 
 	static {
-		m.put(Integer.valueOf(Potion.regeneration.getId()), "0 & !1 & !2 & !3 & 0+6");
-		b = "-0+1-2-3&4-4+13";
-		m.put(Integer.valueOf(Potion.moveSpeed.getId()), "!0 & 1 & !2 & !3 & 1+6");
-		h = "+0+1-2-3&4-4+13";
-		m.put(Integer.valueOf(Potion.fireResistance.getId()), "0 & 1 & !2 & !3 & 0+6");
-		f = "+0-1+2-3&4-4+13";
-		m.put(Integer.valueOf(Potion.heal.getId()), "0 & !1 & 2 & !3");
-		d = "-0-1+2-3&4-4+13";
-		m.put(Integer.valueOf(Potion.poison.getId()), "!0 & !1 & 2 & !3 & 2+6");
-		e = "-0+3-4+13";
-		m.put(Integer.valueOf(Potion.weakness.getId()), "!0 & !1 & !2 & 3 & 3+6");
-		m.put(Integer.valueOf(Potion.harm.getId()), "!0 & !1 & 2 & 3");
-		m.put(Integer.valueOf(Potion.moveSlowdown.getId()), "!0 & 1 & !2 & 3 & 3+6");
-		g = "+0-1-2+3&4-4+13";
-		m.put(Integer.valueOf(Potion.damageBoost.getId()), "0 & !1 & !2 & 3 & 3+6");
-		l = "-0+1+2-3+13&4-4";
-		m.put(Integer.valueOf(Potion.nightVision.getId()), "!0 & 1 & 2 & !3 & 2+6");
-		m.put(Integer.valueOf(Potion.invisibility.getId()), "!0 & 1 & 2 & 3 & 2+6");
-		j = "+5-6-7";
-		n.put(Integer.valueOf(Potion.moveSpeed.getId()), "5");
-		n.put(Integer.valueOf(Potion.digSpeed.getId()), "5");
-		n.put(Integer.valueOf(Potion.damageBoost.getId()), "5");
-		n.put(Integer.valueOf(Potion.regeneration.getId()), "5");
-		n.put(Integer.valueOf(Potion.harm.getId()), "5");
-		n.put(Integer.valueOf(Potion.heal.getId()), "5");
-		n.put(Integer.valueOf(Potion.resistance.getId()), "5");
-		n.put(Integer.valueOf(Potion.poison.getId()), "5");
-		i = "-5+6-7";
-		k = "+14&13-13";
-		o = new HashMap();
-		p = new String[]{"potion.prefix.mundane", "potion.prefix.uninteresting", "potion.prefix.bland", "potion.prefix.clear", "potion.prefix.milky", "potion.prefix.diffuse", "potion.prefix.artless", "potion.prefix.thin", "potion.prefix.awkward", "potion.prefix.flat", "potion.prefix.bulky", "potion.prefix.bungling", "potion.prefix.buttered", "potion.prefix.smooth", "potion.prefix.suave", "potion.prefix.debonair", "potion.prefix.thick", "potion.prefix.elegant", "potion.prefix.fancy", "potion.prefix.charming", "potion.prefix.dashing", "potion.prefix.refined", "potion.prefix.cordial", "potion.prefix.sparkling", "potion.prefix.potent", "potion.prefix.foul", "potion.prefix.odorless", "potion.prefix.rank", "potion.prefix.harsh", "potion.prefix.acrid", "potion.prefix.gross", "potion.prefix.stinky"};
+		potionRequirements.put(Integer.valueOf(Potion.regeneration.getId()), "0 & !1 & !2 & !3 & 0+6");
+		sugarEffect = "-0+1-2-3&4-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.moveSpeed.getId()), "!0 & 1 & !2 & !3 & 1+6");
+		magmaCreamEffect = "+0+1-2-3&4-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.fireResistance.getId()), "0 & 1 & !2 & !3 & 0+6");
+		speckledMelonEffect = "+0-1+2-3&4-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.heal.getId()), "0 & !1 & 2 & !3");
+		spiderEyeEffect = "-0-1+2-3&4-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.poison.getId()), "!0 & !1 & 2 & !3 & 2+6");
+		fermentedSpiderEyeEffect = "-0+3-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.weakness.getId()), "!0 & !1 & !2 & 3 & 3+6");
+		potionRequirements.put(Integer.valueOf(Potion.harm.getId()), "!0 & !1 & 2 & 3");
+		potionRequirements.put(Integer.valueOf(Potion.moveSlowdown.getId()), "!0 & 1 & !2 & 3 & 3+6");
+		blazePowderEffect = "+0-1-2+3&4-4+13";
+		potionRequirements.put(Integer.valueOf(Potion.damageBoost.getId()), "0 & !1 & !2 & 3 & 3+6");
+		goldenCarrotEffect = "-0+1+2-3+13&4-4";
+		potionRequirements.put(Integer.valueOf(Potion.nightVision.getId()), "!0 & 1 & 2 & !3 & 2+6");
+		potionRequirements.put(Integer.valueOf(Potion.invisibility.getId()), "!0 & 1 & 2 & 3 & 2+6");
+		glowstoneEffect = "+5-6-7";
+		potionAmplifiers.put(Integer.valueOf(Potion.moveSpeed.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.digSpeed.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.damageBoost.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.regeneration.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.harm.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.heal.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.resistance.getId()), "5");
+		potionAmplifiers.put(Integer.valueOf(Potion.poison.getId()), "5");
+		redstoneEffect = "-5+6-7";
+		gunpowderEffect = "+14&13-13";
+		field_77925_n = new HashMap();
+		potionPrefixes = new String[] {"potion.prefix.mundane", "potion.prefix.uninteresting", "potion.prefix.bland", "potion.prefix.clear", "potion.prefix.milky", "potion.prefix.diffuse", "potion.prefix.artless", "potion.prefix.thin", "potion.prefix.awkward", "potion.prefix.flat", "potion.prefix.bulky", "potion.prefix.bungling", "potion.prefix.buttered", "potion.prefix.smooth", "potion.prefix.suave", "potion.prefix.debonair", "potion.prefix.thick", "potion.prefix.elegant", "potion.prefix.fancy", "potion.prefix.charming", "potion.prefix.dashing", "potion.prefix.refined", "potion.prefix.cordial", "potion.prefix.sparkling", "potion.prefix.potent", "potion.prefix.foul", "potion.prefix.odorless", "potion.prefix.rank", "potion.prefix.harsh", "potion.prefix.acrid", "potion.prefix.gross", "potion.prefix.stinky"};
 	}
 }
