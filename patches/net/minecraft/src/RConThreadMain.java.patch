--- net/minecraft/src/RConThreadMain.java
+++ net/minecraft/src/RConThreadMain.java
@@ -11,93 +11,111 @@
 import java.util.Map.Entry;
 
 public class RConThreadMain extends RConThreadBase {
+
+	/** Port RCon is running on */
 	private int rconPort;
+
+	/** Port the server is running on */
 	private int serverPort;
-	private String i;
-	private ServerSocket j;
-	private String k;
-	private Map l;
-
-	public RConThreadMain(IServer var1) {
-		super(var1);
-		this.rconPort = var1.getIntProperty("rcon.port", 0);
-		this.k = var1.getStringProperty("rcon.password", "");
-		this.i = var1.getHostname();
-		this.serverPort = var1.getPort();
-		if(0 == this.rconPort) {
+
+	/** Hostname RCon is running on */
+	private String hostname;
+
+	/** The RCon ServerSocket. */
+	private ServerSocket serverSocket;
+
+	/** The RCon password */
+	private String rconPassword;
+
+	/** A map of client addresses to their running Threads */
+	private Map clientThreads;
+
+	public RConThreadMain(IServer par1IServer) {
+		super(par1IServer);
+		this.rconPort = par1IServer.getIntProperty("rcon.port", 0);
+		this.rconPassword = par1IServer.getStringProperty("rcon.password", "");
+		this.hostname = par1IServer.getHostname();
+		this.serverPort = par1IServer.getPort();
+
+		if (0 == this.rconPort) {
 			this.rconPort = this.serverPort + 10;
 			this.logInfo("Setting default rcon port to " + this.rconPort);
-			var1.setProperty("rcon.port", Integer.valueOf(this.rconPort));
-			if(0 == this.k.length()) {
-				var1.setProperty("rcon.password", "");
+			par1IServer.setProperty("rcon.port", Integer.valueOf(this.rconPort));
+
+			if (0 == this.rconPassword.length()) {
+				par1IServer.setProperty("rcon.password", "");
 			}
 
-			var1.saveProperties();
+			par1IServer.saveProperties();
 		}
 
-		if(0 == this.i.length()) {
-			this.i = "0.0.0.0";
+		if (0 == this.hostname.length()) {
+			this.hostname = "0.0.0.0";
 		}
 
 		this.initClientThreadList();
-		this.j = null;
+		this.serverSocket = null;
 	}
 
 	private void initClientThreadList() {
-		this.l = new HashMap();
+		this.clientThreads = new HashMap();
 	}
 
+	/**
+	 * Cleans up the clientThreads map by removing client Threads that are not running
+	 */
 	private void cleanClientThreadsMap() {
-		Iterator var1 = this.l.entrySet().iterator();
+		Iterator var1 = this.clientThreads.entrySet().iterator();
 
-		while(var1.hasNext()) {
+		while (var1.hasNext()) {
 			Entry var2 = (Entry)var1.next();
-			if(!((RConThreadClient)var2.getValue()).isRunning()) {
+
+			if (!((RConThreadClient)var2.getValue()).isRunning()) {
 				var1.remove();
 			}
 		}
-
 	}
 
 	public void run() {
-		this.logInfo("RCON running on " + this.i + ":" + this.rconPort);
+		this.logInfo("RCON running on " + this.hostname + ":" + this.rconPort);
 
 		try {
-			while(this.running) {
+			while (this.running) {
 				try {
-					Socket var1 = this.j.accept();
+					Socket var1 = this.serverSocket.accept();
 					var1.setSoTimeout(500);
 					RConThreadClient var2 = new RConThreadClient(this.server, var1);
 					var2.startThread();
-					this.l.put(var1.getRemoteSocketAddress(), var2);
+					this.clientThreads.put(var1.getRemoteSocketAddress(), var2);
 					this.cleanClientThreadsMap();
 				} catch (SocketTimeoutException var7) {
 					this.cleanClientThreadsMap();
 				} catch (IOException var8) {
-					if(this.running) {
+					if (this.running) {
 						this.logInfo("IO: " + var8.getMessage());
 					}
 				}
 			}
 		} finally {
-			this.closeServerSocket(this.j);
+			this.closeServerSocket(this.serverSocket);
 		}
-
 	}
 
+	/**
+	 * Creates a new Thread object from this class and starts running
+	 */
 	public void startThread() {
-		if(0 == this.k.length()) {
+		if (0 == this.rconPassword.length()) {
 			this.logWarning("No rcon password set in \'" + this.server.getSettingsFilename() + "\', rcon disabled!");
-		} else if(0 < this.rconPort && '\uffff' >= this.rconPort) {
-			if(!this.running) {
+		} else if (0 < this.rconPort && 65535 >= this.rconPort) {
+			if (!this.running) {
 				try {
-					this.j = new ServerSocket(this.rconPort, 0, InetAddress.getByName(this.i));
-					this.j.setSoTimeout(500);
+					this.serverSocket = new ServerSocket(this.rconPort, 0, InetAddress.getByName(this.hostname));
+					this.serverSocket.setSoTimeout(500);
 					super.startThread();
 				} catch (IOException var2) {
-					this.logWarning("Unable to initialise rcon on " + this.i + ":" + this.rconPort + " : " + var2.getMessage());
+					this.logWarning("Unable to initialise rcon on " + this.hostname + ":" + this.rconPort + " : " + var2.getMessage());
 				}
-
 			}
 		} else {
 			this.logWarning("Invalid rcon port " + this.rconPort + " found in \'" + this.server.getSettingsFilename() + "\', rcon disabled!");
