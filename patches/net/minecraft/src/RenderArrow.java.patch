--- net/minecraft/src/RenderArrow.java
+++ net/minecraft/src/RenderArrow.java
@@ -6,12 +6,12 @@
 public class RenderArrow extends Render {
 	private static final ResourceLocation arrowTextures = new ResourceLocation("textures/entity/arrow.png");
 
-	public void renderArrow(EntityArrow var1, double var2, double var4, double var6, float var8, float var9) {
-		this.bindEntityTexture(var1);
+	public void renderArrow(EntityArrow par1EntityArrow, double par2, double par4, double par6, float par8, float par9) {
+		this.bindEntityTexture(par1EntityArrow);
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
-		GL11.glRotatef(var1.prevRotationYaw + (var1.rotationYaw - var1.prevRotationYaw) * var9 - 90.0F, 0.0F, 1.0F, 0.0F);
-		GL11.glRotatef(var1.prevRotationPitch + (var1.rotationPitch - var1.prevRotationPitch) * var9, 0.0F, 0.0F, 1.0F);
+		GL11.glTranslatef((float)par2, (float)par4, (float)par6);
+		GL11.glRotatef(par1EntityArrow.prevRotationYaw + (par1EntityArrow.rotationYaw - par1EntityArrow.prevRotationYaw) * par9 - 90.0F, 0.0F, 1.0F, 0.0F);
+		GL11.glRotatef(par1EntityArrow.prevRotationPitch + (par1EntityArrow.rotationPitch - par1EntityArrow.prevRotationPitch) * par9, 0.0F, 0.0F, 1.0F);
 		Tessellator var10 = Tessellator.instance;
 		byte var11 = 0;
 		float var12 = 0.0F;
@@ -24,8 +24,9 @@
 		float var19 = (float)(10 + var11 * 10) / 32.0F;
 		float var20 = 0.05625F;
 		GL11.glEnable(GL12.GL_RESCALE_NORMAL);
-		float var21 = (float)var1.arrowShake - var9;
-		if(var21 > 0.0F) {
+		float var21 = (float)par1EntityArrow.arrowShake - par9;
+
+		if (var21 > 0.0F) {
 			float var22 = -MathHelper.sin(var21 * 3.0F) * var21;
 			GL11.glRotatef(var22, 0.0F, 0.0F, 1.0F);
 		}
@@ -48,7 +49,7 @@
 		var10.addVertexWithUV(-7.0D, -2.0D, -2.0D, (double)var16, (double)var19);
 		var10.draw();
 
-		for(int var23 = 0; var23 < 4; ++var23) {
+		for (int var23 = 0; var23 < 4; ++var23) {
 			GL11.glRotatef(90.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glNormal3f(0.0F, 0.0F, var20);
 			var10.startDrawingQuads();
@@ -63,15 +64,24 @@
 		GL11.glPopMatrix();
 	}
 
-	protected ResourceLocation getArrowTextures(EntityArrow var1) {
+	protected ResourceLocation getArrowTextures(EntityArrow par1EntityArrow) {
 		return arrowTextures;
 	}
 
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.getArrowTextures((EntityArrow)var1);
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.getArrowTextures((EntityArrow)par1Entity);
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderArrow((EntityArrow)var1, var2, var4, var6, var8, var9);
+	/**
+	 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+	 * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+	 * (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1,
+	 * double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
+	 */
+	public void doRender(Entity par1Entity, double par2, double par4, double par6, float par8, float par9) {
+		this.renderArrow((EntityArrow)par1Entity, par2, par4, par6, par8, par9);
 	}
 }
