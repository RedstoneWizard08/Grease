--- net/minecraft/src/RenderBat.java
+++ net/minecraft/src/RenderBat.java
@@ -4,69 +4,92 @@
 
 public class RenderBat extends RenderLiving {
 	private static final ResourceLocation batTextures = new ResourceLocation("textures/entity/bat.png");
-	private int renderedBatSize = ((ModelBat)this.mainModel).getBatSize();
+
+	/**
+	 * not actually sure this is size, is not used as of now, but the model would be recreated if the value changed and it
+	 * seems a good match for a bats size
+	 */
+	private int renderedBatSize;
 
 	public RenderBat() {
 		super(new ModelBat(), 0.25F);
+		this.renderedBatSize = ((ModelBat)this.mainModel).getBatSize();
 	}
 
-	public void func_82443_a(EntityBat var1, double var2, double var4, double var6, float var8, float var9) {
+	public void func_82443_a(EntityBat par1EntityBat, double par2, double par4, double par6, float par8, float par9) {
 		int var10 = ((ModelBat)this.mainModel).getBatSize();
-		if(var10 != this.renderedBatSize) {
+
+		if (var10 != this.renderedBatSize) {
 			this.renderedBatSize = var10;
 			this.mainModel = new ModelBat();
 		}
 
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+		super.doRenderLiving(par1EntityBat, par2, par4, par6, par8, par9);
 	}
 
-	protected ResourceLocation getBatTextures(EntityBat var1) {
+	protected ResourceLocation getBatTextures(EntityBat par1EntityBat) {
 		return batTextures;
 	}
 
-	protected void func_82442_a(EntityBat var1, float var2) {
+	protected void func_82442_a(EntityBat par1EntityBat, float par2) {
 		GL11.glScalef(0.35F, 0.35F, 0.35F);
 	}
 
-	protected void func_82445_a(EntityBat var1, double var2, double var4, double var6) {
-		super.renderLivingAt(var1, var2, var4, var6);
+	protected void func_82445_a(EntityBat par1EntityBat, double par2, double par4, double par6) {
+		super.renderLivingAt(par1EntityBat, par2, par4, par6);
 	}
 
-	protected void func_82444_a(EntityBat var1, float var2, float var3, float var4) {
-		if(!var1.getIsBatHanging()) {
-			GL11.glTranslatef(0.0F, MathHelper.cos(var2 * 0.3F) * 0.1F, 0.0F);
+	protected void func_82444_a(EntityBat par1EntityBat, float par2, float par3, float par4) {
+		if (!par1EntityBat.getIsBatHanging()) {
+			GL11.glTranslatef(0.0F, MathHelper.cos(par2 * 0.3F) * 0.1F, 0.0F);
 		} else {
 			GL11.glTranslatef(0.0F, -0.1F, 0.0F);
 		}
 
-		super.rotateCorpse(var1, var2, var3, var4);
-	}
-
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.func_82443_a((EntityBat)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected void preRenderCallback(EntityLivingBase var1, float var2) {
-		this.func_82442_a((EntityBat)var1, var2);
-	}
-
-	protected void rotateCorpse(EntityLivingBase var1, float var2, float var3, float var4) {
-		this.func_82444_a((EntityBat)var1, var2, var3, var4);
-	}
-
-	protected void renderLivingAt(EntityLivingBase var1, double var2, double var4, double var6) {
-		this.func_82445_a((EntityBat)var1, var2, var4, var6);
-	}
-
-	public void doRenderLiving(EntityLivingBase var1, double var2, double var4, double var6, float var8, float var9) {
-		this.func_82443_a((EntityBat)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.getBatTextures((EntityBat)var1);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.func_82443_a((EntityBat)var1, var2, var4, var6, var8, var9);
+		super.rotateCorpse(par1EntityBat, par2, par3, par4);
+	}
+
+	public void doRenderLiving(EntityLiving par1EntityLiving, double par2, double par4, double par6, float par8, float par9) {
+		this.func_82443_a((EntityBat)par1EntityLiving, par2, par4, par6, par8, par9);
+	}
+
+	/**
+	 * Allows the render to do any OpenGL state modifications necessary before the model is rendered. Args: entityLiving,
+	 * partialTickTime
+	 */
+	protected void preRenderCallback(EntityLivingBase par1EntityLivingBase, float par2) {
+		this.func_82442_a((EntityBat)par1EntityLivingBase, par2);
+	}
+
+	protected void rotateCorpse(EntityLivingBase par1EntityLivingBase, float par2, float par3, float par4) {
+		this.func_82444_a((EntityBat)par1EntityLivingBase, par2, par3, par4);
+	}
+
+	/**
+	 * Sets a simple glTranslate on a LivingEntity.
+	 */
+	protected void renderLivingAt(EntityLivingBase par1EntityLivingBase, double par2, double par4, double par6) {
+		this.func_82445_a((EntityBat)par1EntityLivingBase, par2, par4, par6);
+	}
+
+	public void doRenderLiving(EntityLivingBase par1EntityLivingBase, double par2, double par4, double par6, float par8, float par9) {
+		this.func_82443_a((EntityBat)par1EntityLivingBase, par2, par4, par6, par8, par9);
+	}
+
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.getBatTextures((EntityBat)par1Entity);
+	}
+
+	/**
+	 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+	 * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+	 * (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1,
+	 * double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
+	 */
+	public void doRender(Entity par1Entity, double par2, double par4, double par6, float par8, float par9) {
+		this.func_82443_a((EntityBat)par1Entity, par2, par4, par6, par8, par9);
 	}
 }
