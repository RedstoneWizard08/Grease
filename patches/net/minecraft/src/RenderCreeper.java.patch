--- net/minecraft/src/RenderCreeper.java
+++ net/minecraft/src/RenderCreeper.java
@@ -5,20 +5,26 @@
 public class RenderCreeper extends RenderLiving {
 	private static final ResourceLocation armoredCreeperTextures = new ResourceLocation("textures/entity/creeper/creeper_armor.png");
 	private static final ResourceLocation creeperTextures = new ResourceLocation("textures/entity/creeper/creeper.png");
+
+	/** The creeper model. */
 	private ModelBase creeperModel = new ModelCreeper(2.0F);
 
 	public RenderCreeper() {
 		super(new ModelCreeper(), 0.5F);
 	}
 
-	protected void updateCreeperScale(EntityCreeper var1, float var2) {
-		float var3 = var1.getCreeperFlashIntensity(var2);
+	/**
+	 * Updates creeper scale in prerender callback
+	 */
+	protected void updateCreeperScale(EntityCreeper par1EntityCreeper, float par2) {
+		float var3 = par1EntityCreeper.getCreeperFlashIntensity(par2);
 		float var4 = 1.0F + MathHelper.sin(var3 * 100.0F) * var3 * 0.01F;
-		if(var3 < 0.0F) {
+
+		if (var3 < 0.0F) {
 			var3 = 0.0F;
 		}
 
-		if(var3 > 1.0F) {
+		if (var3 > 1.0F) {
 			var3 = 1.0F;
 		}
 
@@ -29,17 +35,22 @@
 		GL11.glScalef(var5, var6, var5);
 	}
 
-	protected int updateCreeperColorMultiplier(EntityCreeper var1, float var2, float var3) {
-		float var4 = var1.getCreeperFlashIntensity(var3);
-		if((int)(var4 * 10.0F) % 2 == 0) {
+	/**
+	 * Updates color multiplier based on creeper state called by getColorMultiplier
+	 */
+	protected int updateCreeperColorMultiplier(EntityCreeper par1EntityCreeper, float par2, float par3) {
+		float var4 = par1EntityCreeper.getCreeperFlashIntensity(par3);
+
+		if ((int)(var4 * 10.0F) % 2 == 0) {
 			return 0;
 		} else {
 			int var5 = (int)(var4 * 0.2F * 255.0F);
-			if(var5 < 0) {
+
+			if (var5 < 0) {
 				var5 = 0;
 			}
 
-			if(var5 > 255) {
+			if (var5 > 255) {
 				var5 = 255;
 			}
 
@@ -50,16 +61,19 @@
 		}
 	}
 
-	protected int renderCreeperPassModel(EntityCreeper var1, int var2, float var3) {
-		if(var1.getPowered()) {
-			if(var1.isInvisible()) {
+	/**
+	 * A method used to render a creeper's powered form as a pass model.
+	 */
+	protected int renderCreeperPassModel(EntityCreeper par1EntityCreeper, int par2, float par3) {
+		if (par1EntityCreeper.getPowered()) {
+			if (par1EntityCreeper.isInvisible()) {
 				GL11.glDepthMask(false);
 			} else {
 				GL11.glDepthMask(true);
 			}
 
-			if(var2 == 1) {
-				float var4 = (float)var1.ticksExisted + var3;
+			if (par2 == 1) {
+				float var4 = (float)par1EntityCreeper.ticksExisted + par3;
 				this.bindTexture(armoredCreeperTextures);
 				GL11.glMatrixMode(GL11.GL_TEXTURE);
 				GL11.glLoadIdentity();
@@ -76,7 +90,7 @@
 				return 1;
 			}
 
-			if(var2 == 2) {
+			if (par2 == 2) {
 				GL11.glMatrixMode(GL11.GL_TEXTURE);
 				GL11.glLoadIdentity();
 				GL11.glMatrixMode(GL11.GL_MODELVIEW);
@@ -88,31 +102,44 @@
 		return -1;
 	}
 
-	protected int func_77061_b(EntityCreeper var1, int var2, float var3) {
+	protected int func_77061_b(EntityCreeper par1EntityCreeper, int par2, float par3) {
 		return -1;
 	}
 
-	protected ResourceLocation getCreeperTextures(EntityCreeper var1) {
+	protected ResourceLocation getCreeperTextures(EntityCreeper par1EntityCreeper) {
 		return creeperTextures;
 	}
 
-	protected void preRenderCallback(EntityLivingBase var1, float var2) {
-		this.updateCreeperScale((EntityCreeper)var1, var2);
-	}
-
-	protected int getColorMultiplier(EntityLivingBase var1, float var2, float var3) {
-		return this.updateCreeperColorMultiplier((EntityCreeper)var1, var2, var3);
-	}
-
-	protected int shouldRenderPass(EntityLivingBase var1, int var2, float var3) {
-		return this.renderCreeperPassModel((EntityCreeper)var1, var2, var3);
-	}
-
-	protected int inheritRenderPass(EntityLivingBase var1, int var2, float var3) {
-		return this.func_77061_b((EntityCreeper)var1, var2, var3);
-	}
-
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.getCreeperTextures((EntityCreeper)var1);
+	/**
+	 * Allows the render to do any OpenGL state modifications necessary before the model is rendered. Args: entityLiving,
+	 * partialTickTime
+	 */
+	protected void preRenderCallback(EntityLivingBase par1EntityLivingBase, float par2) {
+		this.updateCreeperScale((EntityCreeper)par1EntityLivingBase, par2);
+	}
+
+	/**
+	 * Returns an ARGB int color back. Args: entityLiving, lightBrightness, partialTickTime
+	 */
+	protected int getColorMultiplier(EntityLivingBase par1EntityLivingBase, float par2, float par3) {
+		return this.updateCreeperColorMultiplier((EntityCreeper)par1EntityLivingBase, par2, par3);
+	}
+
+	/**
+	 * Queries whether should render the specified pass or not.
+	 */
+	protected int shouldRenderPass(EntityLivingBase par1EntityLivingBase, int par2, float par3) {
+		return this.renderCreeperPassModel((EntityCreeper)par1EntityLivingBase, par2, par3);
+	}
+
+	protected int inheritRenderPass(EntityLivingBase par1EntityLivingBase, int par2, float par3) {
+		return this.func_77061_b((EntityCreeper)par1EntityLivingBase, par2, par3);
+	}
+
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.getCreeperTextures((EntityCreeper)par1Entity);
 	}
 }
