--- net/minecraft/src/RenderEnderCrystal.java
+++ net/minecraft/src/RenderEnderCrystal.java
@@ -11,26 +11,38 @@
 		this.field_76995_b = new ModelEnderCrystal(0.0F, true);
 	}
 
-	public void doRenderEnderCrystal(EntityEnderCrystal var1, double var2, double var4, double var6, float var8, float var9) {
-		float var10 = (float)var1.innerRotation + var9;
+	/**
+	 * Renders the Ender Crystal.
+	 */
+	public void doRenderEnderCrystal(EntityEnderCrystal par1EntityEnderCrystal, double par2, double par4, double par6, float par8, float par9) {
+		float var10 = (float)par1EntityEnderCrystal.innerRotation + par9;
 		GL11.glPushMatrix();
-		GL11.glTranslatef((float)var2, (float)var4, (float)var6);
+		GL11.glTranslatef((float)par2, (float)par4, (float)par6);
 		this.bindTexture(enderCrystalTextures);
 		float var11 = MathHelper.sin(var10 * 0.2F) / 2.0F + 0.5F;
 		var11 += var11 * var11;
-		this.field_76995_b.render(var1, 0.0F, var10 * 3.0F, var11 * 0.2F, 0.0F, 0.0F, 1.0F / 16.0F);
+		this.field_76995_b.render(par1EntityEnderCrystal, 0.0F, var10 * 3.0F, var11 * 0.2F, 0.0F, 0.0F, 0.0625F);
 		GL11.glPopMatrix();
 	}
 
-	protected ResourceLocation getEnderCrystalTextures(EntityEnderCrystal var1) {
+	protected ResourceLocation getEnderCrystalTextures(EntityEnderCrystal par1EntityEnderCrystal) {
 		return enderCrystalTextures;
 	}
 
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.getEnderCrystalTextures((EntityEnderCrystal)var1);
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.getEnderCrystalTextures((EntityEnderCrystal)par1Entity);
 	}
 
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.doRenderEnderCrystal((EntityEnderCrystal)var1, var2, var4, var6, var8, var9);
+	/**
+	 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+	 * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+	 * (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1,
+	 * double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
+	 */
+	public void doRender(Entity par1Entity, double par2, double par4, double par6, float par8, float par9) {
+		this.doRenderEnderCrystal((EntityEnderCrystal)par1Entity, par2, par4, par6, par8, par9);
 	}
 }
