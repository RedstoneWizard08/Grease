--- net/minecraft/src/RenderEnderman.java
+++ net/minecraft/src/RenderEnderman.java
@@ -1,78 +1,103 @@
 package net.minecraft.src;
 
 import java.util.Random;
+
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
+import com.prupe.mcpatcher.mob.MobRandomizer;
+
+import org.spoutcraft.client.config.Configuration;
 public class RenderEnderman extends RenderLiving {
 	private static final ResourceLocation endermanEyesTexture = new ResourceLocation("textures/entity/enderman/enderman_eyes.png");
 	private static final ResourceLocation endermanTextures = new ResourceLocation("textures/entity/enderman/enderman.png");
-	private ModelEnderman endermanModel = (ModelEnderman)this.mainModel;
-	private Random h = new Random();
+
+	/** The model of the enderman */
+	private ModelEnderman endermanModel;
+	private Random rnd = new Random();
 
 	public RenderEnderman() {
 		super(new ModelEnderman(), 0.5F);
+		this.endermanModel = (ModelEnderman)super.mainModel;
 		this.setRenderPassModel(this.endermanModel);
 	}
 
-	public void renderEnderman(EntityEnderman var1, double var2, double var4, double var6, float var8, float var9) {
-		this.endermanModel.isCarrying = var1.getCarried() > 0;
-		this.endermanModel.isAttacking = var1.isScreaming();
-		if(var1.isScreaming()) {
+	/**
+	 * Renders the enderman
+	 */
+	public void renderEnderman(EntityEnderman par1EntityEnderman, double par2, double par4, double par6, float par8, float par9) {
+		this.endermanModel.isCarrying = par1EntityEnderman.getCarried() > 0;
+		this.endermanModel.isAttacking = par1EntityEnderman.isScreaming();
+
+		if (par1EntityEnderman.isScreaming()) {
 			double var10 = 0.02D;
-			var2 += this.h.nextGaussian() * var10;
-			var6 += this.h.nextGaussian() * var10;
+			par2 += this.rnd.nextGaussian() * var10;
+			par6 += this.rnd.nextGaussian() * var10;
 		}
 
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+		super.doRenderLiving(par1EntityEnderman, par2, par4, par6, par8, par9);
 	}
-
-	protected ResourceLocation getEndermanTextures(EntityEnderman var1) {
+	
+	protected ResourceLocation getEndermanTextures(EntityEnderman par1EntityEnderman) {
 		return endermanTextures;
 	}
 
-	protected void renderCarrying(EntityEnderman var1, float var2) {
-		super.renderEquippedItems(var1, var2);
-		if(var1.getCarried() > 0) {
+	/**
+	 * Render the block an enderman is carrying
+	 */
+	protected void renderCarrying(EntityEnderman par1EntityEnderman, float par2) {
+		super.renderEquippedItems(par1EntityEnderman, par2);
+
+		if (par1EntityEnderman.getCarried() > 0) {
 			GL11.glEnable(GL12.GL_RESCALE_NORMAL);
 			GL11.glPushMatrix();
 			float var3 = 0.5F;
-			GL11.glTranslatef(0.0F, 11.0F / 16.0F, -(12.0F / 16.0F));
+			GL11.glTranslatef(0.0F, 0.6875F, -0.75F);
 			var3 *= 1.0F;
 			GL11.glRotatef(20.0F, 1.0F, 0.0F, 0.0F);
 			GL11.glRotatef(45.0F, 0.0F, 1.0F, 0.0F);
 			GL11.glScalef(-var3, -var3, var3);
-			int var4 = var1.getBrightnessForRender(var2);
+			int var4 = par1EntityEnderman.getBrightnessForRender(par2);
 			int var5 = var4 % 65536;
 			int var6 = var4 / 65536;
 			OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)var5 / 1.0F, (float)var6 / 1.0F);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
 			this.bindTexture(TextureMap.locationBlocksTexture);
-			this.renderBlocks.renderBlockAsItem(Block.blocksList[var1.getCarried()], var1.getCarryingData(), 1.0F);
+			this.renderBlocks.renderBlockAsItem(Block.blocksList[par1EntityEnderman.getCarried()], par1EntityEnderman.getCarryingData(), 1.0F);
 			GL11.glPopMatrix();
 			GL11.glDisable(GL12.GL_RESCALE_NORMAL);
 		}
-
 	}
 
-	protected int renderEyes(EntityEnderman var1, int var2, float var3) {
-		if(var2 != 0) {
+	/**
+	 * Render the endermans eyes
+	 */
+	protected int renderEyes(EntityEnderman par1EntityEnderman, int par2, float par3) {
+		if (par2 != 0) {
 			return -1;
 		} else {
-			this.bindTexture(endermanEyesTexture);
+			// Spout Start
+			if (Configuration.isRandomMobTextures()) {
+				this.bindTexture(MobRandomizer.randomTexture((EntityLivingBase)par1EntityEnderman, endermanEyesTexture));
+			} else {
+				// ToDO: Fix this.
+				//loadTexture(par1EntityEnderman.getCustomTexture(org.spoutcraft.api.entity.EntitySkinType.ENDERMAN_EYES, "/mob/enderman_eyes.png"));
+			}
+			// Spout End
 			float var4 = 1.0F;
 			GL11.glEnable(GL11.GL_BLEND);
 			GL11.glDisable(GL11.GL_ALPHA_TEST);
 			GL11.glBlendFunc(GL11.GL_ONE, GL11.GL_ONE);
 			GL11.glDisable(GL11.GL_LIGHTING);
-			if(var1.isInvisible()) {
+
+			if (par1EntityEnderman.isInvisible()) {
 				GL11.glDepthMask(false);
 			} else {
 				GL11.glDepthMask(true);
 			}
 
-			char var5 = '\uf0f0';
+			char var5 = 61680;
 			int var6 = var5 % 65536;
 			int var7 = var5 / 65536;
 			OpenGlHelper.setLightmapTextureCoords(OpenGlHelper.lightmapTexUnit, (float)var6 / 1.0F, (float)var7 / 1.0F);
@@ -83,27 +108,39 @@
 		}
 	}
 
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderEnderman((EntityEnderman)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected int shouldRenderPass(EntityLivingBase var1, int var2, float var3) {
-		return this.renderEyes((EntityEnderman)var1, var2, var3);
-	}
-
-	protected void renderEquippedItems(EntityLivingBase var1, float var2) {
-		this.renderCarrying((EntityEnderman)var1, var2);
-	}
-
-	public void renderPlayer(EntityLivingBase var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderEnderman((EntityEnderman)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.getEndermanTextures((EntityEnderman)var1);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderEnderman((EntityEnderman)var1, var2, var4, var6, var8, var9);
+	public void doRenderLiving(EntityLiving par1EntityLiving, double par2, double par4, double par6, float par8, float par9) {
+		this.renderEnderman((EntityEnderman)par1EntityLiving, par2, par4, par6, par8, par9);
+	}
+	
+	/**
+	 * Queries whether should render the specified pass or not.
+	 */
+	protected int shouldRenderPass(EntityLivingBase par1EntityLivingBase, int par2, float par3) {
+		return this.renderEyes((EntityEnderman)par1EntityLivingBase, par2, par3);
+	}
+
+	protected void renderEquippedItems(EntityLivingBase par1EntityLivingBase, float par2) {
+		this.renderCarrying((EntityEnderman)par1EntityLivingBase, par2);
+	}
+
+	public void renderPlayer(EntityLivingBase par1EntityLivingBase, double par2, double par4, double par6, float par8, float par9) {
+		this.renderEnderman((EntityEnderman)par1EntityLivingBase, par2, par4, par6, par8, par9);
+	}
+
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.getEndermanTextures((EntityEnderman)par1Entity);
+	}
+
+	/**
+	 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+	 * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+	 * (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1,
+	 * double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
+	 */
+	public void doRender(Entity par1Entity, double par2, double par4, double par6, float par8, float par9) {
+		this.renderEnderman((EntityEnderman)par1Entity, par2, par4, par6, par8, par9);
 	}
 }
