--- net/minecraft/src/RenderHelper.java
+++ net/minecraft/src/RenderHelper.java
@@ -4,10 +4,15 @@
 import org.lwjgl.opengl.GL11;
 
 public class RenderHelper {
-	private static FloatBuffer a = GLAllocation.createDirectFloatBuffer(16);
-	private static final Vec3 field_82884_b = Vec3.createVectorHelper((double)0.2F, 1.0D, (double)-0.7F).normalize();
-	private static final Vec3 field_82885_c = Vec3.createVectorHelper((double)-0.2F, 1.0D, (double)0.7F).normalize();
-
+
+	/** Float buffer used to set OpenGL material colors */
+	private static FloatBuffer colorBuffer = GLAllocation.createDirectFloatBuffer(16);
+	private static final Vec3 field_82884_b = Vec3.createVectorHelper(0.20000000298023224D, 1.0D, -0.699999988079071D).normalize();
+	private static final Vec3 field_82885_c = Vec3.createVectorHelper(-0.20000000298023224D, 1.0D, 0.699999988079071D).normalize();
+
+	/**
+	 * Disables the OpenGL lighting properties enabled by enableStandardItemLighting
+	 */
 	public static void disableStandardItemLighting() {
 		GL11.glDisable(GL11.GL_LIGHTING);
 		GL11.glDisable(GL11.GL_LIGHT0);
@@ -15,6 +20,9 @@
 		GL11.glDisable(GL11.GL_COLOR_MATERIAL);
 	}
 
+	/**
+	 * Sets the OpenGL lighting properties to the values used when rendering blocks as items
+	 */
 	public static void enableStandardItemLighting() {
 		GL11.glEnable(GL11.GL_LIGHTING);
 		GL11.glEnable(GL11.GL_LIGHT0);
@@ -36,17 +44,26 @@
 		GL11.glLightModel(GL11.GL_LIGHT_MODEL_AMBIENT, setColorBuffer(var0, var0, var0, 1.0F));
 	}
 
-	private static FloatBuffer setColorBuffer(double var0, double var2, double var4, double var6) {
-		return setColorBuffer((float)var0, (float)var2, (float)var4, (float)var6);
-	}
-
-	private static FloatBuffer setColorBuffer(float var0, float var1, float var2, float var3) {
-		a.clear();
-		a.put(var0).put(var1).put(var2).put(var3);
-		a.flip();
-		return a;
-	}
-
+	/**
+	 * Update and return colorBuffer with the RGBA values passed as arguments
+	 */
+	private static FloatBuffer setColorBuffer(double par0, double par2, double par4, double par6) {
+		return setColorBuffer((float)par0, (float)par2, (float)par4, (float)par6);
+	}
+
+	/**
+	 * Update and return colorBuffer with the RGBA values passed as arguments
+	 */
+	private static FloatBuffer setColorBuffer(float par0, float par1, float par2, float par3) {
+		colorBuffer.clear();
+		colorBuffer.put(par0).put(par1).put(par2).put(par3);
+		colorBuffer.flip();
+		return colorBuffer;
+	}
+
+	/**
+	 * Sets OpenGL lighting for rendering blocks as items inside GUI screens (such as containers).
+	 */
 	public static void enableGUIStandardItemLighting() {
 		GL11.glPushMatrix();
 		GL11.glRotatef(-30.0F, 0.0F, 1.0F, 0.0F);
