--- net/minecraft/src/RenderVillager.java
+++ net/minecraft/src/RenderVillager.java
@@ -9,44 +9,56 @@
 	private static final ResourceLocation priestVillagerTextures = new ResourceLocation("textures/entity/villager/priest.png");
 	private static final ResourceLocation smithVillagerTextures = new ResourceLocation("textures/entity/villager/smith.png");
 	private static final ResourceLocation butcherVillagerTextures = new ResourceLocation("textures/entity/villager/butcher.png");
-	protected ModelVillager villagerModel = (ModelVillager)this.mainModel;
+
+	/** Model of the villager. */
+	protected ModelVillager villagerModel;
 
 	public RenderVillager() {
 		super(new ModelVillager(0.0F), 0.5F);
+		this.villagerModel = (ModelVillager)this.mainModel;
 	}
 
-	protected int shouldVillagerRenderPass(EntityVillager var1, int var2, float var3) {
+	/**
+	 * Determines wether Villager Render pass or not.
+	 */
+	protected int shouldVillagerRenderPass(EntityVillager par1EntityVillager, int par2, float par3) {
 		return -1;
 	}
 
-	public void renderVillager(EntityVillager var1, double var2, double var4, double var6, float var8, float var9) {
-		super.doRenderLiving(var1, var2, var4, var6, var8, var9);
+	public void renderVillager(EntityVillager par1EntityVillager, double par2, double par4, double par6, float par8, float par9) {
+		super.doRenderLiving(par1EntityVillager, par2, par4, par6, par8, par9);
 	}
 
-	protected ResourceLocation func_110902_a(EntityVillager var1) {
-		switch(var1.getProfession()) {
-		case 0:
-			return farmerVillagerTextures;
-		case 1:
-			return librarianVillagerTextures;
-		case 2:
-			return priestVillagerTextures;
-		case 3:
-			return smithVillagerTextures;
-		case 4:
-			return butcherVillagerTextures;
-		default:
-			return villagerTextures;
+	protected ResourceLocation func_110902_a(EntityVillager par1EntityVillager) {
+		switch (par1EntityVillager.getProfession()) {
+			case 0:
+				return farmerVillagerTextures;
+
+			case 1:
+				return librarianVillagerTextures;
+
+			case 2:
+				return priestVillagerTextures;
+
+			case 3:
+				return smithVillagerTextures;
+
+			case 4:
+				return butcherVillagerTextures;
+
+			default:
+				return villagerTextures;
 		}
 	}
 
-	protected void renderVillagerEquipedItems(EntityVillager var1, float var2) {
-		super.renderEquippedItems(var1, var2);
+	protected void renderVillagerEquipedItems(EntityVillager par1EntityVillager, float par2) {
+		super.renderEquippedItems(par1EntityVillager, par2);
 	}
 
-	protected void preRenderVillager(EntityVillager var1, float var2) {
-		float var3 = 15.0F / 16.0F;
-		if(var1.getGrowingAge() < 0) {
+	protected void preRenderVillager(EntityVillager par1EntityVillager, float par2) {
+		float var3 = 0.9375F;
+
+		if (par1EntityVillager.getGrowingAge() < 0) {
 			var3 = (float)((double)var3 * 0.5D);
 			this.shadowSize = 0.25F;
 		} else {
@@ -56,31 +68,47 @@
 		GL11.glScalef(var3, var3, var3);
 	}
 
-	public void doRenderLiving(EntityLiving var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderVillager((EntityVillager)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected void preRenderCallback(EntityLivingBase var1, float var2) {
-		this.preRenderVillager((EntityVillager)var1, var2);
-	}
-
-	protected int shouldRenderPass(EntityLivingBase var1, int var2, float var3) {
-		return this.shouldVillagerRenderPass((EntityVillager)var1, var2, var3);
-	}
-
-	protected void renderEquippedItems(EntityLivingBase var1, float var2) {
-		this.renderVillagerEquipedItems((EntityVillager)var1, var2);
-	}
-
-	public void renderPlayer(EntityLivingBase var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderVillager((EntityVillager)var1, var2, var4, var6, var8, var9);
-	}
-
-	protected ResourceLocation getEntityTexture(Entity var1) {
-		return this.func_110902_a((EntityVillager)var1);
-	}
-
-	public void doRender(Entity var1, double var2, double var4, double var6, float var8, float var9) {
-		this.renderVillager((EntityVillager)var1, var2, var4, var6, var8, var9);
+	public void doRenderLiving(EntityLiving par1EntityLiving, double par2, double par4, double par6, float par8, float par9) {
+		this.renderVillager((EntityVillager)par1EntityLiving, par2, par4, par6, par8, par9);
+	}
+
+	/**
+	 * Allows the render to do any OpenGL state modifications necessary before the model is rendered. Args: entityLiving,
+	 * partialTickTime
+	 */
+	protected void preRenderCallback(EntityLivingBase par1EntityLivingBase, float par2) {
+		this.preRenderVillager((EntityVillager)par1EntityLivingBase, par2);
+	}
+
+	/**
+	 * Queries whether should render the specified pass or not.
+	 */
+	protected int shouldRenderPass(EntityLivingBase par1EntityLivingBase, int par2, float par3) {
+		return this.shouldVillagerRenderPass((EntityVillager)par1EntityLivingBase, par2, par3);
+	}
+
+	protected void renderEquippedItems(EntityLivingBase par1EntityLivingBase, float par2) {
+		this.renderVillagerEquipedItems((EntityVillager)par1EntityLivingBase, par2);
+	}
+
+	public void renderPlayer(EntityLivingBase par1EntityLivingBase, double par2, double par4, double par6, float par8, float par9) {
+		this.renderVillager((EntityVillager)par1EntityLivingBase, par2, par4, par6, par8, par9);
+	}
+
+	/**
+	 * Returns the location of an entity's texture. Doesn't seem to be called unless you call Render.bindEntityTexture.
+	 */
+	protected ResourceLocation getEntityTexture(Entity par1Entity) {
+		return this.func_110902_a((EntityVillager)par1Entity);
+	}
+
+	/**
+	 * Actually renders the given argument. This is a synthetic bridge method, always casting down its argument and then
+	 * handing it off to a worker function which does the actual work. In all probabilty, the class Render is generic
+	 * (Render<T extends Entity) and this method has signature public void doRender(T entity, double d, double d1,
+	 * double d2, float f, float f1). But JAD is pre 1.5 so doesn't do that.
+	 */
+	public void doRender(Entity par1Entity, double par2, double par4, double par6, float par8, float par9) {
+		this.renderVillager((EntityVillager)par1Entity, par2, par4, par6, par8, par9);
 	}
 }
