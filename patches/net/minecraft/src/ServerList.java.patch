--- net/minecraft/src/ServerList.java
+++ net/minecraft/src/ServerList.java
@@ -6,72 +6,98 @@
 import java.util.List;
 
 public class ServerList {
+
+	/** The Minecraft instance. */
 	private final Minecraft mc;
-	private final List b = new ArrayList();
-
-	public ServerList(Minecraft var1) {
-		this.mc = var1;
+
+	/** List of ServerData instances. */
+	private final List servers = new ArrayList();
+
+	public ServerList(Minecraft par1Minecraft) {
+		this.mc = par1Minecraft;
 		this.loadServerList();
 	}
 
+	/**
+	 * Loads a list of servers from servers.dat, by running ServerData.getServerDataFromNBTCompound on each NBT compound
+	 * found in the "servers" tag list.
+	 */
 	public void loadServerList() {
 		try {
-			this.b.clear();
-			NBTTagCompound var1 = CompressedStreamTools.read(new File(this.mc.x, "servers.dat"));
-			if(var1 == null) {
+			this.servers.clear();
+			NBTTagCompound var1 = CompressedStreamTools.read(new File(this.mc.mcDataDir, "servers.dat"));
+
+			if (var1 == null) {
 				return;
 			}
 
 			NBTTagList var2 = var1.getTagList("servers");
 
-			for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
-				this.b.add(ServerData.getServerDataFromNBTCompound((NBTTagCompound)var2.tagAt(var3)));
+			for (int var3 = 0; var3 < var2.tagCount(); ++var3) {
+				this.servers.add(ServerData.getServerDataFromNBTCompound((NBTTagCompound)var2.tagAt(var3)));
 			}
 		} catch (Exception var4) {
 			var4.printStackTrace();
 		}
-
 	}
 
+	/**
+	 * Runs getNBTCompound on each ServerData instance, puts everything into a "servers" NBT list and writes it to
+	 * servers.dat.
+	 */
 	public void saveServerList() {
 		try {
 			NBTTagList var1 = new NBTTagList();
-			Iterator var2 = this.b.iterator();
+			Iterator var2 = this.servers.iterator();
 
-			while(var2.hasNext()) {
+			while (var2.hasNext()) {
 				ServerData var3 = (ServerData)var2.next();
 				var1.appendTag(var3.getNBTCompound());
 			}
 
 			NBTTagCompound var5 = new NBTTagCompound();
 			var5.setTag("servers", var1);
-			CompressedStreamTools.safeWrite(var5, new File(this.mc.x, "servers.dat"));
+			CompressedStreamTools.safeWrite(var5, new File(this.mc.mcDataDir, "servers.dat"));
 		} catch (Exception var4) {
 			var4.printStackTrace();
 		}
-
-	}
-
-	public ServerData getServerData(int var1) {
-		return (ServerData)this.b.get(var1);
-	}
-
-	public void removeServerData(int var1) {
-		this.b.remove(var1);
-	}
-
-	public void addServerData(ServerData var1) {
-		this.b.add(var1);
-	}
-
+	}
+
+	/**
+	 * Gets the ServerData instance stored for the given index in the list.
+	 */
+	public ServerData getServerData(int par1) {
+		return (ServerData)this.servers.get(par1);
+	}
+
+	/**
+	 * Removes the ServerData instance stored for the given index in the list.
+	 */
+	public void removeServerData(int par1) {
+		this.servers.remove(par1);
+	}
+
+	/**
+	 * Adds the given ServerData instance to the list.
+	 */
+	public void addServerData(ServerData par1ServerData) {
+		this.servers.add(par1ServerData);
+	}
+
+	/**
+	 * Counts the number of ServerData instances in the list.
+	 */
 	public int countServers() {
-		return this.b.size();
+		return this.servers.size();
 	}
 
-	public void swapServers(int var1, int var2) {
-		ServerData var3 = this.getServerData(var1);
-		this.b.set(var1, this.getServerData(var2));
-		this.b.set(var2, var3);
+	/**
+	 * Takes two list indexes, and swaps their order around.
+	 */
+	public void swapServers(int par1, int par2) {
+		ServerData var3 = this.getServerData(par1);
+		this.servers.set(par1, this.getServerData(par2));
+		this.servers.set(par2, var3);
 		this.saveServerList();
 	}
 }
