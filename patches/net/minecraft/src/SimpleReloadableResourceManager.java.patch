--- net/minecraft/src/SimpleReloadableResourceManager.java
+++ net/minecraft/src/SimpleReloadableResourceManager.java
@@ -5,6 +5,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.prupe.mcpatcher.TexturePackChangeHandler;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.Iterator;
@@ -13,63 +14,66 @@
 import java.util.Set;
 
 public class SimpleReloadableResourceManager implements ReloadableResourceManager {
-	private static final Joiner a = Joiner.on(", ");
-	private final Map b = Maps.newHashMap();
-	private final List c = Lists.newArrayList();
-	private final Set d = Sets.newLinkedHashSet();
+	private static final Joiner joinerResourcePacks = Joiner.on(", ");
+	public final Map domainResourceManagers = Maps.newHashMap();
+	private final List reloadListeners = Lists.newArrayList();
+	private final Set setResourceDomains = Sets.newLinkedHashSet();
 	private final MetadataSerializer rmMetadataSerializer;
 
-	public SimpleReloadableResourceManager(MetadataSerializer var1) {
-		this.rmMetadataSerializer = var1;
+	public SimpleReloadableResourceManager(MetadataSerializer par1MetadataSerializer) {
+		this.rmMetadataSerializer = par1MetadataSerializer;
 	}
 
-	public void reloadResourcePack(ResourcePack var1) {
+	public void reloadResourcePack(ResourcePack par1ResourcePack) {
 		FallbackResourceManager var4;
-		for(Iterator var2 = var1.getResourceDomains().iterator(); var2.hasNext(); var4.addResourcePack(var1)) {
+
+		for (Iterator var2 = par1ResourcePack.getResourceDomains().iterator(); var2.hasNext(); var4.addResourcePack(par1ResourcePack)) {
 			String var3 = (String)var2.next();
-			this.d.add(var3);
-			var4 = (FallbackResourceManager)this.b.get(var3);
-			if(var4 == null) {
+			this.setResourceDomains.add(var3);
+			var4 = (FallbackResourceManager)this.domainResourceManagers.get(var3);
+
+			if (var4 == null) {
 				var4 = new FallbackResourceManager(this.rmMetadataSerializer);
-				this.b.put(var3, var4);
+				this.domainResourceManagers.put(var3, var4);
 			}
 		}
-
 	}
 
 	public Set getResourceDomains() {
-		return this.d;
+		return this.setResourceDomains;
 	}
 
-	public Resource getResource(ResourceLocation var1) throws IOException {
-		ResourceManager var2 = (ResourceManager)this.b.get(var1.getResourceDomain());
-		if(var2 != null) {
-			return var2.getResource(var1);
+	public Resource getResource(ResourceLocation par1ResourceLocation) throws IOException {
+		ResourceManager var2 = (ResourceManager)this.domainResourceManagers.get(par1ResourceLocation.getResourceDomain());
+
+		if (var2 != null) {
+			return var2.getResource(par1ResourceLocation);
 		} else {
-			throw new FileNotFoundException(var1.toString());
+			throw new FileNotFoundException(par1ResourceLocation.toString());
 		}
 	}
 
-	public List getAllResources(ResourceLocation var1) throws IOException {
-		ResourceManager var2 = (ResourceManager)this.b.get(var1.getResourceDomain());
-		if(var2 != null) {
-			return var2.getAllResources(var1);
+	public List getAllResources(ResourceLocation par1ResourceLocation) throws IOException {
+		ResourceManager var2 = (ResourceManager)this.domainResourceManagers.get(par1ResourceLocation.getResourceDomain());
+
+		if (var2 != null) {
+			return var2.getAllResources(par1ResourceLocation);
 		} else {
-			throw new FileNotFoundException(var1.toString());
+			throw new FileNotFoundException(par1ResourceLocation.toString());
 		}
 	}
 
 	private void clearResources() {
-		this.b.clear();
-		this.d.clear();
+		this.domainResourceManagers.clear();
+		this.setResourceDomains.clear();
 	}
 
-	public void reloadResources(List var1) {
+	public void reloadResources(List par1List) {
 		this.clearResources();
-		Minecraft.getMinecraft().getLogAgent().logInfo("Reloading ResourceManager: " + a.join(Iterables.transform(var1, new SimpleReloadableResourceManagerINNER1(this))));
-		Iterator var2 = var1.iterator();
+		Minecraft.getMinecraft().getLogAgent().logInfo("Reloading ResourceManager: " + joinerResourcePacks.join(Iterables.transform(par1List, new SimpleReloadableResourceManagerINNER1(this))));
+		Iterator var2 = par1List.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			ResourcePack var3 = (ResourcePack)var2.next();
 			this.reloadResourcePack(var3);
 		}
@@ -77,18 +81,20 @@
 		this.notifyReloadListeners();
 	}
 
-	public void registerReloadListener(ResourceManagerReloadListener var1) {
-		this.c.add(var1);
-		var1.onResourceManagerReload(this);
+	public void registerReloadListener(ResourceManagerReloadListener par1ResourceManagerReloadListener) {
+		this.reloadListeners.add(par1ResourceManagerReloadListener);
+		par1ResourceManagerReloadListener.onResourceManagerReload(this);
 	}
 
 	private void notifyReloadListeners() {
-		Iterator var1 = this.c.iterator();
+		TexturePackChangeHandler.beforeChange1(false);
+		Iterator var1 = this.reloadListeners.iterator();
 
-		while(var1.hasNext()) {
+		while (var1.hasNext()) {
 			ResourceManagerReloadListener var2 = (ResourceManagerReloadListener)var1.next();
 			var2.onResourceManagerReload(this);
 		}
 
+		TexturePackChangeHandler.afterChange1(false);
 	}
 }
