--- net/minecraft/src/SlotArmor.java
+++ net/minecraft/src/SlotArmor.java
@@ -1,23 +1,41 @@
 package net.minecraft.src;
 
 class SlotArmor extends Slot {
+
+	/**
+	 * The armor type that can be placed on that slot, it uses the same values of armorType field on ItemArmor.
+	 */
 	final int armorType;
+
+	/**
+	 * The parent class of this clot, ContainerPlayer, SlotArmor is a Anon inner class.
+	 */
 	final ContainerPlayer parent;
 
-	SlotArmor(ContainerPlayer var1, IInventory var2, int var3, int var4, int var5, int var6) {
-		super(var2, var3, var4, var5);
-		this.parent = var1;
-		this.armorType = var6;
+	SlotArmor(ContainerPlayer par1ContainerPlayer, IInventory par2IInventory, int par3, int par4, int par5, int par6) {
+		super(par2IInventory, par3, par4, par5);
+		this.parent = par1ContainerPlayer;
+		this.armorType = par6;
 	}
 
+	/**
+	 * Returns the maximum stack size for a given slot (usually the same as getInventoryStackLimit(), but 1 in the case of
+	 * armor slots)
+	 */
 	public int getSlotStackLimit() {
 		return 1;
 	}
 
-	public boolean isItemValid(ItemStack var1) {
-		return var1 == null ? false : (var1.getItem() instanceof ItemArmor ? ((ItemArmor)var1.getItem()).armorType == this.armorType : (var1.getItem().itemID != Block.pumpkin.blockID && var1.getItem().itemID != Item.skull.itemID ? false : this.armorType == 0));
+	/**
+	 * Check if the stack is a valid item for this slot. Always true beside for the armor slots.
+	 */
+	public boolean isItemValid(ItemStack par1ItemStack) {
+		return par1ItemStack == null ? false : (par1ItemStack.getItem() instanceof ItemArmor ? ((ItemArmor)par1ItemStack.getItem()).armorType == this.armorType : (par1ItemStack.getItem().itemID != Block.pumpkin.blockID && par1ItemStack.getItem().itemID != Item.skull.itemID ? false : this.armorType == 0));
 	}
 
+	/**
+	 * Returns the icon index on items.png that is used as background image of the slot.
+	 */
 	public Icon getBackgroundIconIndex() {
 		return ItemArmor.func_94602_b(this.armorType);
 	}
