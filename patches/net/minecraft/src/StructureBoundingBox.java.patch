--- net/minecraft/src/StructureBoundingBox.java
+++ net/minecraft/src/StructureBoundingBox.java
@@ -1,112 +1,156 @@
 package net.minecraft.src;
 
 public class StructureBoundingBox {
+
+	/** The first x coordinate of a bounding box. */
 	public int minX;
+
+	/** The first y coordinate of a bounding box. */
 	public int minY;
+
+	/** The first z coordinate of a bounding box. */
 	public int minZ;
+
+	/** The second x coordinate of a bounding box. */
 	public int maxX;
+
+	/** The second y coordinate of a bounding box. */
 	public int maxY;
+
+	/** The second z coordinate of a bounding box. */
 	public int maxZ;
 
-	public StructureBoundingBox() {
-	}
+	public StructureBoundingBox() {}
 
-	public StructureBoundingBox(int[] var1) {
-		if(var1.length == 6) {
-			this.minX = var1[0];
-			this.minY = var1[1];
-			this.minZ = var1[2];
-			this.maxX = var1[3];
-			this.maxY = var1[4];
-			this.maxZ = var1[5];
+	public StructureBoundingBox(int[] par1ArrayOfInteger) {
+		if (par1ArrayOfInteger.length == 6) {
+			this.minX = par1ArrayOfInteger[0];
+			this.minY = par1ArrayOfInteger[1];
+			this.minZ = par1ArrayOfInteger[2];
+			this.maxX = par1ArrayOfInteger[3];
+			this.maxY = par1ArrayOfInteger[4];
+			this.maxZ = par1ArrayOfInteger[5];
 		}
-
 	}
 
+	/**
+	 * returns a new StructureBoundingBox with MAX values
+	 */
 	public static StructureBoundingBox getNewBoundingBox() {
 		return new StructureBoundingBox(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
 	}
 
-	public static StructureBoundingBox getComponentToAddBoundingBox(int var0, int var1, int var2, int var3, int var4, int var5, int var6, int var7, int var8, int var9) {
-		switch(var9) {
-		case 0:
-			return new StructureBoundingBox(var0 + var3, var1 + var4, var2 + var5, var0 + var6 - 1 + var3, var1 + var7 - 1 + var4, var2 + var8 - 1 + var5);
-		case 1:
-			return new StructureBoundingBox(var0 - var8 + 1 + var5, var1 + var4, var2 + var3, var0 + var5, var1 + var7 - 1 + var4, var2 + var6 - 1 + var3);
-		case 2:
-			return new StructureBoundingBox(var0 + var3, var1 + var4, var2 - var8 + 1 + var5, var0 + var6 - 1 + var3, var1 + var7 - 1 + var4, var2 + var5);
-		case 3:
-			return new StructureBoundingBox(var0 + var5, var1 + var4, var2 + var3, var0 + var8 - 1 + var5, var1 + var7 - 1 + var4, var2 + var6 - 1 + var3);
-		default:
-			return new StructureBoundingBox(var0 + var3, var1 + var4, var2 + var5, var0 + var6 - 1 + var3, var1 + var7 - 1 + var4, var2 + var8 - 1 + var5);
+	/**
+	 * used to project a possible new component Bounding Box - to check if it would cut anything already spawned
+	 */
+	public static StructureBoundingBox getComponentToAddBoundingBox(int par0, int par1, int par2, int par3, int par4, int par5, int par6, int par7, int par8, int par9) {
+		switch (par9) {
+			case 0:
+				return new StructureBoundingBox(par0 + par3, par1 + par4, par2 + par5, par0 + par6 - 1 + par3, par1 + par7 - 1 + par4, par2 + par8 - 1 + par5);
+
+			case 1:
+				return new StructureBoundingBox(par0 - par8 + 1 + par5, par1 + par4, par2 + par3, par0 + par5, par1 + par7 - 1 + par4, par2 + par6 - 1 + par3);
+
+			case 2:
+				return new StructureBoundingBox(par0 + par3, par1 + par4, par2 - par8 + 1 + par5, par0 + par6 - 1 + par3, par1 + par7 - 1 + par4, par2 + par5);
+
+			case 3:
+				return new StructureBoundingBox(par0 + par5, par1 + par4, par2 + par3, par0 + par8 - 1 + par5, par1 + par7 - 1 + par4, par2 + par6 - 1 + par3);
+
+			default:
+				return new StructureBoundingBox(par0 + par3, par1 + par4, par2 + par5, par0 + par6 - 1 + par3, par1 + par7 - 1 + par4, par2 + par8 - 1 + par5);
 		}
 	}
 
-	public StructureBoundingBox(StructureBoundingBox var1) {
-		this.minX = var1.minX;
-		this.minY = var1.minY;
-		this.minZ = var1.minZ;
-		this.maxX = var1.maxX;
-		this.maxY = var1.maxY;
-		this.maxZ = var1.maxZ;
-	}
-
-	public StructureBoundingBox(int var1, int var2, int var3, int var4, int var5, int var6) {
-		this.minX = var1;
-		this.minY = var2;
-		this.minZ = var3;
-		this.maxX = var4;
-		this.maxY = var5;
-		this.maxZ = var6;
-	}
-
-	public StructureBoundingBox(int var1, int var2, int var3, int var4) {
-		this.minX = var1;
-		this.minZ = var2;
-		this.maxX = var3;
-		this.maxZ = var4;
+	public StructureBoundingBox(StructureBoundingBox par1StructureBoundingBox) {
+		this.minX = par1StructureBoundingBox.minX;
+		this.minY = par1StructureBoundingBox.minY;
+		this.minZ = par1StructureBoundingBox.minZ;
+		this.maxX = par1StructureBoundingBox.maxX;
+		this.maxY = par1StructureBoundingBox.maxY;
+		this.maxZ = par1StructureBoundingBox.maxZ;
+	}
+
+	public StructureBoundingBox(int par1, int par2, int par3, int par4, int par5, int par6) {
+		this.minX = par1;
+		this.minY = par2;
+		this.minZ = par3;
+		this.maxX = par4;
+		this.maxY = par5;
+		this.maxZ = par6;
+	}
+
+	public StructureBoundingBox(int par1, int par2, int par3, int par4) {
+		this.minX = par1;
+		this.minZ = par2;
+		this.maxX = par3;
+		this.maxZ = par4;
 		this.minY = 1;
 		this.maxY = 512;
 	}
 
-	public boolean intersectsWith(StructureBoundingBox var1) {
-		return this.maxX >= var1.minX && this.minX <= var1.maxX && this.maxZ >= var1.minZ && this.minZ <= var1.maxZ && this.maxY >= var1.minY && this.minY <= var1.maxY;
-	}
-
-	public boolean intersectsWith(int var1, int var2, int var3, int var4) {
-		return this.maxX >= var1 && this.minX <= var3 && this.maxZ >= var2 && this.minZ <= var4;
-	}
-
-	public void expandTo(StructureBoundingBox var1) {
-		this.minX = Math.min(this.minX, var1.minX);
-		this.minY = Math.min(this.minY, var1.minY);
-		this.minZ = Math.min(this.minZ, var1.minZ);
-		this.maxX = Math.max(this.maxX, var1.maxX);
-		this.maxY = Math.max(this.maxY, var1.maxY);
-		this.maxZ = Math.max(this.maxZ, var1.maxZ);
-	}
-
-	public void offset(int var1, int var2, int var3) {
-		this.minX += var1;
-		this.minY += var2;
-		this.minZ += var3;
-		this.maxX += var1;
-		this.maxY += var2;
-		this.maxZ += var3;
-	}
-
-	public boolean isVecInside(int var1, int var2, int var3) {
-		return var1 >= this.minX && var1 <= this.maxX && var3 >= this.minZ && var3 <= this.maxZ && var2 >= this.minY && var2 <= this.maxY;
-	}
-
+	/**
+	 * Returns whether the given bounding box intersects with this one. Args: structureboundingbox
+	 */
+	public boolean intersectsWith(StructureBoundingBox par1StructureBoundingBox) {
+		return this.maxX >= par1StructureBoundingBox.minX && this.minX <= par1StructureBoundingBox.maxX && this.maxZ >= par1StructureBoundingBox.minZ && this.minZ <= par1StructureBoundingBox.maxZ && this.maxY >= par1StructureBoundingBox.minY && this.minY <= par1StructureBoundingBox.maxY;
+	}
+
+	/**
+	 * Discover if a coordinate is inside the bounding box area.
+	 */
+	public boolean intersectsWith(int par1, int par2, int par3, int par4) {
+		return this.maxX >= par1 && this.minX <= par3 && this.maxZ >= par2 && this.minZ <= par4;
+	}
+
+	/**
+	 * Expands a bounding box's dimensions to include the supplied bounding box.
+	 */
+	public void expandTo(StructureBoundingBox par1StructureBoundingBox) {
+		this.minX = Math.min(this.minX, par1StructureBoundingBox.minX);
+		this.minY = Math.min(this.minY, par1StructureBoundingBox.minY);
+		this.minZ = Math.min(this.minZ, par1StructureBoundingBox.minZ);
+		this.maxX = Math.max(this.maxX, par1StructureBoundingBox.maxX);
+		this.maxY = Math.max(this.maxY, par1StructureBoundingBox.maxY);
+		this.maxZ = Math.max(this.maxZ, par1StructureBoundingBox.maxZ);
+	}
+
+	/**
+	 * Offsets the current bounding box by the specified coordinates. Args: x, y, z
+	 */
+	public void offset(int par1, int par2, int par3) {
+		this.minX += par1;
+		this.minY += par2;
+		this.minZ += par3;
+		this.maxX += par1;
+		this.maxY += par2;
+		this.maxZ += par3;
+	}
+
+	/**
+	 * Returns true if block is inside bounding box
+	 */
+	public boolean isVecInside(int par1, int par2, int par3) {
+		return par1 >= this.minX && par1 <= this.maxX && par3 >= this.minZ && par3 <= this.maxZ && par2 >= this.minY && par2 <= this.maxY;
+	}
+
+	/**
+	 * Returns width of a bounding box
+	 */
 	public int getXSize() {
 		return this.maxX - this.minX + 1;
 	}
 
+	/**
+	 * Returns height of a bounding box
+	 */
 	public int getYSize() {
 		return this.maxY - this.minY + 1;
 	}
 
+	/**
+	 * Returns length of a bounding box
+	 */
 	public int getZSize() {
 		return this.maxZ - this.minZ + 1;
 	}
@@ -127,7 +171,7 @@
 		return "(" + this.minX + ", " + this.minY + ", " + this.minZ + "; " + this.maxX + ", " + this.maxY + ", " + this.maxZ + ")";
 	}
 
-	public NBTTagIntArray func_143047_a(String var1) {
-		return new NBTTagIntArray(var1, new int[]{this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ});
+	public NBTTagIntArray func_143047_a(String par1Str) {
+		return new NBTTagIntArray(par1Str, new int[] {this.minX, this.minY, this.minZ, this.maxX, this.maxY, this.maxZ});
 	}
 }
