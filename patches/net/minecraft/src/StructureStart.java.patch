--- net/minecraft/src/StructureStart.java
+++ net/minecraft/src/StructureStart.java
@@ -5,17 +5,18 @@
 import java.util.Random;
 
 public abstract class StructureStart {
-	protected LinkedList a = new LinkedList();
+
+	/** List of all StructureComponents that are part of this structure */
+	protected LinkedList components = new LinkedList();
 	protected StructureBoundingBox boundingBox;
 	private int field_143024_c;
 	private int field_143023_d;
 
-	public StructureStart() {
-	}
+	public StructureStart() {}
 
-	public StructureStart(int var1, int var2) {
-		this.field_143024_c = var1;
-		this.field_143023_d = var2;
+	public StructureStart(int par1, int par2) {
+		this.field_143024_c = par1;
+		this.field_143023_d = par2;
 	}
 
 	public StructureBoundingBox getBoundingBox() {
@@ -23,42 +24,47 @@
 	}
 
 	public LinkedList getComponents() {
-		return this.a;
+		return this.components;
 	}
 
-	public void generateStructure(World var1, Random var2, StructureBoundingBox var3) {
-		Iterator var4 = this.a.iterator();
+	/**
+	 * Keeps iterating Structure Pieces and spawning them until the checks tell it to stop
+	 */
+	public void generateStructure(World par1World, Random par2Random, StructureBoundingBox par3StructureBoundingBox) {
+		Iterator var4 = this.components.iterator();
 
-		while(var4.hasNext()) {
+		while (var4.hasNext()) {
 			StructureComponent var5 = (StructureComponent)var4.next();
-			if(var5.getBoundingBox().intersectsWith(var3) && !var5.addComponentParts(var1, var2, var3)) {
+
+			if (var5.getBoundingBox().intersectsWith(par3StructureBoundingBox) && !var5.addComponentParts(par1World, par2Random, par3StructureBoundingBox)) {
 				var4.remove();
 			}
 		}
-
 	}
 
+	/**
+	 * Calculates total bounding box based on components' bounding boxes and saves it to boundingBox
+	 */
 	protected void updateBoundingBox() {
 		this.boundingBox = StructureBoundingBox.getNewBoundingBox();
-		Iterator var1 = this.a.iterator();
+		Iterator var1 = this.components.iterator();
 
-		while(var1.hasNext()) {
+		while (var1.hasNext()) {
 			StructureComponent var2 = (StructureComponent)var1.next();
 			this.boundingBox.expandTo(var2.getBoundingBox());
 		}
-
 	}
 
-	public NBTTagCompound func_143021_a(int var1, int var2) {
+	public NBTTagCompound func_143021_a(int par1, int par2) {
 		NBTTagCompound var3 = new NBTTagCompound();
 		var3.setString("id", MapGenStructureIO.func_143033_a(this));
-		var3.setInteger("ChunkX", var1);
-		var3.setInteger("ChunkZ", var2);
+		var3.setInteger("ChunkX", par1);
+		var3.setInteger("ChunkZ", par2);
 		var3.setTag("BB", this.boundingBox.func_143047_a("BB"));
 		NBTTagList var4 = new NBTTagList("Children");
-		Iterator var5 = this.a.iterator();
+		Iterator var5 = this.components.iterator();
 
-		while(var5.hasNext()) {
+		while (var5.hasNext()) {
 			StructureComponent var6 = (StructureComponent)var5.next();
 			var4.appendTag(var6.func_143010_b());
 		}
@@ -68,67 +74,72 @@
 		return var3;
 	}
 
-	public void func_143022_a(NBTTagCompound var1) {
-	}
-
-	public void func_143020_a(World var1, NBTTagCompound var2) {
-		this.field_143024_c = var2.getInteger("ChunkX");
-		this.field_143023_d = var2.getInteger("ChunkZ");
-		if(var2.hasKey("BB")) {
-			this.boundingBox = new StructureBoundingBox(var2.getIntArray("BB"));
-		}
-
-		NBTTagList var3 = var2.getTagList("Children");
-
-		for(int var4 = 0; var4 < var3.tagCount(); ++var4) {
-			this.a.add(MapGenStructureIO.func_143032_b((NBTTagCompound)var3.tagAt(var4), var1));
-		}
-
-		this.func_143017_b(var2);
-	}
-
-	public void func_143017_b(NBTTagCompound var1) {
-	}
-
-	protected void markAvailableHeight(World var1, Random var2, int var3) {
-		int var4 = 63 - var3;
+	public void func_143022_a(NBTTagCompound par1NBTTagCompound) {}
+
+	public void func_143020_a(World par1World, NBTTagCompound par2NBTTagCompound) {
+		this.field_143024_c = par2NBTTagCompound.getInteger("ChunkX");
+		this.field_143023_d = par2NBTTagCompound.getInteger("ChunkZ");
+
+		if (par2NBTTagCompound.hasKey("BB")) {
+			this.boundingBox = new StructureBoundingBox(par2NBTTagCompound.getIntArray("BB"));
+		}
+
+		NBTTagList var3 = par2NBTTagCompound.getTagList("Children");
+
+		for (int var4 = 0; var4 < var3.tagCount(); ++var4) {
+			this.components.add(MapGenStructureIO.func_143032_b((NBTTagCompound)var3.tagAt(var4), par1World));
+		}
+
+		this.func_143017_b(par2NBTTagCompound);
+	}
+
+	public void func_143017_b(NBTTagCompound par1NBTTagCompound) {}
+
+	/**
+	 * offsets the structure Bounding Boxes up to a certain height, typically 63 - 10
+	 */
+	protected void markAvailableHeight(World par1World, Random par2Random, int par3) {
+		int var4 = 63 - par3;
 		int var5 = this.boundingBox.getYSize() + 1;
-		if(var5 < var4) {
-			var5 += var2.nextInt(var4 - var5);
+
+		if (var5 < var4) {
+			var5 += par2Random.nextInt(var4 - var5);
 		}
 
 		int var6 = var5 - this.boundingBox.maxY;
 		this.boundingBox.offset(0, var6, 0);
-		Iterator var7 = this.a.iterator();
+		Iterator var7 = this.components.iterator();
 
-		while(var7.hasNext()) {
+		while (var7.hasNext()) {
 			StructureComponent var8 = (StructureComponent)var7.next();
 			var8.getBoundingBox().offset(0, var6, 0);
 		}
-
 	}
 
-	protected void setRandomHeight(World var1, Random var2, int var3, int var4) {
-		int var5 = var4 - var3 + 1 - this.boundingBox.getYSize();
+	protected void setRandomHeight(World par1World, Random par2Random, int par3, int par4) {
+		int var5 = par4 - par3 + 1 - this.boundingBox.getYSize();
 		boolean var6 = true;
 		int var10;
-		if(var5 > 1) {
-			var10 = var3 + var2.nextInt(var5);
+
+		if (var5 > 1) {
+			var10 = par3 + par2Random.nextInt(var5);
 		} else {
-			var10 = var3;
+			var10 = par3;
 		}
 
 		int var7 = var10 - this.boundingBox.minY;
 		this.boundingBox.offset(0, var7, 0);
-		Iterator var8 = this.a.iterator();
+		Iterator var8 = this.components.iterator();
 
-		while(var8.hasNext()) {
+		while (var8.hasNext()) {
 			StructureComponent var9 = (StructureComponent)var8.next();
 			var9.getBoundingBox().offset(0, var7, 0);
 		}
-
 	}
 
+	/**
+	 * currently only defined for Villages, returns true if Village has more than 2 non-road components
+	 */
 	public boolean isSizeableStructure() {
 		return true;
 	}
