--- net/minecraft/src/ThreadedFileIOBase.java
+++ net/minecraft/src/ThreadedFileIOBase.java
@@ -5,8 +5,10 @@
 import java.util.List;
 
 public class ThreadedFileIOBase implements Runnable {
+
+	/** Instance of ThreadedFileIOBase */
 	public static final ThreadedFileIOBase threadedIOInstance = new ThreadedFileIOBase();
-	private List b = Collections.synchronizedList(new ArrayList());
+	private List threadedIOQueue = Collections.synchronizedList(new ArrayList());
 	private volatile long writeQueuedCounter;
 	private volatile long savedIOCounter;
 	private volatile boolean isThreadWaiting;
@@ -18,17 +20,21 @@
 	}
 
 	public void run() {
-		while(true) {
+		while (true) {
 			this.processQueue();
 		}
 	}
 
+	/**
+	 * Process the items that are in the queue
+	 */
 	private void processQueue() {
-		for(int var1 = 0; var1 < this.b.size(); ++var1) {
-			IThreadedFileIO var2 = (IThreadedFileIO)this.b.get(var1);
+		for (int var1 = 0; var1 < this.threadedIOQueue.size(); ++var1) {
+			IThreadedFileIO var2 = (IThreadedFileIO)this.threadedIOQueue.get(var1);
 			boolean var3 = var2.writeNextIO();
-			if(!var3) {
-				this.b.remove(var1--);
+
+			if (!var3) {
+				this.threadedIOQueue.remove(var1--);
 				++this.savedIOCounter;
 			}
 
@@ -39,27 +45,29 @@
 			}
 		}
 
-		if(this.b.isEmpty()) {
+		if (this.threadedIOQueue.isEmpty()) {
 			try {
 				Thread.sleep(25L);
 			} catch (InterruptedException var5) {
 				var5.printStackTrace();
 			}
 		}
-
 	}
 
-	public void queueIO(IThreadedFileIO var1) {
-		if(!this.b.contains(var1)) {
+	/**
+	 * threaded io
+	 */
+	public void queueIO(IThreadedFileIO par1IThreadedFileIO) {
+		if (!this.threadedIOQueue.contains(par1IThreadedFileIO)) {
 			++this.writeQueuedCounter;
-			this.b.add(var1);
+			this.threadedIOQueue.add(par1IThreadedFileIO);
 		}
 	}
 
 	public void waitForFinish() throws InterruptedException {
 		this.isThreadWaiting = true;
 
-		while(this.writeQueuedCounter != this.savedIOCounter) {
+		while (this.writeQueuedCounter != this.savedIOCounter) {
 			Thread.sleep(10L);
 		}
 
