--- net/minecraft/src/TileEntityDispenser.java
+++ net/minecraft/src/TileEntityDispenser.java
@@ -4,29 +4,45 @@
 
 public class TileEntityDispenser extends TileEntity implements IInventory {
 	private ItemStack[] dispenserContents = new ItemStack[9];
-	private Random c = new Random();
-	protected String a;
-
+
+	/**
+	 * random number generator for instance. Used in random item stack selection.
+	 */
+	private Random dispenserRandom = new Random();
+	protected String customName;
+
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return 9;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.dispenserContents[var1];
+	/**
+	 * Returns the stack in slot i
+	 */
+	public ItemStack getStackInSlot(int par1) {
+		return this.dispenserContents[par1];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.dispenserContents[var1] != null) {
+	/**
+	 * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a new
+	 * stack.
+	 */
+	public ItemStack decrStackSize(int par1, int par2) {
+		if (this.dispenserContents[par1] != null) {
 			ItemStack var3;
-			if(this.dispenserContents[var1].stackSize <= var2) {
-				var3 = this.dispenserContents[var1];
-				this.dispenserContents[var1] = null;
+
+			if (this.dispenserContents[par1].stackSize <= par2) {
+				var3 = this.dispenserContents[par1];
+				this.dispenserContents[par1] = null;
 				this.onInventoryChanged();
 				return var3;
 			} else {
-				var3 = this.dispenserContents[var1].splitStack(var2);
-				if(this.dispenserContents[var1].stackSize == 0) {
-					this.dispenserContents[var1] = null;
+				var3 = this.dispenserContents[par1].splitStack(par2);
+
+				if (this.dispenserContents[par1].stackSize == 0) {
+					this.dispenserContents[par1] = null;
 				}
 
 				this.onInventoryChanged();
@@ -37,10 +53,14 @@
 		}
 	}
 
-	public ItemStack getStackInSlotOnClosing(int var1) {
-		if(this.dispenserContents[var1] != null) {
-			ItemStack var2 = this.dispenserContents[var1];
-			this.dispenserContents[var1] = null;
+	/**
+	 * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem - like
+	 * when you close a workbench GUI.
+	 */
+	public ItemStack getStackInSlotOnClosing(int par1) {
+		if (this.dispenserContents[par1] != null) {
+			ItemStack var2 = this.dispenserContents[par1];
+			this.dispenserContents[par1] = null;
 			return var2;
 		} else {
 			return null;
@@ -51,8 +71,8 @@
 		int var1 = -1;
 		int var2 = 1;
 
-		for(int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
-			if(this.dispenserContents[var3] != null && this.c.nextInt(var2++) == 0) {
+		for (int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
+			if (this.dispenserContents[var3] != null && this.dispenserRandom.nextInt(var2++) == 0) {
 				var1 = var3;
 			}
 		}
@@ -60,19 +80,26 @@
 		return var1;
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.dispenserContents[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	/**
+	 * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
+	 */
+	public void setInventorySlotContents(int par1, ItemStack par2ItemStack) {
+		this.dispenserContents[par1] = par2ItemStack;
+
+		if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit()) {
+			par2ItemStack.stackSize = this.getInventoryStackLimit();
 		}
 
 		this.onInventoryChanged();
 	}
 
-	public int addItem(ItemStack var1) {
-		for(int var2 = 0; var2 < this.dispenserContents.length; ++var2) {
-			if(this.dispenserContents[var2] == null || this.dispenserContents[var2].itemID == 0) {
-				this.setInventorySlotContents(var2, var1);
+	/**
+	 * Add item stack in first available inventory slot
+	 */
+	public int addItem(ItemStack par1ItemStack) {
+		for (int var2 = 0; var2 < this.dispenserContents.length; ++var2) {
+			if (this.dispenserContents[var2] == null || this.dispenserContents[var2].itemID == 0) {
+				this.setInventorySlotContents(var2, par1ItemStack);
 				return var2;
 			}
 		}
@@ -80,43 +107,56 @@
 		return -1;
 	}
 
+	/**
+	 * Returns the name of the inventory.
+	 */
 	public String getInvName() {
-		return this.isInvNameLocalized() ? this.a : "container.dispenser";
-	}
-
-	public void setCustomName(String var1) {
-		this.a = var1;
-	}
-
+		return this.isInvNameLocalized() ? this.customName : "container.dispenser";
+	}
+
+	public void setCustomName(String par1Str) {
+		this.customName = par1Str;
+	}
+
+	/**
+	 * If this returns false, the inventory name will be used as an unlocalized name, and translated into the player's
+	 * language. Otherwise it will be used directly.
+	 */
 	public boolean isInvNameLocalized() {
-		return this.a != null;
+		return this.customName != null;
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+	/**
+	 * Reads a tile entity from NBT.
+	 */
+	public void readFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readFromNBT(par1NBTTagCompound);
+		NBTTagList var2 = par1NBTTagCompound.getTagList("Items");
 		this.dispenserContents = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
+		for (int var3 = 0; var3 < var2.tagCount(); ++var3) {
 			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
 			int var5 = var4.getByte("Slot") & 255;
-			if(var5 >= 0 && var5 < this.dispenserContents.length) {
+
+			if (var5 >= 0 && var5 < this.dispenserContents.length) {
 				this.dispenserContents[var5] = ItemStack.loadItemStackFromNBT(var4);
 			}
 		}
 
-		if(var1.hasKey("CustomName")) {
-			this.a = var1.getString("CustomName");
+		if (par1NBTTagCompound.hasKey("CustomName")) {
+			this.customName = par1NBTTagCompound.getString("CustomName");
 		}
-
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
+	/**
+	 * Writes a tile entity to NBT.
+	 */
+	public void writeToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeToNBT(par1NBTTagCompound);
 		NBTTagList var2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
-			if(this.dispenserContents[var3] != null) {
+		for (int var3 = 0; var3 < this.dispenserContents.length; ++var3) {
+			if (this.dispenserContents[var3] != null) {
 				NBTTagCompound var4 = new NBTTagCompound();
 				var4.setByte("Slot", (byte)var3);
 				this.dispenserContents[var3].writeToNBT(var4);
@@ -124,28 +164,36 @@
 			}
 		}
 
-		var1.setTag("Items", var2);
-		if(this.isInvNameLocalized()) {
-			var1.setString("CustomName", this.a);
+		par1NBTTagCompound.setTag("Items", var2);
+
+		if (this.isInvNameLocalized()) {
+			par1NBTTagCompound.setString("CustomName", this.customName);
 		}
-
 	}
 
+	/**
+	 * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't this
+	 * more of a set than a get?*
+	 */
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public boolean isUseableByPlayer(EntityPlayer var1) {
-		return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
-	}
-
-	public void openChest() {
-	}
-
-	public void closeChest() {
-	}
-
-	public boolean isItemValidForSlot(int var1, ItemStack var2) {
+	/**
+	 * Do not make give this method the name canInteractWith because it clashes with Container
+	 */
+	public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer) {
+		return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : par1EntityPlayer.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+	}
+
+	public void openChest() {}
+
+	public void closeChest() {}
+
+	/**
+	 * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
+	 */
+	public boolean isItemValidForSlot(int par1, ItemStack par2ItemStack) {
 		return true;
 	}
 }
