--- net/minecraft/src/TileEntityFurnace.java
+++ net/minecraft/src/TileEntityFurnace.java
@@ -1,34 +1,58 @@
 package net.minecraft.src;
 
 public class TileEntityFurnace extends TileEntity implements ISidedInventory {
-	private static final int[] slots_top = new int[]{0};
-	private static final int[] slots_bottom = new int[]{2, 1};
-	private static final int[] slots_sides = new int[]{1};
+	private static final int[] slots_top = new int[] {0};
+	private static final int[] slots_bottom = new int[] {2, 1};
+	private static final int[] slots_sides = new int[] {1};
+
+	/**
+	 * The ItemStacks that hold the items currently being used in the furnace
+	 */
 	private ItemStack[] furnaceItemStacks = new ItemStack[3];
+
+	/** The number of ticks that the furnace will keep burning */
 	public int furnaceBurnTime;
+
+	/**
+	 * The number of ticks that a fresh copy of the currently-burning item would keep the furnace burning for
+	 */
 	public int currentItemBurnTime;
+
+	/** The number of ticks that the current item has been cooking for */
 	public int furnaceCookTime;
-	private String h;
+	private String field_94130_e;
 
+	/**
+	 * Returns the number of slots in the inventory.
+	 */
 	public int getSizeInventory() {
 		return this.furnaceItemStacks.length;
 	}
 
-	public ItemStack getStackInSlot(int var1) {
-		return this.furnaceItemStacks[var1];
+	/**
+	 * Returns the stack in slot i
+	 */
+	public ItemStack getStackInSlot(int par1) {
+		return this.furnaceItemStacks[par1];
 	}
 
-	public ItemStack decrStackSize(int var1, int var2) {
-		if(this.furnaceItemStacks[var1] != null) {
+	/**
+	 * Removes from an inventory slot (first arg) up to a specified number (second arg) of items and returns them in a new
+	 * stack.
+	 */
+	public ItemStack decrStackSize(int par1, int par2) {
+		if (this.furnaceItemStacks[par1] != null) {
 			ItemStack var3;
-			if(this.furnaceItemStacks[var1].stackSize <= var2) {
-				var3 = this.furnaceItemStacks[var1];
-				this.furnaceItemStacks[var1] = null;
+
+			if (this.furnaceItemStacks[par1].stackSize <= par2) {
+				var3 = this.furnaceItemStacks[par1];
+				this.furnaceItemStacks[par1] = null;
 				return var3;
 			} else {
-				var3 = this.furnaceItemStacks[var1].splitStack(var2);
-				if(this.furnaceItemStacks[var1].stackSize == 0) {
-					this.furnaceItemStacks[var1] = null;
+				var3 = this.furnaceItemStacks[par1].splitStack(par2);
+
+				if (this.furnaceItemStacks[par1].stackSize == 0) {
+					this.furnaceItemStacks[par1] = null;
 				}
 
 				return var3;
@@ -38,66 +62,90 @@
 		}
 	}
 
-	public ItemStack getStackInSlotOnClosing(int var1) {
-		if(this.furnaceItemStacks[var1] != null) {
-			ItemStack var2 = this.furnaceItemStacks[var1];
-			this.furnaceItemStacks[var1] = null;
+	/**
+	 * When some containers are closed they call this on each slot, then drop whatever it returns as an EntityItem - like
+	 * when you close a workbench GUI.
+	 */
+	public ItemStack getStackInSlotOnClosing(int par1) {
+		if (this.furnaceItemStacks[par1] != null) {
+			ItemStack var2 = this.furnaceItemStacks[par1];
+			this.furnaceItemStacks[par1] = null;
 			return var2;
 		} else {
 			return null;
 		}
 	}
 
-	public void setInventorySlotContents(int var1, ItemStack var2) {
-		this.furnaceItemStacks[var1] = var2;
-		if(var2 != null && var2.stackSize > this.getInventoryStackLimit()) {
-			var2.stackSize = this.getInventoryStackLimit();
+	/**
+	 * Sets the given item stack to the specified slot in the inventory (can be crafting or armor sections).
+	 */
+	public void setInventorySlotContents(int par1, ItemStack par2ItemStack) {
+		this.furnaceItemStacks[par1] = par2ItemStack;
+
+		if (par2ItemStack != null && par2ItemStack.stackSize > this.getInventoryStackLimit()) {
+			par2ItemStack.stackSize = this.getInventoryStackLimit();
 		}
-
 	}
 
+	/**
+	 * Returns the name of the inventory.
+	 */
 	public String getInvName() {
-		return this.isInvNameLocalized() ? this.h : "container.furnace";
+		return this.isInvNameLocalized() ? this.field_94130_e : "container.furnace";
 	}
 
+	/**
+	 * If this returns false, the inventory name will be used as an unlocalized name, and translated into the player's
+	 * language. Otherwise it will be used directly.
+	 */
 	public boolean isInvNameLocalized() {
-		return this.h != null && this.h.length() > 0;
-	}
-
-	public void setGuiDisplayName(String var1) {
-		this.h = var1;
-	}
-
-	public void readFromNBT(NBTTagCompound var1) {
-		super.readFromNBT(var1);
-		NBTTagList var2 = var1.getTagList("Items");
+		return this.field_94130_e != null && this.field_94130_e.length() > 0;
+	}
+
+	/**
+	 * Sets the custom display name to use when opening a GUI linked to this tile entity.
+	 */
+	public void setGuiDisplayName(String par1Str) {
+		this.field_94130_e = par1Str;
+	}
+
+	/**
+	 * Reads a tile entity from NBT.
+	 */
+	public void readFromNBT(NBTTagCompound par1NBTTagCompound) {
+		super.readFromNBT(par1NBTTagCompound);
+		NBTTagList var2 = par1NBTTagCompound.getTagList("Items");
 		this.furnaceItemStacks = new ItemStack[this.getSizeInventory()];
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
+		for (int var3 = 0; var3 < var2.tagCount(); ++var3) {
 			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
 			byte var5 = var4.getByte("Slot");
-			if(var5 >= 0 && var5 < this.furnaceItemStacks.length) {
+
+			if (var5 >= 0 && var5 < this.furnaceItemStacks.length) {
 				this.furnaceItemStacks[var5] = ItemStack.loadItemStackFromNBT(var4);
 			}
 		}
 
-		this.furnaceBurnTime = var1.getShort("BurnTime");
-		this.furnaceCookTime = var1.getShort("CookTime");
+		this.furnaceBurnTime = par1NBTTagCompound.getShort("BurnTime");
+		this.furnaceCookTime = par1NBTTagCompound.getShort("CookTime");
 		this.currentItemBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
-		if(var1.hasKey("CustomName")) {
-			this.h = var1.getString("CustomName");
+
+		if (par1NBTTagCompound.hasKey("CustomName")) {
+			this.field_94130_e = par1NBTTagCompound.getString("CustomName");
 		}
-
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setShort("BurnTime", (short)this.furnaceBurnTime);
-		var1.setShort("CookTime", (short)this.furnaceCookTime);
+	/**
+	 * Writes a tile entity to NBT.
+	 */
+	public void writeToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setShort("BurnTime", (short)this.furnaceBurnTime);
+		par1NBTTagCompound.setShort("CookTime", (short)this.furnaceCookTime);
 		NBTTagList var2 = new NBTTagList();
 
-		for(int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
-			if(this.furnaceItemStacks[var3] != null) {
+		for (int var3 = 0; var3 < this.furnaceItemStacks.length; ++var3) {
+			if (this.furnaceItemStacks[var3] != null) {
 				NBTTagCompound var4 = new NBTTagCompound();
 				var4.setByte("Slot", (byte)var3);
 				this.furnaceItemStacks[var3].writeToNBT(var4);
@@ -105,48 +153,71 @@
 			}
 		}
 
-		var1.setTag("Items", var2);
-		if(this.isInvNameLocalized()) {
-			var1.setString("CustomName", this.h);
+		par1NBTTagCompound.setTag("Items", var2);
+
+		if (this.isInvNameLocalized()) {
+			par1NBTTagCompound.setString("CustomName", this.field_94130_e);
 		}
-
 	}
 
+	/**
+	 * Returns the maximum stack size for a inventory slot. Seems to always be 64, possibly will be extended. *Isn't this
+	 * more of a set than a get?*
+	 */
 	public int getInventoryStackLimit() {
 		return 64;
 	}
 
-	public int getCookProgressScaled(int var1) {
-		return this.furnaceCookTime * var1 / 200;
+	/**
+	 * Returns an integer between 0 and the passed value representing how close the current item is to being completely
+	 * cooked
+	 */
+	public int getCookProgressScaled(int par1) {
+		return this.furnaceCookTime * par1 / 200;
 	}
 
-	public int getBurnTimeRemainingScaled(int var1) {
-		if(this.currentItemBurnTime == 0) {
+	/**
+	 * Returns an integer between 0 and the passed value representing how much burn time is left on the current fuel item,
+	 * where 0 means that the item is exhausted and the passed value means that the item is fresh
+	 */
+	public int getBurnTimeRemainingScaled(int par1) {
+		if (this.currentItemBurnTime == 0) {
 			this.currentItemBurnTime = 200;
 		}
 
-		return this.furnaceBurnTime * var1 / this.currentItemBurnTime;
+		return this.furnaceBurnTime * par1 / this.currentItemBurnTime;
 	}
 
+	/**
+	 * Returns true if the furnace is currently burning
+	 */
 	public boolean isBurning() {
 		return this.furnaceBurnTime > 0;
 	}
 
+	/**
+	 * Allows the entity to update its state. Overridden in most subclasses, e.g. the mob spawner uses this to count ticks
+	 * and creates a new spawn inside its implementation.
+	 */
 	public void updateEntity() {
 		boolean var1 = this.furnaceBurnTime > 0;
 		boolean var2 = false;
-		if(this.furnaceBurnTime > 0) {
+
+		if (this.furnaceBurnTime > 0) {
 			--this.furnaceBurnTime;
 		}
 
-		if(!this.worldObj.isRemote) {
-			if(this.furnaceBurnTime == 0 && this.canSmelt()) {
+		if (!this.worldObj.isRemote) {
+			if (this.furnaceBurnTime == 0 && this.canSmelt()) {
 				this.currentItemBurnTime = this.furnaceBurnTime = getItemBurnTime(this.furnaceItemStacks[1]);
-				if(this.furnaceBurnTime > 0) {
+
+				if (this.furnaceBurnTime > 0) {
 					var2 = true;
-					if(this.furnaceItemStacks[1] != null) {
+
+					if (this.furnaceItemStacks[1] != null) {
 						--this.furnaceItemStacks[1].stackSize;
-						if(this.furnaceItemStacks[1].stackSize == 0) {
+
+						if (this.furnaceItemStacks[1].stackSize == 0) {
 							Item var3 = this.furnaceItemStacks[1].getItem().getContainerItem();
 							this.furnaceItemStacks[1] = var3 != null ? new ItemStack(var3) : null;
 						}
@@ -154,9 +225,10 @@
 				}
 			}
 
-			if(this.isBurning() && this.canSmelt()) {
+			if (this.isBurning() && this.canSmelt()) {
 				++this.furnaceCookTime;
-				if(this.furnaceCookTime == 200) {
+
+				if (this.furnaceCookTime == 200) {
 					this.furnaceCookTime = 0;
 					this.smeltItem();
 					var2 = true;
@@ -165,20 +237,22 @@
 				this.furnaceCookTime = 0;
 			}
 
-			if(var1 != this.furnaceBurnTime > 0) {
+			if (var1 != this.furnaceBurnTime > 0) {
 				var2 = true;
 				BlockFurnace.updateFurnaceBlockState(this.furnaceBurnTime > 0, this.worldObj, this.xCoord, this.yCoord, this.zCoord);
 			}
 		}
 
-		if(var2) {
+		if (var2) {
 			this.onInventoryChanged();
 		}
-
 	}
 
+	/**
+	 * Returns true if the furnace can smelt an item, i.e. has a source item, destination stack isn't full, etc.
+	 */
 	private boolean canSmelt() {
-		if(this.furnaceItemStacks[0] == null) {
+		if (this.furnaceItemStacks[0] == null) {
 			return false;
 		} else {
 			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID);
@@ -186,40 +260,49 @@
 		}
 	}
 
+	/**
+	 * Turn one item from the furnace source stack into the appropriate smelted item in the furnace result stack
+	 */
 	public void smeltItem() {
-		if(this.canSmelt()) {
+		if (this.canSmelt()) {
 			ItemStack var1 = FurnaceRecipes.smelting().getSmeltingResult(this.furnaceItemStacks[0].getItem().itemID);
-			if(this.furnaceItemStacks[2] == null) {
+
+			if (this.furnaceItemStacks[2] == null) {
 				this.furnaceItemStacks[2] = var1.copy();
-			} else if(this.furnaceItemStacks[2].itemID == var1.itemID) {
+			} else if (this.furnaceItemStacks[2].itemID == var1.itemID) {
 				++this.furnaceItemStacks[2].stackSize;
 			}
 
 			--this.furnaceItemStacks[0].stackSize;
-			if(this.furnaceItemStacks[0].stackSize <= 0) {
+
+			if (this.furnaceItemStacks[0].stackSize <= 0) {
 				this.furnaceItemStacks[0] = null;
 			}
-
 		}
 	}
 
-	public static int getItemBurnTime(ItemStack var0) {
-		if(var0 == null) {
+	/**
+	 * Returns the number of ticks that the supplied fuel item will keep the furnace burning, or 0 if the item isn't fuel
+	 */
+	public static int getItemBurnTime(ItemStack par0ItemStack) {
+		if (par0ItemStack == null) {
 			return 0;
 		} else {
-			int var1 = var0.getItem().itemID;
-			Item var2 = var0.getItem();
-			if(var1 < 256 && Block.blocksList[var1] != null) {
+			int var1 = par0ItemStack.getItem().itemID;
+			Item var2 = par0ItemStack.getItem();
+
+			if (var1 < 256 && Block.blocksList[var1] != null) {
 				Block var3 = Block.blocksList[var1];
-				if(var3 == Block.woodSingleSlab) {
+
+				if (var3 == Block.woodSingleSlab) {
 					return 150;
 				}
 
-				if(var3.blockMaterial == Material.wood) {
+				if (var3.blockMaterial == Material.wood) {
 					return 300;
 				}
 
-				if(var3 == Block.coalBlock) {
+				if (var3 == Block.coalBlock) {
 					return 16000;
 				}
 			}
@@ -228,33 +311,50 @@
 		}
 	}
 
-	public static boolean isItemFuel(ItemStack var0) {
-		return getItemBurnTime(var0) > 0;
-	}
-
-	public boolean isUseableByPlayer(EntityPlayer var1) {
-		return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : var1.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
-	}
-
-	public void openChest() {
-	}
-
-	public void closeChest() {
-	}
-
-	public boolean isItemValidForSlot(int var1, ItemStack var2) {
-		return var1 == 2 ? false : (var1 == 1 ? isItemFuel(var2) : true);
-	}
-
-	public int[] getSlotsForFace(int var1) {
-		return var1 == 0 ? slots_bottom : (var1 == 1 ? slots_top : slots_sides);
-	}
-
-	public boolean canInsertItem(int var1, ItemStack var2, int var3) {
-		return this.isItemValidForSlot(var1, var2);
-	}
-
-	public boolean canExtractItem(int var1, ItemStack var2, int var3) {
-		return var3 != 0 || var1 != 1 || var2.itemID == Item.bucketEmpty.itemID;
+	/**
+	 * Return true if item is a fuel source (getItemBurnTime() > 0).
+	 */
+	public static boolean isItemFuel(ItemStack par0ItemStack) {
+		return getItemBurnTime(par0ItemStack) > 0;
+	}
+
+	/**
+	 * Do not make give this method the name canInteractWith because it clashes with Container
+	 */
+	public boolean isUseableByPlayer(EntityPlayer par1EntityPlayer) {
+		return this.worldObj.getBlockTileEntity(this.xCoord, this.yCoord, this.zCoord) != this ? false : par1EntityPlayer.getDistanceSq((double)this.xCoord + 0.5D, (double)this.yCoord + 0.5D, (double)this.zCoord + 0.5D) <= 64.0D;
+	}
+
+	public void openChest() {}
+
+	public void closeChest() {}
+
+	/**
+	 * Returns true if automation is allowed to insert the given stack (ignoring stack size) into the given slot.
+	 */
+	public boolean isItemValidForSlot(int par1, ItemStack par2ItemStack) {
+		return par1 == 2 ? false : (par1 == 1 ? isItemFuel(par2ItemStack) : true);
+	}
+
+	/**
+	 * Returns an array containing the indices of the slots that can be accessed by automation on the given side of this
+	 * block.
+	 */
+	public int[] getAccessibleSlotsFromSide(int par1) {
+		return par1 == 0 ? slots_bottom : (par1 == 1 ? slots_top : slots_sides);
+	}
+
+	/**
+	 * Returns true if automation can insert the given item in the given slot from the given side. Args: Slot, item, side
+	 */
+	public boolean canInsertItem(int par1, ItemStack par2ItemStack, int par3) {
+		return this.isItemValidForSlot(par1, par2ItemStack);
+	}
+
+	/**
+	 * Returns true if automation can extract the given item in the given slot from the given side. Args: Slot, item, side
+	 */
+	public boolean canExtractItem(int par1, ItemStack par2ItemStack, int par3) {
+		return par3 != 0 || par1 != 1 || par2ItemStack.itemID == Item.bucketEmpty.itemID;
 	}
 }
