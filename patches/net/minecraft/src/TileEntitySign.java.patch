--- net/minecraft/src/TileEntitySign.java
+++ net/minecraft/src/TileEntitySign.java
@@ -1,35 +1,79 @@
 package net.minecraft.src;
 
 public class TileEntitySign extends TileEntity {
-	public String[] a = new String[]{"", "", "", ""};
+
+	/** An array of four strings storing the lines of text on the sign. */
+	public String[] signText = new String[] {"", "", "", ""};
+
+	/**
+	 * The index of the line currently being edited. Only used on client side, but defined on both. Note this is only
+	 * really used when the > < are going to be visible.
+	 */
 	public int lineBeingEdited = -1;
+	// Spout Start
+	public int columnBeingEdited;
+	// Spout End
 	private boolean isEditable = true;
 	private EntityPlayer field_142011_d;
 
-	public void writeToNBT(NBTTagCompound var1) {
-		super.writeToNBT(var1);
-		var1.setString("Text1", this.a[0]);
-		var1.setString("Text2", this.a[1]);
-		var1.setString("Text3", this.a[2]);
-		var1.setString("Text4", this.a[3]);
-	}
-
-	public void readFromNBT(NBTTagCompound var1) {
+	// Spout Start
+	private byte text = -1; //-1 means invalid cache, 0 means false, 1 means true
+
+	public boolean hasText() {
+		if (text != -1) {
+			return text != 0;
+		}
+		text = 0;
+		for (int i = 0; i < signText.length; i++) {
+			if (signText[i] != null && !signText[i].isEmpty()) {
+				text = 1;
+				break;
+			}
+		}
+		return text != 0;
+	}
+
+	public void recalculateText() {
+		text = -1;
+	}
+	// Spout End
+
+	/**
+	 * Writes a tile entity to NBT.
+	 */
+	public void writeToNBT(NBTTagCompound par1NBTTagCompound) {
+		super.writeToNBT(par1NBTTagCompound);
+		par1NBTTagCompound.setString("Text1", this.signText[0]);
+		par1NBTTagCompound.setString("Text2", this.signText[1]);
+		par1NBTTagCompound.setString("Text3", this.signText[2]);
+		par1NBTTagCompound.setString("Text4", this.signText[3]);
+	}
+
+	/**
+	 * Reads a tile entity from NBT.
+	 */
+	public void readFromNBT(NBTTagCompound par1NBTTagCompound) {
 		this.isEditable = false;
-		super.readFromNBT(var1);
-
-		for(int var2 = 0; var2 < 4; ++var2) {
-			this.a[var2] = var1.getString("Text" + (var2 + 1));
-			if(this.a[var2].length() > 15) {
-				this.a[var2] = this.a[var2].substring(0, 15);
+		super.readFromNBT(par1NBTTagCompound);
+
+		for (int var2 = 0; var2 < 4; ++var2) {
+			this.signText[var2] = par1NBTTagCompound.getString("Text" + (var2 + 1));
+
+			if (this.signText[var2].length() > 15) {
+				this.signText[var2] = this.signText[var2].substring(0, 15);
 			}
 		}
-
+		// Spout Start
+		recalculateText();
+		// Spout End
 	}
 
+	/**
+	 * Overriden in a sign to provide the text.
+	 */
 	public Packet getDescriptionPacket() {
 		String[] var1 = new String[4];
-		System.arraycopy(this.a, 0, var1, 0, 4);
+		System.arraycopy(this.signText, 0, var1, 0, 4);
 		return new Packet130UpdateSign(this.xCoord, this.yCoord, this.zCoord, var1);
 	}
 
@@ -37,16 +81,18 @@
 		return this.isEditable;
 	}
 
-	public void setEditable(boolean var1) {
-		this.isEditable = var1;
-		if(!var1) {
+	/**
+	 * Sets the sign's isEditable flag to the specified parameter.
+	 */
+	public void setEditable(boolean par1) {
+		this.isEditable = par1;
+		if (!par1) {
 			this.field_142011_d = null;
 		}
-
 	}
 
-	public void func_142010_a(EntityPlayer var1) {
-		this.field_142011_d = var1;
+	public void func_142010_a(EntityPlayer par1EntityPlayer) {
+		this.field_142011_d = par1EntityPlayer;
 	}
 
 	public EntityPlayer func_142009_b() {
