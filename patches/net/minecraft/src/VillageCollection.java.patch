--- net/minecraft/src/VillageCollection.java
+++ net/minecraft/src/VillageCollection.java
@@ -6,46 +6,56 @@
 
 public class VillageCollection extends WorldSavedData {
 	private World worldObj;
-	private final List b = new ArrayList();
-	private final List c = new ArrayList();
-	private final List d = new ArrayList();
+
+	/**
+	 * This is a black hole. You can add data to this list through a public interface, but you can't query that information
+	 * in any way and it's not used internally either.
+	 */
+	private final List villagerPositionsList = new ArrayList();
+	private final List newDoors = new ArrayList();
+	private final List villageList = new ArrayList();
 	private int tickCounter;
 
-	public VillageCollection(String var1) {
-		super(var1);
+	public VillageCollection(String par1Str) {
+		super(par1Str);
 	}
 
-	public VillageCollection(World var1) {
+	public VillageCollection(World par1World) {
 		super("villages");
-		this.worldObj = var1;
+		this.worldObj = par1World;
 		this.markDirty();
 	}
 
-	public void func_82566_a(World var1) {
-		this.worldObj = var1;
-		Iterator var2 = this.d.iterator();
+	public void func_82566_a(World par1World) {
+		this.worldObj = par1World;
+		Iterator var2 = this.villageList.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			Village var3 = (Village)var2.next();
-			var3.func_82691_a(var1);
+			var3.func_82691_a(par1World);
 		}
-
 	}
 
-	public void addVillagerPosition(int var1, int var2, int var3) {
-		if(this.b.size() <= 64) {
-			if(!this.isVillagerPositionPresent(var1, var2, var3)) {
-				this.b.add(new ChunkCoordinates(var1, var2, var3));
+	/**
+	 * This is a black hole. You can add data to this list through a public interface, but you can't query that information
+	 * in any way and it's not used internally either.
+	 */
+	public void addVillagerPosition(int par1, int par2, int par3) {
+		if (this.villagerPositionsList.size() <= 64) {
+			if (!this.isVillagerPositionPresent(par1, par2, par3)) {
+				this.villagerPositionsList.add(new ChunkCoordinates(par1, par2, par3));
 			}
-
 		}
 	}
 
+	/**
+	 * Runs a single tick for the village collection
+	 */
 	public void tick() {
 		++this.tickCounter;
-		Iterator var1 = this.d.iterator();
+		Iterator var1 = this.villageList.iterator();
 
-		while(var1.hasNext()) {
+		while (var1.hasNext()) {
 			Village var2 = (Village)var1.next();
 			var2.tick(this.tickCounter);
 		}
@@ -53,40 +63,48 @@
 		this.removeAnnihilatedVillages();
 		this.dropOldestVillagerPosition();
 		this.addNewDoorsToVillageOrCreateVillage();
-		if(this.tickCounter % 400 == 0) {
+
+		if (this.tickCounter % 400 == 0) {
 			this.markDirty();
 		}
-
 	}
 
 	private void removeAnnihilatedVillages() {
-		Iterator var1 = this.d.iterator();
+		Iterator var1 = this.villageList.iterator();
 
-		while(var1.hasNext()) {
+		while (var1.hasNext()) {
 			Village var2 = (Village)var1.next();
-			if(var2.isAnnihilated()) {
+
+			if (var2.isAnnihilated()) {
 				var1.remove();
 				this.markDirty();
 			}
 		}
-
 	}
 
+	/**
+	 * Get a list of villages.
+	 */
 	public List getVillageList() {
-		return this.d;
+		return this.villageList;
 	}
 
-	public Village findNearestVillage(int var1, int var2, int var3, int var4) {
+	/**
+	 * Finds the nearest village, but only the given coordinates are withing it's bounding box plus the given the distance.
+	 */
+	public Village findNearestVillage(int par1, int par2, int par3, int par4) {
 		Village var5 = null;
 		float var6 = Float.MAX_VALUE;
-		Iterator var7 = this.d.iterator();
+		Iterator var7 = this.villageList.iterator();
 
-		while(var7.hasNext()) {
+		while (var7.hasNext()) {
 			Village var8 = (Village)var7.next();
-			float var9 = var8.getCenter().getDistanceSquared(var1, var2, var3);
-			if(var9 < var6) {
-				float var10 = (float)(var4 + var8.getVillageRadius());
-				if(var9 <= var10 * var10) {
+			float var9 = var8.getCenter().getDistanceSquared(par1, par2, par3);
+
+			if (var9 < var6) {
+				float var10 = (float)(par4 + var8.getVillageRadius());
+
+				if (var9 <= var10 * var10) {
 					var5 = var8;
 					var6 = var9;
 				}
@@ -97,50 +115,60 @@
 	}
 
 	private void dropOldestVillagerPosition() {
-		if(!this.b.isEmpty()) {
-			this.addUnassignedWoodenDoorsAroundToNewDoorsList((ChunkCoordinates)this.b.remove(0));
+		if (!this.villagerPositionsList.isEmpty()) {
+			this.addUnassignedWoodenDoorsAroundToNewDoorsList((ChunkCoordinates)this.villagerPositionsList.remove(0));
 		}
 	}
 
 	private void addNewDoorsToVillageOrCreateVillage() {
-		for(int var1 = 0; var1 < this.c.size(); ++var1) {
-			VillageDoorInfo var2 = (VillageDoorInfo)this.c.get(var1);
+		int var1 = 0;
+
+		while (var1 < this.newDoors.size()) {
+			VillageDoorInfo var2 = (VillageDoorInfo)this.newDoors.get(var1);
 			boolean var3 = false;
-			Iterator var4 = this.d.iterator();
-
-			while(var4.hasNext()) {
-				Village var5 = (Village)var4.next();
-				int var6 = (int)var5.getCenter().getDistanceSquared(var2.posX, var2.posY, var2.posZ);
-				int var7 = 32 + var5.getVillageRadius();
-				if(var6 <= var7 * var7) {
+			Iterator var4 = this.villageList.iterator();
+
+			while (true) {
+				if (var4.hasNext()) {
+					Village var5 = (Village)var4.next();
+					int var6 = (int)var5.getCenter().getDistanceSquared(var2.posX, var2.posY, var2.posZ);
+					int var7 = 32 + var5.getVillageRadius();
+
+					if (var6 > var7 * var7) {
+						continue;
+					}
+
 					var5.addVillageDoorInfo(var2);
 					var3 = true;
-					break;
-				}
-			}
-
-			if(!var3) {
-				Village var8 = new Village(this.worldObj);
-				var8.addVillageDoorInfo(var2);
-				this.d.add(var8);
-				this.markDirty();
+				}
+
+				if (!var3) {
+					Village var8 = new Village(this.worldObj);
+					var8.addVillageDoorInfo(var2);
+					this.villageList.add(var8);
+					this.markDirty();
+				}
+
+				++var1;
+				break;
 			}
 		}
 
-		this.c.clear();
+		this.newDoors.clear();
 	}
 
-	private void addUnassignedWoodenDoorsAroundToNewDoorsList(ChunkCoordinates var1) {
+	private void addUnassignedWoodenDoorsAroundToNewDoorsList(ChunkCoordinates par1ChunkCoordinates) {
 		byte var2 = 16;
 		byte var3 = 4;
 		byte var4 = 16;
 
-		for(int var5 = var1.posX - var2; var5 < var1.posX + var2; ++var5) {
-			for(int var6 = var1.posY - var3; var6 < var1.posY + var3; ++var6) {
-				for(int var7 = var1.posZ - var4; var7 < var1.posZ + var4; ++var7) {
-					if(this.isWoodenDoorAt(var5, var6, var7)) {
+		for (int var5 = par1ChunkCoordinates.posX - var2; var5 < par1ChunkCoordinates.posX + var2; ++var5) {
+			for (int var6 = par1ChunkCoordinates.posY - var3; var6 < par1ChunkCoordinates.posY + var3; ++var6) {
+				for (int var7 = par1ChunkCoordinates.posZ - var4; var7 < par1ChunkCoordinates.posZ + var4; ++var7) {
+					if (this.isWoodenDoorAt(var5, var6, var7)) {
 						VillageDoorInfo var8 = this.getVillageDoorAt(var5, var6, var7);
-						if(var8 == null) {
+
+						if (var8 == null) {
 							this.addDoorToNewListIfAppropriate(var5, var6, var7);
 						} else {
 							var8.lastActivityTimestamp = this.tickCounter;
@@ -149,125 +177,129 @@
 				}
 			}
 		}
-
 	}
 
-	private VillageDoorInfo getVillageDoorAt(int var1, int var2, int var3) {
-		Iterator var4 = this.c.iterator();
-
+	private VillageDoorInfo getVillageDoorAt(int par1, int par2, int par3) {
+		Iterator var4 = this.newDoors.iterator();
 		VillageDoorInfo var5;
-		do {
-			if(!var4.hasNext()) {
-				var4 = this.d.iterator();
 
+		do {
+			if (!var4.hasNext()) {
+				var4 = this.villageList.iterator();
 				VillageDoorInfo var6;
+
 				do {
-					if(!var4.hasNext()) {
+					if (!var4.hasNext()) {
 						return null;
 					}
 
 					Village var7 = (Village)var4.next();
-					var6 = var7.getVillageDoorAt(var1, var2, var3);
-				} while(var6 == null);
+					var6 = var7.getVillageDoorAt(par1, par2, par3);
+				} while (var6 == null);
 
 				return var6;
 			}
 
 			var5 = (VillageDoorInfo)var4.next();
-		} while(var5.posX != var1 || var5.posZ != var3 || Math.abs(var5.posY - var2) > 1);
+		} while (var5.posX != par1 || var5.posZ != par3 || Math.abs(var5.posY - par2) > 1);
 
 		return var5;
 	}
 
-	private void addDoorToNewListIfAppropriate(int var1, int var2, int var3) {
-		int var4 = ((BlockDoor)Block.doorWood).getDoorOrientation(this.worldObj, var1, var2, var3);
+	private void addDoorToNewListIfAppropriate(int par1, int par2, int par3) {
+		int var4 = ((BlockDoor)Block.doorWood).getDoorOrientation(this.worldObj, par1, par2, par3);
 		int var5;
 		int var6;
-		if(var4 != 0 && var4 != 2) {
+
+		if (var4 != 0 && var4 != 2) {
 			var5 = 0;
 
-			for(var6 = -5; var6 < 0; ++var6) {
-				if(this.worldObj.canBlockSeeTheSky(var1, var2, var3 + var6)) {
+			for (var6 = -5; var6 < 0; ++var6) {
+				if (this.worldObj.canBlockSeeTheSky(par1, par2, par3 + var6)) {
 					--var5;
 				}
 			}
 
-			for(var6 = 1; var6 <= 5; ++var6) {
-				if(this.worldObj.canBlockSeeTheSky(var1, var2, var3 + var6)) {
+			for (var6 = 1; var6 <= 5; ++var6) {
+				if (this.worldObj.canBlockSeeTheSky(par1, par2, par3 + var6)) {
 					++var5;
 				}
 			}
 
-			if(var5 != 0) {
-				this.c.add(new VillageDoorInfo(var1, var2, var3, 0, var5 > 0 ? -2 : 2, this.tickCounter));
+			if (var5 != 0) {
+				this.newDoors.add(new VillageDoorInfo(par1, par2, par3, 0, var5 > 0 ? -2 : 2, this.tickCounter));
 			}
 		} else {
 			var5 = 0;
 
-			for(var6 = -5; var6 < 0; ++var6) {
-				if(this.worldObj.canBlockSeeTheSky(var1 + var6, var2, var3)) {
+			for (var6 = -5; var6 < 0; ++var6) {
+				if (this.worldObj.canBlockSeeTheSky(par1 + var6, par2, par3)) {
 					--var5;
 				}
 			}
 
-			for(var6 = 1; var6 <= 5; ++var6) {
-				if(this.worldObj.canBlockSeeTheSky(var1 + var6, var2, var3)) {
+			for (var6 = 1; var6 <= 5; ++var6) {
+				if (this.worldObj.canBlockSeeTheSky(par1 + var6, par2, par3)) {
 					++var5;
 				}
 			}
 
-			if(var5 != 0) {
-				this.c.add(new VillageDoorInfo(var1, var2, var3, var5 > 0 ? -2 : 2, 0, this.tickCounter));
+			if (var5 != 0) {
+				this.newDoors.add(new VillageDoorInfo(par1, par2, par3, var5 > 0 ? -2 : 2, 0, this.tickCounter));
 			}
 		}
-
 	}
 
-	private boolean isVillagerPositionPresent(int var1, int var2, int var3) {
-		Iterator var4 = this.b.iterator();
-
+	private boolean isVillagerPositionPresent(int par1, int par2, int par3) {
+		Iterator var4 = this.villagerPositionsList.iterator();
 		ChunkCoordinates var5;
+
 		do {
-			if(!var4.hasNext()) {
+			if (!var4.hasNext()) {
 				return false;
 			}
 
 			var5 = (ChunkCoordinates)var4.next();
-		} while(var5.posX != var1 || var5.posY != var2 || var5.posZ != var3);
+		} while (var5.posX != par1 || var5.posY != par2 || var5.posZ != par3);
 
 		return true;
 	}
 
-	private boolean isWoodenDoorAt(int var1, int var2, int var3) {
-		int var4 = this.worldObj.getBlockId(var1, var2, var3);
+	private boolean isWoodenDoorAt(int par1, int par2, int par3) {
+		int var4 = this.worldObj.getBlockId(par1, par2, par3);
 		return var4 == Block.doorWood.blockID;
 	}
 
-	public void readFromNBT(NBTTagCompound var1) {
-		this.tickCounter = var1.getInteger("Tick");
-		NBTTagList var2 = var1.getTagList("Villages");
+	/**
+	 * reads in data from the NBTTagCompound into this MapDataBase
+	 */
+	public void readFromNBT(NBTTagCompound par1NBTTagCompound) {
+		this.tickCounter = par1NBTTagCompound.getInteger("Tick");
+		NBTTagList var2 = par1NBTTagCompound.getTagList("Villages");
 
-		for(int var3 = 0; var3 < var2.tagCount(); ++var3) {
+		for (int var3 = 0; var3 < var2.tagCount(); ++var3) {
 			NBTTagCompound var4 = (NBTTagCompound)var2.tagAt(var3);
 			Village var5 = new Village();
 			var5.readVillageDataFromNBT(var4);
-			this.d.add(var5);
+			this.villageList.add(var5);
 		}
-
 	}
 
-	public void writeToNBT(NBTTagCompound var1) {
-		var1.setInteger("Tick", this.tickCounter);
+	/**
+	 * write data to NBTTagCompound from this MapDataBase, similar to Entities and TileEntities
+	 */
+	public void writeToNBT(NBTTagCompound par1NBTTagCompound) {
+		par1NBTTagCompound.setInteger("Tick", this.tickCounter);
 		NBTTagList var2 = new NBTTagList("Villages");
-		Iterator var3 = this.d.iterator();
+		Iterator var3 = this.villageList.iterator();
 
-		while(var3.hasNext()) {
+		while (var3.hasNext()) {
 			Village var4 = (Village)var3.next();
 			NBTTagCompound var5 = new NBTTagCompound("Village");
 			var4.writeVillageDataToNBT(var5);
 			var2.appendTag(var5);
 		}
 
-		var1.setTag("Villages", var2);
+		par1NBTTagCompound.setTag("Villages", var2);
 	}
 }
