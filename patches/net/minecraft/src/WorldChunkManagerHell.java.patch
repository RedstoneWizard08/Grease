--- net/minecraft/src/WorldChunkManagerHell.java
+++ net/minecraft/src/WorldChunkManagerHell.java
@@ -5,65 +5,96 @@
 import java.util.Random;
 
 public class WorldChunkManagerHell extends WorldChunkManager {
-	private BiomeGenBase biomeGenerator;
+
+	/** this is the sole biome to utilize for this world */
+	private BiomeGenBase biomeToUse;
 	private float hellTemperature;
+
+	/** The rainfall in the world */
 	private float rainfall;
 
-	public WorldChunkManagerHell(BiomeGenBase var1, float var2, float var3) {
-		this.biomeGenerator = var1;
-		this.hellTemperature = var2;
-		this.rainfall = var3;
-	}
-
-	public BiomeGenBase getBiomeGenAt(int var1, int var2) {
-		return this.biomeGenerator;
-	}
-
-	public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new BiomeGenBase[var4 * var5];
-		}
-
-		Arrays.fill(var1, 0, var4 * var5, this.biomeGenerator);
-		return var1;
-	}
-
-	public float[] getTemperatures(float[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new float[var4 * var5];
-		}
-
-		Arrays.fill(var1, 0, var4 * var5, this.hellTemperature);
-		return var1;
-	}
-
-	public float[] getRainfall(float[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new float[var4 * var5];
-		}
-
-		Arrays.fill(var1, 0, var4 * var5, this.rainfall);
-		return var1;
-	}
-
-	public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] var1, int var2, int var3, int var4, int var5) {
-		if(var1 == null || var1.length < var4 * var5) {
-			var1 = new BiomeGenBase[var4 * var5];
-		}
-
-		Arrays.fill(var1, 0, var4 * var5, this.biomeGenerator);
-		return var1;
-	}
-
-	public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] var1, int var2, int var3, int var4, int var5, boolean var6) {
-		return this.loadBlockGeneratorData(var1, var2, var3, var4, var5);
-	}
-
-	public ChunkPosition findBiomePosition(int var1, int var2, int var3, List var4, Random var5) {
-		return var4.contains(this.biomeGenerator) ? new ChunkPosition(var1 - var3 + var5.nextInt(var3 * 2 + 1), 0, var2 - var3 + var5.nextInt(var3 * 2 + 1)) : null;
-	}
-
-	public boolean areBiomesViable(int var1, int var2, int var3, List var4) {
-		return var4.contains(this.biomeGenerator);
+	public WorldChunkManagerHell(BiomeGenBase par1BiomeGenBase, float par2, float par3) {
+		this.biomeToUse = par1BiomeGenBase;
+		this.hellTemperature = par2;
+		this.rainfall = par3;
+	}
+
+	/**
+	 * Returns the BiomeGenBase related to the x, z position on the world.
+	 */
+	public BiomeGenBase getBiomeGenAt(int par1, int par2) {
+		return this.biomeToUse;
+	}
+
+	/**
+	 * Returns an array of biomes for the location input.
+	 */
+	public BiomeGenBase[] getBiomesForGeneration(BiomeGenBase[] par1ArrayOfBiomeGenBase, int par2, int par3, int par4, int par5) {
+		if (par1ArrayOfBiomeGenBase == null || par1ArrayOfBiomeGenBase.length < par4 * par5) {
+			par1ArrayOfBiomeGenBase = new BiomeGenBase[par4 * par5];
+		}
+
+		Arrays.fill(par1ArrayOfBiomeGenBase, 0, par4 * par5, this.biomeToUse);
+		return par1ArrayOfBiomeGenBase;
+	}
+
+	/**
+	 * Returns a list of temperatures to use for the specified blocks.  Args: listToReuse, x, y, width, length
+	 */
+	public float[] getTemperatures(float[] par1ArrayOfFloat, int par2, int par3, int par4, int par5) {
+		if (par1ArrayOfFloat == null || par1ArrayOfFloat.length < par4 * par5) {
+			par1ArrayOfFloat = new float[par4 * par5];
+		}
+
+		Arrays.fill(par1ArrayOfFloat, 0, par4 * par5, this.hellTemperature);
+		return par1ArrayOfFloat;
+	}
+
+	/**
+	 * Returns a list of rainfall values for the specified blocks. Args: listToReuse, x, z, width, length.
+	 */
+	public float[] getRainfall(float[] par1ArrayOfFloat, int par2, int par3, int par4, int par5) {
+		if (par1ArrayOfFloat == null || par1ArrayOfFloat.length < par4 * par5) {
+			par1ArrayOfFloat = new float[par4 * par5];
+		}
+
+		Arrays.fill(par1ArrayOfFloat, 0, par4 * par5, this.rainfall);
+		return par1ArrayOfFloat;
+	}
+
+	/**
+	 * Returns biomes to use for the blocks and loads the other data like temperature and humidity onto the
+	 * WorldChunkManager Args: oldBiomeList, x, z, width, depth
+	 */
+	public BiomeGenBase[] loadBlockGeneratorData(BiomeGenBase[] par1ArrayOfBiomeGenBase, int par2, int par3, int par4, int par5) {
+		if (par1ArrayOfBiomeGenBase == null || par1ArrayOfBiomeGenBase.length < par4 * par5) {
+			par1ArrayOfBiomeGenBase = new BiomeGenBase[par4 * par5];
+		}
+
+		Arrays.fill(par1ArrayOfBiomeGenBase, 0, par4 * par5, this.biomeToUse);
+		return par1ArrayOfBiomeGenBase;
+	}
+
+	/**
+	 * Return a list of biomes for the specified blocks. Args: listToReuse, x, y, width, length, cacheFlag (if false, don't
+	 * check biomeCache to avoid infinite loop in BiomeCacheBlock)
+	 */
+	public BiomeGenBase[] getBiomeGenAt(BiomeGenBase[] par1ArrayOfBiomeGenBase, int par2, int par3, int par4, int par5, boolean par6) {
+		return this.loadBlockGeneratorData(par1ArrayOfBiomeGenBase, par2, par3, par4, par5);
+	}
+
+	/**
+	 * Finds a valid position within a range, that is in one of the listed biomes. Searches {par1,par2} +-par3 blocks.
+	 * Strongly favors positive y positions.
+	 */
+	public ChunkPosition findBiomePosition(int par1, int par2, int par3, List par4List, Random par5Random) {
+		return par4List.contains(this.biomeToUse) ? new ChunkPosition(par1 - par3 + par5Random.nextInt(par3 * 2 + 1), 0, par2 - par3 + par5Random.nextInt(par3 * 2 + 1)) : null;
+	}
+
+	/**
+	 * checks given Chunk's Biomes against List of allowed ones
+	 */
+	public boolean areBiomesViable(int par1, int par2, int par3, List par4List) {
+		return par4List.contains(this.biomeToUse);
 	}
 }
