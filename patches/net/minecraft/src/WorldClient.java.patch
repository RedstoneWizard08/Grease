--- net/minecraft/src/WorldClient.java
+++ net/minecraft/src/WorldClient.java
@@ -5,36 +5,60 @@
 import java.util.Random;
 import java.util.Set;
 
+import org.spoutcraft.client.SpoutClient;
+import org.spoutcraft.client.config.Configuration;
+import org.spoutcraft.client.packet.PacketCustomBlockChunkOverride;
+
 public class WorldClient extends World {
+
+	/** The packets that need to be sent to the server. */
 	private NetClientHandler sendQueue;
+
+	/** The ChunkProviderClient instance */
 	private ChunkProviderClient clientChunkProvider;
+
+	/**
+	 * The hash set of entities handled by this client. Uses the entity's ID as the hash set's key.
+	 */
 	private IntHashMap entityHashSet = new IntHashMap();
-	private Set J = new HashSet();
-	private Set K = new HashSet();
+
+	/** Contains all entities for this client, both spawned and non-spawned. */
+	private Set entityList = new HashSet();
+
+	/**
+	 * Contains all entities for this client that were not spawned due to a non-present chunk. The game will attempt to
+	 * spawn up to 10 pending entities with each subsequent tick until the spawn queue is empty.
+	 */
+	private Set entitySpawnQueue = new HashSet();
 	private final Minecraft mc = Minecraft.getMinecraft();
-	private final Set M = new HashSet();
+	private final Set previousActiveChunkSet = new HashSet();
 
-	public WorldClient(NetClientHandler var1, WorldSettings var2, int var3, int var4, Profiler var5, ILogAgent var6) {
-		super(new SaveHandlerMP(), "MpServer", (WorldProvider)WorldProvider.getProviderForDimension(var3), (WorldSettings)var2, var5, var6);
-		this.sendQueue = var1;
-		this.difficultySetting = var4;
+	public WorldClient(NetClientHandler par1NetClientHandler, WorldSettings par2WorldSettings, int par3, int par4, Profiler par5Profiler, ILogAgent par6ILogAgent) {
+		super(new SaveHandlerMP(), "MpServer", WorldProvider.getProviderForDimension(par3), par2WorldSettings, par5Profiler, par6ILogAgent);
+		this.sendQueue = par1NetClientHandler;
+		this.difficultySetting = par4;
 		this.setSpawnLocation(8, 64, 8);
-		this.mapStorage = var1.mapStorage;
+		this.mapStorage = par1NetClientHandler.mapStorage;
 	}
 
+	/**
+	 * Runs a single tick for the world
+	 */
 	public void tick() {
 		super.tick();
 		this.func_82738_a(this.getTotalWorldTime() + 1L);
-		if(this.getGameRules().getGameRuleBooleanValue("doDaylightCycle")) {
+		
+		if (this.getGameRules().getGameRuleBooleanValue("doDaylightCycle")) {
 			this.setWorldTime(this.getWorldTime() + 1L);
 		}
-
+		
 		this.theProfiler.startSection("reEntryProcessing");
 
-		for(int var1 = 0; var1 < 10 && !this.K.isEmpty(); ++var1) {
-			Entity var2 = (Entity)this.K.iterator().next();
-			this.K.remove(var2);
-			if(!this.e.contains(var2)) {
+		for (int var1 = 0; var1 < 10 && !this.entitySpawnQueue.isEmpty(); ++var1) {
+			Entity var2 = (Entity)this.entitySpawnQueue.iterator().next();
+			this.entitySpawnQueue.remove(var2);
+
+			if (!this.loadedEntityList.contains(var2)) {
 				this.spawnEntityInWorld(var2);
 			}
 		}
@@ -48,212 +72,259 @@
 		this.theProfiler.endSection();
 	}
 
-	public void invalidateBlockReceiveRegion(int var1, int var2, int var3, int var4, int var5, int var6) {
-	}
+	/**
+	 * Invalidates an AABB region of blocks from the receive queue, in the event that the block has been modified client-
+	 * side in the intervening 80 receive ticks.
+	 */
+	public void invalidateBlockReceiveRegion(int par1, int par2, int par3, int par4, int par5, int par6) {}
 
+	/**
+	 * Creates the chunk provider for this world. Called in the constructor. Retrieves provider from worldProvider?
+	 */
 	protected IChunkProvider createChunkProvider() {
 		this.clientChunkProvider = new ChunkProviderClient(this);
 		return this.clientChunkProvider;
 	}
 
+	/**
+	 * plays random cave ambient sounds and runs updateTick on random blocks within each chunk in the vacinity of a player
+	 */
 	protected void tickBlocksAndAmbiance() {
 		super.tickBlocksAndAmbiance();
-		this.M.retainAll(this.G);
-		if(this.M.size() == this.G.size()) {
-			this.M.clear();
+		this.previousActiveChunkSet.retainAll(this.activeChunkSet);
+
+		if (this.previousActiveChunkSet.size() == this.activeChunkSet.size()) {
+			this.previousActiveChunkSet.clear();
 		}
 
 		int var1 = 0;
-		Iterator var2 = this.G.iterator();
+		Iterator var2 = this.activeChunkSet.iterator();
 
-		while(var2.hasNext()) {
+		while (var2.hasNext()) {
 			ChunkCoordIntPair var3 = (ChunkCoordIntPair)var2.next();
-			if(!this.M.contains(var3)) {
+
+			if (!this.previousActiveChunkSet.contains(var3)) {
 				int var4 = var3.chunkXPos * 16;
 				int var5 = var3.chunkZPos * 16;
 				this.theProfiler.startSection("getChunk");
 				Chunk var6 = this.getChunkFromChunkCoords(var3.chunkXPos, var3.chunkZPos);
 				this.moodSoundAndLightCheck(var4, var5, var6);
 				this.theProfiler.endSection();
-				this.M.add(var3);
+				this.previousActiveChunkSet.add(var3);
 				++var1;
-				if(var1 >= 10) {
+
+				if (var1 >= 10) {
 					return;
 				}
 			}
 		}
-
 	}
 
-	public void doPreChunk(int var1, int var2, boolean var3) {
-		if(var3) {
-			this.clientChunkProvider.loadChunk(var1, var2);
+	public void doPreChunk(int par1, int par2, boolean par3) {
+		if (par3) {
+			this.clientChunkProvider.loadChunk(par1, par2);
+			// Spout Start
+			SpoutClient.getInstance().getPacketManager().sendSpoutPacket(new PacketCustomBlockChunkOverride(par1, par2));
+			// Spout End
 		} else {
-			this.clientChunkProvider.unloadChunk(var1, var2);
-		}
-
-		if(!var3) {
-			this.markBlockRangeForRenderUpdate(var1 * 16, 0, var2 * 16, var1 * 16 + 15, 256, var2 * 16 + 15);
-		}
-
+			this.clientChunkProvider.unloadChunk(par1, par2);
+		}
+
+		if (!par3) {
+			this.markBlockRangeForRenderUpdate(par1 * 16, 0, par2 * 16, par1 * 16 + 15, 256, par2 * 16 + 15);
+		}
 	}
 
-	public boolean spawnEntityInWorld(Entity var1) {
-		boolean var2 = super.spawnEntityInWorld(var1);
-		this.J.add(var1);
-		if(!var2) {
-			this.K.add(var1);
+	/**
+	 * Called to place all entities as part of a world
+	 */
+	public boolean spawnEntityInWorld(Entity par1Entity) {
+		boolean var2 = super.spawnEntityInWorld(par1Entity);
+		this.entityList.add(par1Entity);
+
+		if (!var2) {
+			this.entitySpawnQueue.add(par1Entity);
 		}
 
 		return var2;
 	}
 
-	public void removeEntity(Entity var1) {
-		super.removeEntity(var1);
-		this.J.remove(var1);
+	/**
+	 * Schedule the entity for removal during the next tick. Marks the entity dead in anticipation.
+	 */
+	public void removeEntity(Entity par1Entity) {
+		super.removeEntity(par1Entity);
+		this.entityList.remove(par1Entity);
 	}
 
-	protected void onEntityAdded(Entity var1) {
-		super.onEntityAdded(var1);
-		if(this.K.contains(var1)) {
-			this.K.remove(var1);
+	//ToDo: was Spoutcraft obtainEntitySkin
+	protected void onEntityAdded(Entity par1Entity) {
+		super.onEntityAdded(par1Entity);
+
+		if (this.entitySpawnQueue.contains(par1Entity)) {
+			this.entitySpawnQueue.remove(par1Entity);
 		}
-
 	}
 
-	protected void onEntityRemoved(Entity var1) {
-		super.onEntityRemoved(var1);
-		if(this.J.contains(var1)) {
-			if(var1.isEntityAlive()) {
-				this.K.add(var1);
+	//ToDO: was Spoutcraft releaseEntitySkin
+	protected void onEntityRemoved(Entity par1Entity) {
+		super.onEntityRemoved(par1Entity);
+
+		if (this.entityList.contains(par1Entity)) {
+			if (par1Entity.isEntityAlive()) {
+				this.entitySpawnQueue.add(par1Entity);
 			} else {
-				this.J.remove(var1);
+				this.entityList.remove(par1Entity);
 			}
 		}
-
 	}
 
-	public void addEntityToWorld(int var1, Entity var2) {
-		Entity var3 = this.getEntityByID(var1);
-		if(var3 != null) {
+
+	/**
+	 * Add an ID to Entity mapping to entityHashSet
+	 */
+	public void addEntityToWorld(int par1, Entity par2Entity) {
+		Entity var3 = this.getEntityByID(par1);
+
+		if (var3 != null) {
 			this.removeEntity(var3);
 		}
 
-		this.J.add(var2);
-		var2.entityId = var1;
-		if(!this.spawnEntityInWorld(var2)) {
-			this.K.add(var2);
+		this.entityList.add(par2Entity);
+		par2Entity.entityId = par1;
+
+		if (!this.spawnEntityInWorld(par2Entity)) {
+			this.entitySpawnQueue.add(par2Entity);
 		}
 
-		this.entityHashSet.addKey(var1, var2);
-	}
-
-	public Entity getEntityByID(int var1) {
-		return (Entity)(var1 == this.mc.thePlayer.entityId ? this.mc.thePlayer : (Entity)this.entityHashSet.lookup(var1));
-	}
-
-	public Entity removeEntityFromWorld(int var1) {
-		Entity var2 = (Entity)this.entityHashSet.removeObject(var1);
-		if(var2 != null) {
-			this.J.remove(var2);
+		this.entityHashSet.addKey(par1, par2Entity);
+	}
+
+	/**
+	 * Returns the Entity with the given ID, or null if it doesn't exist in this World.
+	 */
+	public Entity getEntityByID(int par1) {
+		return (Entity)(par1 == this.mc.thePlayer.entityId ? this.mc.thePlayer : (Entity)this.entityHashSet.lookup(par1));
+	}
+
+	public Entity removeEntityFromWorld(int par1) {
+		Entity var2 = (Entity)this.entityHashSet.removeObject(par1);
+
+		if (var2 != null) {
+			this.entityList.remove(var2);
 			this.removeEntity(var2);
 		}
 
 		return var2;
 	}
 
-	public boolean setBlockAndMetadataAndInvalidate(int var1, int var2, int var3, int var4, int var5) {
-		this.invalidateBlockReceiveRegion(var1, var2, var3, var1, var2, var3);
-		return super.setBlock(var1, var2, var3, var4, var5, 3);
+	public boolean setBlockAndMetadataAndInvalidate(int par1, int par2, int par3, int par4, int par5) {
+		this.invalidateBlockReceiveRegion(par1, par2, par3, par1, par2, par3);
+		return super.setBlock(par1, par2, par3, par4, par5, 3);
 	}
 
+	/**
+	 * If on MP, sends a quitting packet.
+	 */
 	public void sendQuittingDisconnectingPacket() {
 		this.sendQueue.quitWithPacket(new Packet255KickDisconnect("Quitting"));
 	}
 
-	public IUpdatePlayerListBox getMinecartSoundUpdater(EntityMinecart var1) {
-		return new SoundUpdaterMinecart(this.mc.sndManager, var1, this.mc.thePlayer);
+	public IUpdatePlayerListBox getMinecartSoundUpdater(EntityMinecart par1EntityMinecart) {
+		return new SoundUpdaterMinecart(this.mc.sndManager, par1EntityMinecart, this.mc.thePlayer);
 	}
 
+	/**
+	 * Updates all weather states.
+	 */
 	protected void updateWeather() {
-		if(!this.provider.hasNoSky) {
+		if (!this.provider.hasNoSky) {
 			this.prevRainingStrength = this.rainingStrength;
-			if(this.worldInfo.isRaining()) {
+
+			if (this.worldInfo.isRaining()) {
 				this.rainingStrength = (float)((double)this.rainingStrength + 0.01D);
 			} else {
 				this.rainingStrength = (float)((double)this.rainingStrength - 0.01D);
 			}
 
-			if(this.rainingStrength < 0.0F) {
+			if (this.rainingStrength < 0.0F) {
 				this.rainingStrength = 0.0F;
 			}
 
-			if(this.rainingStrength > 1.0F) {
+			if (this.rainingStrength > 1.0F) {
 				this.rainingStrength = 1.0F;
 			}
 
 			this.prevThunderingStrength = this.thunderingStrength;
-			if(this.worldInfo.isThundering()) {
+
+			if (this.worldInfo.isThundering()) {
 				this.thunderingStrength = (float)((double)this.thunderingStrength + 0.01D);
 			} else {
 				this.thunderingStrength = (float)((double)this.thunderingStrength - 0.01D);
 			}
 
-			if(this.thunderingStrength < 0.0F) {
+			if (this.thunderingStrength < 0.0F) {
 				this.thunderingStrength = 0.0F;
 			}
 
-			if(this.thunderingStrength > 1.0F) {
+			if (this.thunderingStrength > 1.0F) {
 				this.thunderingStrength = 1.0F;
 			}
-
 		}
 	}
 
-	public void doVoidFogParticles(int var1, int var2, int var3) {
+	public void doVoidFogParticles(int par1, int par2, int par3) {
 		byte var4 = 16;
 		Random var5 = new Random();
 
-		for(int var6 = 0; var6 < 1000; ++var6) {
-			int var7 = var1 + this.s.nextInt(var4) - this.s.nextInt(var4);
-			int var8 = var2 + this.s.nextInt(var4) - this.s.nextInt(var4);
-			int var9 = var3 + this.s.nextInt(var4) - this.s.nextInt(var4);
+		// Spout Start
+		int num = Configuration.isFancyParticles() ? 1000 : 250;
+		for (int var6 = 0; var6 < num; ++var6) {
+		// Spout End
+			int var7 = par1 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
+			int var8 = par2 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
+			int var9 = par3 + this.rand.nextInt(var4) - this.rand.nextInt(var4);
 			int var10 = this.getBlockId(var7, var8, var9);
-			if(var10 == 0 && this.s.nextInt(8) > var8 && this.provider.getWorldHasVoidParticles()) {
-				this.spawnParticle("depthsuspend", (double)((float)var7 + this.s.nextFloat()), (double)((float)var8 + this.s.nextFloat()), (double)((float)var9 + this.s.nextFloat()), 0.0D, 0.0D, 0.0D);
-			} else if(var10 > 0) {
+
+			if (var10 == 0 && this.rand.nextInt(8) > var8 && this.provider.getWorldHasVoidParticles()) {
+				this.spawnParticle("depthsuspend", (double)((float)var7 + this.rand.nextFloat()), (double)((float)var8 + this.rand.nextFloat()), (double)((float)var9 + this.rand.nextFloat()), 0.0D, 0.0D, 0.0D);
+			} else if (var10 > 0) {
 				Block.blocksList[var10].randomDisplayTick(this, var7, var8, var9, var5);
 			}
 		}
-
 	}
 
+	/**
+	 * also releases skins.
+	 */
 	public void removeAllEntities() {
-		this.e.removeAll(this.f);
-
+		this.loadedEntityList.removeAll(this.unloadedEntityList);
 		int var1;
 		Entity var2;
 		int var3;
 		int var4;
-		for(var1 = 0; var1 < this.f.size(); ++var1) {
-			var2 = (Entity)this.f.get(var1);
+
+		for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
+			var2 = (Entity)this.unloadedEntityList.get(var1);
 			var3 = var2.chunkCoordX;
 			var4 = var2.chunkCoordZ;
-			if(var2.addedToChunk && this.chunkExists(var3, var4)) {
+
+			if (var2.addedToChunk && this.chunkExists(var3, var4)) {
 				this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
 			}
 		}
 
-		for(var1 = 0; var1 < this.f.size(); ++var1) {
-			this.onEntityRemoved((Entity)this.f.get(var1));
+		for (var1 = 0; var1 < this.unloadedEntityList.size(); ++var1) {
+			this.onEntityRemoved((Entity)this.unloadedEntityList.get(var1));
 		}
 
-		this.f.clear();
-
-		for(var1 = 0; var1 < this.e.size(); ++var1) {
-			var2 = (Entity)this.e.get(var1);
-			if(var2.ridingEntity != null) {
-				if(!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
+		this.unloadedEntityList.clear();
+
+		for (var1 = 0; var1 < this.loadedEntityList.size(); ++var1) {
+			var2 = (Entity)this.loadedEntityList.get(var1);
+
+			if (var2.ridingEntity != null) {
+				if (!var2.ridingEntity.isDead && var2.ridingEntity.riddenByEntity == var2) {
 					continue;
 				}
 
@@ -261,22 +332,25 @@
 				var2.ridingEntity = null;
 			}
 
-			if(var2.isDead) {
+			if (var2.isDead) {
 				var3 = var2.chunkCoordX;
 				var4 = var2.chunkCoordZ;
-				if(var2.addedToChunk && this.chunkExists(var3, var4)) {
+
+				if (var2.addedToChunk && this.chunkExists(var3, var4)) {
 					this.getChunkFromChunkCoords(var3, var4).removeEntity(var2);
 				}
 
-				this.e.remove(var1--);
+				this.loadedEntityList.remove(var1--);
 				this.onEntityRemoved(var2);
 			}
 		}
-
 	}
 
-	public CrashReportCategory addWorldInfoToCrashReport(CrashReport var1) {
-		CrashReportCategory var2 = super.addWorldInfoToCrashReport(var1);
+	/**
+	 * Adds some basic stats of the world to the given crash report.
+	 */
+	public CrashReportCategory addWorldInfoToCrashReport(CrashReport par1CrashReport) {
+		CrashReportCategory var2 = super.addWorldInfoToCrashReport(par1CrashReport);
 		var2.addCrashSectionCallable("Forced entities", new CallableMPL1(this));
 		var2.addCrashSectionCallable("Retry entities", new CallableMPL2(this));
 		var2.addCrashSectionCallable("Server brand", new WorldClientINNER3(this));
@@ -284,52 +358,59 @@
 		return var2;
 	}
 
-	public void playSound(double var1, double var3, double var5, String var7, float var8, float var9, boolean var10) {
+	/**
+	 * par8 is loudness, all pars passed to minecraftInstance.sndManager.playSound
+	 */
+	public void playSound(double par1, double par3, double par5, String par7Str, float par8, float par9, boolean par10) {
 		float var11 = 16.0F;
-		if(var8 > 1.0F) {
-			var11 *= var8;
+
+		if (par8 > 1.0F) {
+			var11 *= par8;
 		}
 
-		double var12 = this.mc.renderViewEntity.getDistanceSq(var1, var3, var5);
-		if(var12 < (double)(var11 * var11)) {
-			if(var10 && var12 > 100.0D) {
+		double var12 = this.mc.renderViewEntity.getDistanceSq(par1, par3, par5);
+
+		if (var12 < (double)(var11 * var11)) {
+			if (par10 && var12 > 100.0D) {
 				double var14 = Math.sqrt(var12) / 40.0D;
-				this.mc.sndManager.func_92070_a(var7, (float)var1, (float)var3, (float)var5, var8, var9, (int)Math.round(var14 * 20.0D));
+				this.mc.sndManager.func_92070_a(par7Str, (float)par1, (float)par3, (float)par5, par8, par9, (int)Math.round(var14 * 20.0D));
 			} else {
-				this.mc.sndManager.playSound(var7, (float)var1, (float)var3, (float)var5, var8, var9);
+				this.mc.sndManager.playSound(par7Str, (float)par1, (float)par3, (float)par5, par8, par9);
 			}
 		}
-
-	}
-
-	public void func_92088_a(double var1, double var3, double var5, double var7, double var9, double var11, NBTTagCompound var13) {
-		this.mc.effectRenderer.addEffect(new EntityFireworkStarterFX(this, var1, var3, var5, var7, var9, var11, this.mc.effectRenderer, var13));
-	}
-
-	public void func_96443_a(Scoreboard var1) {
-		this.worldScoreboard = var1;
-	}
-
-	public void setWorldTime(long var1) {
-		if(var1 < 0L) {
-			var1 = -var1;
+	}
+
+	public void func_92088_a(double par1, double par3, double par5, double par7, double par9, double par11, NBTTagCompound par13NBTTagCompound) {
+		this.mc.effectRenderer.addEffect(new EntityFireworkStarterFX(this, par1, par3, par5, par7, par9, par11, this.mc.effectRenderer, par13NBTTagCompound));
+	}
+
+	public void func_96443_a(Scoreboard par1Scoreboard) {
+		this.worldScoreboard = par1Scoreboard;
+	}
+
+	/**
+	 * Sets the world time.
+	 */
+	public void setWorldTime(long par1) {
+		if (par1 < 0L) {
+			par1 = -par1;
 			this.getGameRules().setOrCreateGameRule("doDaylightCycle", "false");
 		} else {
 			this.getGameRules().setOrCreateGameRule("doDaylightCycle", "true");
 		}
 
-		super.setWorldTime(var1);
-	}
-
-	static Set getEntityList(WorldClient var0) {
-		return var0.J;
-	}
-
-	static Set getEntitySpawnQueue(WorldClient var0) {
-		return var0.K;
-	}
-
-	static Minecraft func_142030_c(WorldClient var0) {
-		return var0.mc;
+		super.setWorldTime(par1);
+	}
+	
+	static Set getEntityList(WorldClient par0WorldClient) {
+		return par0WorldClient.entityList;
+	}
+
+	static Set getEntitySpawnQueue(WorldClient par0WorldClient) {
+		return par0WorldClient.entitySpawnQueue;
+	}
+	
+	static Minecraft func_142030_c(WorldClient par0WorldClient) {
+		return par0WorldClient.mc;
 	}
 }
