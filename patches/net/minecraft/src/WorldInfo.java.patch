--- net/minecraft/src/WorldInfo.java
+++ net/minecraft/src/WorldInfo.java
@@ -3,197 +3,268 @@
 import net.minecraft.server.MinecraftServer;
 
 public class WorldInfo {
+
+	/** Holds the seed of the currently world. */
 	private long randomSeed;
-	private WorldType terrainType = WorldType.DEFAULT;
-	private String c = "";
+	private WorldType terrainType;
+	private String generatorOptions;
+
+	/** The spawn zone position X coordinate. */
 	private int spawnX;
+
+	/** The spawn zone position Y coordinate. */
 	private int spawnY;
+
+	/** The spawn zone position Z coordinate. */
 	private int spawnZ;
+
+	/** Total time for this world. */
 	private long totalTime;
+
+	/** The current world time in ticks, ranging from 0 to 23999. */
 	private long worldTime;
+
+	/** The last time the player was in this world. */
 	private long lastTimePlayed;
+
+	/** The size of entire save of current world on the disk, isn't exactly. */
 	private long sizeOnDisk;
 	private NBTTagCompound playerTag;
 	private int dimension;
-	private String m;
+
+	/** The name of the save defined at world creation. */
+	private String levelName;
+
+	/** Introduced in beta 1.3, is the save version for future control. */
 	private int saveVersion;
+
+	/** True if it's raining, false otherwise. */
 	private boolean raining;
+
+	/** Number of ticks until next rain. */
 	private int rainTime;
+
+	/** Is thunderbolts failing now? */
 	private boolean thundering;
+
+	/** Number of ticks untils next thunderbolt. */
 	private int thunderTime;
+
+	/** The Game Type. */
 	private EnumGameType theGameType;
+
+	/**
+	 * Whether the map features (e.g. strongholds) generation is enabled or disabled.
+	 */
 	private boolean mapFeaturesEnabled;
+
+	/** Hardcore mode flag */
 	private boolean hardcore;
 	private boolean allowCommands;
 	private boolean initialized;
-	private GameRules theGameRules = new GameRules();
+	private GameRules theGameRules;
 
 	protected WorldInfo() {
+		this.terrainType = WorldType.DEFAULT;
+		this.generatorOptions = "";
+		this.theGameRules = new GameRules();
 	}
 
-	public WorldInfo(NBTTagCompound var1) {
-		this.randomSeed = var1.getLong("RandomSeed");
-		if(var1.hasKey("generatorName")) {
-			String var2 = var1.getString("generatorName");
+	public WorldInfo(NBTTagCompound par1NBTTagCompound) {
+		this.terrainType = WorldType.DEFAULT;
+		this.generatorOptions = "";
+		this.theGameRules = new GameRules();
+		this.randomSeed = par1NBTTagCompound.getLong("RandomSeed");
+
+		if (par1NBTTagCompound.hasKey("generatorName")) {
+			String var2 = par1NBTTagCompound.getString("generatorName");
 			this.terrainType = WorldType.parseWorldType(var2);
-			if(this.terrainType == null) {
+
+			if (this.terrainType == null) {
 				this.terrainType = WorldType.DEFAULT;
-			} else if(this.terrainType.isVersioned()) {
+			} else if (this.terrainType.isVersioned()) {
 				int var3 = 0;
-				if(var1.hasKey("generatorVersion")) {
-					var3 = var1.getInteger("generatorVersion");
+
+				if (par1NBTTagCompound.hasKey("generatorVersion")) {
+					var3 = par1NBTTagCompound.getInteger("generatorVersion");
 				}
 
 				this.terrainType = this.terrainType.getWorldTypeForGeneratorVersion(var3);
 			}
 
-			if(var1.hasKey("generatorOptions")) {
-				this.c = var1.getString("generatorOptions");
+			if (par1NBTTagCompound.hasKey("generatorOptions")) {
+				this.generatorOptions = par1NBTTagCompound.getString("generatorOptions");
 			}
 		}
 
-		this.theGameType = EnumGameType.getByID(var1.getInteger("GameType"));
-		if(var1.hasKey("MapFeatures")) {
-			this.mapFeaturesEnabled = var1.getBoolean("MapFeatures");
+		this.theGameType = EnumGameType.getByID(par1NBTTagCompound.getInteger("GameType"));
+
+		if (par1NBTTagCompound.hasKey("MapFeatures")) {
+			this.mapFeaturesEnabled = par1NBTTagCompound.getBoolean("MapFeatures");
 		} else {
 			this.mapFeaturesEnabled = true;
 		}
 
-		this.spawnX = var1.getInteger("SpawnX");
-		this.spawnY = var1.getInteger("SpawnY");
-		this.spawnZ = var1.getInteger("SpawnZ");
-		this.totalTime = var1.getLong("Time");
-		if(var1.hasKey("DayTime")) {
-			this.worldTime = var1.getLong("DayTime");
+		this.spawnX = par1NBTTagCompound.getInteger("SpawnX");
+		this.spawnY = par1NBTTagCompound.getInteger("SpawnY");
+		this.spawnZ = par1NBTTagCompound.getInteger("SpawnZ");
+		this.totalTime = par1NBTTagCompound.getLong("Time");
+
+		if (par1NBTTagCompound.hasKey("DayTime")) {
+			this.worldTime = par1NBTTagCompound.getLong("DayTime");
 		} else {
 			this.worldTime = this.totalTime;
 		}
 
-		this.lastTimePlayed = var1.getLong("LastPlayed");
-		this.sizeOnDisk = var1.getLong("SizeOnDisk");
-		this.m = var1.getString("LevelName");
-		this.saveVersion = var1.getInteger("version");
-		this.rainTime = var1.getInteger("rainTime");
-		this.raining = var1.getBoolean("raining");
-		this.thunderTime = var1.getInteger("thunderTime");
-		this.thundering = var1.getBoolean("thundering");
-		this.hardcore = var1.getBoolean("hardcore");
-		if(var1.hasKey("initialized")) {
-			this.initialized = var1.getBoolean("initialized");
+		this.lastTimePlayed = par1NBTTagCompound.getLong("LastPlayed");
+		this.sizeOnDisk = par1NBTTagCompound.getLong("SizeOnDisk");
+		this.levelName = par1NBTTagCompound.getString("LevelName");
+		this.saveVersion = par1NBTTagCompound.getInteger("version");
+		this.rainTime = par1NBTTagCompound.getInteger("rainTime");
+		this.raining = par1NBTTagCompound.getBoolean("raining");
+		this.thunderTime = par1NBTTagCompound.getInteger("thunderTime");
+		this.thundering = par1NBTTagCompound.getBoolean("thundering");
+		this.hardcore = par1NBTTagCompound.getBoolean("hardcore");
+
+		if (par1NBTTagCompound.hasKey("initialized")) {
+			this.initialized = par1NBTTagCompound.getBoolean("initialized");
 		} else {
 			this.initialized = true;
 		}
 
-		if(var1.hasKey("allowCommands")) {
-			this.allowCommands = var1.getBoolean("allowCommands");
+		if (par1NBTTagCompound.hasKey("allowCommands")) {
+			this.allowCommands = par1NBTTagCompound.getBoolean("allowCommands");
 		} else {
 			this.allowCommands = this.theGameType == EnumGameType.CREATIVE;
 		}
 
-		if(var1.hasKey("Player")) {
-			this.playerTag = var1.getCompoundTag("Player");
+		if (par1NBTTagCompound.hasKey("Player")) {
+			this.playerTag = par1NBTTagCompound.getCompoundTag("Player");
 			this.dimension = this.playerTag.getInteger("Dimension");
 		}
 
-		if(var1.hasKey("GameRules")) {
-			this.theGameRules.readGameRulesFromNBT(var1.getCompoundTag("GameRules"));
+		if (par1NBTTagCompound.hasKey("GameRules")) {
+			this.theGameRules.readGameRulesFromNBT(par1NBTTagCompound.getCompoundTag("GameRules"));
 		}
-
 	}
 
-	public WorldInfo(WorldSettings var1, String var2) {
-		this.randomSeed = var1.getSeed();
-		this.theGameType = var1.getGameType();
-		this.mapFeaturesEnabled = var1.isMapFeaturesEnabled();
-		this.m = var2;
-		this.hardcore = var1.getHardcoreEnabled();
-		this.terrainType = var1.getTerrainType();
-		this.c = var1.func_82749_j();
-		this.allowCommands = var1.areCommandsAllowed();
+	public WorldInfo(WorldSettings par1WorldSettings, String par2Str) {
+		this.terrainType = WorldType.DEFAULT;
+		this.generatorOptions = "";
+		this.theGameRules = new GameRules();
+		this.randomSeed = par1WorldSettings.getSeed();
+		this.theGameType = par1WorldSettings.getGameType();
+		this.mapFeaturesEnabled = par1WorldSettings.isMapFeaturesEnabled();
+		this.levelName = par2Str;
+		this.hardcore = par1WorldSettings.getHardcoreEnabled();
+		this.terrainType = par1WorldSettings.getTerrainType();
+		this.generatorOptions = par1WorldSettings.func_82749_j();
+		this.allowCommands = par1WorldSettings.areCommandsAllowed();
 		this.initialized = false;
 	}
 
-	public WorldInfo(WorldInfo var1) {
-		this.randomSeed = var1.randomSeed;
-		this.terrainType = var1.terrainType;
-		this.c = var1.c;
-		this.theGameType = var1.theGameType;
-		this.mapFeaturesEnabled = var1.mapFeaturesEnabled;
-		this.spawnX = var1.spawnX;
-		this.spawnY = var1.spawnY;
-		this.spawnZ = var1.spawnZ;
-		this.totalTime = var1.totalTime;
-		this.worldTime = var1.worldTime;
-		this.lastTimePlayed = var1.lastTimePlayed;
-		this.sizeOnDisk = var1.sizeOnDisk;
-		this.playerTag = var1.playerTag;
-		this.dimension = var1.dimension;
-		this.m = var1.m;
-		this.saveVersion = var1.saveVersion;
-		this.rainTime = var1.rainTime;
-		this.raining = var1.raining;
-		this.thunderTime = var1.thunderTime;
-		this.thundering = var1.thundering;
-		this.hardcore = var1.hardcore;
-		this.allowCommands = var1.allowCommands;
-		this.initialized = var1.initialized;
-		this.theGameRules = var1.theGameRules;
+	public WorldInfo(WorldInfo par1WorldInfo) {
+		this.terrainType = WorldType.DEFAULT;
+		this.generatorOptions = "";
+		this.theGameRules = new GameRules();
+		this.randomSeed = par1WorldInfo.randomSeed;
+		this.terrainType = par1WorldInfo.terrainType;
+		this.generatorOptions = par1WorldInfo.generatorOptions;
+		this.theGameType = par1WorldInfo.theGameType;
+		this.mapFeaturesEnabled = par1WorldInfo.mapFeaturesEnabled;
+		this.spawnX = par1WorldInfo.spawnX;
+		this.spawnY = par1WorldInfo.spawnY;
+		this.spawnZ = par1WorldInfo.spawnZ;
+		this.totalTime = par1WorldInfo.totalTime;
+		this.worldTime = par1WorldInfo.worldTime;
+		this.lastTimePlayed = par1WorldInfo.lastTimePlayed;
+		this.sizeOnDisk = par1WorldInfo.sizeOnDisk;
+		this.playerTag = par1WorldInfo.playerTag;
+		this.dimension = par1WorldInfo.dimension;
+		this.levelName = par1WorldInfo.levelName;
+		this.saveVersion = par1WorldInfo.saveVersion;
+		this.rainTime = par1WorldInfo.rainTime;
+		this.raining = par1WorldInfo.raining;
+		this.thunderTime = par1WorldInfo.thunderTime;
+		this.thundering = par1WorldInfo.thundering;
+		this.hardcore = par1WorldInfo.hardcore;
+		this.allowCommands = par1WorldInfo.allowCommands;
+		this.initialized = par1WorldInfo.initialized;
+		this.theGameRules = par1WorldInfo.theGameRules;
 	}
 
+	/**
+	 * Gets the NBTTagCompound for the worldInfo
+	 */
 	public NBTTagCompound getNBTTagCompound() {
 		NBTTagCompound var1 = new NBTTagCompound();
 		this.updateTagCompound(var1, this.playerTag);
 		return var1;
 	}
 
-	public NBTTagCompound cloneNBTCompound(NBTTagCompound var1) {
+	/**
+	 * Creates a new NBTTagCompound for the world, with the given NBTTag as the "Player"
+	 */
+	public NBTTagCompound cloneNBTCompound(NBTTagCompound par1NBTTagCompound) {
 		NBTTagCompound var2 = new NBTTagCompound();
-		this.updateTagCompound(var2, var1);
+		this.updateTagCompound(var2, par1NBTTagCompound);
 		return var2;
 	}
 
-	private void updateTagCompound(NBTTagCompound var1, NBTTagCompound var2) {
-		var1.setLong("RandomSeed", this.randomSeed);
-		var1.setString("generatorName", this.terrainType.getWorldTypeName());
-		var1.setInteger("generatorVersion", this.terrainType.getGeneratorVersion());
-		var1.setString("generatorOptions", this.c);
-		var1.setInteger("GameType", this.theGameType.getID());
-		var1.setBoolean("MapFeatures", this.mapFeaturesEnabled);
-		var1.setInteger("SpawnX", this.spawnX);
-		var1.setInteger("SpawnY", this.spawnY);
-		var1.setInteger("SpawnZ", this.spawnZ);
-		var1.setLong("Time", this.totalTime);
-		var1.setLong("DayTime", this.worldTime);
-		var1.setLong("SizeOnDisk", this.sizeOnDisk);
-		var1.setLong("LastPlayed", MinecraftServer.getCurrentTimeMillis());
-		var1.setString("LevelName", this.m);
-		var1.setInteger("version", this.saveVersion);
-		var1.setInteger("rainTime", this.rainTime);
-		var1.setBoolean("raining", this.raining);
-		var1.setInteger("thunderTime", this.thunderTime);
-		var1.setBoolean("thundering", this.thundering);
-		var1.setBoolean("hardcore", this.hardcore);
-		var1.setBoolean("allowCommands", this.allowCommands);
-		var1.setBoolean("initialized", this.initialized);
-		var1.setCompoundTag("GameRules", this.theGameRules.writeGameRulesToNBT());
-		if(var2 != null) {
-			var1.setCompoundTag("Player", var2);
+	private void updateTagCompound(NBTTagCompound par1NBTTagCompound, NBTTagCompound par2NBTTagCompound) {
+		par1NBTTagCompound.setLong("RandomSeed", this.randomSeed);
+		par1NBTTagCompound.setString("generatorName", this.terrainType.getWorldTypeName());
+		par1NBTTagCompound.setInteger("generatorVersion", this.terrainType.getGeneratorVersion());
+		par1NBTTagCompound.setString("generatorOptions", this.generatorOptions);
+		par1NBTTagCompound.setInteger("GameType", this.theGameType.getID());
+		par1NBTTagCompound.setBoolean("MapFeatures", this.mapFeaturesEnabled);
+		par1NBTTagCompound.setInteger("SpawnX", this.spawnX);
+		par1NBTTagCompound.setInteger("SpawnY", this.spawnY);
+		par1NBTTagCompound.setInteger("SpawnZ", this.spawnZ);
+		par1NBTTagCompound.setLong("Time", this.totalTime);
+		par1NBTTagCompound.setLong("DayTime", this.worldTime);
+		par1NBTTagCompound.setLong("SizeOnDisk", this.sizeOnDisk);
+		par1NBTTagCompound.setLong("LastPlayed", MinecraftServer.getSystemTimeMillis());
+		par1NBTTagCompound.setString("LevelName", this.levelName);
+		par1NBTTagCompound.setInteger("version", this.saveVersion);
+		par1NBTTagCompound.setInteger("rainTime", this.rainTime);
+		par1NBTTagCompound.setBoolean("raining", this.raining);
+		par1NBTTagCompound.setInteger("thunderTime", this.thunderTime);
+		par1NBTTagCompound.setBoolean("thundering", this.thundering);
+		par1NBTTagCompound.setBoolean("hardcore", this.hardcore);
+		par1NBTTagCompound.setBoolean("allowCommands", this.allowCommands);
+		par1NBTTagCompound.setBoolean("initialized", this.initialized);
+		par1NBTTagCompound.setCompoundTag("GameRules", this.theGameRules.writeGameRulesToNBT());
+
+		if (par2NBTTagCompound != null) {
+			par1NBTTagCompound.setCompoundTag("Player", par2NBTTagCompound);
 		}
-
 	}
 
+	/**
+	 * Returns the seed of current world.
+	 */
 	public long getSeed() {
 		return this.randomSeed;
 	}
 
+	/**
+	 * Returns the x spawn position
+	 */
 	public int getSpawnX() {
 		return this.spawnX;
 	}
 
+	/**
+	 * Return the Y axis spawning point of the player.
+	 */
 	public int getSpawnY() {
 		return this.spawnY;
 	}
 
+	/**
+	 * Returns the z spawn position
+	 */
 	public int getSpawnZ() {
 		return this.spawnZ;
 	}
@@ -202,6 +273,9 @@
 		return this.totalTime;
 	}
 
+	/**
+	 * Get current world time
+	 */
 	public long getWorldTime() {
 		return this.worldTime;
 	}
@@ -210,104 +284,174 @@
 		return this.sizeOnDisk;
 	}
 
+	/**
+	 * Returns the player's NBTTagCompound to be loaded
+	 */
 	public NBTTagCompound getPlayerNBTTagCompound() {
 		return this.playerTag;
 	}
 
-	public int getDimension() {
+	/**
+	 * Returns vanilla MC dimension (-1,0,1). For custom dimension compatibility, always prefer WorldProvider.dimensionID
+	 * accessed from World.provider.dimensionID
+	 */
+	public int getVanillaDimension() {
 		return this.dimension;
 	}
 
-	public void setSpawnX(int var1) {
-		this.spawnX = var1;
-	}
-
-	public void setSpawnY(int var1) {
-		this.spawnY = var1;
-	}
-
-	public void setSpawnZ(int var1) {
-		this.spawnZ = var1;
-	}
-
-	public void incrementTotalWorldTime(long var1) {
-		this.totalTime = var1;
-	}
-
-	public void setWorldTime(long var1) {
-		this.worldTime = var1;
-	}
-
-	public void setSpawnPosition(int var1, int var2, int var3) {
-		this.spawnX = var1;
-		this.spawnY = var2;
-		this.spawnZ = var3;
-	}
-
+	/**
+	 * Set the x spawn position to the passed in value
+	 */
+	public void setSpawnX(int par1) {
+		this.spawnX = par1;
+	}
+
+	/**
+	 * Sets the y spawn position
+	 */
+	public void setSpawnY(int par1) {
+		this.spawnY = par1;
+	}
+
+	/**
+	 * Set the z spawn position to the passed in value
+	 */
+	public void setSpawnZ(int par1) {
+		this.spawnZ = par1;
+	}
+
+	public void incrementTotalWorldTime(long par1) {
+		this.totalTime = par1;
+	}
+
+	/**
+	 * Set current world time
+	 */
+	public void setWorldTime(long par1) {
+		this.worldTime = par1;
+	}
+
+	/**
+	 * Sets the spawn zone position. Args: x, y, z
+	 */
+	public void setSpawnPosition(int par1, int par2, int par3) {
+		this.spawnX = par1;
+		this.spawnY = par2;
+		this.spawnZ = par3;
+	}
+
+	/**
+	 * Get current world name
+	 */
 	public String getWorldName() {
-		return this.m;
-	}
-
-	public void setWorldName(String var1) {
-		this.m = var1;
-	}
-
+		return this.levelName;
+	}
+
+	public void setWorldName(String par1Str) {
+		this.levelName = par1Str;
+	}
+
+	/**
+	 * Returns the save version of this world
+	 */
 	public int getSaveVersion() {
 		return this.saveVersion;
 	}
 
-	public void setSaveVersion(int var1) {
-		this.saveVersion = var1;
+	/**
+	 * Sets the save version of the world
+	 */
+	public void setSaveVersion(int par1) {
+		this.saveVersion = par1;
 	}
 
+	/**
+	 * Return the last time the player was in this world.
+	 */
 	public long getLastTimePlayed() {
 		return this.lastTimePlayed;
 	}
 
+	/**
+	 * Returns true if it is thundering, false otherwise.
+	 */
 	public boolean isThundering() {
 		return this.thundering;
 	}
 
-	public void setThundering(boolean var1) {
-		this.thundering = var1;
+	/**
+	 * Sets whether it is thundering or not.
+	 */
+	public void setThundering(boolean par1) {
+		this.thundering = par1;
 	}
 
+	/**
+	 * Returns the number of ticks until next thunderbolt.
+	 */
 	public int getThunderTime() {
 		return this.thunderTime;
 	}
 
-	public void setThunderTime(int var1) {
-		this.thunderTime = var1;
+	/**
+	 * Defines the number of ticks until next thunderbolt.
+	 */
+	public void setThunderTime(int par1) {
+		this.thunderTime = par1;
 	}
 
+	/**
+	 * Returns true if it is raining, false otherwise.
+	 */
 	public boolean isRaining() {
 		return this.raining;
 	}
 
-	public void setRaining(boolean var1) {
-		this.raining = var1;
+	/**
+	 * Sets whether it is raining or not.
+	 */
+	public void setRaining(boolean par1) {
+		this.raining = par1;
 	}
 
+	/**
+	 * Return the number of ticks until rain.
+	 */
 	public int getRainTime() {
 		return this.rainTime;
 	}
 
-	public void setRainTime(int var1) {
-		this.rainTime = var1;
+	/**
+	 * Sets the number of ticks until rain.
+	 */
+	public void setRainTime(int par1) {
+		this.rainTime = par1;
 	}
 
+	/**
+	 * Gets the GameType.
+	 */
 	public EnumGameType getGameType() {
 		return this.theGameType;
 	}
 
+	/**
+	 * Get whether the map features (e.g. strongholds) generation is enabled or disabled.
+	 */
 	public boolean isMapFeaturesEnabled() {
 		return this.mapFeaturesEnabled;
 	}
 
-	public void setGameType(EnumGameType var1) {
-		this.theGameType = var1;
+	/**
+	 * Sets the GameType.
+	 */
+	public void setGameType(EnumGameType par1EnumGameType) {
+		this.theGameType = par1EnumGameType;
 	}
 
+	/**
+	 * Returns true if hardcore mode is enabled, otherwise false
+	 */
 	public boolean isHardcoreModeEnabled() {
 		return this.hardcore;
 	}
@@ -316,107 +460,134 @@
 		return this.terrainType;
 	}
 
-	public void setTerrainType(WorldType var1) {
-		this.terrainType = var1;
+	public void setTerrainType(WorldType par1WorldType) {
+		this.terrainType = par1WorldType;
 	}
 
 	public String getGeneratorOptions() {
-		return this.c;
+		return this.generatorOptions;
 	}
 
+	/**
+	 * Returns true if commands are allowed on this World.
+	 */
 	public boolean areCommandsAllowed() {
 		return this.allowCommands;
 	}
 
+	/**
+	 * Returns true if the World is initialized.
+	 */
 	public boolean isInitialized() {
 		return this.initialized;
 	}
 
-	public void setServerInitialized(boolean var1) {
-		this.initialized = var1;
+	/**
+	 * Sets the initialization status of the World.
+	 */
+	public void setServerInitialized(boolean par1) {
+		this.initialized = par1;
 	}
 
+	/**
+	 * Gets the GameRules class Instance.
+	 */
 	public GameRules getGameRulesInstance() {
 		return this.theGameRules;
 	}
 
-	public void addToCrashReport(CrashReportCategory var1) {
-		var1.addCrashSectionCallable("Level seed", new CallableLevelSeed(this));
-		var1.addCrashSectionCallable("Level generator", new CallableLevelGenerator(this));
-		var1.addCrashSectionCallable("Level generator options", new CallableLevelGeneratorOptions(this));
-		var1.addCrashSectionCallable("Level spawn location", new CallableLevelSpawnLocation(this));
-		var1.addCrashSectionCallable("Level time", new CallableLevelTime(this));
-		var1.addCrashSectionCallable("Level dimension", new CallableLevelDimension(this));
-		var1.addCrashSectionCallable("Level storage version", new CallableLevelStorageVersion(this));
-		var1.addCrashSectionCallable("Level weather", new CallableLevelWeather(this));
-		var1.addCrashSectionCallable("Level game mode", new CallableLevelGamemode(this));
-	}
-
-	static WorldType getTerrainTypeOfWorld(WorldInfo var0) {
-		return var0.terrainType;
-	}
-
-	static boolean getMapFeaturesEnabled(WorldInfo var0) {
-		return var0.mapFeaturesEnabled;
-	}
-
-	static String getWorldGeneratorOptions(WorldInfo var0) {
-		return var0.c;
-	}
-
-	static int getSpawnXCoordinate(WorldInfo var0) {
-		return var0.spawnX;
-	}
-
-	static int getSpawnYCoordinate(WorldInfo var0) {
-		return var0.spawnY;
-	}
-
-	static int getSpawnZCoordinate(WorldInfo var0) {
-		return var0.spawnZ;
-	}
-
-	static long func_85126_g(WorldInfo var0) {
-		return var0.totalTime;
-	}
-
-	static long getWorldTime(WorldInfo var0) {
-		return var0.worldTime;
-	}
-
-	static int func_85122_i(WorldInfo var0) {
-		return var0.dimension;
-	}
-
-	static int getSaveVersion(WorldInfo var0) {
-		return var0.saveVersion;
-	}
-
-	static int getRainTime(WorldInfo var0) {
-		return var0.rainTime;
-	}
-
-	static boolean getRaining(WorldInfo var0) {
-		return var0.raining;
-	}
-
-	static int getThunderTime(WorldInfo var0) {
-		return var0.thunderTime;
-	}
-
-	static boolean getThundering(WorldInfo var0) {
-		return var0.thundering;
-	}
-
-	static EnumGameType getGameType(WorldInfo var0) {
-		return var0.theGameType;
-	}
-
-	static boolean func_85117_p(WorldInfo var0) {
-		return var0.hardcore;
-	}
-
-	static boolean func_85131_q(WorldInfo var0) {
-		return var0.allowCommands;
+	/**
+	 * Adds this WorldInfo instance to the crash report.
+	 */
+	public void addToCrashReport(CrashReportCategory par1CrashReportCategory) {
+		par1CrashReportCategory.addCrashSectionCallable("Level seed", new CallableLevelSeed(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level generator", new CallableLevelGenerator(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level generator options", new CallableLevelGeneratorOptions(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level spawn location", new CallableLevelSpawnLocation(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level time", new CallableLevelTime(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level dimension", new CallableLevelDimension(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level storage version", new CallableLevelStorageVersion(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level weather", new CallableLevelWeather(this));
+		par1CrashReportCategory.addCrashSectionCallable("Level game mode", new CallableLevelGamemode(this));
+	}
+
+	/**
+	 * Return the terrain type of a world
+	 */
+	static WorldType getTerrainTypeOfWorld(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.terrainType;
+	}
+
+	/**
+	 * Return the map feautures enabled of a world
+	 */
+	static boolean getMapFeaturesEnabled(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.mapFeaturesEnabled;
+	}
+
+	static String getWorldGeneratorOptions(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.generatorOptions;
+	}
+
+	static int getSpawnXCoordinate(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.spawnX;
+	}
+
+	static int getSpawnYCoordinate(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.spawnY;
+	}
+
+	static int getSpawnZCoordinate(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.spawnZ;
+	}
+
+	static long func_85126_g(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.totalTime;
+	}
+
+	static long getWorldTime(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.worldTime;
+	}
+
+	static int func_85122_i(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.dimension;
+	}
+
+	static int getSaveVersion(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.saveVersion;
+	}
+
+	static int getRainTime(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.rainTime;
+	}
+
+	/**
+	 * Returns wether it's raining or not.
+	 */
+	static boolean getRaining(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.raining;
+	}
+
+	static int getThunderTime(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.thunderTime;
+	}
+
+	/**
+	 * Returns wether it's thundering or not.
+	 */
+	static boolean getThundering(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.thundering;
+	}
+
+	static EnumGameType getGameType(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.theGameType;
+	}
+
+	static boolean func_85117_p(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.hardcore;
+	}
+
+	static boolean func_85131_q(WorldInfo par0WorldInfo) {
+		return par0WorldInfo.allowCommands;
 	}
 }
